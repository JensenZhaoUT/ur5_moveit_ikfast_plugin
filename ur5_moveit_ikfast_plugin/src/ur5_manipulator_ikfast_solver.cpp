/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2023-12-14 05:57:59.318856
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[0]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKsin(j[3]);
x9=IKcos(j[3]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.0823)*x9);
x13=((1.0)*x8);
x14=((1.0)*x6);
x15=((0.09465)*x2);
x16=((0.0823)*x8);
x17=((1.0)*x5);
x18=((1.0)*x7);
x19=((0.425)*x4);
x20=((1.0)*x0);
x21=((1.0)*x9);
x22=((1.0)*x2);
x23=((0.09465)*x5);
x24=((0.09465)*x0);
x25=((-1.0)*x8);
x26=(x2*x4);
x27=(x0*x1);
x28=((-1.0)*x9);
x29=(x3*x4);
x30=(x0*x7);
x31=(x1*x3);
x32=(x14*x5);
x33=((0.09465)*x31);
x34=((1.0)*x31);
x35=(x1*x2*x5);
x36=(x20*x26);
x37=(x17*x26);
x38=((((-1.0)*x34))+x26);
x39=(((x1*x22))+(((1.0)*x29)));
x40=((-1.0)*x39);
x41=(x38*x8);
x42=((((-1.0)*x36))+((x27*x3)));
x43=((((-1.0)*x37))+((x31*x5)));
x44=(x40*x9);
IkReal x55=((1.0)*x20);
x45=((((-1.0)*x1*x2*x55))+(((-1.0)*x29*x55)));
IkReal x56=((1.0)*x17);
x46=((((-1.0)*x1*x2*x56))+(((-1.0)*x29*x56)));
x47=(x42*x9);
x48=(x43*x9);
x49=((((-1.0)*x21*x40))+(((-1.0)*x13*x38)));
x50=(x47+((x45*x8)));
x51=(((x46*x8))+x48);
x52=(x50*x7);
x53=(((x25*(((((-1.0)*x20*x31))+x36))))+((x28*x45)));
x54=(((x25*(((((-1.0)*x17*x31))+x37))))+((x28*x46)));
eerot[0]=(((x6*(((((-1.0)*x21*x42))+(((-1.0)*x13*x45))))))+(((-1.0)*x17*x7)));
eerot[1]=(((x11*(((((-1.0)*x18*x50))+x32))))+((x10*x53)));
eerot[2]=(((x11*x53))+((x10*(((((-1.0)*x32))+x52)))));
eetrans[0]=((((0.39225)*x2*x27))+((x6*(((((-1.0)*x12*x42))+(((-1.0)*x16*x45))))))+((x9*((((x24*x29))+((x15*x27))))))+((x0*x19))+(((-0.0823)*x5*x7))+(((-0.10915)*x5))+(((0.39225)*x0*x29))+((x8*(((((-1.0)*x0*x15*x4))+((x24*x31)))))));
eerot[3]=(x30+((x6*(((((-1.0)*x21*x43))+(((-1.0)*x13*x46)))))));
eerot[4]=(((x11*(((((-1.0)*x18*x51))+(((-1.0)*x0*x14))))))+((x10*x54)));
eerot[5]=(((x11*x54))+((x10*((((x0*x6))+((x51*x7)))))));
IkReal x57=(x15*x5);
eetrans[1]=(((x6*(((((-1.0)*x12*x43))+(((-1.0)*x16*x46))))))+(((0.39225)*x29*x5))+(((0.10915)*x0))+((x19*x5))+((x8*((((x23*x31))+(((-1.0)*x4*x57))))))+(((0.39225)*x35))+(((0.0823)*x30))+((x9*((((x23*x29))+((x1*x57)))))));
eerot[6]=(x49*x6);
eerot[7]=(((x10*((((x28*x38))+((x25*x39))))))+((x11*x49*x7)));
eerot[8]=(((x10*x7*((x44+x41))))+((x11*(((((-1.0)*x21*x38))+(((-1.0)*x13*x39)))))));
IkReal x58=((1.0)*x15);
eetrans[2]=((0.08916)+(((0.425)*x1))+(((0.39225)*x31))+((x8*(((((-0.09465)*x29))+(((-1.0)*x1*x58))))))+((x6*(((((-1.0)*x12*x40))+(((-1.0)*x16*x38))))))+((x9*(((((-1.0)*x4*x58))+x33))))+(((-0.39225)*x26)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=((-1.0)*r02);
new_r02=r00;
new_px=(px+(((-0.0823)*r00)));
new_r10=((-1.0)*r11);
new_r11=((-1.0)*r12);
new_r12=r10;
new_py=((((-0.0823)*r10))+py);
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r22);
new_r22=r20;
new_pz=((-0.08916)+pz+(((-0.0823)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x59=((1.0)*px);
IkReal x60=((1.0)*pz);
IkReal x61=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x61))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x60)));
rxp0_2=((((-1.0)*r10*x59))+((py*r00)));
rxp1_0=((((-1.0)*r21*x61))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x60)));
rxp1_2=((((-1.0)*r11*x59))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x61)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x60)));
rxp2_2=((((-1.0)*r12*x59))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x62=((0.1893)*npx);
IkReal x63=((0.1893)*npy);
IkReal x64=((0.09465)*r22);
IkReal x65=((0.09465)*r20);
IkReal x66=((0.09465)*r21);
IkReal x67=((-0.09465)*r20);
IkReal x68=((-0.09465)*r21);
IkReal x69=((-1.0)*r22);
IkReal x70=((-1.0)*rxp2_2);
IkReal x71=((-1.0)*rxp1_2);
IkReal x72=((-1.0)*r20);
IkReal x73=((-1.0)*npx);
IkReal x74=((-1.0)*npz);
IkReal x75=((-1.0)*r21);
matrixinvcoeffs[0]=x67;
matrixinvcoeffs[1]=x62;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=r20;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x73;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x67;
matrixinvcoeffs[19]=x62;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x72;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=((-1.0)*rxp0_2);
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x68;
matrixinvcoeffs[33]=x63;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=r21;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=((-1.0)*npy);
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x68;
matrixinvcoeffs[51]=x63;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=x75;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x71;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=x69;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x64;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=x70;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x69;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=npz;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x64;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x70;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x71;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x68;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x71;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x68;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x72;
matrixinvcoeffs[133]=x73;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x65;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x72;
matrixinvcoeffs[151]=x73;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x65;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x69;
matrixinvcoeffs[165]=x74;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x64;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x69;
matrixinvcoeffs[183]=x74;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x64;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=x75;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x66;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x71;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=x75;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=npy;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x66;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x71;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x73;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=r20;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x67;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=r20;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x73;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x67;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x76=pz*pz;
IkReal x77=((2.0)*pz);
IkReal x78=(gclwh9_9*npx);
IkReal x79=(pp*r21);
IkReal x80=(pp*r22);
IkReal x81=(gclwh6_10*npy);
IkReal x82=((0.000977833645875)*r20);
IkReal x83=((0.000977833645875)*r21);
IkReal x84=((0.00076243651125)*rxp1_2);
IkReal x85=(npz*pz);
IkReal x86=(gclwh12_8*rxp1_2);
IkReal x87=(gclwh14_10*rxp0_2);
IkReal x88=((0.2970117)*rxp1_2);
IkReal x89=(gclwh14_3*rxp0_2);
IkReal x90=(gclwh7_9*r21);
IkReal x91=(npx*pz);
IkReal x92=((4.0)*gclwh11_9);
IkReal x93=((0.7572)*rxp2_2);
IkReal x94=(npy*pz);
IkReal x95=((4.0)*gclwh4_10);
IkReal x96=((4.0)*gclwh7_9);
IkReal x97=((0.020662095)*rxp1_2);
IkReal x98=(gclwh6_12*rxp1_2);
IkReal x99=((0.14850585)*rxp0_2);
IkReal x100=(gclwh8_10*r20);
IkReal x101=((4.0)*pp);
IkReal x102=(gclwh14_14*rxp0_2);
IkReal x103=(gclwh4_14*r22);
IkReal x104=((0.007614829125)*r20);
IkReal x105=((0.03583449)*r22);
IkReal x106=(gclwh15_11*rxp0_2);
IkReal x107=(pp*r20);
IkReal x108=(gclwh5_15*rxp2_2);
IkReal x109=(gclwh9_0*r20);
IkReal x110=((0.0140560787025)*r20);
IkReal x111=(gclwh7_0*r21);
IkReal x112=(gclwh13_11*rxp1_2);
IkReal x113=((4.0)*pz);
IkReal x114=((0.000977833645875)*r22);
IkReal x115=(gclwh9_9*r20);
IkReal x116=(gclwh14_14*r20);
IkReal x117=(gclwh4_3*rxp2_2);
IkReal x118=((0.2183)*gclwh13_15);
IkReal x119=(gclwh15_15*rxp0_2);
IkReal x120=((1.0)*pz);
IkReal x121=((0.2183)*gclwh12_14);
IkReal x122=((0.2183)*gclwh14_14);
IkReal x123=(gclwh6_10*r21);
IkReal x124=((0.3786)*rxp1_2);
IkReal x125=((0.7572)*rxp1_2);
IkReal x126=((0.1893)*pp);
IkReal x127=(gclwh12_2*rxp1_2);
IkReal x128=((0.1893)*pz);
IkReal x129=((0.020662095)*rxp0_2);
IkReal x130=((0.00702803935125)*r20);
IkReal x131=(gclwh5_9*rxp2_2);
IkReal x132=((0.0140560787025)*r21);
IkReal x133=(gclwh14_10*r20);
IkReal x134=((0.00195566729175)*r21);
IkReal x135=((0.00702803935125)*r22);
IkReal x136=(gclwh5_1*rxp2_2);
IkReal x137=((0.017917245)*r22);
IkReal x138=(gclwh10_2*r22);
IkReal x139=(gclwh13_0*rxp1_2);
IkReal x140=(gclwh5_0*rxp2_2);
IkReal x141=(gclwh4_14*rxp2_2);
IkReal x142=(gclwh10_12*rxp2_2);
IkReal x143=(gclwh14_8*rxp0_2);
IkReal x144=(gclwh6_2*r21);
IkReal x145=(gclwh15_1*rxp0_2);
IkReal x146=((0.7572)*rxp0_2);
IkReal x147=((4.0)*gclwh10_10);
IkReal x148=((0.3786)*rxp2_2);
IkReal x149=((0.4366)*gclwh12_14);
IkReal x150=((0.0089586225)*r22);
IkReal x151=((0.2970117)*rxp0_2);
IkReal x152=((0.017917245)*r21);
IkReal x153=(gclwh12_14*rxp1_2);
IkReal x154=((0.4366)*gclwh4_14);
IkReal x155=(gclwh5_11*rxp2_2);
IkReal x156=((0.00702803935125)*r21);
IkReal x157=(gclwh11_13*r22);
IkReal x158=((0.007614829125)*r21);
IkReal x159=((0.01464286847625)*r20);
IkReal x160=(gclwh8_2*r20);
IkReal x161=((0.3786)*rxp0_2);
IkReal x162=(gclwh6_12*r21);
IkReal x163=((8.0)*pz);
IkReal x164=((0.2183)*gclwh5_15);
IkReal x165=(gclwh15_0*rxp0_2);
IkReal x166=((0.4366)*gclwh14_14);
IkReal x167=((4.0)*gclwh12_10);
IkReal x168=(gclwh4_2*rxp2_2);
IkReal x169=((0.020662095)*rxp2_2);
IkReal x170=((0.0089586225)*pz);
IkReal x171=(gclwh10_12*r22);
IkReal x172=(gclwh14_2*rxp0_2);
IkReal x173=(gclwh4_8*rxp2_2);
IkReal x174=(gclwh11_0*pz);
IkReal x175=((0.2183)*gclwh15_15);
IkReal x176=((0.2183)*gclwh4_14);
IkReal x177=(gclwh12_3*rxp1_2);
IkReal x178=((0.0140560787025)*r22);
IkReal x179=(gclwh7_13*r21);
IkReal x180=((0.1893)*rxp1_2);
IkReal x181=(gclwh13_1*rxp1_2);
IkReal x182=((0.007614829125)*r22);
IkReal x183=(gclwh13_15*rxp1_2);
IkReal x184=(gclwh11_0*r22);
IkReal x185=((0.00058678977375)*r20);
IkReal x186=(gclwh12_14*x97);
IkReal x187=(gclwh6_5*x83);
IkReal x188=((0.020662095)*x141);
IkReal x189=(gclwh8_5*x82);
IkReal x190=((0.020662095)*x102);
IkReal x191=(gclwh10_5*x114);
IkReal x192=((0.1893)*x87);
IkReal x193=((0.0089586225)*x100);
IkReal x194=(gclwh10_10*x150);
IkReal x195=(gclwh12_10*x180);
IkReal x196=((0.1893)*gclwh4_10*rxp2_2);
IkReal x197=((0.0089586225)*x123);
IkReal x198=((0.1893)*gclwh15_9*rxp0_2);
IkReal x199=((0.0089586225)*x115);
IkReal x200=(gclwh11_9*x150);
IkReal x201=((0.0089586225)*x90);
IkReal x202=((0.1893)*x131);
IkReal x203=(gclwh13_9*x180);
IkReal x204=((0.020662095)*x119);
IkReal x205=(gclwh7_7*x83);
IkReal x206=(gclwh9_7*x82);
IkReal x207=(gclwh13_15*x97);
IkReal x208=((0.020662095)*x108);
IkReal x209=(gclwh11_7*x114);
IkReal x210=((0.000977833645875)*x103);
IkReal x211=(gclwh10_5*x169);
IkReal x212=(gclwh12_14*x83);
IkReal x213=(gclwh8_5*x129);
IkReal x214=(gclwh6_5*x97);
IkReal x215=(gclwh14_14*x82);
IkReal x216=(gclwh15_15*x82);
IkReal x217=(gclwh9_7*x129);
IkReal x218=(gclwh11_7*x169);
IkReal x219=(gclwh5_15*x114);
IkReal x220=(gclwh7_7*x97);
IkReal x221=(gclwh13_15*x83);
IkReal x222=(gclwh12_10*x124);
IkReal x223=((0.017917245)*x123);
IkReal x224=(gclwh4_10*x148);
IkReal x225=(gclwh10_10*x137);
IkReal x226=((0.3786)*x87);
IkReal x227=((0.017917245)*x100);
IkReal x228=((0.04132419)*x102);
IkReal x229=((0.017917245)*x115);
IkReal x230=(gclwh11_9*x137);
IkReal x231=(gclwh15_9*x161);
IkReal x232=((0.3786)*x131);
IkReal x233=((0.017917245)*x90);
IkReal x234=(gclwh13_9*x124);
IkReal x235=((0.04132419)*x119);
IkReal x236=(gclwh8_10*x161);
IkReal x237=(gclwh12_10*x152);
IkReal x238=(gclwh10_10*x148);
IkReal x239=(gclwh4_10*x137);
IkReal x240=(gclwh6_10*x124);
IkReal x241=((0.017917245)*x133);
IkReal x242=((0.85)*x107);
IkReal x243=((2.0)*x76);
IkReal x244=((0.2183)*gclwh10_5*x85);
IkReal x245=((0.2183)*gclwh8_5*x91);
IkReal x246=((0.10915)*gclwh6_5*x79);
IkReal x247=((0.2183)*gclwh6_5*x94);
IkReal x248=((0.10915)*gclwh8_5*x107);
IkReal x249=((0.10915)*gclwh10_5*x80);
IkReal x250=(x77*x81);
IkReal x251=(x126*x177);
IkReal x252=(x160*x170);
IkReal x253=(gclwh10_2*pz*x80);
IkReal x254=(x128*x172);
IkReal x255=(gclwh8_2*pz*x107);
IkReal x256=(x117*x126);
IkReal x257=(x138*x170);
IkReal x258=(x127*x128);
IkReal x259=(gclwh8_10*npx*x77);
IkReal x260=(gclwh10_10*npz*x77);
IkReal x261=(x128*x168);
IkReal x262=(x126*x89);
IkReal x263=(x144*x170);
IkReal x264=(x126*x181);
IkReal x265=(x150*x174);
IkReal x266=(x109*x170);
IkReal x267=(x126*x136);
IkReal x268=(x128*x165);
IkReal x269=(x174*x80);
IkReal x270=(gclwh7_9*npy*x77);
IkReal x271=(gclwh9_0*pz*x107);
IkReal x272=(x126*x145);
IkReal x273=(x77*x78);
IkReal x274=(x111*x170);
IkReal x275=(x128*x139);
IkReal x276=(x128*x140);
IkReal x277=(gclwh11_9*npz*x77);
IkReal x278=((0.10915)*gclwh7_7*x79);
IkReal x279=((0.2183)*gclwh9_7*x91);
IkReal x280=((0.2183)*gclwh11_7*x85);
IkReal x281=((0.10915)*gclwh9_7*x107);
IkReal x282=((0.2183)*gclwh7_7*x94);
IkReal x283=((0.10915)*gclwh11_7*x80);
IkReal x284=((0.10915)*gclwh12_14*x79);
IkReal x285=(x122*x91);
IkReal x286=((0.10915)*gclwh4_14*x80);
IkReal x287=((0.10915)*gclwh14_14*x107);
IkReal x288=(x176*x85);
IkReal x289=(x121*x94);
IkReal x290=((0.10915)*gclwh15_15*x107);
IkReal x291=(x164*x85);
IkReal x292=(x118*x94);
IkReal x293=((0.10915)*gclwh13_15*x79);
IkReal x294=((0.10915)*gclwh5_15*x80);
IkReal x295=(x175*x91);
IkReal x296=((2.0)*gclwh6_10*x79);
IkReal x297=(x147*x85);
IkReal x298=((4.0)*gclwh8_10*x91);
IkReal x299=(x113*x81);
IkReal x300=((2.0)*pp*x100);
IkReal x301=((2.0)*gclwh10_10*x80);
IkReal x302=(x94*x96);
IkReal x303=((2.0)*gclwh11_9*x80);
IkReal x304=((2.0)*gclwh9_9*x107);
IkReal x305=((2.0)*gclwh7_9*x79);
IkReal x306=(x85*x92);
IkReal x307=(x113*x78);
IkReal x308=((2.0)*gclwh12_10*x79);
IkReal x309=((4.0)*gclwh14_10*x91);
IkReal x310=((2.0)*gclwh4_10*x80);
IkReal x311=((2.0)*gclwh14_10*x107);
IkReal x312=(x167*x94);
IkReal x313=(x85*x95);
IkReal x314=(gclwh6_2*npy*x243);
IkReal x315=(gclwh6_2*x120*x79);
IkReal x316=(gclwh10_2*npz*x243);
IkReal x317=(gclwh8_2*npx*x243);
IkReal x318=(gclwh7_0*npy*x243);
IkReal x319=(gclwh9_0*npx*x243);
IkReal x320=(gclwh11_0*npz*x243);
IkReal x321=(gclwh7_0*x120*x79);
IkReal x322=((((0.04132419)*x141))+(((0.04132419)*x153)));
IkReal x323=((((0.04132419)*x183))+(((0.04132419)*x108)));
IkReal x324=(x211+x213);
IkReal x325=(x217+x218);
IkReal x326=(x186+x188);
IkReal x327=(x207+x208);
IkReal x328=(x322+(((-1.0)*x228)));
IkReal x329=(x323+(((-1.0)*x235)));
IkReal x330=(x193+x192+x194+x250);
IkReal x331=(x199+x198+x200+x270);
IkReal x332=(x215+x289+x288+x287);
IkReal x333=(x216+x290+x291+x292);
IkReal x334=(x187+x246+x245+x244);
IkReal x335=(x205+x278+x279+x280);
IkReal x336=(x197+x196+x195+x259+x260);
IkReal x337=(x203+x202+x201+x277+x273);
IkReal x338=(x311+x313+x312+x241+x240);
IkReal x339=(x210+x212+x286+x285+x284);
IkReal x340=(x219+x221+x293+x294+x295);
IkReal x341=(x206+x209+x283+x282+x281);
IkReal x342=(x191+x189+x247+x249+x248);
IkReal x343=(x223+x222+x224+x298+x296+x297);
IkReal x344=(x304+x302+x303+x229+x230+x231);
IkReal x345=(x306+x307+x305+x232+x233+x234);
IkReal x346=(x300+x301+x225+x227+x226+x299);
IkReal x347=(x308+x309+x310+x238+x239+x236+x237);
IkReal x348=(x315+x317+x316+x258+x261+x263+x262);
IkReal x349=(x320+x321+x319+x276+x274+x275+x272);
IkReal x350=((((-1.0)*x154*x85))+(((-0.00195566729175)*x116))+((x176*x80))+(((-1.0)*x107*x122))+(((0.00195566729175)*x103))+((x166*x91))+((x121*x79))+(((-1.0)*x149*x94))+((gclwh12_14*x134)));
IkReal x351=(x318+x265+x264+x267+x266+x269+x268+x271);
IkReal x352=(x314+x254+x255+x256+x257+x251+x252+x253);
op[0]=((0.178405675)+(((-1.0)*x326))+x190+x334+(((-1.0)*x342)));
op[1]=((((1.6345)*gclwh10_2*x85))+(((0.81725)*gclwh6_2*x79))+(((-0.154705425)*x172))+(((-0.13678818)*x173))+(((0.154705425)*x168))+(((-0.81725)*gclwh10_2*x80))+(((0.12699240901125)*x89))+(((-1.0)*gclwh10_10*x80))+(((1.6345)*gclwh8_2*x91))+(((0.007321434238125)*x144))+x336+x352+(((-0.81725)*gclwh8_2*x107))+((gclwh6_10*x79))+(((0.154705425)*x127))+(((-0.007321434238125)*x138))+(((-0.12699240901125)*x117))+(((-1.0)*x330))+(((-1.6345)*gclwh6_2*x94))+(((0.13678818)*x143))+(((-0.007321434238125)*x160))+(((-1.0)*x348))+(((-0.12699240901125)*x177))+(((-1.0)*pp*x100))+(((-0.13678818)*x86)));
op[2]=((((-0.160905)*x86))+(((1.569)*gclwh10_12*x85))+(((0.160905)*x143))+(((-1.0)*gclwh10_12*x135))+((gclwh6_12*x156))+(((-0.160905)*x173))+(((-1.0)*gclwh8_12*x130))+x343+(((-0.7845)*gclwh10_12*x80))+(((-0.7845)*gclwh8_12*x107))+(((-1.569)*gclwh6_12*x94))+(((0.7845)*gclwh6_12*x79))+(((1.569)*gclwh8_12*x91))+(((-1.0)*x346)));
op[3]=x328;
op[4]=((0.007149325)+(((-1.0)*x190))+x334+x326+(((-1.0)*x342)));
op[5]=((((-1.0)*gclwh6_10*x79))+(((-0.006199575)*x172))+(((0.0655)*gclwh10_2*x85))+(((0.000293394886875)*x144))+(((0.02411682)*x173))+(((-0.02411682)*x143))+(((0.02411682)*x86))+(((0.00076243651125)*x89))+(((0.03275)*gclwh6_2*x79))+(((-0.000293394886875)*x138))+(((0.006199575)*x168))+x330+x352+(((-0.00076243651125)*x117))+(((-0.000293394886875)*x160))+(((0.0655)*gclwh8_2*x91))+(((-0.03275)*gclwh10_2*x80))+(((-1.0)*gclwh12_3*x84))+(((-0.0655)*gclwh6_2*x94))+(((0.006199575)*x127))+((pp*x100))+(((-0.03275)*gclwh8_2*x107))+(((-1.0)*x336))+((gclwh10_10*x80))+(((-1.0)*x348)));
op[6]=((((0.12699240901125)*x145))+((gclwh7_9*x79))+(((-0.17262267)*x155))+(((-1.6345)*gclwh7_0*x94))+(((-0.81725)*gclwh11_0*x80))+(((-1.0)*gclwh9_9*x107))+(((-0.81725)*gclwh9_0*x107))+(((-0.154705425)*x165))+(((0.154705425)*x140))+(((-0.17262267)*x112))+x337+x351+(((0.154705425)*x139))+(((-0.12699240901125)*x136))+(((0.81725)*gclwh7_0*x79))+(((-0.12699240901125)*x181))+(((-0.007321434238125)*x109))+(((-1.0)*x331))+(((-1.0)*gclwh11_9*x80))+(((1.6345)*gclwh9_0*x91))+(((0.007321434238125)*x111))+(((-1.0)*x349))+(((0.17262267)*x106))+(((-0.007321434238125)*x184))+(((1.6345)*gclwh11_0*x85)));
op[7]=((0.178405675)+(((-1.0)*x204))+x335+x327+(((-1.0)*x341)));
op[8]=x329;
op[9]=((((-1.0)*gclwh11_13*x135))+(((-0.160905)*x106))+(((0.160905)*x155))+(((-0.7845)*gclwh11_13*x80))+((gclwh7_13*x156))+(((0.160905)*x112))+x344+(((-0.7845)*gclwh9_13*x107))+(((-1.0)*gclwh9_13*x130))+(((1.569)*gclwh9_13*x91))+(((-1.0)*x345))+(((1.569)*gclwh11_13*x85))+(((-1.569)*gclwh7_13*x94))+(((0.7845)*gclwh7_13*x79)));
op[10]=((((-0.006199575)*x165))+(((-0.0655)*gclwh7_0*x94))+(((0.01171767)*x106))+((gclwh9_9*x107))+(((0.0655)*gclwh11_0*x85))+(((-1.0)*gclwh7_9*x79))+(((-0.01171767)*x112))+(((-0.000293394886875)*x109))+(((-0.000293394886875)*x184))+x331+x351+(((0.0655)*gclwh9_0*x91))+(((0.006199575)*x140))+(((0.000293394886875)*x111))+(((0.00076243651125)*x145))+(((-0.03275)*gclwh11_0*x80))+(((-0.01171767)*x155))+(((-0.00076243651125)*x136))+(((-1.0)*x337))+(((0.006199575)*x139))+((gclwh11_9*x80))+(((-1.0)*x349))+(((0.03275)*gclwh7_0*x79))+(((-1.0)*gclwh13_1*x84))+(((-0.03275)*gclwh9_0*x107)));
op[11]=((0.007149325)+(((-1.0)*x327))+x335+x204+(((-1.0)*x341)));
op[12]=(x332+x324+(((-1.0)*x339))+(((-1.0)*x214)));
op[13]=((-0.65598384)+(((0.81725)*gclwh1_2*pp*r20))+(((1.4452)*gclwh4_8*npz*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((1.341705325)*gclwh4_3*npz*pz))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-0.66189404)*gclwh12_3*pp*r21))+(((1.341705325)*gclwh1_3*npx*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.0064735006185)*gclwh12_8*r21))+(((0.1893)*pz))+((gclwh12_3*r21*(pp*pp)))+(((-1.6345)*gclwh4_2*npz*pz))+(((-0.679811285)*gclwh3_3*pp*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.154705425)*gclwh10_2*rxp2_2))+(((2.0)*gclwh14_10*npx*pz))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.007321434238125)*gclwh3_2*r21))+(((-0.66189404)*gclwh4_3*pp*r22))+(((0.81725)*gclwh3_2*pp*r21))+(((0.00600991575645741)*gclwh1_3*r20))+(((1.4452)*gclwh12_8*npy*pz))+(((-0.81725)*gclwh14_2*pp*r20))+(((-0.0089586225)*gclwh14_10*r20))+(((-1.4452)*gclwh14_8*npx*pz))+(((-1.0)*gclwh14_10*pp*r20))+(((-0.00600991575645741)*gclwh12_3*r21))+(((-0.007321434238125)*gclwh1_2*r20))+(((-0.0064735006185)*gclwh4_8*r22))+(((-2.0)*gclwh12_10*npy*pz))+((gclwh12_10*pp*r21))+(((-0.00600991575645741)*gclwh4_3*r22))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((-0.0089586225)*gclwh12_2*pz*r21))+(((0.0089586225)*gclwh4_10*r22))+(((0.00600991575645741)*gclwh14_3*r20))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-1.6345)*gclwh12_2*npy*pz))+(((-1.6345)*gclwh1_2*npx*pz))+(((1.341705325)*gclwh3_3*npy*pz))+(((0.0064735006185)*gclwh14_8*r20))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+(((-0.7226)*gclwh12_8*pp*r21))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.007321434238125)*gclwh14_2*r20))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.1893)*gclwh8_10*rxp0_2))+(((0.1893)*gclwh10_10*rxp2_2))+(((0.007321434238125)*gclwh4_2*r22))+(((1.6345)*gclwh14_2*npx*pz))+(((-0.154705425)*gclwh6_2*rxp1_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.0089586225)*gclwh12_10*r21))+(((0.0089586225)*gclwh14_2*pz*r20))+(((-0.7226)*gclwh4_8*pp*r22))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-1.6345)*gclwh3_2*npy*pz))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.0089586225)*gclwh1_2*pz*r20))+((gclwh4_10*pp*r22))+(((0.7226)*gclwh14_8*pp*r20))+(((0.66189404)*gclwh14_3*pp*r20))+(((0.81725)*gclwh12_2*pp*r21))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((1.341705325)*gclwh12_3*npy*pz))+(((-0.679811285)*gclwh1_3*pp*r20))+(((0.007321434238125)*gclwh12_2*r21))+(((0.154705425)*gclwh8_2*rxp0_2))+(((-1.341705325)*gclwh14_3*npx*pz))+(((0.00600991575645741)*gclwh3_3*r21))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_10*npz*pz))+(((0.81725)*gclwh4_2*pp*r22))+(((-0.1893)*gclwh6_10*rxp1_2)));
op[14]=((-0.02970243)+(((-1.7)*gclwh14_8*x91))+(((-0.85)*gclwh12_8*x79))+(((-1.0)*gclwh4_8*x182))+(((-0.14850585)*x98))+(((1.7)*gclwh4_8*x85))+((gclwh14_8*x242))+(((1.7)*gclwh12_8*x94))+(((0.14850585)*x142))+x347+((gclwh14_8*x104))+(((-1.0)*gclwh12_8*x158))+(((-0.85)*gclwh4_8*x80))+((gclwh8_12*x99))+(((-1.0)*x338)));
op[15]=x350;
op[16]=(x339+x324+(((-1.0)*x332))+(((-1.0)*x214)));
op[17]=((-0.01084116)+(((2.0)*gclwh12_10*npy*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.03275)*gclwh14_2*pp*r20))+(((0.008055325)*gclwh1_3*npx*pz))+(((0.000293394886875)*gclwh4_2*r22))+(((0.2548)*gclwh14_8*npx*pz))+(((0.0089586225)*gclwh14_10*r20))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.1274)*gclwh14_8*pp*r20))+(((-0.000293394886875)*gclwh1_2*r20))+(((-0.0655)*gclwh12_2*npy*pz))+(((-0.1893)*gclwh8_10*rxp0_2))+(((0.1893)*pz))+(((0.00493096)*gclwh12_3*pp*r21))+(((-0.000293394886875)*gclwh3_2*r21))+(((-0.0011413285065)*gclwh14_8*r20))+((gclwh12_3*r21*(pp*pp)))+(((3.60823078949063e-5)*gclwh1_3*r20))+(((0.006199575)*gclwh8_2*rxp0_2))+(((3.60823078949063e-5)*gclwh3_3*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.1893)*gclwh10_10*rxp2_2))+(((-0.000293394886875)*gclwh14_2*r20))+(((-3.60823078949063e-5)*gclwh12_3*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.0655)*gclwh1_2*npx*pz))+(((-0.00493096)*gclwh14_3*pp*r20))+(((0.008055325)*gclwh3_3*npy*pz))+(((-0.006199575)*gclwh6_2*rxp1_2))+(((-0.012986285)*gclwh1_3*pp*r20))+(((0.00493096)*gclwh4_3*pp*r22))+(((0.1893)*gclwh6_10*rxp1_2))+(((0.03275)*gclwh1_2*pp*r20))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((0.008055325)*gclwh12_3*npy*pz))+(((-0.0089586225)*gclwh12_2*pz*r21))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-3.60823078949063e-5)*gclwh4_3*r22))+(((-0.0089586225)*gclwh12_10*r21))+(((0.03275)*gclwh4_2*pp*r22))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+((gclwh14_10*pp*r20))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.2548)*gclwh4_8*npz*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.008055325)*gclwh4_3*npz*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.1274)*gclwh12_8*pp*r21))+(((-0.0089586225)*gclwh4_10*r22))+(((-0.008055325)*gclwh14_3*npx*pz))+(((0.0655)*gclwh14_2*npx*pz))+(((-1.0)*gclwh12_10*pp*r21))+(((3.60823078949063e-5)*gclwh14_3*r20))+(((0.0089586225)*gclwh14_2*pz*r20))+(((0.1274)*gclwh4_8*pp*r22))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.006199575)*gclwh10_2*rxp2_2))+(((-0.012986285)*gclwh3_3*pp*r21))+(((0.000293394886875)*gclwh12_2*r21))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.03275)*gclwh3_2*pp*r21))+(((-0.0655)*gclwh4_2*npz*pz))+(((0.0089586225)*gclwh1_2*pz*r20))+(((-0.2548)*gclwh12_8*npy*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.0011413285065)*gclwh4_8*r22))+(((-0.0655)*gclwh3_2*npy*pz))+(((-2.0)*gclwh14_10*npx*pz))+(((0.0011413285065)*gclwh12_8*r21))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.03275)*gclwh12_2*pp*r21))+(((2.0)*gclwh4_10*npz*pz))+(((-1.0)*gclwh4_10*pp*r22)));
op[18]=((-0.65598384)+(((2.0)*gclwh15_9*npx*pz))+(((2.0)*gclwh2_1*npy*pp*pz))+((gclwh15_0*pp*pz*r20))+(((0.1893)*gclwh7_0*pz*rxp1_2))+((gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-1.341705325)*gclwh2_1*npy*pz))+(((-0.66189404)*gclwh5_1*pp*r22))+(((0.9119)*gclwh15_11*pp*r20))+(((-0.81725)*gclwh15_0*pp*r20))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh15_9*pp*r20))+(((-0.1893)*pz))+(((-0.00816936785775)*gclwh13_11*r21))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((0.679811285)*gclwh2_1*pp*r21))+(((-1.6345)*gclwh13_0*npy*pz))+(((0.1893)*gclwh9_9*rxp0_2))+(((-0.81725)*gclwh2_0*pp*r21))+(((-0.00600991575645741)*gclwh0_1*r20))+(((-0.00600991575645741)*gclwh13_1*r21))+(((-0.154705425)*gclwh7_0*rxp1_2))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((0.00816936785775)*gclwh15_11*r20))+(((-1.6345)*gclwh5_0*npz*pz))+(((0.007321434238125)*gclwh13_0*r21))+(((1.6345)*gclwh2_0*npy*pz))+(((0.0089586225)*gclwh13_9*r21))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((1.341705325)*gclwh13_1*npy*pz))+(((-0.00600991575645741)*gclwh5_1*r22))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-1.341705325)*gclwh0_1*npx*pz))+(((0.66189404)*gclwh15_1*pp*r20))+(((-0.66189404)*gclwh13_1*pp*r21))+(((-1.341705325)*gclwh15_1*npx*pz))+(((0.007321434238125)*gclwh0_0*r20))+(((-1.8238)*gclwh15_11*npx*pz))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((0.007321434238125)*gclwh5_0*r22))+(((0.0089586225)*gclwh5_9*r22))+(((-0.0089586225)*gclwh15_9*r20))+(((1.341705325)*gclwh5_1*npz*pz))+(((0.0089586225)*gclwh15_0*pz*r20))+(((-0.007321434238125)*gclwh15_0*r20))+(((0.007321434238125)*gclwh2_0*r21))+(((-0.0089586225)*gclwh5_0*pz*r22))+(((0.81725)*gclwh13_0*pp*r21))+(((-2.0)*gclwh5_9*npz*pz))+(((-0.81725)*gclwh0_0*pp*r20))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((0.1893)*gclwh11_9*rxp2_2))+(((-0.00816936785775)*gclwh5_11*r22))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.9119)*gclwh5_11*pp*r22))+(((-0.1893)*gclwh9_0*pz*rxp0_2))+(((-0.1893)*gclwh7_9*rxp1_2))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-0.00600991575645741)*gclwh2_1*r21))+(((-2.0)*gclwh13_9*npy*pz))+(((1.6345)*gclwh0_0*npx*pz))+(((0.154705425)*gclwh9_0*rxp0_2))+(((1.8238)*gclwh13_11*npy*pz))+(((0.154705425)*gclwh11_0*rxp2_2))+(((0.679811285)*gclwh0_1*pp*r20))+((gclwh13_9*pp*r21))+((gclwh5_1*r22*(pp*pp)))+(((1.6345)*gclwh15_0*npx*pz))+(((-0.0089586225)*gclwh13_0*pz*r21))+(((1.8238)*gclwh5_11*npz*pz))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((0.81725)*gclwh5_0*pp*r22))+((gclwh5_9*pp*r22))+(((0.00600991575645741)*gclwh15_1*r20))+(((-0.1893)*gclwh11_0*pz*rxp2_2))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-0.9119)*gclwh13_11*pp*r21))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[19]=(x325+x340+(((-1.0)*x333))+(((-1.0)*x220)));
op[20]=((((0.4366)*gclwh15_15*x91))+(((0.00195566729175)*gclwh5_15*r22))+(((-0.4366)*gclwh13_15*x94))+((x118*x79))+(((-0.4366)*gclwh5_15*x85))+((x164*x80))+(((-0.00195566729175)*gclwh15_15*r20))+(((-1.0)*x107*x175))+((gclwh13_15*x134)));
op[21]=((0.02970243)+(((-0.14850585)*gclwh7_13*rxp1_2))+(((-1.0)*gclwh5_9*x137))+(((-1.0)*gclwh11_9*x148))+(((4.0)*gclwh13_9*x94))+(((-1.0)*gclwh13_9*x152))+(((0.85)*gclwh13_11*x79))+(((0.85)*gclwh5_11*x80))+(((-1.0)*gclwh9_9*x161))+(((-4.0)*gclwh15_9*x91))+((gclwh5_11*x182))+(((1.7)*gclwh15_11*x91))+((gclwh13_11*x158))+(((-2.0)*gclwh13_9*x79))+(((-1.7)*gclwh13_11*x94))+(((0.017917245)*gclwh15_9*r20))+(((4.0)*gclwh5_9*x85))+(((-1.7)*gclwh5_11*x85))+(((0.14850585)*gclwh11_13*rxp2_2))+(((-1.0)*gclwh15_11*x104))+(((2.0)*gclwh15_9*x107))+((gclwh7_9*x124))+(((-2.0)*gclwh5_9*x80))+(((-1.0)*gclwh15_11*x242))+((gclwh9_13*x99)));
op[22]=((-0.01084116)+(((-0.000293394886875)*gclwh15_0*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+(((2.0)*gclwh5_9*npz*pz))+((gclwh15_0*pp*pz*r20))+(((0.1893)*gclwh7_0*pz*rxp1_2))+((gclwh13_1*r21*(pp*pp)))+(((-0.008055325)*gclwh0_1*npx*pz))+(((-0.0655)*gclwh5_0*npz*pz))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((0.000293394886875)*gclwh13_0*r21))+(((2.0)*gclwh0_1*npx*pp*pz))+(((0.0089586225)*gclwh15_9*r20))+(((-0.03275)*gclwh2_0*pp*r21))+(((2.0)*gclwh13_9*npy*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((-0.0655)*gclwh13_0*npy*pz))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((0.0655)*gclwh15_0*npx*pz))+(((-0.1893)*pz))+(((-0.006199575)*gclwh7_0*rxp1_2))+((gclwh2_0*pp*pz*r21))+(((-0.0089586225)*gclwh13_9*r21))+((gclwh0_0*pp*pz*r20))+(((-0.03275)*gclwh0_0*pp*r20))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.0619)*gclwh13_11*pp*r21))+(((0.0655)*gclwh0_0*npx*pz))+(((-0.008055325)*gclwh15_1*npx*pz))+(((-0.1893)*gclwh9_9*rxp0_2))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((0.006199575)*gclwh9_0*rxp0_2))+(((0.000293394886875)*gclwh5_0*r22))+(((-0.00055453873275)*gclwh13_11*r21))+(((-0.0089586225)*gclwh5_9*r22))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((3.60823078949063e-5)*gclwh15_1*r20))+((gclwh15_9*pp*r20))+(((-3.60823078949063e-5)*gclwh5_1*r22))+(((-3.60823078949063e-5)*gclwh13_1*r21))+(((-0.03275)*gclwh15_0*pp*r20))+(((0.00493096)*gclwh5_1*pp*r22))+(((0.0655)*gclwh2_0*npy*pz))+(((-0.008055325)*gclwh2_1*npy*pz))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((0.000293394886875)*gclwh2_0*r21))+(((-2.0)*gclwh15_9*npx*pz))+(((-0.00055453873275)*gclwh5_11*r22))+(((0.012986285)*gclwh0_1*pp*r20))+(((0.0089586225)*gclwh15_0*pz*r20))+(((-3.60823078949063e-5)*gclwh2_1*r21))+(((0.000293394886875)*gclwh0_0*r20))+(((0.1238)*gclwh13_11*npy*pz))+(((-0.0089586225)*gclwh5_0*pz*r22))+(((-0.00493096)*gclwh15_1*pp*r20))+(((0.00493096)*gclwh13_1*pp*r21))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((0.00055453873275)*gclwh15_11*r20))+(((0.008055325)*gclwh5_1*npz*pz))+(((0.006199575)*gclwh11_0*rxp2_2))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.1893)*gclwh9_0*pz*rxp0_2))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.0619)*gclwh15_11*pp*r20))+(((-3.60823078949063e-5)*gclwh0_1*r20))+(((-0.1893)*gclwh11_9*rxp2_2))+(((0.03275)*gclwh13_0*pp*r21))+(((0.03275)*gclwh5_0*pp*r22))+(((0.012986285)*gclwh2_1*pp*r21))+(((0.1238)*gclwh5_11*npz*pz))+(((-1.0)*gclwh13_9*pp*r21))+((gclwh5_1*r22*(pp*pp)))+(((-0.0089586225)*gclwh13_0*pz*r21))+(((-1.0)*gclwh5_9*pp*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((0.008055325)*gclwh13_1*npy*pz))+(((-0.0619)*gclwh5_11*pp*r22))+(((-0.1238)*gclwh15_11*npx*pz))+(((-0.1893)*gclwh11_0*pz*rxp2_2))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp)))+(((0.1893)*gclwh7_9*rxp1_2)));
op[23]=(x333+x325+(((-1.0)*x340))+(((-1.0)*x220)));
op[24]=((((3.269)*gclwh10_12*x85))+(((3.269)*gclwh8_12*x91))+(((-1.6345)*gclwh8_12*x107))+(((0.01464286847625)*x162))+x343+(((-1.0)*gclwh8_12*x159))+(((-1.6345)*gclwh10_12*x80))+(((-1.0)*x346))+(((1.6345)*gclwh6_12*x79))+(((-0.01464286847625)*x171))+(((-3.269)*gclwh6_12*x94)));
op[25]=x328;
op[26]=((-0.3425127)+(((-0.08264838)*x102))+(((0.08264838)*x153))+(((0.08264838)*x141)));
op[27]=((((0.0140560787025)*x138))+(((-8.0)*gclwh8_10*x91))+((x163*x81))+(((-1.0)*gclwh12_2*x88))+((gclwh8_2*x110))+((x147*x80))+(((-0.03583449)*x123))+(((3.138)*gclwh6_2*x94))+(((-8.0)*gclwh10_10*x85))+(((-3.138)*gclwh8_2*x91))+((gclwh10_10*x105))+(((0.03583449)*x100))+(((-1.0)*gclwh4_10*x93))+((gclwh14_2*x151))+(((-1.569)*gclwh6_2*x79))+(((-3.138)*gclwh10_2*x85))+(((-0.2970117)*x168))+(((-4.0)*gclwh6_10*x79))+(((1.569)*gclwh8_2*x107))+(((1.569)*gclwh10_2*x80))+(((0.7572)*x87))+(((-1.0)*gclwh6_2*x132))+(((-1.0)*gclwh12_10*x125))+((x100*x101)));
op[28]=((((0.131)*gclwh10_12*x85))+(((0.131)*gclwh8_12*x91))+(((0.00058678977375)*x162))+(((-0.0655)*gclwh10_12*x80))+(((-0.0655)*gclwh8_12*x107))+x346+(((-0.131)*gclwh6_12*x94))+(((-1.0)*gclwh8_12*x185))+(((-1.0)*x343))+(((0.0655)*gclwh6_12*x79))+(((-0.00058678977375)*x171)));
op[29]=((((-1.0)*x322))+x228);
op[30]=x329;
op[31]=((((3.269)*gclwh9_13*x91))+(((-1.0)*gclwh9_13*x159))+(((-1.6345)*gclwh9_13*x107))+(((0.01464286847625)*x179))+(((-1.6345)*gclwh11_13*x80))+x344+(((-3.269)*gclwh7_13*x94))+(((3.269)*gclwh11_13*x85))+(((1.6345)*gclwh7_13*x79))+(((-0.01464286847625)*x157))+(((-1.0)*x345)));
op[32]=(((gclwh11_9*x105))+(((-1.569)*gclwh7_0*x79))+(((-1.0)*x163*x78))+(((8.0)*gclwh7_9*x94))+((gclwh15_9*x146))+(((1.569)*gclwh11_0*x80))+(((0.0140560787025)*x109))+(((0.03583449)*x115))+(((-1.0)*x79*x96))+(((-0.2970117)*x140))+(((3.138)*gclwh7_0*x94))+(((-1.0)*gclwh5_9*x93))+(((-0.03583449)*x90))+((gclwh15_0*x151))+(((-1.0)*gclwh13_9*x125))+(((-0.0140560787025)*x111))+(((-3.138)*gclwh11_0*x85))+(((1.569)*gclwh9_0*x107))+((x80*x92))+((x101*x115))+(((-8.0)*gclwh11_9*x85))+((gclwh11_0*x178))+(((-1.0)*gclwh13_0*x88))+(((-3.138)*gclwh9_0*x91)));
op[33]=((-0.3425127)+(((-0.08264838)*x108))+(((0.08264838)*x119))+(((-0.08264838)*x183)));
op[34]=((((-1.0)*x323))+x235);
op[35]=((((0.00058678977375)*x179))+(((-0.0655)*gclwh11_13*x80))+(((-1.0)*gclwh9_13*x185))+x345+(((-0.131)*gclwh7_13*x94))+(((0.0655)*gclwh7_13*x79))+(((-0.0655)*gclwh9_13*x107))+(((0.131)*gclwh11_13*x85))+(((0.131)*gclwh9_13*x91))+(((-0.00058678977375)*x157))+(((-1.0)*x344)));
op[36]=((1.35962257)+(((0.30941085)*gclwh8_12*rxp0_2))+x347+(((-1.0)*x338))+(((-0.30941085)*x98))+(((0.30941085)*x142)));
op[37]=x350;
op[38]=((((-0.8732)*gclwh12_14*x94))+(((-0.0039113345835)*x116))+(((0.0039113345835)*x103))+(((-0.8732)*gclwh4_14*x85))+((x149*x79))+(((-1.0)*x107*x166))+(((0.8732)*gclwh14_14*x91))+((x154*x80))+(((0.0039113345835)*gclwh12_14*r21)));
op[39]=((-0.15471464)+(((-1.569)*gclwh12_2*x79))+((gclwh6_2*x88))+(((-1.569)*gclwh1_2*x107))+(((-1.0)*gclwh4_10*x105))+((gclwh3_2*x132))+(((3.138)*gclwh3_2*x94))+(((-1.0)*x80*x95))+(((-1.0)*gclwh8_10*x146))+(((-8.0)*gclwh14_10*x91))+(((-0.03583449)*gclwh12_10*r21))+(((-3.138)*gclwh14_2*x91))+(((-1.0)*gclwh12_2*x132))+((gclwh14_2*x110))+((gclwh6_10*x125))+(((-1.0)*gclwh4_2*x178))+(((0.03583449)*x133))+(((-1.0)*gclwh10_10*x93))+(((8.0)*gclwh12_10*x94))+(((3.138)*gclwh12_2*x94))+(((3.138)*gclwh4_2*x85))+(((8.0)*gclwh4_10*x85))+((gclwh1_2*x110))+(((-1.569)*gclwh4_2*x80))+(((1.569)*gclwh14_2*x107))+(((-0.2970117)*gclwh10_2*rxp2_2))+(((3.138)*gclwh1_2*x91))+(((-1.0)*x167*x79))+(((-1.0)*gclwh8_2*x151))+(((-1.569)*gclwh3_2*x79))+((x101*x133)));
IkReal x353=pz*pz;
IkReal x354=(pp*r21);
IkReal x355=(pp*r22);
IkReal x356=((2.0)*pz);
IkReal x357=(gclwh6_10*npy);
IkReal x358=((0.000977833645875)*r20);
IkReal x359=(npx*pz);
IkReal x360=((0.000977833645875)*r21);
IkReal x361=((0.00076243651125)*rxp1_2);
IkReal x362=(npz*pz);
IkReal x363=((0.4366)*gclwh5_15);
IkReal x364=(gclwh12_8*rxp1_2);
IkReal x365=(gclwh14_10*rxp0_2);
IkReal x366=(gclwh14_3*rxp0_2);
IkReal x367=((0.4366)*gclwh15_15);
IkReal x368=((0.020662095)*rxp1_2);
IkReal x369=((0.14850585)*rxp0_2);
IkReal x370=(pp*r20);
IkReal x371=((4.0)*gclwh15_9);
IkReal x372=(gclwh14_14*rxp0_2);
IkReal x373=((0.00195566729175)*r22);
IkReal x374=((0.007614829125)*r20);
IkReal x375=((0.017917245)*r20);
IkReal x376=(gclwh15_11*rxp0_2);
IkReal x377=(gclwh7_9*r21);
IkReal x378=((4.0)*gclwh5_9);
IkReal x379=((0.017917245)*r22);
IkReal x380=(gclwh9_0*r20);
IkReal x381=(gclwh7_0*r21);
IkReal x382=(gclwh13_11*rxp1_2);
IkReal x383=((0.000977833645875)*r22);
IkReal x384=((0.00195566729175)*r20);
IkReal x385=(gclwh4_3*rxp2_2);
IkReal x386=(gclwh6_2*pz);
IkReal x387=((0.0089586225)*pz);
IkReal x388=((0.2183)*gclwh14_14);
IkReal x389=(gclwh6_10*r21);
IkReal x390=((0.3786)*rxp1_2);
IkReal x391=((0.1893)*pz);
IkReal x392=(gclwh5_0*rxp2_2);
IkReal x393=((0.1893)*pp);
IkReal x394=(gclwh12_2*rxp1_2);
IkReal x395=(gclwh10_2*r22);
IkReal x396=((0.0655)*npy);
IkReal x397=((0.020662095)*rxp0_2);
IkReal x398=((0.00702803935125)*r20);
IkReal x399=(gclwh5_9*rxp2_2);
IkReal x400=(gclwh13_15*r21);
IkReal x401=((0.00702803935125)*r22);
IkReal x402=(gclwh13_0*rxp1_2);
IkReal x403=(gclwh5_1*rxp2_2);
IkReal x404=(npy*pz);
IkReal x405=((0.4366)*gclwh13_15);
IkReal x406=(gclwh14_8*rxp0_2);
IkReal x407=(gclwh6_12*rxp1_2);
IkReal x408=((4.0)*gclwh13_9);
IkReal x409=(gclwh6_2*r21);
IkReal x410=(gclwh15_1*rxp0_2);
IkReal x411=((0.3786)*rxp2_2);
IkReal x412=(gclwh7_13*rxp1_2);
IkReal x413=((0.0089586225)*r22);
IkReal x414=((0.0140560787025)*r21);
IkReal x415=((0.017917245)*r21);
IkReal x416=((0.04132419)*rxp1_2);
IkReal x417=(gclwh5_11*rxp2_2);
IkReal x418=((0.00702803935125)*r21);
IkReal x419=((0.007614829125)*r21);
IkReal x420=(gclwh9_9*rxp0_2);
IkReal x421=(gclwh5_15*rxp2_2);
IkReal x422=((0.3786)*rxp0_2);
IkReal x423=((0.2183)*gclwh5_15);
IkReal x424=(gclwh15_0*rxp0_2);
IkReal x425=(gclwh4_2*rxp2_2);
IkReal x426=(gclwh8_2*r20);
IkReal x427=((0.0089586225)*r20);
IkReal x428=((0.020662095)*rxp2_2);
IkReal x429=(gclwh14_2*rxp0_2);
IkReal x430=(gclwh4_8*rxp2_2);
IkReal x431=((0.14850585)*rxp2_2);
IkReal x432=(gclwh9_13*rxp0_2);
IkReal x433=(gclwh7_0*pz);
IkReal x434=((0.2183)*gclwh15_15);
IkReal x435=((0.2183)*gclwh4_14);
IkReal x436=(gclwh12_3*rxp1_2);
IkReal x437=((0.0140560787025)*r20);
IkReal x438=((0.1893)*rxp1_2);
IkReal x439=(gclwh13_1*rxp1_2);
IkReal x440=((0.007614829125)*r22);
IkReal x441=(gclwh11_13*rxp2_2);
IkReal x442=(gclwh11_0*r22);
IkReal x443=(gclwh13_9*x415);
IkReal x444=((0.3786)*x420);
IkReal x445=(gclwh11_9*x411);
IkReal x446=(gclwh5_9*x379);
IkReal x447=(gclwh7_9*x390);
IkReal x448=(gclwh15_9*x375);
IkReal x449=((0.020662095)*x372);
IkReal x450=(gclwh6_5*x360);
IkReal x451=(gclwh8_5*x358);
IkReal x452=(gclwh12_14*x368);
IkReal x453=(gclwh10_5*x383);
IkReal x454=(gclwh4_14*x428);
IkReal x455=(gclwh12_10*x438);
IkReal x456=((0.1893)*gclwh4_10*rxp2_2);
IkReal x457=((0.0089586225)*x389);
IkReal x458=((0.1893)*x365);
IkReal x459=(gclwh8_10*x427);
IkReal x460=(gclwh10_10*x413);
IkReal x461=((0.0089586225)*x377);
IkReal x462=((0.1893)*x399);
IkReal x463=(gclwh13_9*x438);
IkReal x464=((0.1893)*gclwh15_9*rxp0_2);
IkReal x465=(gclwh9_9*x427);
IkReal x466=(gclwh11_9*x413);
IkReal x467=(gclwh13_15*x368);
IkReal x468=((0.020662095)*x421);
IkReal x469=(gclwh7_7*x360);
IkReal x470=(gclwh9_7*x358);
IkReal x471=(gclwh15_15*x397);
IkReal x472=(gclwh11_7*x383);
IkReal x473=(gclwh6_10*x390);
IkReal x474=(gclwh14_10*x375);
IkReal x475=(gclwh8_10*x422);
IkReal x476=(gclwh12_10*x415);
IkReal x477=(gclwh10_10*x411);
IkReal x478=(gclwh4_10*x379);
IkReal x479=(gclwh10_5*x428);
IkReal x480=(gclwh8_5*x397);
IkReal x481=(gclwh14_14*x358);
IkReal x482=(gclwh6_5*x368);
IkReal x483=(gclwh4_14*x383);
IkReal x484=(gclwh12_14*x360);
IkReal x485=(gclwh5_15*x383);
IkReal x486=(gclwh9_7*x397);
IkReal x487=(gclwh11_7*x428);
IkReal x488=(gclwh13_15*x360);
IkReal x489=(gclwh15_15*x358);
IkReal x490=(gclwh7_7*x368);
IkReal x491=((0.85)*x370);
IkReal x492=((0.2183)*x404);
IkReal x493=((2.0)*x353);
IkReal x494=(x359*x371);
IkReal x495=((2.0)*gclwh13_9*x354);
IkReal x496=((2.0)*gclwh5_9*x355);
IkReal x497=(x404*x408);
IkReal x498=(x362*x378);
IkReal x499=((2.0)*gclwh15_9*x370);
IkReal x500=((0.2183)*gclwh10_5*x362);
IkReal x501=((0.2183)*gclwh8_5*x359);
IkReal x502=((0.10915)*gclwh6_5*x354);
IkReal x503=(gclwh6_5*x492);
IkReal x504=((0.10915)*gclwh8_5*x370);
IkReal x505=((0.10915)*gclwh10_5*x355);
IkReal x506=(x393*x436);
IkReal x507=(gclwh8_10*npx*x356);
IkReal x508=(gclwh10_10*npz*x356);
IkReal x509=(x387*x426);
IkReal x510=(gclwh10_2*pz*x355);
IkReal x511=(x391*x429);
IkReal x512=(gclwh8_2*pz*x370);
IkReal x513=(x385*x393);
IkReal x514=(x387*x395);
IkReal x515=(x391*x394);
IkReal x516=(x356*x357);
IkReal x517=(x391*x425);
IkReal x518=(x366*x393);
IkReal x519=((0.0089586225)*r21*x386);
IkReal x520=(x393*x439);
IkReal x521=(gclwh9_9*npx*x356);
IkReal x522=(x387*x442);
IkReal x523=(x380*x387);
IkReal x524=(x393*x403);
IkReal x525=(x391*x424);
IkReal x526=(gclwh11_9*npz*x356);
IkReal x527=(gclwh11_0*pz*x355);
IkReal x528=(gclwh9_0*pz*x370);
IkReal x529=(x393*x410);
IkReal x530=(x381*x387);
IkReal x531=(x391*x402);
IkReal x532=(x391*x392);
IkReal x533=(gclwh7_9*npy*x356);
IkReal x534=((0.10915)*gclwh7_7*x354);
IkReal x535=((0.2183)*gclwh9_7*x359);
IkReal x536=((0.2183)*gclwh11_7*x362);
IkReal x537=((0.10915)*gclwh9_7*x370);
IkReal x538=(gclwh7_7*x492);
IkReal x539=((0.10915)*gclwh11_7*x355);
IkReal x540=((2.0)*gclwh14_10*x370);
IkReal x541=((4.0)*gclwh12_10*x404);
IkReal x542=((4.0)*gclwh4_10*x362);
IkReal x543=((2.0)*gclwh12_10*x354);
IkReal x544=((4.0)*gclwh14_10*x359);
IkReal x545=((2.0)*gclwh4_10*x355);
IkReal x546=((0.10915)*gclwh14_14*x370);
IkReal x547=(x362*x435);
IkReal x548=(gclwh12_14*x492);
IkReal x549=((0.10915)*gclwh12_14*x354);
IkReal x550=(x359*x388);
IkReal x551=((0.10915)*gclwh4_14*x355);
IkReal x552=((0.10915)*gclwh13_15*x354);
IkReal x553=((0.10915)*gclwh5_15*x355);
IkReal x554=(x359*x434);
IkReal x555=((0.10915)*gclwh15_15*x370);
IkReal x556=(x362*x423);
IkReal x557=(gclwh13_15*x492);
IkReal x558=(gclwh6_2*npy*x493);
IkReal x559=((1.0)*x354*x386);
IkReal x560=(gclwh10_2*npz*x493);
IkReal x561=(gclwh8_2*npx*x493);
IkReal x562=(gclwh7_0*npy*x493);
IkReal x563=(gclwh9_0*npx*x493);
IkReal x564=(gclwh11_0*npz*x493);
IkReal x565=((1.0)*x354*x433);
IkReal x566=(x468+x467);
IkReal x567=(x480+x479);
IkReal x568=(x454+x452);
IkReal x569=(x487+x486);
IkReal x570=(x466+x465+x464+x533);
IkReal x571=(x458+x459+x460+x516);
IkReal x572=(((x404*x405))+((x370*x434))+((gclwh15_15*x384))+((x362*x363)));
IkReal x573=(x469+x535+x534+x536);
IkReal x574=(x450+x500+x501+x502);
IkReal x575=(x481+x546+x547+x548);
IkReal x576=(x489+x557+x556+x555);
IkReal x577=(x463+x462+x461+x521+x526);
IkReal x578=(x456+x457+x455+x508+x507);
IkReal x579=(((gclwh5_15*x373))+((x359*x367))+((x355*x423))+(((0.2183)*gclwh13_15*x354))+(((0.00195566729175)*x400)));
IkReal x580=(x470+x472+x537+x539+x538);
IkReal x581=(x474+x473+x540+x541+x542);
IkReal x582=(x483+x484+x551+x550+x549);
IkReal x583=(x498+x499+x497+x448+x447);
IkReal x584=(x488+x485+x553+x552+x554);
IkReal x585=(x453+x451+x503+x504+x505);
IkReal x586=(x496+x494+x495+x445+x444+x446+x443);
IkReal x587=(x475+x476+x477+x478+x544+x545+x543);
IkReal x588=(x531+x530+x532+x529+x564+x565+x563);
IkReal x589=(x559+x519+x518+x517+x515+x560+x561);
IkReal x590=(((gclwh14_14*x384))+(((0.4366)*gclwh4_14*x362))+(((-0.2183)*gclwh12_14*x354))+(((-1.0)*x355*x435))+((x370*x388))+(((-1.0)*gclwh4_14*x373))+(((0.4366)*gclwh12_14*x404))+(((-0.4366)*gclwh14_14*x359))+(((-0.00195566729175)*gclwh12_14*r21)));
IkReal x591=((((-1.0)*x579))+x572);
IkReal x592=(x509+x506+x558+x514+x513+x512+x511+x510);
IkReal x593=(x522+x523+x520+x527+x524+x525+x528+x562);
op[40]=((-0.02597257)+(((-0.01239915)*x407))+x581+(((0.01239915)*gclwh8_12*rxp0_2))+(((-1.0)*x587))+(((0.01239915)*gclwh10_12*rxp2_2)));
op[41]=x590;
op[42]=((((-1.0)*x572))+x579);
op[43]=((-1.35962257)+(((0.30941085)*x441))+(((-0.30941085)*x412))+x583+(((-1.0)*x586))+(((0.30941085)*x432)));
op[44]=((-0.15471464)+(((1.569)*gclwh0_0*x370))+((x370*x371))+(((-3.138)*gclwh2_0*x404))+(((-0.7572)*gclwh11_9*rxp2_2))+(((-0.7572)*x420))+((gclwh15_0*x437))+(((1.569)*gclwh15_0*x370))+(((-1.0)*gclwh0_0*x437))+(((-0.0140560787025)*gclwh5_0*r22))+(((-0.03583449)*gclwh13_9*r21))+(((-1.0)*x355*x378))+(((-8.0)*gclwh15_9*x359))+(((3.138)*gclwh5_0*x362))+(((-0.03583449)*gclwh5_9*r22))+(((1.569)*gclwh2_0*x354))+(((-1.0)*gclwh2_0*x414))+(((-1.569)*gclwh13_0*x354))+(((3.138)*gclwh13_0*x404))+(((-3.138)*gclwh15_0*x359))+(((0.03583449)*gclwh15_9*r20))+(((-1.0)*x354*x408))+(((-0.2970117)*gclwh9_0*rxp0_2))+(((8.0)*gclwh13_9*x404))+(((0.2970117)*gclwh7_0*rxp1_2))+(((0.7572)*gclwh7_9*rxp1_2))+(((-3.138)*gclwh0_0*x359))+(((-1.0)*gclwh13_0*x414))+(((8.0)*gclwh5_9*x362))+(((-0.2970117)*gclwh11_0*rxp2_2))+(((-1.569)*gclwh5_0*x355)));
op[45]=(((x367*x370))+(((-1.0)*x355*x363))+(((-0.0039113345835)*x400))+(((0.0039113345835)*gclwh15_15*r20))+(((0.8732)*gclwh13_15*x404))+(((-1.0)*x354*x405))+(((-0.0039113345835)*gclwh5_15*r22))+(((-0.8732)*gclwh15_15*x359))+(((0.8732)*gclwh5_15*x362)));
op[46]=x591;
op[47]=((0.02597257)+(((-0.01239915)*x412))+x586+(((-1.0)*x583))+(((0.01239915)*x441))+(((0.01239915)*x432)));
op[48]=((-0.178405675)+(((-1.0)*x449))+x574+x568+(((-1.0)*x585)));
op[49]=((((-0.13678818)*x430))+(((-0.154705425)*x425))+(((0.007321434238125)*x395))+(((0.12699240901125)*x366))+(((0.13678818)*x406))+(((1.6345)*npy*x386))+(((-0.154705425)*x394))+(((-0.13678818)*x364))+(((0.81725)*gclwh10_2*x355))+(((0.007321434238125)*x426))+((gclwh10_10*x355))+(((-0.007321434238125)*x409))+(((-0.81725)*gclwh6_2*x354))+(((-0.12699240901125)*x385))+(((-1.0)*gclwh6_10*x354))+(((-1.6345)*gclwh8_2*x359))+(((-1.0)*x578))+x571+x592+(((-1.6345)*gclwh10_2*x362))+(((0.81725)*gclwh8_2*x370))+(((-1.0)*x589))+((gclwh8_10*x370))+(((-0.12699240901125)*x436))+(((0.154705425)*x429)));
op[50]=(((gclwh10_10*x379))+(((1.569)*gclwh6_12*x404))+(((-0.160905)*x364))+(((-1.0)*gclwh6_12*x418))+(((0.7845)*gclwh10_12*x355))+(((-1.0)*gclwh4_10*x411))+((gclwh8_12*x398))+(((4.0)*pz*x357))+(((-4.0)*gclwh10_10*x362))+(((2.0)*gclwh8_10*x370))+((gclwh10_12*x401))+(((0.7845)*gclwh8_12*x370))+(((-0.7845)*gclwh6_12*x354))+(((2.0)*gclwh10_10*x355))+(((-4.0)*gclwh8_10*x359))+(((-1.0)*gclwh12_10*x390))+(((-0.160905)*x430))+(((0.3786)*x365))+((gclwh8_10*x375))+(((-0.017917245)*x389))+(((-1.569)*gclwh10_12*x362))+(((-2.0)*gclwh6_10*x354))+(((0.160905)*x406))+(((-1.569)*gclwh8_12*x359)));
op[51]=((((-0.04132419)*gclwh4_14*rxp2_2))+(((-1.0)*gclwh12_14*x416))+(((0.04132419)*x372)));
op[52]=((-0.007149325)+x449+x574+(((-1.0)*x585))+(((-1.0)*x568)));
op[53]=((((-0.03275)*gclwh6_2*x354))+(((-0.006199575)*x425))+(((-0.000293394886875)*x409))+(((-0.02411682)*x406))+(((-0.0655)*gclwh10_2*x362))+(((0.03275)*gclwh10_2*x355))+(((0.02411682)*x364))+(((-0.006199575)*x394))+(((0.03275)*gclwh8_2*x370))+(((-0.00076243651125)*x385))+(((-1.0)*x571))+x578+x592+(((-1.0)*gclwh10_10*x355))+(((0.02411682)*x430))+(((0.000293394886875)*x395))+(((-1.0)*x589))+(((0.00076243651125)*x366))+((gclwh6_10*x354))+(((-1.0)*gclwh12_3*x361))+(((0.000293394886875)*x426))+((x386*x396))+(((-0.0655)*gclwh8_2*x359))+(((-1.0)*gclwh8_10*x370))+(((0.006199575)*x429)));
op[54]=((((0.81725)*gclwh11_0*x355))+(((-0.12699240901125)*x403))+(((1.6345)*gclwh7_0*x404))+(((-0.007321434238125)*x381))+(((-0.154705425)*x392))+(((0.17262267)*x376))+(((-1.6345)*gclwh9_0*x359))+(((0.81725)*gclwh9_0*x370))+(((0.007321434238125)*x442))+(((-0.17262267)*x382))+(((0.007321434238125)*x380))+(((-1.0)*gclwh7_9*x354))+(((-1.0)*x577))+(((-1.6345)*gclwh11_0*x362))+(((-0.154705425)*x402))+x570+x593+(((-0.17262267)*x417))+((gclwh9_9*x370))+(((0.12699240901125)*x410))+(((-1.0)*x588))+(((-0.12699240901125)*x439))+(((-0.81725)*gclwh7_0*x354))+((gclwh11_9*x355))+(((0.154705425)*x424)));
op[55]=((-0.178405675)+x471+x573+(((-1.0)*x580))+(((-1.0)*x566)));
op[56]=((((0.04132419)*gclwh15_15*rxp0_2))+(((-1.0)*gclwh13_15*x416))+(((-0.04132419)*x421)));
op[57]=((((0.017917245)*x377))+((gclwh9_13*x398))+(((-1.0)*gclwh15_9*x422))+(((0.160905)*x382))+(((-1.0)*gclwh7_13*x418))+(((-1.0)*gclwh11_9*x379))+(((-1.569)*gclwh11_13*x362))+(((1.569)*gclwh7_13*x404))+(((0.7845)*gclwh11_13*x355))+(((-1.569)*gclwh9_13*x359))+(((-2.0)*gclwh9_9*x370))+(((4.0)*gclwh9_9*x359))+((gclwh11_13*x401))+(((-0.7845)*gclwh7_13*x354))+(((-1.0)*gclwh9_9*x375))+(((-2.0)*gclwh11_9*x355))+(((0.3786)*x399))+(((-4.0)*gclwh7_9*x404))+((gclwh13_9*x390))+(((0.7845)*gclwh9_13*x370))+(((0.160905)*x417))+(((2.0)*gclwh7_9*x354))+(((-0.160905)*x376))+(((4.0)*gclwh11_9*x362)));
op[58]=(((x396*x433))+(((-1.0)*gclwh11_9*x355))+(((-0.006199575)*x402))+(((0.00076243651125)*x410))+(((-0.01171767)*x382))+(((0.000293394886875)*x380))+(((0.03275)*gclwh11_0*x355))+(((-0.006199575)*x392))+(((-0.03275)*gclwh7_0*x354))+(((-0.0655)*gclwh9_0*x359))+(((-1.0)*x570))+(((0.01171767)*x376))+x577+x593+(((-0.00076243651125)*x403))+(((0.03275)*gclwh9_0*x370))+(((-1.0)*gclwh13_1*x361))+(((-0.000293394886875)*x381))+(((-0.0655)*gclwh11_0*x362))+(((-1.0)*x588))+((gclwh7_9*x354))+(((-0.01171767)*x417))+(((0.000293394886875)*x442))+(((-1.0)*gclwh9_9*x370))+(((0.006199575)*x424)));
op[59]=((-0.007149325)+(((-1.0)*x471))+x573+x566+(((-1.0)*x580)));
op[60]=((((-1.0)*x482))+(((-1.0)*x575))+x567+x582);
op[61]=((0.65598384)+(((2.0)*gclwh12_10*npy*pz))+(((1.4452)*gclwh4_8*npz*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((1.6345)*gclwh3_2*npy*pz))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((1.341705325)*gclwh4_3*npz*pz))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.154705425)*gclwh6_2*rxp1_2))+(((0.0089586225)*gclwh14_10*r20))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-0.66189404)*gclwh12_3*pp*r21))+(((1.341705325)*gclwh1_3*npx*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.0064735006185)*gclwh12_8*r21))+(((-0.1893)*gclwh8_10*rxp0_2))+(((0.1893)*pz))+((gclwh12_3*r21*(pp*pp)))+(((-0.679811285)*gclwh3_3*pp*r21))+(((0.81725)*gclwh14_2*pp*r20))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.1893)*gclwh10_10*rxp2_2))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.66189404)*gclwh4_3*pp*r22))+(((0.00600991575645741)*gclwh1_3*r20))+(((1.4452)*gclwh12_8*npy*pz))+(((-1.4452)*gclwh14_8*npx*pz))+(((-0.81725)*gclwh12_2*pp*r21))+(((-0.00600991575645741)*gclwh12_3*r21))+(((0.1893)*gclwh6_10*rxp1_2))+(((-0.0064735006185)*gclwh4_8*r22))+(((-0.007321434238125)*gclwh4_2*r22))+(((0.007321434238125)*gclwh3_2*r21))+(((-0.00600991575645741)*gclwh4_3*r22))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((-0.0089586225)*gclwh12_2*pz*r21))+(((1.6345)*gclwh1_2*npx*pz))+(((0.00600991575645741)*gclwh14_3*r20))+((gclwh3_3*r21*(pp*pp)))+(((-0.81725)*gclwh3_2*pp*r21))+((gclwh1_3*r20*(pp*pp)))+(((1.341705325)*gclwh3_3*npy*pz))+(((0.0064735006185)*gclwh14_8*r20))+(((1.6345)*gclwh4_2*npz*pz))+(((-0.0089586225)*gclwh12_10*r21))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+((gclwh14_10*pp*r20))+(((-0.7226)*gclwh12_8*pp*r21))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.007321434238125)*gclwh1_2*r20))+(((1.6345)*gclwh12_2*npy*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.81725)*gclwh1_2*pp*r20))+(((-0.0089586225)*gclwh4_10*r22))+(((0.007321434238125)*gclwh14_2*r20))+(((-1.0)*gclwh12_10*pp*r21))+(((0.0089586225)*gclwh14_2*pz*r20))+(((-0.7226)*gclwh4_8*pp*r22))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.007321434238125)*gclwh12_2*r21))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.154705425)*gclwh8_2*rxp0_2))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.0089586225)*gclwh1_2*pz*r20))+(((0.7226)*gclwh14_8*pp*r20))+(((-1.6345)*gclwh14_2*npx*pz))+(((0.66189404)*gclwh14_3*pp*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((1.341705325)*gclwh12_3*npy*pz))+(((-0.679811285)*gclwh1_3*pp*r20))+(((-2.0)*gclwh14_10*npx*pz))+(((-1.341705325)*gclwh14_3*npx*pz))+(((-0.81725)*gclwh4_2*pp*r22))+(((-0.154705425)*gclwh10_2*rxp2_2))+(((0.00600991575645741)*gclwh3_3*r21))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((2.0)*gclwh4_10*npz*pz))+(((-1.0)*gclwh4_10*pp*r22)));
op[62]=((0.02970243)+(((-1.0)*gclwh12_8*x419))+(((-0.85)*gclwh12_8*x354))+(((-1.0)*gclwh4_8*x440))+((gclwh14_8*x491))+(((-1.7)*gclwh14_8*x359))+x581+(((-1.0)*gclwh10_12*x431))+(((1.7)*gclwh12_8*x404))+(((-1.0)*x587))+(((1.7)*gclwh4_8*x362))+(((-1.0)*gclwh8_12*x369))+(((-0.85)*gclwh4_8*x355))+(((0.14850585)*x407))+((gclwh14_8*x374)));
op[63]=x590;
op[64]=((((-1.0)*x482))+x575+x567+(((-1.0)*x582)));
op[65]=((0.01084116)+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.000293394886875)*gclwh3_2*r21))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.008055325)*gclwh1_3*npx*pz))+(((0.2548)*gclwh14_8*npx*pz))+(((-0.03275)*gclwh12_2*pp*r21))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.1274)*gclwh14_8*pp*r20))+(((0.1893)*pz))+(((0.00493096)*gclwh12_3*pp*r21))+(((-0.000293394886875)*gclwh12_2*r21))+(((-0.0011413285065)*gclwh14_8*r20))+((gclwh12_3*r21*(pp*pp)))+(((0.03275)*gclwh14_2*pp*r20))+(((3.60823078949063e-5)*gclwh1_3*r20))+(((3.60823078949063e-5)*gclwh3_3*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.000293394886875)*gclwh1_2*r20))+(((-3.60823078949063e-5)*gclwh12_3*r21))+(((2.0)*gclwh14_10*npx*pz))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.00493096)*gclwh14_3*pp*r20))+(((-0.0089586225)*gclwh14_10*r20))+(((0.008055325)*gclwh3_3*npy*pz))+(((-1.0)*gclwh14_10*pp*r20))+(((-0.012986285)*gclwh1_3*pp*r20))+(((0.00493096)*gclwh4_3*pp*r22))+(((-0.0655)*gclwh14_2*npx*pz))+(((0.0655)*gclwh1_2*npx*pz))+(((-2.0)*gclwh12_10*npy*pz))+(((0.006199575)*gclwh6_2*rxp1_2))+((gclwh12_10*pp*r21))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((0.008055325)*gclwh12_3*npy*pz))+(((-0.0089586225)*gclwh12_2*pz*r21))+(((0.0089586225)*gclwh4_10*r22))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-3.60823078949063e-5)*gclwh4_3*r22))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.2548)*gclwh4_8*npz*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.1893)*gclwh8_10*rxp0_2))+(((0.1893)*gclwh10_10*rxp2_2))+(((0.008055325)*gclwh4_3*npz*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.1274)*gclwh12_8*pp*r21))+(((-0.008055325)*gclwh14_3*npx*pz))+(((0.0089586225)*gclwh12_10*r21))+(((-0.03275)*gclwh3_2*pp*r21))+(((3.60823078949063e-5)*gclwh14_3*r20))+(((0.0089586225)*gclwh14_2*pz*r20))+(((0.1274)*gclwh4_8*pp*r22))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.012986285)*gclwh3_3*pp*r21))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.006199575)*gclwh10_2*rxp2_2))+(((0.0089586225)*gclwh1_2*pz*r20))+((gclwh4_10*pp*r22))+(((-0.03275)*gclwh1_2*pp*r20))+(((0.000293394886875)*gclwh14_2*r20))+(((0.0655)*gclwh12_2*npy*pz))+(((-0.2548)*gclwh12_8*npy*pz))+(((0.0655)*gclwh3_2*npy*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.0011413285065)*gclwh4_8*r22))+(((0.0655)*gclwh4_2*npz*pz))+(((-0.006199575)*gclwh8_2*rxp0_2))+(((-0.000293394886875)*gclwh4_2*r22))+(((0.0011413285065)*gclwh12_8*r21))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_10*npz*pz))+(((-0.03275)*gclwh4_2*pp*r22))+(((-0.1893)*gclwh6_10*rxp1_2)));
op[66]=((0.65598384)+(((2.0)*gclwh2_1*npy*pp*pz))+(((2.0)*gclwh5_9*npz*pz))+((gclwh15_0*pp*pz*r20))+(((0.1893)*gclwh7_0*pz*rxp1_2))+(((-0.81725)*gclwh5_0*pp*r22))+((gclwh13_1*r21*(pp*pp)))+(((1.6345)*gclwh13_0*npy*pz))+(((0.81725)*gclwh15_0*pp*r20))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((0.0089586225)*gclwh15_9*r20))+(((-1.341705325)*gclwh2_1*npy*pz))+(((-0.66189404)*gclwh5_1*pp*r22))+(((2.0)*gclwh13_9*npy*pz))+(((0.9119)*gclwh15_11*pp*r20))+(((-0.007321434238125)*gclwh0_0*r20))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.1893)*pz))+(((-0.00816936785775)*gclwh13_11*r21))+((gclwh2_0*pp*pz*r21))+(((-0.0089586225)*gclwh13_9*r21))+((gclwh0_0*pp*pz*r20))+(((0.679811285)*gclwh2_1*pp*r21))+(((-0.00600991575645741)*gclwh0_1*r20))+(((-0.00600991575645741)*gclwh13_1*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((0.81725)*gclwh0_0*pp*r20))+(((0.00816936785775)*gclwh15_11*r20))+(((-0.1893)*gclwh9_9*rxp0_2))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((1.341705325)*gclwh13_1*npy*pz))+(((-0.00600991575645741)*gclwh5_1*r22))+(((-0.0089586225)*gclwh5_9*r22))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+((gclwh15_9*pp*r20))+(((-1.341705325)*gclwh0_1*npx*pz))+(((-0.154705425)*gclwh9_0*rxp0_2))+(((0.66189404)*gclwh15_1*pp*r20))+(((-0.66189404)*gclwh13_1*pp*r21))+(((-1.341705325)*gclwh15_1*npx*pz))+(((-0.007321434238125)*gclwh2_0*r21))+(((1.6345)*gclwh5_0*npz*pz))+(((-1.8238)*gclwh15_11*npx*pz))+(((-0.154705425)*gclwh11_0*rxp2_2))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.6345)*gclwh0_0*npx*pz))+(((-2.0)*gclwh15_9*npx*pz))+(((-0.007321434238125)*gclwh5_0*r22))+(((1.341705325)*gclwh5_1*npz*pz))+(((0.0089586225)*gclwh15_0*pz*r20))+(((-0.0089586225)*gclwh5_0*pz*r22))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-0.00816936785775)*gclwh5_11*r22))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.9119)*gclwh5_11*pp*r22))+(((-1.6345)*gclwh15_0*npx*pz))+(((-0.1893)*gclwh9_0*pz*rxp0_2))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-0.00600991575645741)*gclwh2_1*r21))+(((0.007321434238125)*gclwh15_0*r20))+(((0.154705425)*gclwh7_0*rxp1_2))+(((1.8238)*gclwh13_11*npy*pz))+(((-0.1893)*gclwh11_9*rxp2_2))+(((0.679811285)*gclwh0_1*pp*r20))+(((-1.6345)*gclwh2_0*npy*pz))+(((-1.0)*gclwh13_9*pp*r21))+((gclwh5_1*r22*(pp*pp)))+(((-0.0089586225)*gclwh13_0*pz*r21))+(((1.8238)*gclwh5_11*npz*pz))+(((-1.0)*gclwh5_9*pp*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-0.007321434238125)*gclwh13_0*r21))+(((0.81725)*gclwh2_0*pp*r21))+(((0.00600991575645741)*gclwh15_1*r20))+(((-0.1893)*gclwh11_0*pz*rxp2_2))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-0.9119)*gclwh13_11*pp*r21))+(((-0.81725)*gclwh13_0*pp*r21))+(((-1.0)*gclwh0_1*r20*(pp*pp)))+(((0.1893)*gclwh7_9*rxp1_2)));
op[67]=((((-1.0)*x490))+x576+x569+(((-1.0)*x584)));
op[68]=x591;
op[69]=((-0.02970243)+((gclwh13_11*x419))+(((0.85)*gclwh13_11*x354))+(((-1.0)*gclwh15_11*x491))+(((-1.0)*gclwh11_13*x431))+(((0.85)*gclwh5_11*x355))+(((-1.0)*gclwh9_13*x369))+((gclwh5_11*x440))+(((-1.7)*gclwh13_11*x404))+x586+(((1.7)*gclwh15_11*x359))+(((-1.7)*gclwh5_11*x362))+(((-1.0)*gclwh15_11*x374))+(((-1.0)*x583))+(((0.14850585)*x412)));
op[70]=((0.01084116)+(((2.0)*gclwh15_9*npx*pz))+(((2.0)*gclwh2_1*npy*pp*pz))+((gclwh15_0*pp*pz*r20))+(((0.1893)*gclwh7_0*pz*rxp1_2))+((gclwh13_1*r21*(pp*pp)))+(((-0.008055325)*gclwh0_1*npx*pz))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((-0.006199575)*gclwh11_0*rxp2_2))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh15_9*pp*r20))+(((0.03275)*gclwh2_0*pp*r21))+(((-0.1893)*pz))+((gclwh2_0*pp*pz*r21))+(((0.006199575)*gclwh7_0*rxp1_2))+((gclwh0_0*pp*pz*r20))+(((0.1893)*gclwh9_9*rxp0_2))+(((-0.000293394886875)*gclwh2_0*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.0619)*gclwh13_11*pp*r21))+(((-0.008055325)*gclwh15_1*npx*pz))+(((0.0089586225)*gclwh13_9*r21))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((-0.00055453873275)*gclwh13_11*r21))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((3.60823078949063e-5)*gclwh15_1*r20))+(((-3.60823078949063e-5)*gclwh5_1*r22))+(((-0.000293394886875)*gclwh13_0*r21))+(((-3.60823078949063e-5)*gclwh13_1*r21))+(((-0.000293394886875)*gclwh5_0*r22))+(((0.00493096)*gclwh5_1*pp*r22))+(((-0.0655)*gclwh15_0*npx*pz))+(((-0.008055325)*gclwh2_1*npy*pz))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((0.0089586225)*gclwh5_9*r22))+(((-0.0089586225)*gclwh15_9*r20))+(((-0.00055453873275)*gclwh5_11*r22))+(((0.012986285)*gclwh0_1*pp*r20))+(((0.0089586225)*gclwh15_0*pz*r20))+(((-3.60823078949063e-5)*gclwh2_1*r21))+(((0.1238)*gclwh13_11*npy*pz))+(((-0.0089586225)*gclwh5_0*pz*r22))+(((-2.0)*gclwh5_9*npz*pz))+(((-0.03275)*gclwh13_0*pp*r21))+(((-0.00493096)*gclwh15_1*pp*r20))+(((0.000293394886875)*gclwh15_0*r20))+(((0.00493096)*gclwh13_1*pp*r21))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((0.00055453873275)*gclwh15_11*r20))+(((0.008055325)*gclwh5_1*npz*pz))+(((0.1893)*gclwh11_9*rxp2_2))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((0.0655)*gclwh5_0*npz*pz))+(((-0.0655)*gclwh0_0*npx*pz))+(((0.0655)*gclwh13_0*npy*pz))+(((-0.0655)*gclwh2_0*npy*pz))+(((0.03275)*gclwh15_0*pp*r20))+(((-0.1893)*gclwh9_0*pz*rxp0_2))+(((-0.1893)*gclwh7_9*rxp1_2))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.0619)*gclwh15_11*pp*r20))+(((0.03275)*gclwh0_0*pp*r20))+(((-3.60823078949063e-5)*gclwh0_1*r20))+(((-2.0)*gclwh13_9*npy*pz))+((gclwh13_9*pp*r21))+(((0.012986285)*gclwh2_1*pp*r21))+(((0.1238)*gclwh5_11*npz*pz))+((gclwh5_1*r22*(pp*pp)))+(((-0.006199575)*gclwh9_0*rxp0_2))+(((-0.0089586225)*gclwh13_0*pz*r21))+(((-0.03275)*gclwh5_0*pp*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((0.008055325)*gclwh13_1*npy*pz))+((gclwh5_9*pp*r22))+(((-0.0619)*gclwh5_11*pp*r22))+(((-0.1238)*gclwh15_11*npx*pz))+(((-0.000293394886875)*gclwh0_0*r20))+(((-0.1893)*gclwh11_0*pz*rxp2_2))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[71]=((((-1.0)*x490))+(((-1.0)*x576))+x569+x584);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x594=htj1*htj1;
CheckValue<IkReal> x595=IKPowWithIntegerCheck(((1.0)+x594),-1);
if(!x595.valid){
continue;
}
cj1array[numsolutions]=((x595.value)*(((1.0)+(((-1.0)*x594)))));
CheckValue<IkReal> x596=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x596.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x596.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x597=htj2*htj2;
CheckValue<IkReal> x598=IKPowWithIntegerCheck(((1.0)+x597),-1);
if(!x598.valid){
continue;
}
cj2array[numsolutions]=((x598.value)*(((1.0)+(((-1.0)*x597)))));
CheckValue<IkReal> x599=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x599.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x599.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x600=htj3*htj3;
CheckValue<IkReal> x601=IKPowWithIntegerCheck(((1.0)+x600),-1);
if(!x601.valid){
continue;
}
cj3array[numsolutions]=((x601.value)*(((1.0)+(((-1.0)*x600)))));
CheckValue<IkReal> x602=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x602.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x602.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x603=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x603);
rxp1_0=(pz*r11);
rxp1_1=(r01*x603);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x604=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x604);
rxp1_0=(pz*r11);
rxp1_1=(r01*x604);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x605=IKPowWithIntegerCheck(cj3,-1);
if(!x605.valid){
continue;
}
CheckValue<IkReal> x606=IKPowWithIntegerCheck(r22,-1);
if(!x606.valid){
continue;
}
sj4array[0]=((-1.0)*(x605.value)*(x606.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x607=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x607);
rxp1_0=(pz*r11);
rxp1_1=(r01*x607);
IkReal x608=(cj4*sj3);
IkReal x609=((4.0)*r10);
IkReal x610=((16.0)*r11);
IkReal x611=((4.0)*sj3);
IkReal x612=((8.0)*sj1);
IkReal x613=(cj3*cj4);
IkReal x614=((16.0)*cj1);
IkReal x615=((8.0)*r11);
IkReal x616=(r12*sj4);
IkReal x617=((12.0)*cj1);
IkReal x618=((16.0)*r10);
IkReal x619=((16.0)*sj1);
IkReal x620=(cj2*sj4);
IkReal x621=((8.0)*cj1);
IkReal x622=((4.0)*sj1);
IkReal x623=((4.0)*cj1);
IkReal x624=((4.0)*cj3);
IkReal x625=((8.0)*r10);
IkReal x626=((12.0)*sj1);
IkReal x627=(r11*x624);
IkReal x628=(r11*x611);
IkReal x629=(r01*sj2*sj4);
IkReal x630=(cj4*r02*sj2);
IkReal x631=(cj2*cj4*r02);
IkReal x632=(r00*sj2*sj4);
IkReal x633=(x608*x609);
IkReal x634=((12.0)*sj3*x616);
IkReal x635=(x609*x613);
IkReal x636=((12.0)*cj3*x616);
IkReal x637=(x623*x632);
IkReal x638=(r00*x620*x622);
IkReal x639=(x626*x631);
IkReal x640=(x617*x630);
IkReal x641=(x622*x632);
IkReal x642=(x617*x631);
IkReal x643=(r00*x620*x623);
IkReal x644=(x626*x630);
IkReal x645=(x627+x633);
IkReal x646=(x641+x628);
IkReal x647=(x643+x635);
IkReal x648=(x644+x636);
IkReal x649=(x637+x638);
IkReal x650=(x640+x634+x639);
j5eval[0]=((((0.5)*(IKabs((((x614*x629))+((cj3*x618))+((r01*x619*x620))+(((-1.0)*x608*x610)))))))+(IKabs((((cj3*x625))+((x621*x629))+((r01*x612*x620))+(((-1.0)*x608*x615)))))+(((0.5)*(IKabs(((((-1.0)*x611*x616))+(((-1.0)*x623*x630))+(((-1.0)*x622*x631))+(((-1.0)*x645))+x649)))))+(((0.5)*(IKabs(((((-1.0)*x610*x613))+(((-1.0)*sj3*x618))+(((-1.0)*r01*x614*x620))+((x619*x629)))))))+(((0.5)*(IKabs(((((-1.0)*x622*x630))+(((-1.0)*x647))+x646+(((-1.0)*x616*x624))+((x623*x631)))))))+(((0.5)*(IKabs(((((-1.0)*x647))+(((-1.0)*x648))+x646+x642)))))+(((0.5)*(IKabs(((((-1.0)*x650))+(((-1.0)*x645))+x649)))))+(((0.5)*(IKabs(((((-1.0)*x646))+(((-1.0)*x648))+x647+x642)))))+(IKabs(((((-1.0)*r01*x620*x621))+((x612*x629))+(((-1.0)*x613*x615))+(((-1.0)*sj3*x625)))))+(((0.5)*(IKabs(((((-1.0)*x650))+(((-1.0)*x649))+x645))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x651=(r10*sj3);
IkReal x652=(r01*sj4);
IkReal x653=(cj1*cj2);
IkReal x654=(cj3*cj4);
IkReal x655=(sj1*sj2);
IkReal x656=(cj4*r02);
IkReal x657=((4.0)*r11*sj3);
IkReal x658=(cj3*r12*sj4);
IkReal x659=((4.0)*r00*sj4);
IkReal x660=((4.0)*r10*x654);
IkReal x661=((12.0)*x658);
IkReal x662=((4.0)*x658);
IkReal x663=(x655*x659);
IkReal x664=(x653*x659);
IkReal x665=((12.0)*x653*x656);
IkReal x666=((12.0)*x655*x656);
IkReal x667=((4.0)*x653*x656);
IkReal x668=((4.0)*x655*x656);
IkReal x669=(x657+x663);
IkReal x670=(x660+x664);
IkReal x671=(x661+x666);
IkReal x672=(x668+x662);
IkReal x673=((((8.0)*x652*x655))+(((-8.0)*r11*x654))+(((-8.0)*x652*x653))+(((-8.0)*x651)));
op[0]=(x669+x667+(((-1.0)*x670))+(((-1.0)*x672)));
op[1]=x673;
op[2]=(x669+x665+(((-1.0)*x671))+(((-1.0)*x670)));
op[3]=((((-16.0)*x651))+(((16.0)*x652*x655))+(((-16.0)*r11*x654))+(((-16.0)*x652*x653)));
op[4]=((((-1.0)*x669))+x665+x670+(((-1.0)*x671)));
op[5]=x673;
op[6]=((((-1.0)*x669))+x667+x670+(((-1.0)*x672)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x674=(cj4*sj3);
IkReal x675=(cj1*sj2);
IkReal x676=(r01*sj4);
IkReal x677=((4.0)*sj4);
IkReal x678=(r12*sj3);
IkReal x679=(cj4*r02);
IkReal x680=(cj2*sj1);
IkReal x681=(cj3*r10);
IkReal x682=((4.0)*cj3*r11);
IkReal x683=((4.0)*r10*x674);
IkReal x684=((12.0)*sj4*x678);
IkReal x685=(x677*x678);
IkReal x686=(r00*x675*x677);
IkReal x687=(r00*x677*x680);
IkReal x688=((12.0)*x679*x680);
IkReal x689=((12.0)*x675*x679);
IkReal x690=((4.0)*x679*x680);
IkReal x691=((4.0)*x675*x679);
IkReal x692=(x683+x682);
IkReal x693=(x687+x686);
IkReal x694=(x689+x688+x684);
IkReal x695=(x685+x690+x691);
IkReal x696=((((-8.0)*r11*x674))+(((8.0)*x681))+(((8.0)*x675*x676))+(((8.0)*x676*x680)));
j5evalpoly[0]=((((htj5*htj5)*((x692+(((-1.0)*x694))+(((-1.0)*x693))))))+(((htj5*htj5*htj5)*(((((16.0)*x676*x680))+(((16.0)*x681))+(((16.0)*x675*x676))+(((-16.0)*r11*x674))))))+((x696*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x693+(((-1.0)*x692))+(((-1.0)*x694))))))+x692+(((-1.0)*x695))+(((-1.0)*x693))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x693+(((-1.0)*x692))+(((-1.0)*x695))))))+((htj5*x696)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x697=(cj5*sj4);
IkReal x698=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x697))+((r01*x698)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x698))+((r10*x697))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x697))+((r01*x698))))+IKsqr(((((-1.0)*r11*x698))+((r10*x697))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x697))+((r01*x698))), ((((-1.0)*r11*x698))+((r10*x697))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x699=IKcos(j0);
IkReal x700=IKsin(j0);
IkReal x701=(cj3*sj4);
IkReal x702=((0.39225)*cj1);
IkReal x703=((1.0)*cj5);
IkReal x704=(cj3*r11);
IkReal x705=(cj4*r10);
IkReal x706=(cj4*r00);
IkReal x707=((1.0)*sj1);
IkReal x708=(cj3*sj5);
IkReal x709=(r11*sj5);
IkReal x710=(r01*sj3);
IkReal x711=(cj4*sj5);
IkReal x712=(cj5*r11);
IkReal x713=(r00*sj5);
IkReal x714=(sj3*sj4);
IkReal x715=((0.425)*sj1);
IkReal x716=(r10*sj5);
IkReal x717=((1.0)*cj4);
IkReal x718=((0.39225)*sj1);
IkReal x719=(sj2*x700);
IkReal x720=(cj1*x699);
IkReal x721=(cj2*x700);
IkReal x722=(cj2*x699);
IkReal x723=(sj2*x699);
evalcond[0]=((((-1.0)*r12*x717))+(((-1.0)*r10*sj4*x703))+x699+((sj4*x709)));
evalcond[1]=((((-1.0)*r02*x717))+(((-1.0)*x700))+((r01*sj4*sj5))+(((-1.0)*r00*sj4*x703)));
evalcond[2]=(((x702*x723))+(((-0.09465)*x713))+(((-0.09465)*cj5*r01))+(((-1.0)*px))+((x718*x722))+(((-0.10915)*x700))+((x699*x715)));
evalcond[3]=(((x700*x715))+((x702*x719))+(((-0.09465)*x712))+(((-0.09465)*x716))+(((0.10915)*x699))+(((-1.0)*py))+((x718*x721)));
evalcond[4]=(((cj5*x710))+(((-1.0)*cj3*x703*x706))+((sj3*x713))+((cj2*x720))+((r02*x701))+(((-1.0)*x707*x723))+((cj4*r01*x708)));
evalcond[5]=(((cj1*x721))+(((-1.0)*x707*x719))+(((-1.0)*cj3*x703*x705))+((sj3*x712))+((sj3*x716))+((x704*x711))+((r12*x701)));
evalcond[6]=((((-1.0)*sj3*x703*x706))+(((-1.0)*sj2*x720))+(((-1.0)*r00*x708))+((x710*x711))+(((-1.0)*cj3*r01*x703))+((r02*x714))+(((-1.0)*x707*x722)));
evalcond[7]=((((-1.0)*sj3*x703*x705))+(((-1.0)*cj1*x719))+((cj4*sj3*x709))+(((-1.0)*x703*x704))+(((-1.0)*r10*x708))+((r12*x714))+(((-1.0)*x707*x721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x724=IKPowWithIntegerCheck(r22,-1);
if(!x724.valid){
continue;
}
CheckValue<IkReal> x725=IKPowWithIntegerCheck(sj3,-1);
if(!x725.valid){
continue;
}
sj4array[0]=((-1.0)*(x724.value)*(x725.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+((cj3*r22*(IKsin(j4))))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x726=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x726);
rxp1_0=(pz*r11);
rxp1_1=(r01*x726);
IkReal x727=(cj4*sj3);
IkReal x728=((4.0)*r10);
IkReal x729=((16.0)*r11);
IkReal x730=((4.0)*sj3);
IkReal x731=((8.0)*sj1);
IkReal x732=(cj3*cj4);
IkReal x733=((16.0)*cj1);
IkReal x734=((8.0)*r11);
IkReal x735=(r12*sj4);
IkReal x736=((12.0)*cj1);
IkReal x737=((16.0)*r10);
IkReal x738=((16.0)*sj1);
IkReal x739=(cj2*sj4);
IkReal x740=((8.0)*cj1);
IkReal x741=((4.0)*sj1);
IkReal x742=((4.0)*cj1);
IkReal x743=((4.0)*cj3);
IkReal x744=((8.0)*r10);
IkReal x745=((12.0)*sj1);
IkReal x746=(r11*x743);
IkReal x747=(r11*x730);
IkReal x748=(r01*sj2*sj4);
IkReal x749=(cj4*r02*sj2);
IkReal x750=(cj2*cj4*r02);
IkReal x751=(r00*sj2*sj4);
IkReal x752=(x727*x728);
IkReal x753=((12.0)*sj3*x735);
IkReal x754=(x728*x732);
IkReal x755=((12.0)*cj3*x735);
IkReal x756=(x742*x751);
IkReal x757=(r00*x739*x741);
IkReal x758=(x745*x750);
IkReal x759=(x736*x749);
IkReal x760=(x741*x751);
IkReal x761=(x736*x750);
IkReal x762=(r00*x739*x742);
IkReal x763=(x745*x749);
IkReal x764=(x752+x746);
IkReal x765=(x747+x760);
IkReal x766=(x754+x762);
IkReal x767=(x755+x763);
IkReal x768=(x757+x756);
IkReal x769=(x753+x759+x758);
j5eval[0]=((IKabs(((((-1.0)*x732*x734))+((x731*x748))+(((-1.0)*r01*x739*x740))+(((-1.0)*sj3*x744)))))+(((0.5)*(IKabs(((((-1.0)*x767))+(((-1.0)*x765))+x766+x761)))))+(((0.5)*(IKabs(((((-1.0)*x767))+(((-1.0)*x766))+x765+x761)))))+(((0.5)*(IKabs(((((-1.0)*x727*x729))+((cj3*x737))+((x733*x748))+((r01*x738*x739)))))))+(((0.5)*(IKabs(((((-1.0)*x769))+(((-1.0)*x768))+x764)))))+(((0.5)*(IKabs(((((-1.0)*x766))+(((-1.0)*x741*x749))+x765+((x742*x750))+(((-1.0)*x735*x743)))))))+(((0.5)*(IKabs(((((-1.0)*x764))+(((-1.0)*x769))+x768)))))+(((0.5)*(IKabs((((x738*x748))+(((-1.0)*r01*x733*x739))+(((-1.0)*sj3*x737))+(((-1.0)*x729*x732)))))))+(IKabs(((((-1.0)*x727*x734))+((cj3*x744))+((r01*x731*x739))+((x740*x748)))))+(((0.5)*(IKabs(((((-1.0)*x742*x749))+(((-1.0)*x764))+(((-1.0)*x730*x735))+x768+(((-1.0)*x741*x750))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x770=(r10*sj3);
IkReal x771=(r01*sj4);
IkReal x772=(cj1*cj2);
IkReal x773=(cj3*cj4);
IkReal x774=(sj1*sj2);
IkReal x775=(cj4*r02);
IkReal x776=((4.0)*r11*sj3);
IkReal x777=(cj3*r12*sj4);
IkReal x778=((4.0)*r00*sj4);
IkReal x779=((4.0)*r10*x773);
IkReal x780=((12.0)*x777);
IkReal x781=((4.0)*x777);
IkReal x782=(x774*x778);
IkReal x783=(x772*x778);
IkReal x784=((12.0)*x772*x775);
IkReal x785=((12.0)*x774*x775);
IkReal x786=((4.0)*x772*x775);
IkReal x787=((4.0)*x774*x775);
IkReal x788=(x776+x782);
IkReal x789=(x779+x783);
IkReal x790=(x780+x785);
IkReal x791=(x781+x787);
IkReal x792=((((-8.0)*x771*x772))+(((-8.0)*r11*x773))+(((-8.0)*x770))+(((8.0)*x771*x774)));
op[0]=((((-1.0)*x791))+(((-1.0)*x789))+x786+x788);
op[1]=x792;
op[2]=((((-1.0)*x790))+(((-1.0)*x789))+x784+x788);
op[3]=((((-16.0)*r11*x773))+(((-16.0)*x770))+(((16.0)*x771*x774))+(((-16.0)*x771*x772)));
op[4]=((((-1.0)*x790))+(((-1.0)*x788))+x784+x789);
op[5]=x792;
op[6]=((((-1.0)*x791))+(((-1.0)*x788))+x786+x789);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x793=(cj4*sj3);
IkReal x794=(cj1*sj2);
IkReal x795=(r01*sj4);
IkReal x796=((4.0)*sj4);
IkReal x797=(r12*sj3);
IkReal x798=(cj4*r02);
IkReal x799=(cj2*sj1);
IkReal x800=(cj3*r10);
IkReal x801=((4.0)*cj3*r11);
IkReal x802=((4.0)*r10*x793);
IkReal x803=((12.0)*sj4*x797);
IkReal x804=(x796*x797);
IkReal x805=(r00*x794*x796);
IkReal x806=(r00*x796*x799);
IkReal x807=((12.0)*x798*x799);
IkReal x808=((12.0)*x794*x798);
IkReal x809=((4.0)*x798*x799);
IkReal x810=((4.0)*x794*x798);
IkReal x811=(x801+x802);
IkReal x812=(x805+x806);
IkReal x813=(x808+x807+x803);
IkReal x814=(x810+x809+x804);
IkReal x815=((((8.0)*x794*x795))+(((8.0)*x800))+(((8.0)*x795*x799))+(((-8.0)*r11*x793)));
j5evalpoly[0]=((((htj5*htj5*htj5)*(((((16.0)*x800))+(((16.0)*x794*x795))+(((-16.0)*r11*x793))+(((16.0)*x795*x799))))))+(((htj5*htj5)*(((((-1.0)*x813))+(((-1.0)*x812))+x811))))+((x815*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x812))+(((-1.0)*x814))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x811))+(((-1.0)*x814))+x812))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x811))+(((-1.0)*x813))+x812))))+((htj5*x815))+x811);
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x816=(cj5*sj4);
IkReal x817=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x817))+(((-1.0)*r00*x816)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x817))+((r10*x816))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x817))+(((-1.0)*r00*x816))))+IKsqr(((((-1.0)*r11*x817))+((r10*x816))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x817))+(((-1.0)*r00*x816))), ((((-1.0)*r11*x817))+((r10*x816))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x818=IKcos(j0);
IkReal x819=IKsin(j0);
IkReal x820=(cj3*sj4);
IkReal x821=((0.39225)*cj1);
IkReal x822=((1.0)*cj5);
IkReal x823=(cj3*r11);
IkReal x824=(cj4*r10);
IkReal x825=(cj4*r00);
IkReal x826=((1.0)*sj1);
IkReal x827=(cj3*sj5);
IkReal x828=(r11*sj5);
IkReal x829=(r01*sj3);
IkReal x830=(cj4*sj5);
IkReal x831=(cj5*r11);
IkReal x832=(r00*sj5);
IkReal x833=(sj3*sj4);
IkReal x834=((0.425)*sj1);
IkReal x835=(r10*sj5);
IkReal x836=((1.0)*cj4);
IkReal x837=((0.39225)*sj1);
IkReal x838=(sj2*x819);
IkReal x839=(cj1*x818);
IkReal x840=(cj2*x819);
IkReal x841=(cj2*x818);
IkReal x842=(sj2*x818);
evalcond[0]=((((-1.0)*r12*x836))+x818+(((-1.0)*r10*sj4*x822))+((sj4*x828)));
evalcond[1]=((((-1.0)*r02*x836))+(((-1.0)*r00*sj4*x822))+((r01*sj4*sj5))+(((-1.0)*x819)));
evalcond[2]=(((x818*x834))+((x821*x842))+(((-0.09465)*cj5*r01))+((x837*x841))+(((-1.0)*px))+(((-0.10915)*x819))+(((-0.09465)*x832)));
evalcond[3]=(((x819*x834))+((x821*x838))+((x837*x840))+(((-1.0)*py))+(((-0.09465)*x831))+(((-0.09465)*x835))+(((0.10915)*x818)));
evalcond[4]=((((-1.0)*x826*x842))+((cj5*x829))+((cj4*r01*x827))+(((-1.0)*cj3*x822*x825))+((sj3*x832))+((cj2*x839))+((r02*x820)));
evalcond[5]=(((cj1*x840))+((r12*x820))+(((-1.0)*x826*x838))+((x823*x830))+(((-1.0)*cj3*x822*x824))+((sj3*x831))+((sj3*x835)));
evalcond[6]=((((-1.0)*sj2*x839))+(((-1.0)*x826*x841))+((r02*x833))+(((-1.0)*cj3*r01*x822))+((x829*x830))+(((-1.0)*r00*x827))+(((-1.0)*sj3*x822*x825)));
evalcond[7]=((((-1.0)*x822*x823))+(((-1.0)*x826*x840))+(((-1.0)*cj1*x838))+(((-1.0)*r10*x827))+((r12*x833))+(((-1.0)*sj3*x822*x824))+((cj4*sj3*x828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x843=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x843);
rxp1_0=(pz*r11);
rxp1_1=(r01*x843);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x844=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x844);
rxp1_0=(pz*r11);
rxp1_1=(r01*x844);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x845=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x845);
rxp1_0=(pz*r11);
rxp1_1=(r01*x845);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x846=IKPowWithIntegerCheck(r22,-1);
if(!x846.valid){
continue;
}
sj4array[0]=((-1.0)*(x846.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x847=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x847);
rxp1_0=(pz*r11);
rxp1_1=(r01*x847);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x849 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x849.valid){
continue;
}
IkReal x848=x849.value;
j5array[0]=((-1.0)*x848);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x848)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x850=(cj5*sj4);
IkReal x851=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x850))+((r01*x851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x850))+(((-1.0)*r11*x851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x850))+((r01*x851))))+IKsqr((((r10*x850))+(((-1.0)*r11*x851))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x850))+((r01*x851))), (((r10*x850))+(((-1.0)*r11*x851))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x852=IKcos(j0);
IkReal x853=IKsin(j0);
IkReal x854=(cj5*r01);
IkReal x855=(sj1*sj2);
IkReal x856=(sj4*sj5);
IkReal x857=(cj1*cj2);
IkReal x858=(cj5*r11);
IkReal x859=((0.425)*sj1);
IkReal x860=(r00*sj5);
IkReal x861=(r10*sj5);
IkReal x862=((1.0)*x853);
IkReal x863=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x863))+((r11*x856))+x852);
evalcond[1]=((((-1.0)*x862))+(((-1.0)*r00*x863))+((r01*x856)));
evalcond[2]=((((-1.0)*x852*x855))+((x852*x857))+x854+x860);
evalcond[3]=(x858+x861+((x853*x857))+(((-1.0)*x855*x862)));
evalcond[4]=((((-0.09465)*x854))+(((-0.09465)*x860))+(((-1.0)*px))+((x852*x859))+(((-0.10915)*x853)));
evalcond[5]=((((-0.09465)*x858))+(((-0.09465)*x861))+(((0.10915)*x852))+(((-1.0)*py))+((x853*x859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x864=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x864);
rxp1_0=(pz*r11);
rxp1_1=(r01*x864);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x865=IKPowWithIntegerCheck(r22,-1);
if(!x865.valid){
continue;
}
sj4array[0]=((x865.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x866=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x866);
rxp1_0=(pz*r11);
rxp1_1=(r01*x866);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x868 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x868.valid){
continue;
}
IkReal x867=x868.value;
j5array[0]=((-1.0)*x867);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x867)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x869=(cj5*sj4);
IkReal x870=(sj4*sj5);
if( IKabs((((r01*x870))+(((-1.0)*r00*x869)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x869))+(((-1.0)*r11*x870)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x870))+(((-1.0)*r00*x869))))+IKsqr((((r10*x869))+(((-1.0)*r11*x870))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x870))+(((-1.0)*r00*x869))), (((r10*x869))+(((-1.0)*r11*x870))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x871=IKcos(j0);
IkReal x872=IKsin(j0);
IkReal x873=(sj1*sj2);
IkReal x874=(sj4*sj5);
IkReal x875=(cj1*cj2);
IkReal x876=(cj5*r11);
IkReal x877=((1.0)*sj5);
IkReal x878=((0.425)*sj1);
IkReal x879=((0.09465)*sj5);
IkReal x880=((1.0)*cj5);
IkReal x881=((1.0)*x872);
evalcond[0]=(((r11*x874))+x871+(((-1.0)*r10*sj4*x880)));
evalcond[1]=((((-1.0)*r00*sj4*x880))+((r01*x874))+(((-1.0)*x881)));
evalcond[2]=(((x871*x875))+(((-1.0)*r00*x877))+(((-1.0)*x871*x873))+(((-1.0)*r01*x880)));
evalcond[3]=(((x872*x875))+(((-1.0)*x873*x881))+(((-1.0)*x876))+(((-1.0)*r10*x877)));
evalcond[4]=(((x871*x878))+(((-0.09465)*cj5*r01))+(((-1.0)*r00*x879))+(((-1.0)*px))+(((-0.10915)*x872)));
evalcond[5]=(((x872*x878))+(((-0.09465)*x876))+(((-1.0)*py))+(((0.10915)*x871))+(((-1.0)*r10*x879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x882=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x882);
rxp1_0=(pz*r11);
rxp1_1=(r01*x882);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x883=IKPowWithIntegerCheck(r22,-1);
if(!x883.valid){
continue;
}
sj4array[0]=((-1.0)*(x883.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x884=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x884);
rxp1_0=(pz*r11);
rxp1_1=(r01*x884);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x886 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x886.valid){
continue;
}
IkReal x885=x886.value;
j5array[0]=((-1.0)*x885);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x885)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x887=(cj5*sj4);
IkReal x888=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x887))+((r01*x888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x888))+((r10*x887)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x887))+((r01*x888))))+IKsqr(((((-1.0)*r11*x888))+((r10*x887))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x887))+((r01*x888))), ((((-1.0)*r11*x888))+((r10*x887))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x889=IKcos(j0);
IkReal x890=IKsin(j0);
IkReal x891=(cj1*sj2);
IkReal x892=(sj4*sj5);
IkReal x893=(cj5*r11);
IkReal x894=((1.0)*sj5);
IkReal x895=(cj2*sj1);
IkReal x896=((0.425)*sj1);
IkReal x897=((0.09465)*sj5);
IkReal x898=((1.0)*cj5);
IkReal x899=((0.39225)*x890);
IkReal x900=((1.0)*x889);
IkReal x901=((1.0)*x890);
IkReal x902=((0.39225)*x889);
evalcond[0]=((((-1.0)*r10*sj4*x898))+((r11*x892))+x889);
evalcond[1]=((((-1.0)*r00*sj4*x898))+((r01*x892))+(((-1.0)*x901)));
evalcond[2]=((((-1.0)*x891*x900))+(((-1.0)*x895*x900))+(((-1.0)*r01*x898))+(((-1.0)*r00*x894)));
evalcond[3]=((((-1.0)*x891*x901))+(((-1.0)*x895*x901))+(((-1.0)*x893))+(((-1.0)*r10*x894)));
evalcond[4]=(((x895*x902))+((x891*x902))+(((-0.09465)*cj5*r01))+(((-1.0)*px))+(((-0.10915)*x890))+((x889*x896))+(((-1.0)*r00*x897)));
evalcond[5]=(((x895*x899))+(((-0.09465)*x893))+(((-1.0)*py))+(((-1.0)*r10*x897))+(((0.10915)*x889))+((x890*x896))+((x891*x899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x903=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x903);
rxp1_0=(pz*r11);
rxp1_1=(r01*x903);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x904=IKPowWithIntegerCheck(r22,-1);
if(!x904.valid){
continue;
}
sj4array[0]=((x904.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x905=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x905);
rxp1_0=(pz*r11);
rxp1_1=(r01*x905);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
IkReal x906=x907.value;
j5array[0]=((-1.0)*x906);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x906)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x908=(cj5*sj4);
IkReal x909=(sj4*sj5);
if( IKabs((((r01*x909))+(((-1.0)*r00*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x909))+((r10*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x909))+(((-1.0)*r00*x908))))+IKsqr(((((-1.0)*r11*x909))+((r10*x908))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x909))+(((-1.0)*r00*x908))), ((((-1.0)*r11*x909))+((r10*x908))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x910=IKcos(j0);
IkReal x911=IKsin(j0);
IkReal x912=(cj1*sj2);
IkReal x913=(cj5*r01);
IkReal x914=(sj4*sj5);
IkReal x915=(cj2*sj1);
IkReal x916=((0.425)*sj1);
IkReal x917=(r00*sj5);
IkReal x918=(cj5*r11);
IkReal x919=(r10*sj5);
IkReal x920=((0.39225)*x911);
IkReal x921=((1.0)*x910);
IkReal x922=((1.0)*x911);
IkReal x923=((1.0)*cj5*sj4);
IkReal x924=((0.39225)*x910);
evalcond[0]=((((-1.0)*r10*x923))+((r11*x914))+x910);
evalcond[1]=((((-1.0)*x922))+(((-1.0)*r00*x923))+((r01*x914)));
evalcond[2]=((((-1.0)*x912*x921))+(((-1.0)*x915*x921))+x913+x917);
evalcond[3]=((((-1.0)*x912*x922))+(((-1.0)*x915*x922))+x919+x918);
evalcond[4]=(((x915*x924))+((x910*x916))+(((-0.10915)*x911))+(((-0.09465)*x913))+(((-0.09465)*x917))+(((-1.0)*px))+((x912*x924)));
evalcond[5]=(((x915*x920))+(((0.10915)*x910))+(((-0.09465)*x919))+(((-0.09465)*x918))+((x911*x916))+(((-1.0)*py))+((x912*x920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x925=IKPowWithIntegerCheck(cj3,-1);
if(!x925.valid){
continue;
}
CheckValue<IkReal> x926=IKPowWithIntegerCheck(r22,-1);
if(!x926.valid){
continue;
}
sj4array[0]=((-1.0)*(x925.value)*(x926.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x927=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x927);
rxp1_0=(pz*r11);
rxp1_1=(r01*x927);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x928=((4.0)*r01);
IkReal x929=((16.0)*r00);
IkReal x930=(cj3*sj2);
IkReal x931=((8.0)*r00);
IkReal x932=(cj2*cj3);
IkReal x933=(cj4*r01);
IkReal x934=((16.0)*cj1);
IkReal x935=((8.0)*sj1);
IkReal x936=((16.0)*sj1);
IkReal x937=((8.0)*cj1);
IkReal x938=(sj2*sj3);
IkReal x939=(cj2*sj3);
IkReal x940=(sj1*x939);
IkReal x941=((4.0)*cj4*r00);
IkReal x942=(((x928*x940))+((sj1*x928*x930))+((sj1*x938*x941))+((cj1*x928*x938)));
IkReal x943=(((cj1*x928*x932))+((cj1*x939*x941))+((sj1*x932*x941))+((cj1*x930*x941)));
IkReal x944=((((-1.0)*x942))+x943);
IkReal x945=(((x932*x933*x935))+((x930*x933*x937))+((cj1*x931*x938))+((sj1*x930*x931))+((x931*x940))+(((-1.0)*x933*x935*x938))+((x933*x937*x939))+(((-1.0)*cj1*x931*x932)));
IkReal x946=((((-1.0)*x943))+x942);
op[0]=x944;
op[1]=x945;
op[2]=x944;
op[3]=(((x932*x933*x936))+((x930*x933*x934))+(((-1.0)*x933*x936*x938))+(((-1.0)*cj1*x929*x932))+((sj1*x929*x930))+((x933*x934*x939))+((cj1*x929*x938))+((x929*x940)));
op[4]=x946;
op[5]=x945;
op[6]=x946;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x947=(cj5*sj4);
IkReal x948=(sj4*sj5);
if( IKabs((((r01*x948))+(((-1.0)*r00*x947)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x948))+((r10*x947)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x948))+(((-1.0)*r00*x947))))+IKsqr(((((-1.0)*r11*x948))+((r10*x947))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x948))+(((-1.0)*r00*x947))), ((((-1.0)*r11*x948))+((r10*x947))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x949=IKcos(j0);
IkReal x950=IKsin(j0);
IkReal x951=((0.39225)*cj1);
IkReal x952=((1.0)*cj5);
IkReal x953=(cj3*r11);
IkReal x954=(cj4*r10);
IkReal x955=(cj4*r00);
IkReal x956=((1.0)*sj1);
IkReal x957=(cj3*sj5);
IkReal x958=(r11*sj5);
IkReal x959=(r01*sj3);
IkReal x960=(cj5*r11);
IkReal x961=(cj4*sj5);
IkReal x962=(r00*sj5);
IkReal x963=((0.425)*sj1);
IkReal x964=(r10*sj5);
IkReal x965=((0.39225)*sj1);
IkReal x966=(sj2*x950);
IkReal x967=(cj1*x949);
IkReal x968=(cj2*x950);
IkReal x969=(cj2*x949);
IkReal x970=(sj2*x949);
evalcond[0]=(((sj4*x958))+(((-1.0)*r10*sj4*x952))+x949);
evalcond[1]=((((-1.0)*x950))+((r01*sj4*sj5))+(((-1.0)*r00*sj4*x952)));
evalcond[2]=(((cj5*x959))+(((-1.0)*x956*x970))+((cj2*x967))+((cj4*r01*x957))+((sj3*x962))+(((-1.0)*cj3*x952*x955)));
evalcond[3]=(((cj1*x968))+(((-1.0)*x956*x966))+((sj3*x960))+((sj3*x964))+(((-1.0)*cj3*x952*x954))+((x953*x961)));
evalcond[4]=((((-1.0)*cj3*r01*x952))+(((-1.0)*x956*x969))+(((-1.0)*sj2*x967))+(((-1.0)*sj3*x952*x955))+((x959*x961))+(((-1.0)*r00*x957)));
evalcond[5]=((((-1.0)*cj1*x966))+(((-1.0)*x956*x968))+(((-1.0)*sj3*x952*x954))+(((-1.0)*x952*x953))+((cj4*sj3*x958))+(((-1.0)*r10*x957)));
evalcond[6]=((((-0.09465)*cj5*r01))+(((-0.10915)*x950))+((x949*x963))+(((-1.0)*px))+((x965*x969))+((x951*x970))+(((-0.09465)*x962)));
evalcond[7]=(((x951*x966))+(((-1.0)*py))+((x965*x968))+(((0.10915)*x949))+(((-0.09465)*x960))+(((-0.09465)*x964))+((x950*x963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x971=IKPowWithIntegerCheck(r22,-1);
if(!x971.valid){
continue;
}
CheckValue<IkReal> x972=IKPowWithIntegerCheck(sj3,-1);
if(!x972.valid){
continue;
}
sj4array[0]=((-1.0)*(x971.value)*(x972.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+((cj3*r22*(IKsin(j4))))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x973=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x973);
rxp1_0=(pz*r11);
rxp1_1=(r01*x973);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x974=((4.0)*r01);
IkReal x975=((16.0)*r00);
IkReal x976=(cj3*sj2);
IkReal x977=((8.0)*r00);
IkReal x978=(cj2*cj3);
IkReal x979=(cj4*r01);
IkReal x980=((16.0)*cj1);
IkReal x981=((8.0)*sj1);
IkReal x982=((16.0)*sj1);
IkReal x983=((8.0)*cj1);
IkReal x984=(sj2*sj3);
IkReal x985=(cj2*sj3);
IkReal x986=(sj1*x985);
IkReal x987=((4.0)*cj4*r00);
IkReal x988=(((cj1*x974*x984))+((sj1*x984*x987))+((x974*x986))+((sj1*x974*x976)));
IkReal x989=(((cj1*x974*x978))+((cj1*x985*x987))+((sj1*x978*x987))+((cj1*x976*x987)));
IkReal x990=((((-1.0)*x988))+x989);
IkReal x991=(((x977*x986))+((x978*x979*x981))+((x976*x979*x983))+((sj1*x976*x977))+((cj1*x977*x984))+(((-1.0)*x979*x981*x984))+((x979*x983*x985))+(((-1.0)*cj1*x977*x978)));
IkReal x992=((((-1.0)*x989))+x988);
op[0]=x990;
op[1]=x991;
op[2]=x990;
op[3]=(((x979*x980*x985))+((x975*x986))+((x978*x979*x982))+((x976*x979*x980))+((cj1*x975*x984))+(((-1.0)*x979*x982*x984))+((sj1*x975*x976))+(((-1.0)*cj1*x975*x978)));
op[4]=x992;
op[5]=x991;
op[6]=x992;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x993=(cj5*sj4);
IkReal x994=(sj4*sj5);
if( IKabs((((r01*x994))+(((-1.0)*r00*x993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x993))+(((-1.0)*r11*x994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x994))+(((-1.0)*r00*x993))))+IKsqr((((r10*x993))+(((-1.0)*r11*x994))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x994))+(((-1.0)*r00*x993))), (((r10*x993))+(((-1.0)*r11*x994))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x995=IKcos(j0);
IkReal x996=IKsin(j0);
IkReal x997=((0.39225)*cj1);
IkReal x998=((1.0)*cj5);
IkReal x999=(cj3*r11);
IkReal x1000=(cj4*r10);
IkReal x1001=(cj4*r00);
IkReal x1002=((1.0)*sj1);
IkReal x1003=(cj3*sj5);
IkReal x1004=(r11*sj5);
IkReal x1005=(r01*sj3);
IkReal x1006=(cj5*r11);
IkReal x1007=(cj4*sj5);
IkReal x1008=(r00*sj5);
IkReal x1009=((0.425)*sj1);
IkReal x1010=(r10*sj5);
IkReal x1011=((0.39225)*sj1);
IkReal x1012=(sj2*x996);
IkReal x1013=(cj1*x995);
IkReal x1014=(cj2*x996);
IkReal x1015=(cj2*x995);
IkReal x1016=(sj2*x995);
evalcond[0]=(((sj4*x1004))+(((-1.0)*r10*sj4*x998))+x995);
evalcond[1]=((((-1.0)*x996))+((r01*sj4*sj5))+(((-1.0)*r00*sj4*x998)));
evalcond[2]=(((cj2*x1013))+((cj4*r01*x1003))+((cj5*x1005))+((sj3*x1008))+(((-1.0)*cj3*x1001*x998))+(((-1.0)*x1002*x1016)));
evalcond[3]=(((x1007*x999))+((sj3*x1006))+((sj3*x1010))+((cj1*x1014))+(((-1.0)*cj3*x1000*x998))+(((-1.0)*x1002*x1012)));
evalcond[4]=((((-1.0)*cj3*r01*x998))+(((-1.0)*sj2*x1013))+(((-1.0)*r00*x1003))+((x1005*x1007))+(((-1.0)*sj3*x1001*x998))+(((-1.0)*x1002*x1015)));
evalcond[5]=((((-1.0)*r10*x1003))+((cj4*sj3*x1004))+(((-1.0)*sj3*x1000*x998))+(((-1.0)*cj1*x1012))+(((-1.0)*x998*x999))+(((-1.0)*x1002*x1014)));
evalcond[6]=((((-0.09465)*cj5*r01))+((x1009*x995))+(((-1.0)*px))+(((-0.10915)*x996))+(((-0.09465)*x1008))+((x1011*x1015))+((x1016*x997)));
evalcond[7]=(((x1009*x996))+(((0.10915)*x995))+(((-1.0)*py))+(((-0.09465)*x1010))+(((-0.09465)*x1006))+((x1012*x997))+((x1011*x1014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1019 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1019.valid){
continue;
}
IkReal x1017=((1.0)*(x1019.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1020.valid){
continue;
}
if( (((x1020.value)*(((((0.39225)*cj1*cj2))+(((0.425)*cj1))+(((-1.0)*pz))+(((-0.39225)*sj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((x1020.value)*(((((0.39225)*cj1*cj2))+(((0.425)*cj1))+(((-1.0)*pz))+(((-0.39225)*sj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1018=IKasin(((x1020.value)*(((((0.39225)*cj1*cj2))+(((0.425)*cj1))+(((-1.0)*pz))+(((-0.39225)*sj1*sj2))))));
j5array[0]=((((-1.0)*x1017))+(((-1.0)*x1018)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1018+(((-1.0)*x1017)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1021=cj5*cj5;
IkReal x1022=r21*r21;
IkReal x1023=((1.0)*cj3);
IkReal x1024=(cj3*x1021);
IkReal x1025=((((-1.0)*x1022*x1023))+(((-1.0)*x1021*x1023*(r20*r20)))+((x1022*x1024))+(((-1.0)*x1023*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1025;
j4eval[1]=IKsign(x1025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1026=r21*r21;
IkReal x1027=cj5*cj5;
IkReal x1028=((1.0)*sj3);
IkReal x1029=(sj3*x1027);
IkReal x1030=((((-1.0)*x1026*x1028))+((x1026*x1029))+(((-1.0)*x1028*(r22*r22)))+(((-1.0)*x1027*x1028*(r20*r20)))+(((2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1030;
j4eval[1]=IKsign(x1030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1031=cj2*cj2;
IkReal x1032=cj1*cj1;
IkReal x1033=((133365000.0)*cj2);
IkReal x1034=((12.4570625281677)*cj2);
IkReal x1035=(cj1*sj1*sj2);
IkReal x1036=(x1031*x1032);
j0eval[0]=((7.19369221392727)+(((5.74856797255738)*x1031))+x1034+(((-1.0)*x1032))+(((-1.0)*x1032*x1034))+(((11.4971359451148)*cj2*x1035))+(((-11.4971359451148)*x1036))+(((12.4570625281677)*x1035)));
j0eval[1]=IKsign(((77015489.0)+(((133365000.0)*x1035))+x1033+(((-1.0)*x1032*x1033))+(((-10705975.0)*x1032))+(((123088050.0)*cj2*x1035))+(((61544025.0)*x1031))+(((-123088050.0)*x1036))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1037=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1037;
j0eval[1]=IKsign(x1037);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1038=r21*r21;
IkReal x1039=cj5*cj5;
IkReal x1040=(cj1*sj2);
IkReal x1041=((1.0)*r22);
IkReal x1042=(cj5*r20);
IkReal x1043=(cj2*sj1);
IkReal x1044=(r21*sj5);
IkReal x1045=(((x1038*x1039))+(((-1.0)*x1038))+(((2.0)*x1042*x1044))+(((-1.0)*r22*x1041))+(((-1.0)*x1039*(r20*r20))));
j4eval[0]=x1045;
j4eval[1]=((IKabs((((x1042*x1043))+(((-1.0)*x1040*x1044))+((x1040*x1042))+(((-1.0)*x1043*x1044)))))+(IKabs(((((-1.0)*x1041*x1043))+(((-1.0)*x1040*x1041))))));
j4eval[2]=IKsign(x1045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1046=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1046;
j4eval[1]=IKsign(x1046);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1047=((1.0)*cj5);
IkReal x1048=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1047)));
j4eval[0]=x1048;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1047))))));
j4eval[2]=IKsign(x1048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1049=cj5*cj5;
IkReal x1050=((1.0)*r20);
IkReal x1051=(r01*r21);
IkReal x1052=(r21*sj5);
IkReal x1053=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x1051))+(((-1.0)*r00*x1049*x1050))+((x1049*x1051))+((cj5*r00*x1052)));
j4eval[0]=x1053;
j4eval[1]=((IKabs((((cj0*x1052))+(((-1.0)*cj0*cj5*x1050)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1054=cj5*cj5;
IkReal x1055=((1.0)*r20);
IkReal x1056=(r01*r21);
IkReal x1057=(r21*sj5);
CheckValue<IkReal> x1058 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x1057))+(((-1.0)*cj0*cj5*x1055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1058.valid){
continue;
}
CheckValue<IkReal> x1059=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x1054*x1056))+(((-1.0)*r00*x1054*x1055))+(((-1.0)*x1056))+((cj5*r00*x1057)))),-1);
if(!x1059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1058.value)+(((1.5707963267949)*(x1059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1060=IKcos(j4);
IkReal x1061=IKsin(j4);
IkReal x1062=(cj5*r00);
IkReal x1063=(cj5*r10);
IkReal x1064=(cj5*r20);
IkReal x1065=((1.0)*x1060);
IkReal x1066=((1.0)*x1061);
IkReal x1067=(sj5*x1060);
IkReal x1068=(sj5*x1061);
evalcond[0]=(((r22*x1061))+((r21*x1067))+(((-1.0)*x1064*x1065)));
evalcond[1]=((((-1.0)*r22*x1065))+((r21*x1068))+(((-1.0)*x1064*x1066)));
evalcond[2]=(cj0+(((-1.0)*x1062*x1065))+((r01*x1067))+((r02*x1061)));
evalcond[3]=((((-1.0)*x1063*x1065))+((r12*x1061))+sj0+((r11*x1067)));
evalcond[4]=((((-1.0)*x1063*x1066))+cj0+(((-1.0)*r12*x1065))+((r11*x1068)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1065))+(((-1.0)*x1062*x1066))+((r01*x1068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1069=((1.0)*cj5);
CheckValue<IkReal> x1070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1069)))),-1);
if(!x1070.valid){
continue;
}
CheckValue<IkReal> x1071 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1069)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1070.value)))+(x1071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1072=IKcos(j4);
IkReal x1073=IKsin(j4);
IkReal x1074=(cj5*r00);
IkReal x1075=(cj5*r10);
IkReal x1076=(cj5*r20);
IkReal x1077=((1.0)*x1072);
IkReal x1078=((1.0)*x1073);
IkReal x1079=(sj5*x1072);
IkReal x1080=(sj5*x1073);
evalcond[0]=((((-1.0)*x1076*x1077))+((r22*x1073))+((r21*x1079)));
evalcond[1]=((((-1.0)*x1076*x1078))+(((-1.0)*r22*x1077))+((r21*x1080)));
evalcond[2]=((((-1.0)*x1074*x1077))+cj0+((r01*x1079))+((r02*x1073)));
evalcond[3]=((((-1.0)*x1075*x1077))+sj0+((r12*x1073))+((r11*x1079)));
evalcond[4]=((((-1.0)*x1075*x1078))+cj0+(((-1.0)*r12*x1077))+((r11*x1080)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1074*x1078))+(((-1.0)*r02*x1077))+((r01*x1080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1081 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1081.valid){
continue;
}
CheckValue<IkReal> x1082=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1081.value)+(((1.5707963267949)*(x1082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1083=IKcos(j4);
IkReal x1084=IKsin(j4);
IkReal x1085=(cj5*r00);
IkReal x1086=(cj5*r10);
IkReal x1087=(cj5*r20);
IkReal x1088=((1.0)*x1083);
IkReal x1089=((1.0)*x1084);
IkReal x1090=(sj5*x1083);
IkReal x1091=(sj5*x1084);
evalcond[0]=(((r21*x1090))+(((-1.0)*x1087*x1088))+((r22*x1084)));
evalcond[1]=(((r21*x1091))+(((-1.0)*x1087*x1089))+(((-1.0)*r22*x1088)));
evalcond[2]=(((r01*x1090))+cj0+(((-1.0)*x1085*x1088))+((r02*x1084)));
evalcond[3]=(sj0+((r12*x1084))+((r11*x1090))+(((-1.0)*x1086*x1088)));
evalcond[4]=(cj0+((r11*x1091))+(((-1.0)*x1086*x1089))+(((-1.0)*r12*x1088)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1091))+(((-1.0)*r02*x1088))+(((-1.0)*x1085*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1092=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1092;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1093=((1.0)*cj5);
IkReal x1094=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1093)));
j4eval[0]=x1094;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1093))))));
j4eval[2]=IKsign(x1094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1095=((1.0)*cj5);
IkReal x1096=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1095)));
j4eval[0]=x1096;
j4eval[1]=IKsign(x1096);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1095))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1097=((1.0)*cj5);
CheckValue<IkReal> x1098 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1097)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1098.valid){
continue;
}
CheckValue<IkReal> x1099=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1097)))),-1);
if(!x1099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1098.value)+(((1.5707963267949)*(x1099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1100=IKcos(j4);
IkReal x1101=IKsin(j4);
IkReal x1102=((1.0)*sj0);
IkReal x1103=(cj5*r00);
IkReal x1104=(cj5*r10);
IkReal x1105=(cj5*r20);
IkReal x1106=((1.0)*x1100);
IkReal x1107=((1.0)*x1101);
IkReal x1108=(sj5*x1100);
IkReal x1109=(sj5*x1101);
evalcond[0]=(((r22*x1101))+((r21*x1108))+(((-1.0)*x1105*x1106)));
evalcond[1]=((((-1.0)*r22*x1106))+((r21*x1109))+(((-1.0)*x1105*x1107)));
evalcond[2]=((((-1.0)*r12*x1106))+cj0+(((-1.0)*x1104*x1107))+((r11*x1109)));
evalcond[3]=(((r02*x1101))+(((-1.0)*x1103*x1106))+((r01*x1108))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x1104*x1106))+((r12*x1101))+(((-1.0)*x1102))+((r11*x1108)));
evalcond[5]=((((-1.0)*x1103*x1107))+((r01*x1109))+(((-1.0)*r02*x1106))+(((-1.0)*x1102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1110=((1.0)*cj5);
CheckValue<IkReal> x1111 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1111.valid){
continue;
}
CheckValue<IkReal> x1112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1110))+(((-1.0)*r00*sj5)))),-1);
if(!x1112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1111.value)+(((1.5707963267949)*(x1112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1113=IKcos(j4);
IkReal x1114=IKsin(j4);
IkReal x1115=((1.0)*sj0);
IkReal x1116=(cj5*r00);
IkReal x1117=(cj5*r10);
IkReal x1118=(cj5*r20);
IkReal x1119=((1.0)*x1113);
IkReal x1120=((1.0)*x1114);
IkReal x1121=(sj5*x1113);
IkReal x1122=(sj5*x1114);
evalcond[0]=(((r21*x1121))+((r22*x1114))+(((-1.0)*x1118*x1119)));
evalcond[1]=((((-1.0)*r22*x1119))+((r21*x1122))+(((-1.0)*x1118*x1120)));
evalcond[2]=((((-1.0)*r12*x1119))+cj0+(((-1.0)*x1117*x1120))+((r11*x1122)));
evalcond[3]=(((r01*x1121))+(((-1.0)*x1116*x1119))+(((-1.0)*cj0))+((r02*x1114)));
evalcond[4]=(((r12*x1114))+((r11*x1121))+(((-1.0)*x1115))+(((-1.0)*x1117*x1119)));
evalcond[5]=(((r01*x1122))+(((-1.0)*x1116*x1120))+(((-1.0)*r02*x1119))+(((-1.0)*x1115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1123 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1123.valid){
continue;
}
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1123.value)+(((1.5707963267949)*(x1124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1125=IKcos(j4);
IkReal x1126=IKsin(j4);
IkReal x1127=((1.0)*sj0);
IkReal x1128=(cj5*r00);
IkReal x1129=(cj5*r10);
IkReal x1130=(cj5*r20);
IkReal x1131=((1.0)*x1125);
IkReal x1132=((1.0)*x1126);
IkReal x1133=(sj5*x1125);
IkReal x1134=(sj5*x1126);
evalcond[0]=((((-1.0)*x1130*x1131))+((r21*x1133))+((r22*x1126)));
evalcond[1]=((((-1.0)*x1130*x1132))+((r21*x1134))+(((-1.0)*r22*x1131)));
evalcond[2]=((((-1.0)*r12*x1131))+cj0+((r11*x1134))+(((-1.0)*x1129*x1132)));
evalcond[3]=(((r01*x1133))+(((-1.0)*x1128*x1131))+((r02*x1126))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x1127))+((r12*x1126))+((r11*x1133))+(((-1.0)*x1129*x1131)));
evalcond[5]=(((r01*x1134))+(((-1.0)*x1127))+(((-1.0)*r02*x1131))+(((-1.0)*x1128*x1132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1135=IKsin(j0);
IkReal x1136=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x1135))+(((0.425)*x1136)));
evalcond[1]=((((0.10915)*x1136))+(((-1.0)*py))+(((0.425)*x1135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1137=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1137;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1138=((1.0)*cj5);
IkReal x1139=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1138)));
j4eval[0]=x1139;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1138)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1140=((1.0)*cj5);
IkReal x1141=((((-1.0)*r01*x1140))+(((-1.0)*r00*sj5)));
j4eval[0]=x1141;
j4eval[1]=IKsign(x1141);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1140))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1142=((1.0)*cj5);
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x1142))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
CheckValue<IkReal> x1144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1142))+(((-1.0)*r00*sj5)))),-1);
if(!x1144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1143.value)+(((1.5707963267949)*(x1144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1145=IKcos(j4);
IkReal x1146=IKsin(j4);
IkReal x1147=((1.0)*sj0);
IkReal x1148=(cj5*r00);
IkReal x1149=(cj5*r10);
IkReal x1150=(cj5*r20);
IkReal x1151=((1.0)*x1145);
IkReal x1152=((1.0)*x1146);
IkReal x1153=(sj5*x1145);
IkReal x1154=(sj5*x1146);
evalcond[0]=(((r22*x1146))+((r21*x1153))+(((-1.0)*x1150*x1151)));
evalcond[1]=((((-1.0)*r22*x1151))+((r21*x1154))+(((-1.0)*x1150*x1152)));
evalcond[2]=(((r11*x1154))+(((-1.0)*x1149*x1152))+cj0+(((-1.0)*r12*x1151)));
evalcond[3]=(((r02*x1146))+(((-1.0)*x1148*x1151))+(((-1.0)*cj0))+((r01*x1153)));
evalcond[4]=(((r11*x1153))+(((-1.0)*x1149*x1151))+(((-1.0)*x1147))+((r12*x1146)));
evalcond[5]=((((-1.0)*x1147))+(((-1.0)*r02*x1151))+(((-1.0)*x1148*x1152))+((r01*x1154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1155=((1.0)*cj5);
CheckValue<IkReal> x1156=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1155))+(((-1.0)*r00*sj5)))),-1);
if(!x1156.valid){
continue;
}
CheckValue<IkReal> x1157 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1156.value)))+(x1157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1158=IKcos(j4);
IkReal x1159=IKsin(j4);
IkReal x1160=((1.0)*sj0);
IkReal x1161=(cj5*r00);
IkReal x1162=(cj5*r10);
IkReal x1163=(cj5*r20);
IkReal x1164=((1.0)*x1158);
IkReal x1165=((1.0)*x1159);
IkReal x1166=(sj5*x1158);
IkReal x1167=(sj5*x1159);
evalcond[0]=(((r22*x1159))+(((-1.0)*x1163*x1164))+((r21*x1166)));
evalcond[1]=((((-1.0)*x1163*x1165))+((r21*x1167))+(((-1.0)*r22*x1164)));
evalcond[2]=(cj0+(((-1.0)*x1162*x1165))+(((-1.0)*r12*x1164))+((r11*x1167)));
evalcond[3]=(((r01*x1166))+((r02*x1159))+(((-1.0)*x1161*x1164))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x1159))+(((-1.0)*x1162*x1164))+((r11*x1166))+(((-1.0)*x1160)));
evalcond[5]=((((-1.0)*r02*x1164))+((r01*x1167))+(((-1.0)*x1160))+(((-1.0)*x1161*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1168 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1168.valid){
continue;
}
CheckValue<IkReal> x1169=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1168.value)+(((1.5707963267949)*(x1169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1170=IKcos(j4);
IkReal x1171=IKsin(j4);
IkReal x1172=((1.0)*sj0);
IkReal x1173=(cj5*r00);
IkReal x1174=(cj5*r10);
IkReal x1175=(cj5*r20);
IkReal x1176=((1.0)*x1170);
IkReal x1177=((1.0)*x1171);
IkReal x1178=(sj5*x1170);
IkReal x1179=(sj5*x1171);
evalcond[0]=(((r21*x1178))+(((-1.0)*x1175*x1176))+((r22*x1171)));
evalcond[1]=(((r21*x1179))+(((-1.0)*r22*x1176))+(((-1.0)*x1175*x1177)));
evalcond[2]=(cj0+(((-1.0)*r12*x1176))+((r11*x1179))+(((-1.0)*x1174*x1177)));
evalcond[3]=(((r02*x1171))+(((-1.0)*x1173*x1176))+((r01*x1178))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x1171))+((r11*x1178))+(((-1.0)*x1172))+(((-1.0)*x1174*x1176)));
evalcond[5]=((((-1.0)*r02*x1176))+(((-1.0)*x1173*x1177))+((r01*x1179))+(((-1.0)*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1180=IKsin(j0);
IkReal x1181=IKcos(j0);
evalcond[0]=((((-0.10915)*x1180))+(((0.425)*x1181))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x1181))+(((0.425)*x1180))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1182=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1182;
j4eval[1]=IKsign(x1182);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1183=((1.0)*cj5);
IkReal x1184=((((-1.0)*r11*x1183))+(((-1.0)*r10*sj5)));
j4eval[0]=x1184;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1183))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1185=cj5*cj5;
IkReal x1186=((1.0)*r20);
IkReal x1187=(r01*r21);
IkReal x1188=(r21*sj5);
IkReal x1189=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x1185*x1186))+((x1185*x1187))+((cj5*r00*x1188))+(((-1.0)*x1187)));
j4eval[0]=x1189;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1188))+(((-1.0)*cj0*cj5*x1186))))));
j4eval[2]=IKsign(x1189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1190=cj5*cj5;
IkReal x1191=((1.0)*r20);
IkReal x1192=(r01*r21);
IkReal x1193=(r21*sj5);
CheckValue<IkReal> x1194=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x1190*x1191))+((cj5*r00*x1193))+(((-1.0)*x1192))+((x1190*x1192)))),-1);
if(!x1194.valid){
continue;
}
CheckValue<IkReal> x1195 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x1193))+(((-1.0)*cj0*cj5*x1191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1194.value)))+(x1195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1196=IKcos(j4);
IkReal x1197=IKsin(j4);
IkReal x1198=(cj5*r00);
IkReal x1199=(cj5*r10);
IkReal x1200=(cj5*r20);
IkReal x1201=((1.0)*x1196);
IkReal x1202=((1.0)*x1197);
IkReal x1203=(sj5*x1196);
IkReal x1204=(sj5*x1197);
evalcond[0]=(((r22*x1197))+((r21*x1203))+(((-1.0)*x1200*x1201)));
evalcond[1]=((((-1.0)*r22*x1201))+((r21*x1204))+(((-1.0)*x1200*x1202)));
evalcond[2]=(cj0+((r02*x1197))+((r01*x1203))+(((-1.0)*x1198*x1201)));
evalcond[3]=((((-1.0)*x1199*x1201))+sj0+((r11*x1203))+((r12*x1197)));
evalcond[4]=((((-1.0)*x1199*x1202))+cj0+((r11*x1204))+(((-1.0)*r12*x1201)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1201))+((r01*x1204))+(((-1.0)*x1198*x1202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1205=((1.0)*cj5);
CheckValue<IkReal> x1206=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1205)))),-1);
if(!x1206.valid){
continue;
}
CheckValue<IkReal> x1207 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1205)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1206.value)))+(x1207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1208=IKcos(j4);
IkReal x1209=IKsin(j4);
IkReal x1210=(cj5*r00);
IkReal x1211=(cj5*r10);
IkReal x1212=(cj5*r20);
IkReal x1213=((1.0)*x1208);
IkReal x1214=((1.0)*x1209);
IkReal x1215=(sj5*x1208);
IkReal x1216=(sj5*x1209);
evalcond[0]=((((-1.0)*x1212*x1213))+((r21*x1215))+((r22*x1209)));
evalcond[1]=((((-1.0)*r22*x1213))+(((-1.0)*x1212*x1214))+((r21*x1216)));
evalcond[2]=(cj0+((r01*x1215))+(((-1.0)*x1210*x1213))+((r02*x1209)));
evalcond[3]=(((r11*x1215))+sj0+((r12*x1209))+(((-1.0)*x1211*x1213)));
evalcond[4]=(((r11*x1216))+cj0+(((-1.0)*x1211*x1214))+(((-1.0)*r12*x1213)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1213))+((r01*x1216))+(((-1.0)*x1210*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1217 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1217.valid){
continue;
}
CheckValue<IkReal> x1218=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1217.value)+(((1.5707963267949)*(x1218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1219=IKcos(j4);
IkReal x1220=IKsin(j4);
IkReal x1221=(cj5*r00);
IkReal x1222=(cj5*r10);
IkReal x1223=(cj5*r20);
IkReal x1224=((1.0)*x1219);
IkReal x1225=((1.0)*x1220);
IkReal x1226=(sj5*x1219);
IkReal x1227=(sj5*x1220);
evalcond[0]=(((r22*x1220))+((r21*x1226))+(((-1.0)*x1223*x1224)));
evalcond[1]=(((r21*x1227))+(((-1.0)*r22*x1224))+(((-1.0)*x1223*x1225)));
evalcond[2]=(((r01*x1226))+cj0+(((-1.0)*x1221*x1224))+((r02*x1220)));
evalcond[3]=(sj0+(((-1.0)*x1222*x1224))+((r11*x1226))+((r12*x1220)));
evalcond[4]=(cj0+(((-1.0)*r12*x1224))+(((-1.0)*x1222*x1225))+((r11*x1227)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1227))+(((-1.0)*x1221*x1225))+(((-1.0)*r02*x1224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1228=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1228;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1229=((1.0)*cj5);
IkReal x1230=((((-1.0)*r01*x1229))+(((-1.0)*r00*sj5)));
j4eval[0]=x1230;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1229))))));
j4eval[2]=IKsign(x1230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1231=((1.0)*cj5);
IkReal x1232=((((-1.0)*r01*x1231))+(((-1.0)*r00*sj5)));
j4eval[0]=x1232;
j4eval[1]=IKsign(x1232);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1231))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1233=((1.0)*cj5);
CheckValue<IkReal> x1234 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x1233))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1234.valid){
continue;
}
CheckValue<IkReal> x1235=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1233))+(((-1.0)*r00*sj5)))),-1);
if(!x1235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1234.value)+(((1.5707963267949)*(x1235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1236=IKcos(j4);
IkReal x1237=IKsin(j4);
IkReal x1238=((1.0)*sj0);
IkReal x1239=(cj5*r00);
IkReal x1240=(cj5*r10);
IkReal x1241=(cj5*r20);
IkReal x1242=((1.0)*x1236);
IkReal x1243=((1.0)*x1237);
IkReal x1244=(sj5*x1236);
IkReal x1245=(sj5*x1237);
evalcond[0]=(((r22*x1237))+((r21*x1244))+(((-1.0)*x1241*x1242)));
evalcond[1]=((((-1.0)*r22*x1242))+((r21*x1245))+(((-1.0)*x1241*x1243)));
evalcond[2]=(cj0+(((-1.0)*r12*x1242))+(((-1.0)*x1240*x1243))+((r11*x1245)));
evalcond[3]=((((-1.0)*x1239*x1242))+((r01*x1244))+((r02*x1237))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x1238))+(((-1.0)*x1240*x1242))+((r11*x1244))+((r12*x1237)));
evalcond[5]=((((-1.0)*r02*x1242))+(((-1.0)*x1239*x1243))+(((-1.0)*x1238))+((r01*x1245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1246=((1.0)*cj5);
CheckValue<IkReal> x1247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1246)))),-1);
if(!x1247.valid){
continue;
}
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1247.value)))+(x1248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1249=IKcos(j4);
IkReal x1250=IKsin(j4);
IkReal x1251=((1.0)*sj0);
IkReal x1252=(cj5*r00);
IkReal x1253=(cj5*r10);
IkReal x1254=(cj5*r20);
IkReal x1255=((1.0)*x1249);
IkReal x1256=((1.0)*x1250);
IkReal x1257=(sj5*x1249);
IkReal x1258=(sj5*x1250);
evalcond[0]=(((r22*x1250))+((r21*x1257))+(((-1.0)*x1254*x1255)));
evalcond[1]=((((-1.0)*r22*x1255))+((r21*x1258))+(((-1.0)*x1254*x1256)));
evalcond[2]=(((r11*x1258))+(((-1.0)*r12*x1255))+(((-1.0)*x1253*x1256))+cj0);
evalcond[3]=(((r02*x1250))+(((-1.0)*x1252*x1255))+(((-1.0)*cj0))+((r01*x1257)));
evalcond[4]=((((-1.0)*x1251))+((r11*x1257))+(((-1.0)*x1253*x1255))+((r12*x1250)));
evalcond[5]=((((-1.0)*x1251))+(((-1.0)*x1252*x1256))+(((-1.0)*r02*x1255))+((r01*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1259 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1259.valid){
continue;
}
CheckValue<IkReal> x1260=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1259.value)+(((1.5707963267949)*(x1260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1261=IKcos(j4);
IkReal x1262=IKsin(j4);
IkReal x1263=((1.0)*sj0);
IkReal x1264=(cj5*r00);
IkReal x1265=(cj5*r10);
IkReal x1266=(cj5*r20);
IkReal x1267=((1.0)*x1261);
IkReal x1268=((1.0)*x1262);
IkReal x1269=(sj5*x1261);
IkReal x1270=(sj5*x1262);
evalcond[0]=(((r21*x1269))+((r22*x1262))+(((-1.0)*x1266*x1267)));
evalcond[1]=(((r21*x1270))+(((-1.0)*r22*x1267))+(((-1.0)*x1266*x1268)));
evalcond[2]=((((-1.0)*r12*x1267))+cj0+((r11*x1270))+(((-1.0)*x1265*x1268)));
evalcond[3]=((((-1.0)*x1264*x1267))+((r02*x1262))+(((-1.0)*cj0))+((r01*x1269)));
evalcond[4]=(((r11*x1269))+((r12*x1262))+(((-1.0)*x1265*x1267))+(((-1.0)*x1263)));
evalcond[5]=((((-1.0)*x1264*x1268))+(((-1.0)*r02*x1267))+((r01*x1270))+(((-1.0)*x1263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1271=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1271;
j4eval[1]=IKsign(x1271);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1272=((1.0)*cj5);
IkReal x1273=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1272)));
j4eval[0]=x1273;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1272)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1274=cj5*cj5;
IkReal x1275=((1.0)*r20);
IkReal x1276=(r01*r21);
IkReal x1277=(r21*sj5);
IkReal x1278=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x1274*x1275))+((x1274*x1276))+((cj5*r00*x1277))+(((-1.0)*x1276)));
j4eval[0]=x1278;
j4eval[1]=((IKabs((((cj0*x1277))+(((-1.0)*cj0*cj5*x1275)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1279=cj5*cj5;
IkReal x1280=((1.0)*r20);
IkReal x1281=(r01*r21);
IkReal x1282=(r21*sj5);
CheckValue<IkReal> x1283=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x1279*x1280))+(((-1.0)*x1281))+((x1279*x1281))+(((-1.0)*r02*r22))+((cj5*r00*x1282)))),-1);
if(!x1283.valid){
continue;
}
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x1282))+(((-1.0)*cj0*cj5*x1280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1283.value)))+(x1284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1285=IKcos(j4);
IkReal x1286=IKsin(j4);
IkReal x1287=(cj5*r00);
IkReal x1288=(cj5*r10);
IkReal x1289=(cj5*r20);
IkReal x1290=((1.0)*x1285);
IkReal x1291=((1.0)*x1286);
IkReal x1292=(sj5*x1285);
IkReal x1293=(sj5*x1286);
evalcond[0]=(((r21*x1292))+((r22*x1286))+(((-1.0)*x1289*x1290)));
evalcond[1]=(((r21*x1293))+(((-1.0)*x1289*x1291))+(((-1.0)*r22*x1290)));
evalcond[2]=(((r02*x1286))+(((-1.0)*x1287*x1290))+cj0+((r01*x1292)));
evalcond[3]=(sj0+(((-1.0)*x1288*x1290))+((r11*x1292))+((r12*x1286)));
evalcond[4]=(cj0+(((-1.0)*x1288*x1291))+(((-1.0)*r12*x1290))+((r11*x1293)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1287*x1291))+(((-1.0)*r02*x1290))+((r01*x1293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1294=((1.0)*cj5);
CheckValue<IkReal> x1295 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x1294))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1295.valid){
continue;
}
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1294)))),-1);
if(!x1296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1295.value)+(((1.5707963267949)*(x1296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1297=IKcos(j4);
IkReal x1298=IKsin(j4);
IkReal x1299=(cj5*r00);
IkReal x1300=(cj5*r10);
IkReal x1301=(cj5*r20);
IkReal x1302=((1.0)*x1297);
IkReal x1303=((1.0)*x1298);
IkReal x1304=(sj5*x1297);
IkReal x1305=(sj5*x1298);
evalcond[0]=(((r21*x1304))+(((-1.0)*x1301*x1302))+((r22*x1298)));
evalcond[1]=((((-1.0)*r22*x1302))+((r21*x1305))+(((-1.0)*x1301*x1303)));
evalcond[2]=(cj0+(((-1.0)*x1299*x1302))+((r02*x1298))+((r01*x1304)));
evalcond[3]=(sj0+(((-1.0)*x1300*x1302))+((r12*x1298))+((r11*x1304)));
evalcond[4]=(cj0+(((-1.0)*x1300*x1303))+((r11*x1305))+(((-1.0)*r12*x1302)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1299*x1303))+(((-1.0)*r02*x1302))+((r01*x1305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1306 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1306.valid){
continue;
}
CheckValue<IkReal> x1307=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1306.value)+(((1.5707963267949)*(x1307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1308=IKcos(j4);
IkReal x1309=IKsin(j4);
IkReal x1310=(cj5*r00);
IkReal x1311=(cj5*r10);
IkReal x1312=(cj5*r20);
IkReal x1313=((1.0)*x1308);
IkReal x1314=((1.0)*x1309);
IkReal x1315=(sj5*x1308);
IkReal x1316=(sj5*x1309);
evalcond[0]=(((r22*x1309))+((r21*x1315))+(((-1.0)*x1312*x1313)));
evalcond[1]=((((-1.0)*r22*x1313))+((r21*x1316))+(((-1.0)*x1312*x1314)));
evalcond[2]=(((r01*x1315))+cj0+(((-1.0)*x1310*x1313))+((r02*x1309)));
evalcond[3]=((((-1.0)*x1311*x1313))+sj0+((r11*x1315))+((r12*x1309)));
evalcond[4]=((((-1.0)*x1311*x1314))+cj0+((r11*x1316))+(((-1.0)*r12*x1313)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1316))+(((-1.0)*r02*x1313))+(((-1.0)*x1310*x1314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1317=IKcos(j0);
IkReal x1318=IKsin(j0);
evalcond[0]=((((-0.425)*x1317))+(((-0.10915)*x1318))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x1318))+(((0.10915)*x1317))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1319=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1319;
j4eval[1]=IKsign(x1319);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1320=((1.0)*cj5);
IkReal x1321=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1320)));
j4eval[0]=x1321;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1320)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1322=cj5*cj5;
IkReal x1323=((1.0)*r20);
IkReal x1324=(r01*r21);
IkReal x1325=(r21*sj5);
IkReal x1326=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x1324))+((x1322*x1324))+((cj5*r00*x1325))+(((-1.0)*r00*x1322*x1323)));
j4eval[0]=x1326;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x1323))+((cj0*x1325))))));
j4eval[2]=IKsign(x1326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1327=cj5*cj5;
IkReal x1328=((1.0)*r20);
IkReal x1329=(r01*r21);
IkReal x1330=(r21*sj5);
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x1330))+(((-1.0)*cj0*cj5*x1328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x1330))+(((-1.0)*r00*x1327*x1328))+(((-1.0)*x1329))+((x1327*x1329)))),-1);
if(!x1332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1331.value)+(((1.5707963267949)*(x1332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1333=IKcos(j4);
IkReal x1334=IKsin(j4);
IkReal x1335=(cj5*r00);
IkReal x1336=(cj5*r10);
IkReal x1337=(cj5*r20);
IkReal x1338=((1.0)*x1333);
IkReal x1339=((1.0)*x1334);
IkReal x1340=(sj5*x1333);
IkReal x1341=(sj5*x1334);
evalcond[0]=((((-1.0)*x1337*x1338))+((r22*x1334))+((r21*x1340)));
evalcond[1]=((((-1.0)*r22*x1338))+(((-1.0)*x1337*x1339))+((r21*x1341)));
evalcond[2]=((((-1.0)*x1335*x1338))+cj0+((r01*x1340))+((r02*x1334)));
evalcond[3]=(((r12*x1334))+sj0+(((-1.0)*x1336*x1338))+((r11*x1340)));
evalcond[4]=(cj0+(((-1.0)*x1336*x1339))+((r11*x1341))+(((-1.0)*r12*x1338)));
evalcond[5]=((((-1.0)*x1335*x1339))+(((-1.0)*sj0))+((r01*x1341))+(((-1.0)*r02*x1338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1342=((1.0)*cj5);
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1342)))),-1);
if(!x1343.valid){
continue;
}
CheckValue<IkReal> x1344 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1342)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1343.value)))+(x1344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1345=IKcos(j4);
IkReal x1346=IKsin(j4);
IkReal x1347=(cj5*r00);
IkReal x1348=(cj5*r10);
IkReal x1349=(cj5*r20);
IkReal x1350=((1.0)*x1345);
IkReal x1351=((1.0)*x1346);
IkReal x1352=(sj5*x1345);
IkReal x1353=(sj5*x1346);
evalcond[0]=(((r22*x1346))+(((-1.0)*x1349*x1350))+((r21*x1352)));
evalcond[1]=((((-1.0)*r22*x1350))+(((-1.0)*x1349*x1351))+((r21*x1353)));
evalcond[2]=(cj0+(((-1.0)*x1347*x1350))+((r02*x1346))+((r01*x1352)));
evalcond[3]=(sj0+((r11*x1352))+((r12*x1346))+(((-1.0)*x1348*x1350)));
evalcond[4]=((((-1.0)*r12*x1350))+cj0+((r11*x1353))+(((-1.0)*x1348*x1351)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1350))+(((-1.0)*x1347*x1351))+((r01*x1353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1354 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1354.valid){
continue;
}
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1354.value)+(((1.5707963267949)*(x1355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1356=IKcos(j4);
IkReal x1357=IKsin(j4);
IkReal x1358=(cj5*r00);
IkReal x1359=(cj5*r10);
IkReal x1360=(cj5*r20);
IkReal x1361=((1.0)*x1356);
IkReal x1362=((1.0)*x1357);
IkReal x1363=(sj5*x1356);
IkReal x1364=(sj5*x1357);
evalcond[0]=(((r22*x1357))+(((-1.0)*x1360*x1361))+((r21*x1363)));
evalcond[1]=((((-1.0)*r22*x1361))+(((-1.0)*x1360*x1362))+((r21*x1364)));
evalcond[2]=(cj0+((r02*x1357))+((r01*x1363))+(((-1.0)*x1358*x1361)));
evalcond[3]=(sj0+(((-1.0)*x1359*x1361))+((r11*x1363))+((r12*x1357)));
evalcond[4]=((((-1.0)*r12*x1361))+cj0+(((-1.0)*x1359*x1362))+((r11*x1364)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1361))+((r01*x1364))+(((-1.0)*x1358*x1362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1365=IKcos(j0);
IkReal x1366=IKsin(j0);
evalcond[0]=((((-0.425)*x1365))+(((-1.0)*px))+(((-0.10915)*x1366)));
evalcond[1]=((((0.10915)*x1365))+(((-0.425)*x1366))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1367=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1367;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1368=((1.0)*cj5);
IkReal x1369=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1368)));
j4eval[0]=x1369;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1368))))));
j4eval[2]=IKsign(x1369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1370=((1.0)*cj5);
IkReal x1371=((((-1.0)*r01*x1370))+(((-1.0)*r00*sj5)));
j4eval[0]=x1371;
j4eval[1]=IKsign(x1371);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1370))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1372=((1.0)*cj5);
CheckValue<IkReal> x1373 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x1372))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1372))+(((-1.0)*r00*sj5)))),-1);
if(!x1374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1373.value)+(((1.5707963267949)*(x1374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1375=IKcos(j4);
IkReal x1376=IKsin(j4);
IkReal x1377=((1.0)*sj0);
IkReal x1378=(cj5*r00);
IkReal x1379=(cj5*r10);
IkReal x1380=(cj5*r20);
IkReal x1381=((1.0)*x1375);
IkReal x1382=((1.0)*x1376);
IkReal x1383=(sj5*x1375);
IkReal x1384=(sj5*x1376);
evalcond[0]=(((r21*x1383))+((r22*x1376))+(((-1.0)*x1380*x1381)));
evalcond[1]=(((r21*x1384))+(((-1.0)*x1380*x1382))+(((-1.0)*r22*x1381)));
evalcond[2]=((((-1.0)*r12*x1381))+cj0+((r11*x1384))+(((-1.0)*x1379*x1382)));
evalcond[3]=(((r01*x1383))+((r02*x1376))+(((-1.0)*x1378*x1381))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x1376))+(((-1.0)*x1377))+((r11*x1383))+(((-1.0)*x1379*x1381)));
evalcond[5]=((((-1.0)*r02*x1381))+(((-1.0)*x1377))+((r01*x1384))+(((-1.0)*x1378*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1385=((1.0)*cj5);
CheckValue<IkReal> x1386 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1385))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1386.valid){
continue;
}
CheckValue<IkReal> x1387=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1385)))),-1);
if(!x1387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1386.value)+(((1.5707963267949)*(x1387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1388=IKcos(j4);
IkReal x1389=IKsin(j4);
IkReal x1390=((1.0)*sj0);
IkReal x1391=(cj5*r00);
IkReal x1392=(cj5*r10);
IkReal x1393=(cj5*r20);
IkReal x1394=((1.0)*x1388);
IkReal x1395=((1.0)*x1389);
IkReal x1396=(sj5*x1388);
IkReal x1397=(sj5*x1389);
evalcond[0]=((((-1.0)*x1393*x1394))+((r21*x1396))+((r22*x1389)));
evalcond[1]=((((-1.0)*x1393*x1395))+((r21*x1397))+(((-1.0)*r22*x1394)));
evalcond[2]=((((-1.0)*x1392*x1395))+(((-1.0)*r12*x1394))+cj0+((r11*x1397)));
evalcond[3]=((((-1.0)*x1391*x1394))+((r01*x1396))+(((-1.0)*cj0))+((r02*x1389)));
evalcond[4]=((((-1.0)*x1392*x1394))+((r11*x1396))+((r12*x1389))+(((-1.0)*x1390)));
evalcond[5]=((((-1.0)*r02*x1394))+(((-1.0)*x1391*x1395))+((r01*x1397))+(((-1.0)*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1398 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1398.valid){
continue;
}
CheckValue<IkReal> x1399=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1398.value)+(((1.5707963267949)*(x1399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1400=IKcos(j4);
IkReal x1401=IKsin(j4);
IkReal x1402=((1.0)*sj0);
IkReal x1403=(cj5*r00);
IkReal x1404=(cj5*r10);
IkReal x1405=(cj5*r20);
IkReal x1406=((1.0)*x1400);
IkReal x1407=((1.0)*x1401);
IkReal x1408=(sj5*x1400);
IkReal x1409=(sj5*x1401);
evalcond[0]=((((-1.0)*x1405*x1406))+((r21*x1408))+((r22*x1401)));
evalcond[1]=((((-1.0)*r22*x1406))+(((-1.0)*x1405*x1407))+((r21*x1409)));
evalcond[2]=((((-1.0)*r12*x1406))+cj0+((r11*x1409))+(((-1.0)*x1404*x1407)));
evalcond[3]=(((r02*x1401))+((r01*x1408))+(((-1.0)*x1403*x1406))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x1401))+((r11*x1408))+(((-1.0)*x1402))+(((-1.0)*x1404*x1406)));
evalcond[5]=((((-1.0)*x1402))+(((-1.0)*r02*x1406))+((r01*x1409))+(((-1.0)*x1403*x1407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1410=(cj2*sj1);
IkReal x1411=((8500.0)*sj1);
IkReal x1412=(cj5*r01);
IkReal x1413=(r00*sj5);
IkReal x1414=(cj1*sj2);
IkReal x1415=((20000.0)*px);
CheckValue<IkReal> x1416=IKPowWithIntegerCheck(((((-2183.0)*x1410))+(((-2183.0)*x1414))),-1);
if(!x1416.valid){
continue;
}
CheckValue<IkReal> x1417=IKPowWithIntegerCheck(((((-1.0)*x1414))+(((-1.0)*x1410))),-1);
if(!x1417.valid){
continue;
}
if( IKabs(((x1416.value)*(((((9738.0)*x1413*x1414))+((x1411*x1412))+((x1411*x1413))+((x1410*x1415))+(((9738.0)*x1410*x1412))+(((9738.0)*x1410*x1413))+(((9738.0)*x1412*x1414))+((x1414*x1415)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1417.value)*((x1412+x1413)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1416.value)*(((((9738.0)*x1413*x1414))+((x1411*x1412))+((x1411*x1413))+((x1410*x1415))+(((9738.0)*x1410*x1412))+(((9738.0)*x1410*x1413))+(((9738.0)*x1412*x1414))+((x1414*x1415))))))+IKsqr(((x1417.value)*((x1412+x1413))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1416.value)*(((((9738.0)*x1413*x1414))+((x1411*x1412))+((x1411*x1413))+((x1410*x1415))+(((9738.0)*x1410*x1412))+(((9738.0)*x1410*x1413))+(((9738.0)*x1412*x1414))+((x1414*x1415))))), ((x1417.value)*((x1412+x1413))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1418=IKcos(j0);
IkReal x1419=IKsin(j0);
IkReal x1420=(cj1*sj2);
IkReal x1421=(cj5*r11);
IkReal x1422=((1.0)*sj5);
IkReal x1423=(cj2*sj1);
IkReal x1424=((0.425)*sj1);
IkReal x1425=((0.09465)*sj5);
IkReal x1426=(cj5*r01);
IkReal x1427=((0.39225)*x1419);
IkReal x1428=((1.0)*x1418);
IkReal x1429=((1.0)*x1419);
IkReal x1430=((0.39225)*x1418);
evalcond[0]=((((-1.0)*x1423*x1428))+(((-1.0)*x1420*x1428))+(((-1.0)*x1426))+(((-1.0)*r00*x1422)));
evalcond[1]=((((-1.0)*r10*x1422))+(((-1.0)*x1423*x1429))+(((-1.0)*x1420*x1429))+(((-1.0)*x1421)));
evalcond[2]=((((-0.10915)*x1419))+(((-0.09465)*x1426))+(((-1.0)*px))+((x1420*x1430))+((x1418*x1424))+((x1423*x1430))+(((-1.0)*r00*x1425)));
evalcond[3]=(((x1420*x1427))+(((-1.0)*r10*x1425))+((x1423*x1427))+(((0.10915)*x1418))+(((-0.09465)*x1421))+(((-1.0)*py))+((x1419*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1431=((1.0)*cj5);
IkReal x1432=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1431)));
j4eval[0]=x1432;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1431))))));
j4eval[2]=IKsign(x1432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1433=((1.0)*cj5);
IkReal x1434=((((-1.0)*r11*x1433))+(((-1.0)*r10*sj5)));
j4eval[0]=x1434;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1433))))));
j4eval[2]=IKsign(x1434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1435=((1.0)*sj0);
IkReal x1436=((1.0)*cj0);
IkReal x1437=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1437;
j4eval[1]=((IKabs(((((-1.0)*r12*x1435))+(((-1.0)*r02*x1436)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1436))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1435))))));
j4eval[2]=IKsign(x1437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1438=((-1.0)*r20);
IkReal x1440 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1440)==0){
continue;
}
IkReal x1439=pow(x1440,-0.5);
CheckValue<IkReal> x1441 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1438),IKFAST_ATAN2_MAGTHRESH);
if(!x1441.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1441.value));
IkReal gconst79=(r21*x1439);
IkReal gconst80=(x1438*x1439);
CheckValue<IkReal> x1442 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1442.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1442.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1443=((-1.0)*r20);
IkReal x1444=x1439;
CheckValue<IkReal> x1446 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1443),IKFAST_ATAN2_MAGTHRESH);
if(!x1446.valid){
continue;
}
IkReal x1445=((-1.0)*(x1446.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1445;
IkReal gconst78=x1445;
IkReal gconst79=(r21*x1444);
IkReal gconst80=(x1443*x1444);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1447=((-1.0)*r20);
IkReal x1448=x1439;
CheckValue<IkReal> x1450 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1447),IKFAST_ATAN2_MAGTHRESH);
if(!x1450.valid){
continue;
}
IkReal x1449=((-1.0)*(x1450.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1449;
IkReal gconst78=x1449;
IkReal gconst79=(r21*x1448);
IkReal gconst80=(x1447*x1448);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1451=((-1.0)*r20);
IkReal x1452=x1439;
CheckValue<IkReal> x1454 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1451),IKFAST_ATAN2_MAGTHRESH);
if(!x1454.valid){
continue;
}
IkReal x1453=((-1.0)*(x1454.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1453;
IkReal gconst78=x1453;
IkReal gconst79=(r21*x1452);
IkReal gconst80=(x1451*x1452);
IkReal x1455=((1.0)*(r22*r22));
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1455))),-1);
if(!x1459.valid){
continue;
}
IkReal x1456=x1459.value;
IkReal x1457=((1.0)*x1456);
IkReal x1458=((((-1.0)*x1457*(r20*r20*r20*r20)))+(((-1.0)*x1455))+(((-1.0)*x1457*(r21*r21*r21*r21)))+(((-2.0)*x1456*(r20*r20)*(r21*r21))));
j4eval[0]=x1458;
j4eval[1]=IKsign(x1458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1460=(cj1*sj2);
IkReal x1461=(gconst80*r20);
IkReal x1462=((1.0)*r22);
IkReal x1463=(gconst79*r21);
IkReal x1464=(cj2*sj1);
CheckValue<IkReal> x1465=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x1461*x1461)))+(((-1.0)*(x1463*x1463)))+(((2.0)*x1461*x1463))+(((-1.0)*r22*x1462)))),-1);
if(!x1465.valid){
continue;
}
CheckValue<IkReal> x1466 = IKatan2WithCheck(IkReal(((((-1.0)*x1462*x1464))+(((-1.0)*x1460*x1462)))),IkReal((((x1461*x1464))+(((-1.0)*x1460*x1463))+(((-1.0)*x1463*x1464))+((x1460*x1461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1465.value)))+(x1466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1467=IKsin(j4);
IkReal x1468=IKcos(j4);
IkReal x1469=(gconst80*r20);
IkReal x1470=(cj1*cj2);
IkReal x1471=(gconst80*r10);
IkReal x1472=((1.0)*sj1);
IkReal x1473=(gconst80*r00);
IkReal x1474=((1.0)*x1468);
IkReal x1475=((1.0)*x1467);
IkReal x1476=(gconst79*x1467);
IkReal x1477=(gconst79*x1468);
evalcond[0]=((((-1.0)*r22*x1474))+((r21*x1476))+(((-1.0)*x1469*x1475)));
evalcond[1]=((((-1.0)*x1471*x1475))+cj0+((r11*x1476))+(((-1.0)*r12*x1474)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1474))+((r01*x1476))+(((-1.0)*x1473*x1475)));
evalcond[3]=(((r21*x1477))+(((-1.0)*cj1*sj2))+(((-1.0)*x1469*x1474))+((r22*x1467))+(((-1.0)*cj2*x1472)));
evalcond[4]=(((cj0*x1470))+((r01*x1477))+((r02*x1467))+(((-1.0)*cj0*sj2*x1472))+(((-1.0)*x1473*x1474)));
evalcond[5]=((((-1.0)*x1471*x1474))+((sj0*x1470))+((r11*x1477))+((r12*x1467))+(((-1.0)*sj0*sj2*x1472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1478=((1.0)*gconst80);
CheckValue<IkReal> x1479=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1478))+(((-1.0)*gconst79*r10)))),-1);
if(!x1479.valid){
continue;
}
CheckValue<IkReal> x1480 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1478))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1479.value)))+(x1480.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1481=IKsin(j4);
IkReal x1482=IKcos(j4);
IkReal x1483=(gconst80*r20);
IkReal x1484=(cj1*cj2);
IkReal x1485=(gconst80*r10);
IkReal x1486=((1.0)*sj1);
IkReal x1487=(gconst80*r00);
IkReal x1488=((1.0)*x1482);
IkReal x1489=((1.0)*x1481);
IkReal x1490=(gconst79*x1481);
IkReal x1491=(gconst79*x1482);
evalcond[0]=(((r21*x1490))+(((-1.0)*x1483*x1489))+(((-1.0)*r22*x1488)));
evalcond[1]=(cj0+(((-1.0)*r12*x1488))+(((-1.0)*x1485*x1489))+((r11*x1490)));
evalcond[2]=((((-1.0)*x1487*x1489))+(((-1.0)*sj0))+((r01*x1490))+(((-1.0)*r02*x1488)));
evalcond[3]=((((-1.0)*cj2*x1486))+((r21*x1491))+(((-1.0)*cj1*sj2))+(((-1.0)*x1483*x1488))+((r22*x1481)));
evalcond[4]=((((-1.0)*x1487*x1488))+((r01*x1491))+((cj0*x1484))+(((-1.0)*cj0*sj2*x1486))+((r02*x1481)));
evalcond[5]=(((sj0*x1484))+(((-1.0)*x1485*x1488))+((r12*x1481))+((r11*x1491))+(((-1.0)*sj0*sj2*x1486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1492=((1.0)*gconst80);
CheckValue<IkReal> x1493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1492))+(((-1.0)*gconst79*r00)))),-1);
if(!x1493.valid){
continue;
}
CheckValue<IkReal> x1494 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1493.value)))+(x1494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1495=IKsin(j4);
IkReal x1496=IKcos(j4);
IkReal x1497=(gconst80*r20);
IkReal x1498=(cj1*cj2);
IkReal x1499=(gconst80*r10);
IkReal x1500=((1.0)*sj1);
IkReal x1501=(gconst80*r00);
IkReal x1502=((1.0)*x1496);
IkReal x1503=((1.0)*x1495);
IkReal x1504=(gconst79*x1495);
IkReal x1505=(gconst79*x1496);
evalcond[0]=((((-1.0)*r22*x1502))+((r21*x1504))+(((-1.0)*x1497*x1503)));
evalcond[1]=((((-1.0)*x1499*x1503))+((r11*x1504))+cj0+(((-1.0)*r12*x1502)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1501*x1503))+((r01*x1504))+(((-1.0)*r02*x1502)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1500))+((r21*x1505))+(((-1.0)*x1497*x1502))+((r22*x1495)));
evalcond[4]=((((-1.0)*cj0*sj2*x1500))+(((-1.0)*x1501*x1502))+((r01*x1505))+((cj0*x1498))+((r02*x1495)));
evalcond[5]=((((-1.0)*x1499*x1502))+((r11*x1505))+((sj0*x1498))+(((-1.0)*sj0*sj2*x1500))+((r12*x1495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1506=((-1.0)*r21);
IkReal x1508 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1508)==0){
continue;
}
IkReal x1507=pow(x1508,-0.5);
CheckValue<IkReal> x1509 = IKatan2WithCheck(IkReal(x1506),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1509.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1509.value))));
IkReal gconst82=(x1506*x1507);
IkReal gconst83=((1.0)*r20*x1507);
CheckValue<IkReal> x1510 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1510.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1510.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1511=((-1.0)*r21);
CheckValue<IkReal> x1514 = IKatan2WithCheck(IkReal(x1511),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1514.valid){
continue;
}
IkReal x1512=((1.0)*(x1514.value));
IkReal x1513=x1507;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1512)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1512)));
IkReal gconst82=(x1511*x1513);
IkReal gconst83=((1.0)*r20*x1513);
IkReal x1515=r22*r22;
IkReal x1516=((1.0)*x1515);
CheckValue<IkReal> x1520=IKPowWithIntegerCheck(((-1.0)+x1515),-1);
if(!x1520.valid){
continue;
}
IkReal x1517=x1520.value;
if((((1.0)+(((-1.0)*x1516)))) < -0.00001)
continue;
IkReal x1518=IKsqrt(((1.0)+(((-1.0)*x1516))));
IkReal x1519=(cj0*x1517*x1518);
j4eval[0]=((IKabs(((((-1.0)*x1516*x1519))+x1519)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1521=((-1.0)*r21);
CheckValue<IkReal> x1524 = IKatan2WithCheck(IkReal(x1521),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1524.valid){
continue;
}
IkReal x1522=((1.0)*(x1524.value));
IkReal x1523=x1507;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1522)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1522)));
IkReal gconst82=(x1521*x1523);
IkReal gconst83=((1.0)*r20*x1523);
IkReal x1525=r22*r22;
IkReal x1526=((1.0)*x1525);
CheckValue<IkReal> x1530=IKPowWithIntegerCheck(((-1.0)+x1525),-1);
if(!x1530.valid){
continue;
}
IkReal x1527=x1530.value;
if((((1.0)+(((-1.0)*x1526)))) < -0.00001)
continue;
IkReal x1528=IKsqrt(((1.0)+(((-1.0)*x1526))));
IkReal x1529=(sj0*x1527*x1528);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1529+(((-1.0)*x1526*x1529))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1531=((-1.0)*r21);
CheckValue<IkReal> x1534 = IKatan2WithCheck(IkReal(x1531),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1534.valid){
continue;
}
IkReal x1532=((1.0)*(x1534.value));
IkReal x1533=x1507;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1532)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1532)));
IkReal gconst82=(x1531*x1533);
IkReal gconst83=((1.0)*r20*x1533);
IkReal x1535=r22*r22;
IkReal x1536=(r12*sj0);
IkReal x1537=(cj0*r02);
CheckValue<IkReal> x1541=IKPowWithIntegerCheck(((-1.0)+x1535),-1);
if(!x1541.valid){
continue;
}
IkReal x1538=x1541.value;
if((((1.0)+(((-1.0)*x1535)))) < -0.00001)
continue;
IkReal x1539=IKsqrt(((1.0)+(((-1.0)*x1535))));
IkReal x1540=(r22*x1538*x1539);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1537))+(((-1.0)*x1536)))))+(IKabs((((x1536*x1540))+((x1537*x1540))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1542=((1.0)*sj0);
IkReal x1543=((1.0)*cj0);
CheckValue<IkReal> x1544=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1544.valid){
continue;
}
CheckValue<IkReal> x1545 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1543))+(((-1.0)*r12*x1542)))),IkReal(((((-1.0)*gconst82*r11*x1542))+(((-1.0)*gconst82*r01*x1543))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1544.value)))+(x1545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1546=IKsin(j4);
IkReal x1547=IKcos(j4);
IkReal x1548=(gconst82*r21);
IkReal x1549=(cj1*cj2);
IkReal x1550=(gconst83*r00);
IkReal x1551=((1.0)*sj1);
IkReal x1552=(gconst83*r20);
IkReal x1553=(gconst83*r10);
IkReal x1554=((1.0)*x1547);
IkReal x1555=(gconst82*x1546);
IkReal x1556=((1.0)*x1546);
IkReal x1557=(gconst82*x1547);
evalcond[0]=((((-1.0)*r22*x1554))+(((-1.0)*x1552*x1556))+((x1546*x1548)));
evalcond[1]=(cj0+((r11*x1555))+(((-1.0)*x1553*x1556))+(((-1.0)*r12*x1554)));
evalcond[2]=(((r01*x1555))+(((-1.0)*sj0))+(((-1.0)*r02*x1554))+(((-1.0)*x1550*x1556)));
evalcond[3]=((((-1.0)*x1552*x1554))+((x1547*x1548))+(((-1.0)*cj1*sj2))+((r22*x1546))+(((-1.0)*cj2*x1551)));
evalcond[4]=(((r01*x1557))+(((-1.0)*cj0*sj2*x1551))+((cj0*x1549))+(((-1.0)*x1550*x1554))+((r02*x1546)));
evalcond[5]=(((r11*x1557))+((r12*x1546))+(((-1.0)*x1553*x1554))+((sj0*x1549))+(((-1.0)*sj0*sj2*x1551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1558=((1.0)*gconst83);
CheckValue<IkReal> x1559=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1558)))),-1);
if(!x1559.valid){
continue;
}
CheckValue<IkReal> x1560 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1559.value)))+(x1560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1561=IKsin(j4);
IkReal x1562=IKcos(j4);
IkReal x1563=(gconst82*r21);
IkReal x1564=(cj1*cj2);
IkReal x1565=(gconst83*r00);
IkReal x1566=((1.0)*sj1);
IkReal x1567=(gconst83*r20);
IkReal x1568=(gconst83*r10);
IkReal x1569=((1.0)*x1562);
IkReal x1570=(gconst82*x1561);
IkReal x1571=((1.0)*x1561);
IkReal x1572=(gconst82*x1562);
evalcond[0]=((((-1.0)*x1567*x1571))+(((-1.0)*r22*x1569))+((x1561*x1563)));
evalcond[1]=(cj0+(((-1.0)*x1568*x1571))+((r11*x1570))+(((-1.0)*r12*x1569)));
evalcond[2]=((((-1.0)*x1565*x1571))+(((-1.0)*sj0))+(((-1.0)*r02*x1569))+((r01*x1570)));
evalcond[3]=((((-1.0)*x1567*x1569))+(((-1.0)*cj1*sj2))+((r22*x1561))+((x1562*x1563))+(((-1.0)*cj2*x1566)));
evalcond[4]=((((-1.0)*x1565*x1569))+(((-1.0)*cj0*sj2*x1566))+((cj0*x1564))+((r02*x1561))+((r01*x1572)));
evalcond[5]=(((r12*x1561))+(((-1.0)*x1568*x1569))+((sj0*x1564))+((r11*x1572))+(((-1.0)*sj0*sj2*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1573=((1.0)*gconst83);
CheckValue<IkReal> x1574=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1573)))),-1);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x1573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1574.value)))+(x1575.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1576=IKsin(j4);
IkReal x1577=IKcos(j4);
IkReal x1578=(gconst82*r21);
IkReal x1579=(cj1*cj2);
IkReal x1580=(gconst83*r00);
IkReal x1581=((1.0)*sj1);
IkReal x1582=(gconst83*r20);
IkReal x1583=(gconst83*r10);
IkReal x1584=((1.0)*x1577);
IkReal x1585=(gconst82*x1576);
IkReal x1586=((1.0)*x1576);
IkReal x1587=(gconst82*x1577);
evalcond[0]=(((x1576*x1578))+(((-1.0)*r22*x1584))+(((-1.0)*x1582*x1586)));
evalcond[1]=(cj0+((r11*x1585))+(((-1.0)*r12*x1584))+(((-1.0)*x1583*x1586)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1585))+(((-1.0)*x1580*x1586))+(((-1.0)*r02*x1584)));
evalcond[3]=((((-1.0)*cj2*x1581))+(((-1.0)*cj1*sj2))+((x1577*x1578))+((r22*x1576))+(((-1.0)*x1582*x1584)));
evalcond[4]=(((r01*x1587))+(((-1.0)*x1580*x1584))+(((-1.0)*cj0*sj2*x1581))+((cj0*x1579))+((r02*x1576)));
evalcond[5]=((((-1.0)*sj0*sj2*x1581))+((r12*x1576))+((r11*x1587))+((sj0*x1579))+(((-1.0)*x1583*x1584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1588=((-1.0)*r10);
IkReal x1590 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1590)==0){
continue;
}
IkReal x1589=pow(x1590,-0.5);
CheckValue<IkReal> x1591 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1588),IKFAST_ATAN2_MAGTHRESH);
if(!x1591.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1591.value));
IkReal gconst85=(r11*x1589);
IkReal gconst86=(x1588*x1589);
CheckValue<IkReal> x1592 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1592.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1592.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1593=((-1.0)*r10);
IkReal x1594=x1589;
CheckValue<IkReal> x1596 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1593),IKFAST_ATAN2_MAGTHRESH);
if(!x1596.valid){
continue;
}
IkReal x1595=((-1.0)*(x1596.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x1595;
IkReal gconst84=x1595;
IkReal gconst85=(r11*x1594);
IkReal gconst86=(x1593*x1594);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1597=((1.0)*sj0);
IkReal x1598=((1.0)*gconst85);
CheckValue<IkReal> x1599=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1598)))),-1);
if(!x1599.valid){
continue;
}
CheckValue<IkReal> x1600 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1597)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1598))+((gconst86*r10*sj0))+(((-1.0)*gconst85*r11*x1597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1599.value)))+(x1600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1601=IKsin(j4);
IkReal x1602=IKcos(j4);
IkReal x1603=(cj1*cj2);
IkReal x1604=(gconst86*r00);
IkReal x1605=((1.0)*sj1);
IkReal x1606=(gconst86*r10);
IkReal x1607=(gconst86*r20);
IkReal x1608=((1.0)*x1602);
IkReal x1609=((1.0)*x1601);
IkReal x1610=(gconst85*x1602);
IkReal x1611=(gconst85*x1601);
evalcond[0]=((((-1.0)*x1607*x1609))+((r21*x1611))+(((-1.0)*r22*x1608)));
evalcond[1]=(cj0+((r11*x1611))+(((-1.0)*x1606*x1609))+(((-1.0)*r12*x1608)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1611))+(((-1.0)*r02*x1608))+(((-1.0)*x1604*x1609)));
evalcond[3]=((((-1.0)*x1607*x1608))+((r21*x1610))+(((-1.0)*cj1*sj2))+((r22*x1601))+(((-1.0)*cj2*x1605)));
evalcond[4]=(((r01*x1610))+((cj0*x1603))+((r02*x1601))+(((-1.0)*cj0*sj2*x1605))+(((-1.0)*x1604*x1608)));
evalcond[5]=(((sj0*x1603))+((r11*x1610))+((r12*x1601))+(((-1.0)*sj0*sj2*x1605))+(((-1.0)*x1606*x1608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1612=((1.0)*gconst86);
CheckValue<IkReal> x1613 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1612))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1613.valid){
continue;
}
CheckValue<IkReal> x1614=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1612))+(((-1.0)*gconst85*r00)))),-1);
if(!x1614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1613.value)+(((1.5707963267949)*(x1614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1615=IKsin(j4);
IkReal x1616=IKcos(j4);
IkReal x1617=(cj1*cj2);
IkReal x1618=(gconst86*r00);
IkReal x1619=((1.0)*sj1);
IkReal x1620=(gconst86*r10);
IkReal x1621=(gconst86*r20);
IkReal x1622=((1.0)*x1616);
IkReal x1623=((1.0)*x1615);
IkReal x1624=(gconst85*x1616);
IkReal x1625=(gconst85*x1615);
evalcond[0]=(((r21*x1625))+(((-1.0)*x1621*x1623))+(((-1.0)*r22*x1622)));
evalcond[1]=((((-1.0)*r12*x1622))+cj0+((r11*x1625))+(((-1.0)*x1620*x1623)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1625))+(((-1.0)*r02*x1622))+(((-1.0)*x1618*x1623)));
evalcond[3]=(((r21*x1624))+(((-1.0)*cj1*sj2))+(((-1.0)*x1621*x1622))+((r22*x1615))+(((-1.0)*cj2*x1619)));
evalcond[4]=(((r01*x1624))+((cj0*x1617))+(((-1.0)*cj0*sj2*x1619))+((r02*x1615))+(((-1.0)*x1618*x1622)));
evalcond[5]=(((sj0*x1617))+((r12*x1615))+((r11*x1624))+(((-1.0)*sj0*sj2*x1619))+(((-1.0)*x1620*x1622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1626=((-1.0)*r11);
IkReal x1628 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1628)==0){
continue;
}
IkReal x1627=pow(x1628,-0.5);
CheckValue<IkReal> x1629 = IKatan2WithCheck(IkReal(x1626),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1629.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1629.value))));
IkReal gconst88=(x1626*x1627);
IkReal gconst89=((1.0)*r10*x1627);
CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1630.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1630.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1631=((-1.0)*r11);
CheckValue<IkReal> x1634 = IKatan2WithCheck(IkReal(x1631),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1634.valid){
continue;
}
IkReal x1632=((1.0)*(x1634.value));
IkReal x1633=x1627;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1632)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1632)));
IkReal gconst88=(x1631*x1633);
IkReal gconst89=((1.0)*r10*x1633);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1635=((-1.0)*r11);
CheckValue<IkReal> x1638 = IKatan2WithCheck(IkReal(x1635),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1638.valid){
continue;
}
IkReal x1636=((1.0)*(x1638.value));
IkReal x1637=x1627;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1636)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1636)));
IkReal gconst88=(x1635*x1637);
IkReal gconst89=((1.0)*r10*x1637);
IkReal x1639=r12*r12;
IkReal x1640=((1.0)*sj0);
IkReal x1641=(cj0*r02);
IkReal x1642=x1627;
j4eval[0]=((IKabs((((r12*x1641*x1642))+(((-1.0)*x1640*x1642))+((sj0*x1639*x1642)))))+(IKabs(((((-1.0)*r12*x1640))+(((-1.0)*x1641))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1643=((-1.0)*r11);
CheckValue<IkReal> x1646 = IKatan2WithCheck(IkReal(x1643),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1646.valid){
continue;
}
IkReal x1644=((1.0)*(x1646.value));
IkReal x1645=x1627;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1644)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1644)));
IkReal gconst88=(x1643*x1645);
IkReal gconst89=((1.0)*r10*x1645);
IkReal x1647=((1.0)+(((-1.0)*(r12*r12))));
IkReal x1648=(cj1*r22*sj2);
IkReal x1649=(cj2*r22*sj1);
CheckValue<IkReal> x1655=IKPowWithIntegerCheck(x1647,-1);
if(!x1655.valid){
continue;
}
IkReal x1650=x1655.value;
IkReal x1651=((1.0)*x1650);
IkReal x1652=x1627;
IkReal x1653=(r12*x1652);
IkReal x1654=((((-2.0)*r10*r11*r20*r21*x1650))+(((-1.0)*x1651*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x1651*(r10*r10)*(r20*r20))));
j4eval[0]=x1654;
j4eval[1]=((IKabs(((((-1.0)*x1649))+(((-1.0)*x1648)))))+(IKabs((((x1648*x1653))+((x1649*x1653))))));
j4eval[2]=IKsign(x1654);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1656=(gconst89*r20);
IkReal x1657=(cj2*sj1);
IkReal x1658=(cj1*sj2);
IkReal x1659=((1.0)*r22);
IkReal x1660=(gconst88*r21);
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal(((((-1.0)*x1657*x1659))+(((-1.0)*x1658*x1659)))),IkReal((((x1656*x1658))+((x1656*x1657))+(((-1.0)*x1658*x1660))+(((-1.0)*x1657*x1660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
CheckValue<IkReal> x1662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x1659))+(((2.0)*x1656*x1660))+(((-1.0)*(x1656*x1656)))+(((-1.0)*(x1660*x1660))))),-1);
if(!x1662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1661.value)+(((1.5707963267949)*(x1662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1663=IKsin(j4);
IkReal x1664=IKcos(j4);
IkReal x1665=(cj1*cj2);
IkReal x1666=(gconst89*r10);
IkReal x1667=((1.0)*sj0);
IkReal x1668=(gconst89*r20);
IkReal x1669=((1.0)*sj1);
IkReal x1670=(gconst89*r00);
IkReal x1671=((1.0)*x1664);
IkReal x1672=((1.0)*x1663);
IkReal x1673=(gconst88*x1664);
IkReal x1674=(gconst88*x1663);
evalcond[0]=(((r21*x1674))+(((-1.0)*x1668*x1672))+(((-1.0)*r22*x1671)));
evalcond[1]=(cj0+(((-1.0)*r12*x1671))+(((-1.0)*x1666*x1672))+((r11*x1674)));
evalcond[2]=((((-1.0)*r02*x1671))+(((-1.0)*x1667))+(((-1.0)*x1670*x1672))+((r01*x1674)));
evalcond[3]=(((r21*x1673))+(((-1.0)*x1668*x1671))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1669))+((r22*x1663)));
evalcond[4]=(((r02*x1663))+(((-1.0)*cj0*sj2*x1669))+((cj0*x1665))+(((-1.0)*x1670*x1671))+((r01*x1673)));
evalcond[5]=(((sj0*x1665))+((r12*x1663))+(((-1.0)*x1666*x1671))+((r11*x1673))+(((-1.0)*sj1*sj2*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1675=((1.0)*sj0);
IkReal x1676=((1.0)*cj0);
CheckValue<IkReal> x1677 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1676))+(((-1.0)*r12*x1675)))),IkReal(((((-1.0)*gconst88*r11*x1675))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x1676))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1677.valid){
continue;
}
CheckValue<IkReal> x1678=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x1678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1677.value)+(((1.5707963267949)*(x1678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1679=IKsin(j4);
IkReal x1680=IKcos(j4);
IkReal x1681=(cj1*cj2);
IkReal x1682=(gconst89*r10);
IkReal x1683=((1.0)*sj0);
IkReal x1684=(gconst89*r20);
IkReal x1685=((1.0)*sj1);
IkReal x1686=(gconst89*r00);
IkReal x1687=((1.0)*x1680);
IkReal x1688=((1.0)*x1679);
IkReal x1689=(gconst88*x1680);
IkReal x1690=(gconst88*x1679);
evalcond[0]=(((r21*x1690))+(((-1.0)*r22*x1687))+(((-1.0)*x1684*x1688)));
evalcond[1]=((((-1.0)*r12*x1687))+cj0+(((-1.0)*x1682*x1688))+((r11*x1690)));
evalcond[2]=(((r01*x1690))+(((-1.0)*x1686*x1688))+(((-1.0)*x1683))+(((-1.0)*r02*x1687)));
evalcond[3]=(((r21*x1689))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1685))+((r22*x1679))+(((-1.0)*x1684*x1687)));
evalcond[4]=((((-1.0)*x1686*x1687))+((r02*x1679))+((r01*x1689))+(((-1.0)*cj0*sj2*x1685))+((cj0*x1681)));
evalcond[5]=(((r11*x1689))+(((-1.0)*sj1*sj2*x1683))+(((-1.0)*x1682*x1687))+((sj0*x1681))+((r12*x1679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1691=((1.0)*gconst89);
CheckValue<IkReal> x1692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1691))+(((-1.0)*gconst88*r00)))),-1);
if(!x1692.valid){
continue;
}
CheckValue<IkReal> x1693 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1691))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1692.value)))+(x1693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1694=IKsin(j4);
IkReal x1695=IKcos(j4);
IkReal x1696=(cj1*cj2);
IkReal x1697=(gconst89*r10);
IkReal x1698=((1.0)*sj0);
IkReal x1699=(gconst89*r20);
IkReal x1700=((1.0)*sj1);
IkReal x1701=(gconst89*r00);
IkReal x1702=((1.0)*x1695);
IkReal x1703=((1.0)*x1694);
IkReal x1704=(gconst88*x1695);
IkReal x1705=(gconst88*x1694);
evalcond[0]=((((-1.0)*x1699*x1703))+((r21*x1705))+(((-1.0)*r22*x1702)));
evalcond[1]=(cj0+((r11*x1705))+(((-1.0)*x1697*x1703))+(((-1.0)*r12*x1702)));
evalcond[2]=((((-1.0)*x1698))+((r01*x1705))+(((-1.0)*r02*x1702))+(((-1.0)*x1701*x1703)));
evalcond[3]=((((-1.0)*cj2*x1700))+(((-1.0)*x1699*x1702))+(((-1.0)*cj1*sj2))+((r22*x1694))+((r21*x1704)));
evalcond[4]=((((-1.0)*cj0*sj2*x1700))+((r01*x1704))+((r02*x1694))+((cj0*x1696))+(((-1.0)*x1701*x1702)));
evalcond[5]=((((-1.0)*sj1*sj2*x1698))+((r12*x1694))+((sj0*x1696))+((r11*x1704))+(((-1.0)*x1697*x1702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1706=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1706;
j4eval[1]=IKsign(x1706);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1707=((1.0)*cj5);
IkReal x1708=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1707)));
j4eval[0]=x1708;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1707))))));
j4eval[2]=IKsign(x1708);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1709=(cj5*r10);
IkReal x1710=(sj1*sj2);
IkReal x1711=(r11*sj5);
IkReal x1712=((1.0)*cj1*cj2);
IkReal x1713=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1713;
j4eval[1]=((IKabs((((r12*x1710))+(((-1.0)*r12*x1712)))))+(IKabs((((x1709*x1710))+(((-1.0)*x1709*x1712))+((cj1*cj2*x1711))+(((-1.0)*x1710*x1711))))));
j4eval[2]=IKsign(x1713);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1714=(cj5*r10);
IkReal x1715=(sj1*sj2);
IkReal x1716=(r11*sj5);
IkReal x1717=((1.0)*cj1*cj2);
CheckValue<IkReal> x1718=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1718.valid){
continue;
}
CheckValue<IkReal> x1719 = IKatan2WithCheck(IkReal(((((-1.0)*x1714*x1717))+((x1714*x1715))+(((-1.0)*x1715*x1716))+((cj1*cj2*x1716)))),IkReal((((r12*x1715))+(((-1.0)*r12*x1717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1718.value)))+(x1719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1720=IKcos(j4);
IkReal x1721=IKsin(j4);
IkReal x1722=(cj5*r00);
IkReal x1723=(cj5*r10);
IkReal x1724=(r21*sj5);
IkReal x1725=((1.0)*sj1);
IkReal x1726=(cj5*r20);
IkReal x1727=((1.0)*x1720);
IkReal x1728=((1.0)*x1721);
IkReal x1729=(sj5*x1721);
IkReal x1730=(sj5*x1720);
evalcond[0]=((((-1.0)*x1723*x1727))+((r11*x1730))+((r12*x1721)));
evalcond[1]=((((-1.0)*r22*x1727))+(((-1.0)*x1726*x1728))+((x1721*x1724)));
evalcond[2]=(((r01*x1729))+(((-1.0)*x1722*x1728))+(((-1.0)*r02*x1727)));
evalcond[3]=((1.0)+(((-1.0)*r12*x1727))+(((-1.0)*x1723*x1728))+((r11*x1729)));
evalcond[4]=(((r01*x1730))+(((-1.0)*x1722*x1727))+((r02*x1721))+((cj1*cj2))+(((-1.0)*sj2*x1725)));
evalcond[5]=((((-1.0)*x1726*x1727))+(((-1.0)*cj2*x1725))+(((-1.0)*cj1*sj2))+((r22*x1721))+((x1720*x1724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1731=((1.0)*cj5);
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1731))+(((-1.0)*r00*sj5)))),-1);
if(!x1732.valid){
continue;
}
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x1731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1732.value)))+(x1733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1734=IKcos(j4);
IkReal x1735=IKsin(j4);
IkReal x1736=(cj5*r00);
IkReal x1737=(cj5*r10);
IkReal x1738=(r21*sj5);
IkReal x1739=((1.0)*sj1);
IkReal x1740=(cj5*r20);
IkReal x1741=((1.0)*x1734);
IkReal x1742=((1.0)*x1735);
IkReal x1743=(sj5*x1735);
IkReal x1744=(sj5*x1734);
evalcond[0]=((((-1.0)*x1737*x1741))+((r12*x1735))+((r11*x1744)));
evalcond[1]=((((-1.0)*x1740*x1742))+(((-1.0)*r22*x1741))+((x1735*x1738)));
evalcond[2]=((((-1.0)*x1736*x1742))+((r01*x1743))+(((-1.0)*r02*x1741)));
evalcond[3]=((1.0)+(((-1.0)*r12*x1741))+(((-1.0)*x1737*x1742))+((r11*x1743)));
evalcond[4]=((((-1.0)*x1736*x1741))+((r02*x1735))+((cj1*cj2))+((r01*x1744))+(((-1.0)*sj2*x1739)));
evalcond[5]=((((-1.0)*x1740*x1741))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1739))+((x1734*x1738))+((r22*x1735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1745=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1745.valid){
continue;
}
CheckValue<IkReal> x1746 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1745.value)))+(x1746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1747=IKcos(j4);
IkReal x1748=IKsin(j4);
IkReal x1749=(cj5*r00);
IkReal x1750=(cj5*r10);
IkReal x1751=(r21*sj5);
IkReal x1752=((1.0)*sj1);
IkReal x1753=(cj5*r20);
IkReal x1754=((1.0)*x1747);
IkReal x1755=((1.0)*x1748);
IkReal x1756=(sj5*x1748);
IkReal x1757=(sj5*x1747);
evalcond[0]=(((r12*x1748))+(((-1.0)*x1750*x1754))+((r11*x1757)));
evalcond[1]=((((-1.0)*r22*x1754))+((x1748*x1751))+(((-1.0)*x1753*x1755)));
evalcond[2]=((((-1.0)*x1749*x1755))+((r01*x1756))+(((-1.0)*r02*x1754)));
evalcond[3]=((1.0)+(((-1.0)*r12*x1754))+(((-1.0)*x1750*x1755))+((r11*x1756)));
evalcond[4]=((((-1.0)*x1749*x1754))+((r02*x1748))+(((-1.0)*sj2*x1752))+((r01*x1757))+((cj1*cj2)));
evalcond[5]=(((r22*x1748))+((x1747*x1751))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1752))+(((-1.0)*x1753*x1754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1758=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1758;
j4eval[1]=IKsign(x1758);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1759=((1.0)*cj5);
IkReal x1760=((((-1.0)*r21*x1759))+(((-1.0)*r20*sj5)));
j4eval[0]=x1760;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x1759)))))+(IKabs(r02)));
j4eval[2]=IKsign(x1760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1761=cj5*cj5;
IkReal x1762=r11*r11;
IkReal x1763=(r11*sj5);
IkReal x1764=(cj5*r10);
IkReal x1765=((((-1.0)*x1761*x1762))+(r12*r12)+x1762+((x1761*(r10*r10)))+(((-2.0)*x1763*x1764)));
j4eval[0]=x1765;
j4eval[1]=IKsign(x1765);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x1764))+x1763))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1766=cj5*cj5;
IkReal x1767=r11*r11;
IkReal x1768=(cj5*r10);
IkReal x1769=(r11*sj5);
CheckValue<IkReal> x1770 = IKatan2WithCheck(IkReal(((((-1.0)*x1768))+x1769)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1770.valid){
continue;
}
CheckValue<IkReal> x1771=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1768*x1769))+(r12*r12)+x1767+((x1766*(r10*r10)))+(((-1.0)*x1766*x1767)))),-1);
if(!x1771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1770.value)+(((1.5707963267949)*(x1771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1772=IKcos(j4);
IkReal x1773=IKsin(j4);
IkReal x1774=(cj5*r00);
IkReal x1775=(cj5*r10);
IkReal x1776=(r21*sj5);
IkReal x1777=((1.0)*cj2);
IkReal x1778=(cj5*r20);
IkReal x1779=((1.0)*x1772);
IkReal x1780=((1.0)*x1773);
IkReal x1781=(sj5*x1773);
IkReal x1782=(sj5*x1772);
evalcond[0]=(((r12*x1773))+((r11*x1782))+(((-1.0)*x1775*x1779)));
evalcond[1]=(((x1773*x1776))+(((-1.0)*x1778*x1780))+(((-1.0)*r22*x1779)));
evalcond[2]=((((-1.0)*x1774*x1780))+(((-1.0)*r02*x1779))+((r01*x1781)));
evalcond[3]=((-1.0)+(((-1.0)*x1775*x1780))+((r11*x1781))+(((-1.0)*r12*x1779)));
evalcond[4]=((((-1.0)*cj1*x1777))+((r02*x1773))+((sj1*sj2))+(((-1.0)*x1774*x1779))+((r01*x1782)));
evalcond[5]=(((r22*x1773))+(((-1.0)*x1778*x1779))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x1777))+((x1772*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1783=((1.0)*cj5);
CheckValue<IkReal> x1784 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x1783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1784.valid){
continue;
}
CheckValue<IkReal> x1785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1783))+(((-1.0)*r20*sj5)))),-1);
if(!x1785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1784.value)+(((1.5707963267949)*(x1785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1786=IKcos(j4);
IkReal x1787=IKsin(j4);
IkReal x1788=(cj5*r00);
IkReal x1789=(cj5*r10);
IkReal x1790=(r21*sj5);
IkReal x1791=((1.0)*cj2);
IkReal x1792=(cj5*r20);
IkReal x1793=((1.0)*x1786);
IkReal x1794=((1.0)*x1787);
IkReal x1795=(sj5*x1787);
IkReal x1796=(sj5*x1786);
evalcond[0]=((((-1.0)*x1789*x1793))+((r12*x1787))+((r11*x1796)));
evalcond[1]=((((-1.0)*x1792*x1794))+(((-1.0)*r22*x1793))+((x1787*x1790)));
evalcond[2]=((((-1.0)*x1788*x1794))+(((-1.0)*r02*x1793))+((r01*x1795)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x1793))+(((-1.0)*x1789*x1794))+((r11*x1795)));
evalcond[4]=(((sj1*sj2))+((r02*x1787))+(((-1.0)*x1788*x1793))+(((-1.0)*cj1*x1791))+((r01*x1796)));
evalcond[5]=((((-1.0)*x1792*x1793))+(((-1.0)*cj1*sj2))+((r22*x1787))+((x1786*x1790))+(((-1.0)*sj1*x1791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1797 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1797.valid){
continue;
}
CheckValue<IkReal> x1798=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1797.value)+(((1.5707963267949)*(x1798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1799=IKcos(j4);
IkReal x1800=IKsin(j4);
IkReal x1801=(cj5*r00);
IkReal x1802=(cj5*r10);
IkReal x1803=(r21*sj5);
IkReal x1804=((1.0)*cj2);
IkReal x1805=(cj5*r20);
IkReal x1806=((1.0)*x1799);
IkReal x1807=((1.0)*x1800);
IkReal x1808=(sj5*x1800);
IkReal x1809=(sj5*x1799);
evalcond[0]=((((-1.0)*x1802*x1806))+((r12*x1800))+((r11*x1809)));
evalcond[1]=(((x1800*x1803))+(((-1.0)*x1805*x1807))+(((-1.0)*r22*x1806)));
evalcond[2]=((((-1.0)*x1801*x1807))+(((-1.0)*r02*x1806))+((r01*x1808)));
evalcond[3]=((-1.0)+(((-1.0)*x1802*x1807))+((r11*x1808))+(((-1.0)*r12*x1806)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x1801*x1806))+((r02*x1800))+(((-1.0)*cj1*x1804))+((r01*x1809)));
evalcond[5]=(((x1799*x1803))+(((-1.0)*x1805*x1806))+((r22*x1800))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x1804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1810=((-1.0)*r00);
IkReal x1812 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1812)==0){
continue;
}
IkReal x1811=pow(x1812,-0.5);
CheckValue<IkReal> x1813 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1810),IKFAST_ATAN2_MAGTHRESH);
if(!x1813.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1813.value));
IkReal gconst91=(r01*x1811);
IkReal gconst92=(x1810*x1811);
CheckValue<IkReal> x1814 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1814.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1814.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1815=((-1.0)*r00);
IkReal x1816=x1811;
CheckValue<IkReal> x1818 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1815),IKFAST_ATAN2_MAGTHRESH);
if(!x1818.valid){
continue;
}
IkReal x1817=((-1.0)*(x1818.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x1817;
IkReal gconst90=x1817;
IkReal gconst91=(r01*x1816);
IkReal gconst92=(x1815*x1816);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1819=((1.0)*sj0);
IkReal x1820=((1.0)*cj0);
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1819))+(((-1.0)*r02*x1820)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x1820))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x1819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x1822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1821.value)+(((1.5707963267949)*(x1822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1823=IKsin(j4);
IkReal x1824=IKcos(j4);
IkReal x1825=(cj1*cj2);
IkReal x1826=(gconst91*r01);
IkReal x1827=(gconst92*r00);
IkReal x1828=((1.0)*sj1);
IkReal x1829=(gconst92*r20);
IkReal x1830=(gconst92*r10);
IkReal x1831=((1.0)*x1824);
IkReal x1832=((1.0)*x1823);
IkReal x1833=(gconst91*x1824);
IkReal x1834=(gconst91*x1823);
evalcond[0]=(((r21*x1834))+(((-1.0)*r22*x1831))+(((-1.0)*x1829*x1832)));
evalcond[1]=(cj0+((r11*x1834))+(((-1.0)*r12*x1831))+(((-1.0)*x1830*x1832)));
evalcond[2]=((((-1.0)*sj0))+((x1823*x1826))+(((-1.0)*x1827*x1832))+(((-1.0)*r02*x1831)));
evalcond[3]=((((-1.0)*cj2*x1828))+((r22*x1823))+(((-1.0)*cj1*sj2))+((r21*x1833))+(((-1.0)*x1829*x1831)));
evalcond[4]=(((cj0*x1825))+((x1824*x1826))+(((-1.0)*cj0*sj2*x1828))+(((-1.0)*x1827*x1831))+((r02*x1823)));
evalcond[5]=((((-1.0)*sj0*sj2*x1828))+((r11*x1833))+((sj0*x1825))+((r12*x1823))+(((-1.0)*x1830*x1831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1835=((1.0)*gconst92);
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x1835)))),-1);
if(!x1836.valid){
continue;
}
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x1835)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1836.value)))+(x1837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1838=IKsin(j4);
IkReal x1839=IKcos(j4);
IkReal x1840=(cj1*cj2);
IkReal x1841=(gconst91*r01);
IkReal x1842=(gconst92*r00);
IkReal x1843=((1.0)*sj1);
IkReal x1844=(gconst92*r20);
IkReal x1845=(gconst92*r10);
IkReal x1846=((1.0)*x1839);
IkReal x1847=((1.0)*x1838);
IkReal x1848=(gconst91*x1839);
IkReal x1849=(gconst91*x1838);
evalcond[0]=((((-1.0)*r22*x1846))+((r21*x1849))+(((-1.0)*x1844*x1847)));
evalcond[1]=(cj0+(((-1.0)*r12*x1846))+(((-1.0)*x1845*x1847))+((r11*x1849)));
evalcond[2]=(((x1838*x1841))+(((-1.0)*sj0))+(((-1.0)*x1842*x1847))+(((-1.0)*r02*x1846)));
evalcond[3]=(((r22*x1838))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1843))+((r21*x1848))+(((-1.0)*x1844*x1846)));
evalcond[4]=(((cj0*x1840))+(((-1.0)*x1842*x1846))+((r02*x1838))+(((-1.0)*cj0*sj2*x1843))+((x1839*x1841)));
evalcond[5]=((((-1.0)*sj0*sj2*x1843))+((sj0*x1840))+(((-1.0)*x1845*x1846))+((r12*x1838))+((r11*x1848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1850=((-1.0)*r01);
IkReal x1852 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1852)==0){
continue;
}
IkReal x1851=pow(x1852,-0.5);
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(x1850),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x1853.value))));
IkReal gconst94=(x1850*x1851);
IkReal gconst95=((1.0)*r00*x1851);
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1854.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x1855=((-1.0)*r01);
CheckValue<IkReal> x1858 = IKatan2WithCheck(IkReal(x1855),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1858.valid){
continue;
}
IkReal x1856=((1.0)*(x1858.value));
IkReal x1857=x1851;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1856)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1856)));
IkReal gconst94=(x1855*x1857);
IkReal gconst95=((1.0)*r00*x1857);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1859=((-1.0)*r01);
CheckValue<IkReal> x1862 = IKatan2WithCheck(IkReal(x1859),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1862.valid){
continue;
}
IkReal x1860=((1.0)*(x1862.value));
IkReal x1861=x1851;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1860)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1860)));
IkReal gconst94=(x1859*x1861);
IkReal gconst95=((1.0)*r00*x1861);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1863=((-1.0)*r01);
CheckValue<IkReal> x1866 = IKatan2WithCheck(IkReal(x1863),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1866.valid){
continue;
}
IkReal x1864=((1.0)*(x1866.value));
IkReal x1865=x1851;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1864)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1864)));
IkReal gconst94=(x1863*x1865);
IkReal gconst95=((1.0)*r00*x1865);
IkReal x1867=r02*r02;
IkReal x1868=(r12*sj0);
IkReal x1869=((1.0)*cj0);
IkReal x1870=x1851;
j4eval[0]=((IKabs((((r02*x1868*x1870))+(((-1.0)*x1869*x1870))+((cj0*x1867*x1870)))))+(IKabs(((((-1.0)*r02*x1869))+(((-1.0)*x1868))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1871=((1.0)*sj0);
IkReal x1872=((1.0)*cj0);
CheckValue<IkReal> x1873=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x1873.valid){
continue;
}
CheckValue<IkReal> x1874 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1872))+(((-1.0)*r12*x1871)))),IkReal(((((-1.0)*gconst94*r11*x1871))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x1872))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1873.value)))+(x1874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1875=IKsin(j4);
IkReal x1876=IKcos(j4);
IkReal x1877=(cj1*cj2);
IkReal x1878=(gconst95*r10);
IkReal x1879=(gconst95*r20);
IkReal x1880=((1.0)*sj1);
IkReal x1881=(gconst95*r00);
IkReal x1882=((1.0)*x1876);
IkReal x1883=((1.0)*x1875);
IkReal x1884=(gconst94*x1876);
IkReal x1885=(gconst94*x1875);
evalcond[0]=(((r21*x1885))+(((-1.0)*x1879*x1883))+(((-1.0)*r22*x1882)));
evalcond[1]=(cj0+(((-1.0)*x1878*x1883))+(((-1.0)*r12*x1882))+((r11*x1885)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1882))+((r01*x1885))+(((-1.0)*x1881*x1883)));
evalcond[3]=(((r21*x1884))+(((-1.0)*x1879*x1882))+((r22*x1875))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1880)));
evalcond[4]=((((-1.0)*cj0*sj2*x1880))+((r02*x1875))+((r01*x1884))+(((-1.0)*x1881*x1882))+((cj0*x1877)));
evalcond[5]=((((-1.0)*x1878*x1882))+(((-1.0)*sj0*sj2*x1880))+((sj0*x1877))+((r12*x1875))+((r11*x1884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1886=((1.0)*gconst95);
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x1886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x1886)))),-1);
if(!x1888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1887.value)+(((1.5707963267949)*(x1888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1889=IKsin(j4);
IkReal x1890=IKcos(j4);
IkReal x1891=(cj1*cj2);
IkReal x1892=(gconst95*r10);
IkReal x1893=(gconst95*r20);
IkReal x1894=((1.0)*sj1);
IkReal x1895=(gconst95*r00);
IkReal x1896=((1.0)*x1890);
IkReal x1897=((1.0)*x1889);
IkReal x1898=(gconst94*x1890);
IkReal x1899=(gconst94*x1889);
evalcond[0]=((((-1.0)*x1893*x1897))+(((-1.0)*r22*x1896))+((r21*x1899)));
evalcond[1]=((((-1.0)*x1892*x1897))+cj0+((r11*x1899))+(((-1.0)*r12*x1896)));
evalcond[2]=((((-1.0)*r02*x1896))+(((-1.0)*sj0))+((r01*x1899))+(((-1.0)*x1895*x1897)));
evalcond[3]=((((-1.0)*x1893*x1896))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1894))+((r22*x1889))+((r21*x1898)));
evalcond[4]=(((r01*x1898))+(((-1.0)*x1895*x1896))+((cj0*x1891))+(((-1.0)*cj0*sj2*x1894))+((r02*x1889)));
evalcond[5]=((((-1.0)*x1892*x1896))+((r12*x1889))+((r11*x1898))+(((-1.0)*sj0*sj2*x1894))+((sj0*x1891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1900=((1.0)*gconst95);
CheckValue<IkReal> x1901 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x1900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1901.valid){
continue;
}
CheckValue<IkReal> x1902=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x1900)))),-1);
if(!x1902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1901.value)+(((1.5707963267949)*(x1902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1903=IKsin(j4);
IkReal x1904=IKcos(j4);
IkReal x1905=(cj1*cj2);
IkReal x1906=(gconst95*r10);
IkReal x1907=(gconst95*r20);
IkReal x1908=((1.0)*sj1);
IkReal x1909=(gconst95*r00);
IkReal x1910=((1.0)*x1904);
IkReal x1911=((1.0)*x1903);
IkReal x1912=(gconst94*x1904);
IkReal x1913=(gconst94*x1903);
evalcond[0]=((((-1.0)*r22*x1910))+(((-1.0)*x1907*x1911))+((r21*x1913)));
evalcond[1]=(cj0+(((-1.0)*r12*x1910))+((r11*x1913))+(((-1.0)*x1906*x1911)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1910))+((r01*x1913))+(((-1.0)*x1909*x1911)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x1907*x1910))+((r22*x1903))+((r21*x1912))+(((-1.0)*cj2*x1908)));
evalcond[4]=((((-1.0)*cj0*sj2*x1908))+((r01*x1912))+((cj0*x1905))+(((-1.0)*x1909*x1910))+((r02*x1903)));
evalcond[5]=(((r12*x1903))+((r11*x1912))+((sj0*x1905))+(((-1.0)*sj0*sj2*x1908))+(((-1.0)*x1906*x1910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1914=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1914;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x1914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1915=((1.0)*cj5);
IkReal x1916=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1915)));
j4eval[0]=x1916;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1915))))));
j4eval[2]=IKsign(x1916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1917=cj5*cj5;
IkReal x1918=r01*r01;
IkReal x1919=(cj5*r00);
IkReal x1920=(r01*sj5);
IkReal x1921=((((-2.0)*x1919*x1920))+((x1917*(r00*r00)))+x1918+(r02*r02)+(((-1.0)*x1917*x1918)));
j4eval[0]=x1921;
j4eval[1]=IKsign(x1921);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x1919))+x1920))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1922=cj5*cj5;
IkReal x1923=r01*r01;
IkReal x1924=(r01*sj5);
IkReal x1925=(cj5*r00);
CheckValue<IkReal> x1926 = IKatan2WithCheck(IkReal(((((-1.0)*x1925))+x1924)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1926.valid){
continue;
}
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(IKsign((((x1922*(r00*r00)))+x1923+(((-1.0)*x1922*x1923))+(r02*r02)+(((-2.0)*x1924*x1925)))),-1);
if(!x1927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1926.value)+(((1.5707963267949)*(x1927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1928=IKcos(j4);
IkReal x1929=IKsin(j4);
IkReal x1930=(cj5*r00);
IkReal x1931=(cj5*r10);
IkReal x1932=(r21*sj5);
IkReal x1933=((1.0)*sj1);
IkReal x1934=(cj5*r20);
IkReal x1935=((1.0)*x1928);
IkReal x1936=((1.0)*x1929);
IkReal x1937=(sj5*x1929);
IkReal x1938=(sj5*x1928);
evalcond[0]=((((-1.0)*x1930*x1935))+((r01*x1938))+((r02*x1929)));
evalcond[1]=((((-1.0)*x1934*x1936))+(((-1.0)*r22*x1935))+((x1929*x1932)));
evalcond[2]=((((-1.0)*r12*x1935))+(((-1.0)*x1931*x1936))+((r11*x1937)));
evalcond[3]=((-1.0)+(((-1.0)*x1930*x1936))+((r01*x1937))+(((-1.0)*r02*x1935)));
evalcond[4]=((((-1.0)*sj2*x1933))+(((-1.0)*x1931*x1935))+((r11*x1938))+((cj1*cj2))+((r12*x1929)));
evalcond[5]=(((r22*x1929))+(((-1.0)*cj1*sj2))+(((-1.0)*x1934*x1935))+(((-1.0)*cj2*x1933))+((x1928*x1932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1939=((1.0)*cj5);
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x1939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1939)))),-1);
if(!x1941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1940.value)+(((1.5707963267949)*(x1941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1942=IKcos(j4);
IkReal x1943=IKsin(j4);
IkReal x1944=(cj5*r00);
IkReal x1945=(cj5*r10);
IkReal x1946=(r21*sj5);
IkReal x1947=((1.0)*sj1);
IkReal x1948=(cj5*r20);
IkReal x1949=((1.0)*x1942);
IkReal x1950=((1.0)*x1943);
IkReal x1951=(sj5*x1943);
IkReal x1952=(sj5*x1942);
evalcond[0]=((((-1.0)*x1944*x1949))+((r01*x1952))+((r02*x1943)));
evalcond[1]=((((-1.0)*x1948*x1950))+((x1943*x1946))+(((-1.0)*r22*x1949)));
evalcond[2]=(((r11*x1951))+(((-1.0)*x1945*x1950))+(((-1.0)*r12*x1949)));
evalcond[3]=((-1.0)+(((-1.0)*x1944*x1950))+(((-1.0)*r02*x1949))+((r01*x1951)));
evalcond[4]=((((-1.0)*sj2*x1947))+(((-1.0)*x1945*x1949))+((r11*x1952))+((r12*x1943))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x1943))+(((-1.0)*cj2*x1947))+((x1942*x1946))+(((-1.0)*x1948*x1949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1953=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1953.valid){
continue;
}
CheckValue<IkReal> x1954 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1953.value)))+(x1954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1955=IKcos(j4);
IkReal x1956=IKsin(j4);
IkReal x1957=(cj5*r00);
IkReal x1958=(cj5*r10);
IkReal x1959=(r21*sj5);
IkReal x1960=((1.0)*sj1);
IkReal x1961=(cj5*r20);
IkReal x1962=((1.0)*x1955);
IkReal x1963=((1.0)*x1956);
IkReal x1964=(sj5*x1956);
IkReal x1965=(sj5*x1955);
evalcond[0]=((((-1.0)*x1957*x1962))+((r01*x1965))+((r02*x1956)));
evalcond[1]=((((-1.0)*r22*x1962))+(((-1.0)*x1961*x1963))+((x1956*x1959)));
evalcond[2]=((((-1.0)*x1958*x1963))+((r11*x1964))+(((-1.0)*r12*x1962)));
evalcond[3]=((-1.0)+(((-1.0)*x1957*x1963))+(((-1.0)*r02*x1962))+((r01*x1964)));
evalcond[4]=((((-1.0)*x1958*x1962))+(((-1.0)*sj2*x1960))+((r12*x1956))+((r11*x1965))+((cj1*cj2)));
evalcond[5]=(((x1955*x1959))+(((-1.0)*cj1*sj2))+((r22*x1956))+(((-1.0)*x1961*x1962))+(((-1.0)*cj2*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1966=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1966;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1967=((1.0)*cj5);
IkReal x1968=((((-1.0)*r21*x1967))+(((-1.0)*r20*sj5)));
j4eval[0]=x1968;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x1967)))))+(IKabs(r12)));
j4eval[2]=IKsign(x1968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1969=(sj1*sj2);
IkReal x1970=(r01*sj5);
IkReal x1971=(cj1*cj2);
IkReal x1972=((1.0)*cj5);
IkReal x1973=((((-1.0)*r21*x1972))+(((-1.0)*r20*sj5)));
j4eval[0]=x1973;
j4eval[1]=((IKabs((((x1969*x1970))+(((-1.0)*x1970*x1971))+((cj5*r00*x1971))+(((-1.0)*r00*x1969*x1972)))))+(IKabs((((r02*x1971))+(((-1.0)*r02*x1969))))));
j4eval[2]=IKsign(x1973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1974=(sj1*sj2);
IkReal x1975=(r01*sj5);
IkReal x1976=(cj1*cj2);
IkReal x1977=((1.0)*cj5);
CheckValue<IkReal> x1978 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x1974*x1977))+((x1974*x1975))+(((-1.0)*x1975*x1976))+((cj5*r00*x1976)))),IkReal((((r02*x1976))+(((-1.0)*r02*x1974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1978.valid){
continue;
}
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1977))+(((-1.0)*r20*sj5)))),-1);
if(!x1979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1978.value)+(((1.5707963267949)*(x1979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1980=IKcos(j4);
IkReal x1981=IKsin(j4);
IkReal x1982=(cj5*r00);
IkReal x1983=(cj5*r10);
IkReal x1984=(r21*sj5);
IkReal x1985=((1.0)*cj2);
IkReal x1986=(cj5*r20);
IkReal x1987=((1.0)*x1980);
IkReal x1988=((1.0)*x1981);
IkReal x1989=(sj5*x1981);
IkReal x1990=(sj5*x1980);
evalcond[0]=(((r01*x1990))+(((-1.0)*x1982*x1987))+((r02*x1981)));
evalcond[1]=((((-1.0)*x1986*x1988))+((x1981*x1984))+(((-1.0)*r22*x1987)));
evalcond[2]=((((-1.0)*x1983*x1988))+((r11*x1989))+(((-1.0)*r12*x1987)));
evalcond[3]=((1.0)+(((-1.0)*r02*x1987))+((r01*x1989))+(((-1.0)*x1982*x1988)));
evalcond[4]=((((-1.0)*x1983*x1987))+((r11*x1990))+((sj1*sj2))+((r12*x1981))+(((-1.0)*cj1*x1985)));
evalcond[5]=((((-1.0)*x1986*x1987))+(((-1.0)*sj1*x1985))+(((-1.0)*cj1*sj2))+((x1980*x1984))+((r22*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1991=((1.0)*cj5);
CheckValue<IkReal> x1992 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x1991))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1992.valid){
continue;
}
CheckValue<IkReal> x1993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1991))+(((-1.0)*r20*sj5)))),-1);
if(!x1993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1992.value)+(((1.5707963267949)*(x1993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1994=IKcos(j4);
IkReal x1995=IKsin(j4);
IkReal x1996=(cj5*r00);
IkReal x1997=(cj5*r10);
IkReal x1998=(r21*sj5);
IkReal x1999=((1.0)*cj2);
IkReal x2000=(cj5*r20);
IkReal x2001=((1.0)*x1994);
IkReal x2002=((1.0)*x1995);
IkReal x2003=(sj5*x1995);
IkReal x2004=(sj5*x1994);
evalcond[0]=(((r01*x2004))+((r02*x1995))+(((-1.0)*x1996*x2001)));
evalcond[1]=((((-1.0)*r22*x2001))+((x1995*x1998))+(((-1.0)*x2000*x2002)));
evalcond[2]=(((r11*x2003))+(((-1.0)*r12*x2001))+(((-1.0)*x1997*x2002)));
evalcond[3]=((1.0)+((r01*x2003))+(((-1.0)*r02*x2001))+(((-1.0)*x1996*x2002)));
evalcond[4]=(((r11*x2004))+((r12*x1995))+((sj1*sj2))+(((-1.0)*x1997*x2001))+(((-1.0)*cj1*x1999)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x1994*x1998))+(((-1.0)*x2000*x2001))+(((-1.0)*sj1*x1999))+((r22*x1995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
CheckValue<IkReal> x2006=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2005.value)+(((1.5707963267949)*(x2006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2007=IKcos(j4);
IkReal x2008=IKsin(j4);
IkReal x2009=(cj5*r00);
IkReal x2010=(cj5*r10);
IkReal x2011=(r21*sj5);
IkReal x2012=((1.0)*cj2);
IkReal x2013=(cj5*r20);
IkReal x2014=((1.0)*x2007);
IkReal x2015=((1.0)*x2008);
IkReal x2016=(sj5*x2008);
IkReal x2017=(sj5*x2007);
evalcond[0]=((((-1.0)*x2009*x2014))+((r02*x2008))+((r01*x2017)));
evalcond[1]=((((-1.0)*x2013*x2015))+((x2008*x2011))+(((-1.0)*r22*x2014)));
evalcond[2]=((((-1.0)*x2010*x2015))+(((-1.0)*r12*x2014))+((r11*x2016)));
evalcond[3]=((1.0)+(((-1.0)*x2009*x2015))+((r01*x2016))+(((-1.0)*r02*x2014)));
evalcond[4]=((((-1.0)*x2010*x2014))+((r12*x2008))+((sj1*sj2))+(((-1.0)*cj1*x2012))+((r11*x2017)));
evalcond[5]=(((r22*x2008))+(((-1.0)*x2013*x2014))+(((-1.0)*cj1*sj2))+((x2007*x2011))+(((-1.0)*sj1*x2012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2018=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2018);
rxp1_1=(px*r21);
rxp1_2=(r11*x2018);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2019=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2019);
rxp1_1=(px*r21);
rxp1_2=(r11*x2019);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2020=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2020);
rxp1_1=(px*r21);
rxp1_2=(r11*x2020);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2023=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x2023.valid){
continue;
}
IkReal x2021=x2023.value;
IkReal x2022=(sj0*x2021);
cj4array[0]=((((-1.0)*cj1*cj2*x2022))+((sj1*sj2*x2022)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2024=IKsin(j4);
IkReal x2025=IKcos(j4);
IkReal x2026=(r21*sj5);
IkReal x2027=((1.0)*cj5*r20);
evalcond[0]=(r02*x2024);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2025)));
evalcond[2]=(((x2024*x2026))+(((-1.0)*x2024*x2027)));
evalcond[3]=((((-1.0)*cj5*r10*x2024))+((r11*sj5*x2024)));
evalcond[4]=(((x2025*x2026))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x2025*x2027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2029=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2029.valid){
continue;
}
IkReal x2028=x2029.value;
cj4array[0]=(((cj2*sj1*x2028))+((cj1*sj2*x2028)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2030=IKsin(j4);
IkReal x2031=IKcos(j4);
IkReal x2032=((1.0)*sj0);
IkReal x2033=((1.0)*cj5);
IkReal x2034=(sj5*x2030);
evalcond[0]=(r02*x2030);
evalcond[1]=((((-1.0)*x2032))+(((-1.0)*r02*x2031)));
evalcond[2]=(((r21*x2034))+(((-1.0)*r20*x2030*x2033)));
evalcond[3]=((((-1.0)*r10*x2030*x2033))+((r11*x2034)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x2032))+(((-1.0)*r10*x2031*x2033))+((r11*sj5*x2031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2035=IKPowWithIntegerCheck(r02,-1);
if(!x2035.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2035.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2036=IKsin(j4);
IkReal x2037=IKcos(j4);
IkReal x2038=((1.0)*sj1);
IkReal x2039=(r21*sj5);
IkReal x2040=(r11*sj5);
IkReal x2041=((1.0)*cj5*x2037);
IkReal x2042=((1.0)*cj5*x2036);
evalcond[0]=(r02*x2036);
evalcond[1]=((((-1.0)*r20*x2042))+((x2036*x2039)));
evalcond[2]=((((-1.0)*r10*x2042))+((x2036*x2040)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r20*x2041))+((x2037*x2039))+(((-1.0)*cj2*x2038)));
evalcond[4]=(((x2037*x2040))+((cj1*cj2*sj0))+(((-1.0)*r10*x2041))+(((-1.0)*sj0*sj2*x2038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2043=((1.0)*sj0);
IkReal x2044=((1.0)*cj0);
CheckValue<IkReal> x2045 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2044))+(((-1.0)*r12*x2043)))),IkReal(((((-1.0)*r11*sj5*x2043))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2045.valid){
continue;
}
CheckValue<IkReal> x2046=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2045.value)+(((1.5707963267949)*(x2046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2047=IKsin(j4);
IkReal x2048=IKcos(j4);
IkReal x2049=(cj5*r00);
IkReal x2050=(cj1*cj2);
IkReal x2051=(cj5*r10);
IkReal x2052=(r21*sj5);
IkReal x2053=((1.0)*sj1);
IkReal x2054=(cj5*r20);
IkReal x2055=((1.0)*x2048);
IkReal x2056=((1.0)*x2047);
IkReal x2057=(sj5*x2047);
IkReal x2058=(sj5*x2048);
evalcond[0]=((((-1.0)*x2054*x2056))+(((-1.0)*r22*x2055))+((x2047*x2052)));
evalcond[1]=(((r11*x2057))+cj0+(((-1.0)*r12*x2055))+(((-1.0)*x2051*x2056)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2057))+(((-1.0)*r02*x2055))+(((-1.0)*x2049*x2056)));
evalcond[3]=(((r22*x2047))+(((-1.0)*x2054*x2055))+(((-1.0)*cj2*x2053))+(((-1.0)*cj1*sj2))+((x2048*x2052)));
evalcond[4]=(((r01*x2058))+(((-1.0)*cj0*sj2*x2053))+((r02*x2047))+((cj0*x2050))+(((-1.0)*x2049*x2055)));
evalcond[5]=(((r11*x2058))+((r12*x2047))+(((-1.0)*sj0*sj2*x2053))+((sj0*x2050))+(((-1.0)*x2051*x2055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2059=((1.0)*cj5);
CheckValue<IkReal> x2060 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2060.valid){
continue;
}
CheckValue<IkReal> x2061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2059)))),-1);
if(!x2061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2060.value)+(((1.5707963267949)*(x2061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2062=IKsin(j4);
IkReal x2063=IKcos(j4);
IkReal x2064=(cj5*r00);
IkReal x2065=(cj1*cj2);
IkReal x2066=(cj5*r10);
IkReal x2067=(r21*sj5);
IkReal x2068=((1.0)*sj1);
IkReal x2069=(cj5*r20);
IkReal x2070=((1.0)*x2063);
IkReal x2071=((1.0)*x2062);
IkReal x2072=(sj5*x2062);
IkReal x2073=(sj5*x2063);
evalcond[0]=((((-1.0)*r22*x2070))+(((-1.0)*x2069*x2071))+((x2062*x2067)));
evalcond[1]=(cj0+(((-1.0)*r12*x2070))+((r11*x2072))+(((-1.0)*x2066*x2071)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2070))+(((-1.0)*x2064*x2071))+((r01*x2072)));
evalcond[3]=(((r22*x2062))+(((-1.0)*cj2*x2068))+(((-1.0)*cj1*sj2))+(((-1.0)*x2069*x2070))+((x2063*x2067)));
evalcond[4]=(((cj0*x2065))+(((-1.0)*x2064*x2070))+(((-1.0)*cj0*sj2*x2068))+((r02*x2062))+((r01*x2073)));
evalcond[5]=((((-1.0)*sj0*sj2*x2068))+((r12*x2062))+((r11*x2073))+((sj0*x2065))+(((-1.0)*x2066*x2070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2074=((1.0)*cj5);
CheckValue<IkReal> x2075 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2075.valid){
continue;
}
CheckValue<IkReal> x2076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2074)))),-1);
if(!x2076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2075.value)+(((1.5707963267949)*(x2076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2077=IKsin(j4);
IkReal x2078=IKcos(j4);
IkReal x2079=(cj5*r00);
IkReal x2080=(cj1*cj2);
IkReal x2081=(cj5*r10);
IkReal x2082=(r21*sj5);
IkReal x2083=((1.0)*sj1);
IkReal x2084=(cj5*r20);
IkReal x2085=((1.0)*x2078);
IkReal x2086=((1.0)*x2077);
IkReal x2087=(sj5*x2077);
IkReal x2088=(sj5*x2078);
evalcond[0]=((((-1.0)*r22*x2085))+(((-1.0)*x2084*x2086))+((x2077*x2082)));
evalcond[1]=(cj0+(((-1.0)*x2081*x2086))+(((-1.0)*r12*x2085))+((r11*x2087)));
evalcond[2]=((((-1.0)*r02*x2085))+(((-1.0)*sj0))+((r01*x2087))+(((-1.0)*x2079*x2086)));
evalcond[3]=(((r22*x2077))+((x2078*x2082))+(((-1.0)*x2084*x2085))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2083)));
evalcond[4]=(((r02*x2077))+(((-1.0)*cj0*sj2*x2083))+((r01*x2088))+((cj0*x2080))+(((-1.0)*x2079*x2085)));
evalcond[5]=(((r12*x2077))+((sj0*x2080))+(((-1.0)*x2081*x2085))+(((-1.0)*sj0*sj2*x2083))+((r11*x2088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2089=r21*r21;
IkReal x2090=cj5*cj5;
IkReal x2091=(cj1*sj2);
IkReal x2092=((1.0)*r22);
IkReal x2093=(cj5*r20);
IkReal x2094=(r21*sj5);
IkReal x2095=(cj2*sj1);
CheckValue<IkReal> x2096 = IKatan2WithCheck(IkReal(((((-1.0)*x2091*x2092))+(((-1.0)*x2092*x2095)))),IkReal((((x2091*x2093))+(((-1.0)*x2091*x2094))+((x2093*x2095))+(((-1.0)*x2094*x2095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2096.valid){
continue;
}
CheckValue<IkReal> x2097=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2090*(r20*r20)))+(((-1.0)*x2089))+(((2.0)*x2093*x2094))+((x2089*x2090))+(((-1.0)*r22*x2092)))),-1);
if(!x2097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2096.value)+(((1.5707963267949)*(x2097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2098=IKsin(j4);
IkReal x2099=IKcos(j4);
IkReal x2100=(r21*sj5);
IkReal x2101=(cj5*r20);
IkReal x2102=((1.0)*x2099);
evalcond[0]=(((x2098*x2100))+(((-1.0)*r22*x2102))+(((-1.0)*x2098*x2101)));
evalcond[1]=(((x2099*x2100))+(((-1.0)*x2101*x2102))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((r22*x2098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2103=(cj5*sj4);
IkReal x2104=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2103))+((r01*x2104)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2104))+((r10*x2103))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2103))+((r01*x2104))))+IKsqr(((((-1.0)*r11*x2104))+((r10*x2103))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2103))+((r01*x2104))), ((((-1.0)*r11*x2104))+((r10*x2103))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2105=IKcos(j0);
IkReal x2106=IKsin(j0);
IkReal x2107=((0.39225)*cj1);
IkReal x2108=((1.0)*sj1);
IkReal x2109=(r11*sj5);
IkReal x2110=(cj5*r11);
IkReal x2111=((1.0)*r00);
IkReal x2112=(cj4*cj5);
IkReal x2113=((1.0)*r10);
IkReal x2114=((0.425)*sj1);
IkReal x2115=((0.09465)*sj5);
IkReal x2116=(cj5*r01);
IkReal x2117=(cj5*sj4);
IkReal x2118=((1.0)*cj4);
IkReal x2119=(r01*sj5);
IkReal x2120=((0.39225)*sj1);
IkReal x2121=(sj2*x2106);
IkReal x2122=(cj1*x2105);
IkReal x2123=(cj2*x2106);
IkReal x2124=(cj2*x2105);
IkReal x2125=(sj2*x2105);
evalcond[0]=(((sj4*x2109))+x2105+(((-1.0)*r12*x2118))+(((-1.0)*x2113*x2117)));
evalcond[1]=((((-1.0)*x2111*x2117))+(((-1.0)*x2106))+((sj4*x2119))+(((-1.0)*r02*x2118)));
evalcond[2]=((((-1.0)*x2108*x2124))+(((-1.0)*sj5*x2111))+(((-1.0)*sj2*x2122))+(((-1.0)*x2116)));
evalcond[3]=((((-1.0)*x2108*x2123))+(((-1.0)*cj1*x2121))+(((-1.0)*sj5*x2113))+(((-1.0)*x2110)));
evalcond[4]=((((-1.0)*x2108*x2125))+((cj2*x2122))+((cj4*x2119))+((r02*sj4))+(((-1.0)*x2111*x2112)));
evalcond[5]=((((-1.0)*x2108*x2121))+((cj4*x2109))+(((-1.0)*x2112*x2113))+((cj1*x2123))+((r12*sj4)));
evalcond[6]=((((-1.0)*r00*x2115))+((x2107*x2125))+(((-0.10915)*x2106))+((x2105*x2114))+((x2120*x2124))+(((-1.0)*px))+(((-0.09465)*x2116)));
evalcond[7]=((((-1.0)*r10*x2115))+((x2107*x2121))+(((0.10915)*x2105))+((x2106*x2114))+((x2120*x2123))+(((-1.0)*py))+(((-0.09465)*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2126 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2126.valid){
continue;
}
CheckValue<IkReal> x2127=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x2127.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2126.value)+(((1.5707963267949)*(x2127.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2128=IKcos(j0);
IkReal x2129=IKsin(j0);
IkReal x2130=(cj1*sj2);
IkReal x2131=(cj5*r11);
IkReal x2132=((1.0)*sj5);
IkReal x2133=(cj2*sj1);
IkReal x2134=((0.425)*sj1);
IkReal x2135=((0.09465)*sj5);
IkReal x2136=(cj5*r01);
IkReal x2137=((0.39225)*x2129);
IkReal x2138=((1.0)*x2128);
IkReal x2139=((1.0)*x2129);
IkReal x2140=((0.39225)*x2128);
evalcond[0]=((((-1.0)*r00*x2132))+(((-1.0)*x2133*x2138))+(((-1.0)*x2130*x2138))+(((-1.0)*x2136)));
evalcond[1]=((((-1.0)*x2133*x2139))+(((-1.0)*x2130*x2139))+(((-1.0)*x2131))+(((-1.0)*r10*x2132)));
evalcond[2]=(((x2133*x2140))+(((-0.09465)*x2136))+((x2130*x2140))+(((-0.10915)*x2129))+(((-1.0)*r00*x2135))+(((-1.0)*px))+((x2128*x2134)));
evalcond[3]=((((-0.09465)*x2131))+(((-1.0)*py))+((x2133*x2137))+((x2129*x2134))+(((0.10915)*x2128))+(((-1.0)*r10*x2135))+((x2130*x2137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2141=((1.0)*cj5);
IkReal x2142=((((-1.0)*r01*x2141))+(((-1.0)*r00*sj5)));
j4eval[0]=x2142;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2141))))));
j4eval[2]=IKsign(x2142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2143=((1.0)*cj5);
IkReal x2144=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2143)));
j4eval[0]=x2144;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2143))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x2144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2145=((1.0)*sj0);
IkReal x2146=((1.0)*cj0);
IkReal x2147=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2147;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2145))+(((-1.0)*r01*sj5*x2146)))))+(IKabs(((((-1.0)*r02*x2146))+(((-1.0)*r12*x2145))))));
j4eval[2]=IKsign(x2147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2148=((-1.0)*r20);
IkReal x2150 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2150)==0){
continue;
}
IkReal x2149=pow(x2150,-0.5);
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2148),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2151.value));
IkReal gconst79=(r21*x2149);
IkReal gconst80=(x2148*x2149);
CheckValue<IkReal> x2152 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2152.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2152.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2153=((-1.0)*r20);
IkReal x2154=x2149;
CheckValue<IkReal> x2156 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2153),IKFAST_ATAN2_MAGTHRESH);
if(!x2156.valid){
continue;
}
IkReal x2155=((-1.0)*(x2156.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2155;
IkReal gconst78=x2155;
IkReal gconst79=(r21*x2154);
IkReal gconst80=(x2153*x2154);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2157=((-1.0)*r20);
IkReal x2158=x2149;
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2157),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
IkReal x2159=((-1.0)*(x2160.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2159;
IkReal gconst78=x2159;
IkReal gconst79=(r21*x2158);
IkReal gconst80=(x2157*x2158);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2161=((-1.0)*r20);
IkReal x2162=x2149;
CheckValue<IkReal> x2164 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2161),IKFAST_ATAN2_MAGTHRESH);
if(!x2164.valid){
continue;
}
IkReal x2163=((-1.0)*(x2164.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2163;
IkReal gconst78=x2163;
IkReal gconst79=(r21*x2162);
IkReal gconst80=(x2161*x2162);
IkReal x2165=((1.0)*(r22*r22));
CheckValue<IkReal> x2169=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2165))),-1);
if(!x2169.valid){
continue;
}
IkReal x2166=x2169.value;
IkReal x2167=((1.0)*x2166);
IkReal x2168=((((-1.0)*x2167*(r20*r20*r20*r20)))+(((-1.0)*x2167*(r21*r21*r21*r21)))+(((-1.0)*x2165))+(((-2.0)*x2166*(r20*r20)*(r21*r21))));
j4eval[0]=x2168;
j4eval[1]=IKsign(x2168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2170=(cj1*sj2);
IkReal x2171=(gconst80*r20);
IkReal x2172=((1.0)*r22);
IkReal x2173=(gconst79*r21);
IkReal x2174=(cj2*sj1);
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal(((((-1.0)*x2170*x2172))+(((-1.0)*x2172*x2174)))),IkReal((((x2170*x2171))+((x2171*x2174))+(((-1.0)*x2173*x2174))+(((-1.0)*x2170*x2173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176=IKPowWithIntegerCheck(IKsign(((((2.0)*x2171*x2173))+(((-1.0)*(x2171*x2171)))+(((-1.0)*(x2173*x2173)))+(((-1.0)*r22*x2172)))),-1);
if(!x2176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2175.value)+(((1.5707963267949)*(x2176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2177=IKsin(j4);
IkReal x2178=IKcos(j4);
IkReal x2179=(gconst80*r20);
IkReal x2180=(cj1*cj2);
IkReal x2181=(gconst80*r10);
IkReal x2182=((1.0)*sj1);
IkReal x2183=(gconst80*r00);
IkReal x2184=((1.0)*x2178);
IkReal x2185=((1.0)*x2177);
IkReal x2186=(gconst79*x2177);
IkReal x2187=(gconst79*x2178);
evalcond[0]=(((r21*x2186))+(((-1.0)*r22*x2184))+(((-1.0)*x2179*x2185)));
evalcond[1]=(cj0+(((-1.0)*x2181*x2185))+((r11*x2186))+(((-1.0)*r12*x2184)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2184))+(((-1.0)*x2183*x2185))+((r01*x2186)));
evalcond[3]=(((r22*x2177))+(((-1.0)*cj1*sj2))+((r21*x2187))+(((-1.0)*x2179*x2184))+(((-1.0)*cj2*x2182)));
evalcond[4]=(((cj0*x2180))+((r02*x2177))+(((-1.0)*cj0*sj2*x2182))+(((-1.0)*x2183*x2184))+((r01*x2187)));
evalcond[5]=((((-1.0)*sj0*sj2*x2182))+((sj0*x2180))+(((-1.0)*x2181*x2184))+((r11*x2187))+((r12*x2177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2188=((1.0)*gconst80);
CheckValue<IkReal> x2189 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2188))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2189.valid){
continue;
}
CheckValue<IkReal> x2190=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2188)))),-1);
if(!x2190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2189.value)+(((1.5707963267949)*(x2190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2191=IKsin(j4);
IkReal x2192=IKcos(j4);
IkReal x2193=(gconst80*r20);
IkReal x2194=(cj1*cj2);
IkReal x2195=(gconst80*r10);
IkReal x2196=((1.0)*sj1);
IkReal x2197=(gconst80*r00);
IkReal x2198=((1.0)*x2192);
IkReal x2199=((1.0)*x2191);
IkReal x2200=(gconst79*x2191);
IkReal x2201=(gconst79*x2192);
evalcond[0]=((((-1.0)*x2193*x2199))+(((-1.0)*r22*x2198))+((r21*x2200)));
evalcond[1]=((((-1.0)*x2195*x2199))+cj0+((r11*x2200))+(((-1.0)*r12*x2198)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2200))+(((-1.0)*x2197*x2199))+(((-1.0)*r02*x2198)));
evalcond[3]=(((r22*x2191))+(((-1.0)*x2193*x2198))+(((-1.0)*cj1*sj2))+((r21*x2201))+(((-1.0)*cj2*x2196)));
evalcond[4]=(((r01*x2201))+(((-1.0)*x2197*x2198))+((cj0*x2194))+(((-1.0)*cj0*sj2*x2196))+((r02*x2191)));
evalcond[5]=((((-1.0)*sj0*sj2*x2196))+(((-1.0)*x2195*x2198))+((r11*x2201))+((sj0*x2194))+((r12*x2191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2202=((1.0)*gconst80);
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
CheckValue<IkReal> x2204=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x2202)))),-1);
if(!x2204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2203.value)+(((1.5707963267949)*(x2204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2205=IKsin(j4);
IkReal x2206=IKcos(j4);
IkReal x2207=(gconst80*r20);
IkReal x2208=(cj1*cj2);
IkReal x2209=(gconst80*r10);
IkReal x2210=((1.0)*sj1);
IkReal x2211=(gconst80*r00);
IkReal x2212=((1.0)*x2206);
IkReal x2213=((1.0)*x2205);
IkReal x2214=(gconst79*x2205);
IkReal x2215=(gconst79*x2206);
evalcond[0]=((((-1.0)*x2207*x2213))+(((-1.0)*r22*x2212))+((r21*x2214)));
evalcond[1]=(cj0+(((-1.0)*r12*x2212))+((r11*x2214))+(((-1.0)*x2209*x2213)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2214))+(((-1.0)*x2211*x2213))+(((-1.0)*r02*x2212)));
evalcond[3]=((((-1.0)*x2207*x2212))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2210))+((r21*x2215))+((r22*x2205)));
evalcond[4]=(((r02*x2205))+(((-1.0)*cj0*sj2*x2210))+((r01*x2215))+((cj0*x2208))+(((-1.0)*x2211*x2212)));
evalcond[5]=(((r12*x2205))+((r11*x2215))+(((-1.0)*x2209*x2212))+((sj0*x2208))+(((-1.0)*sj0*sj2*x2210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2216=((-1.0)*r21);
IkReal x2218 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2218)==0){
continue;
}
IkReal x2217=pow(x2218,-0.5);
CheckValue<IkReal> x2219 = IKatan2WithCheck(IkReal(x2216),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2219.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2219.value))));
IkReal gconst82=(x2216*x2217);
IkReal gconst83=((1.0)*r20*x2217);
CheckValue<IkReal> x2220 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2220.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2220.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2221=((-1.0)*r21);
CheckValue<IkReal> x2224 = IKatan2WithCheck(IkReal(x2221),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2224.valid){
continue;
}
IkReal x2222=((1.0)*(x2224.value));
IkReal x2223=x2217;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2222)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2222)));
IkReal gconst82=(x2221*x2223);
IkReal gconst83=((1.0)*r20*x2223);
IkReal x2225=r22*r22;
IkReal x2226=((1.0)*x2225);
CheckValue<IkReal> x2230=IKPowWithIntegerCheck(((-1.0)+x2225),-1);
if(!x2230.valid){
continue;
}
IkReal x2227=x2230.value;
if((((1.0)+(((-1.0)*x2226)))) < -0.00001)
continue;
IkReal x2228=IKsqrt(((1.0)+(((-1.0)*x2226))));
IkReal x2229=(cj0*x2227*x2228);
j4eval[0]=((IKabs(((((-1.0)*x2226*x2229))+x2229)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2231=((-1.0)*r21);
CheckValue<IkReal> x2234 = IKatan2WithCheck(IkReal(x2231),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2234.valid){
continue;
}
IkReal x2232=((1.0)*(x2234.value));
IkReal x2233=x2217;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2232)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2232)));
IkReal gconst82=(x2231*x2233);
IkReal gconst83=((1.0)*r20*x2233);
IkReal x2235=r22*r22;
IkReal x2236=((1.0)*x2235);
CheckValue<IkReal> x2240=IKPowWithIntegerCheck(((-1.0)+x2235),-1);
if(!x2240.valid){
continue;
}
IkReal x2237=x2240.value;
if((((1.0)+(((-1.0)*x2236)))) < -0.00001)
continue;
IkReal x2238=IKsqrt(((1.0)+(((-1.0)*x2236))));
IkReal x2239=(sj0*x2237*x2238);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2239+(((-1.0)*x2236*x2239))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2241=((-1.0)*r21);
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal(x2241),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
IkReal x2242=((1.0)*(x2244.value));
IkReal x2243=x2217;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2242)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2242)));
IkReal gconst82=(x2241*x2243);
IkReal gconst83=((1.0)*r20*x2243);
IkReal x2245=r22*r22;
IkReal x2246=(r12*sj0);
IkReal x2247=(cj0*r02);
CheckValue<IkReal> x2251=IKPowWithIntegerCheck(((-1.0)+x2245),-1);
if(!x2251.valid){
continue;
}
IkReal x2248=x2251.value;
if((((1.0)+(((-1.0)*x2245)))) < -0.00001)
continue;
IkReal x2249=IKsqrt(((1.0)+(((-1.0)*x2245))));
IkReal x2250=(r22*x2248*x2249);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2246*x2250))+((x2247*x2250)))))+(IKabs(((((-1.0)*x2246))+(((-1.0)*x2247))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2252=((1.0)*sj0);
IkReal x2253=((1.0)*cj0);
CheckValue<IkReal> x2254=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2254.valid){
continue;
}
CheckValue<IkReal> x2255 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2253))+(((-1.0)*r12*x2252)))),IkReal(((((-1.0)*gconst82*r11*x2252))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x2253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2254.value)))+(x2255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2256=IKsin(j4);
IkReal x2257=IKcos(j4);
IkReal x2258=(gconst82*r21);
IkReal x2259=(cj1*cj2);
IkReal x2260=(gconst83*r00);
IkReal x2261=((1.0)*sj1);
IkReal x2262=(gconst83*r20);
IkReal x2263=(gconst83*r10);
IkReal x2264=((1.0)*x2257);
IkReal x2265=(gconst82*x2256);
IkReal x2266=((1.0)*x2256);
IkReal x2267=(gconst82*x2257);
evalcond[0]=(((x2256*x2258))+(((-1.0)*r22*x2264))+(((-1.0)*x2262*x2266)));
evalcond[1]=(cj0+(((-1.0)*x2263*x2266))+((r11*x2265))+(((-1.0)*r12*x2264)));
evalcond[2]=(((r01*x2265))+(((-1.0)*sj0))+(((-1.0)*x2260*x2266))+(((-1.0)*r02*x2264)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x2257*x2258))+((r22*x2256))+(((-1.0)*x2262*x2264))+(((-1.0)*cj2*x2261)));
evalcond[4]=(((r01*x2267))+((cj0*x2259))+(((-1.0)*x2260*x2264))+(((-1.0)*cj0*sj2*x2261))+((r02*x2256)));
evalcond[5]=(((r12*x2256))+(((-1.0)*x2263*x2264))+((r11*x2267))+(((-1.0)*sj0*sj2*x2261))+((sj0*x2259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2268=((1.0)*gconst83);
CheckValue<IkReal> x2269=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x2268)))),-1);
if(!x2269.valid){
continue;
}
CheckValue<IkReal> x2270 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2268))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2269.value)))+(x2270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2271=IKsin(j4);
IkReal x2272=IKcos(j4);
IkReal x2273=(gconst82*r21);
IkReal x2274=(cj1*cj2);
IkReal x2275=(gconst83*r00);
IkReal x2276=((1.0)*sj1);
IkReal x2277=(gconst83*r20);
IkReal x2278=(gconst83*r10);
IkReal x2279=((1.0)*x2272);
IkReal x2280=(gconst82*x2271);
IkReal x2281=((1.0)*x2271);
IkReal x2282=(gconst82*x2272);
evalcond[0]=((((-1.0)*x2277*x2281))+(((-1.0)*r22*x2279))+((x2271*x2273)));
evalcond[1]=(((r11*x2280))+cj0+(((-1.0)*x2278*x2281))+(((-1.0)*r12*x2279)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2280))+(((-1.0)*r02*x2279))+(((-1.0)*x2275*x2281)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x2271))+((x2272*x2273))+(((-1.0)*x2277*x2279))+(((-1.0)*cj2*x2276)));
evalcond[4]=((((-1.0)*x2275*x2279))+((cj0*x2274))+(((-1.0)*cj0*sj2*x2276))+((r02*x2271))+((r01*x2282)));
evalcond[5]=(((sj0*x2274))+(((-1.0)*x2278*x2279))+((r11*x2282))+(((-1.0)*sj0*sj2*x2276))+((r12*x2271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2283=((1.0)*gconst83);
CheckValue<IkReal> x2284=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x2283)))),-1);
if(!x2284.valid){
continue;
}
CheckValue<IkReal> x2285 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2284.value)))+(x2285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2286=IKsin(j4);
IkReal x2287=IKcos(j4);
IkReal x2288=(gconst82*r21);
IkReal x2289=(cj1*cj2);
IkReal x2290=(gconst83*r00);
IkReal x2291=((1.0)*sj1);
IkReal x2292=(gconst83*r20);
IkReal x2293=(gconst83*r10);
IkReal x2294=((1.0)*x2287);
IkReal x2295=(gconst82*x2286);
IkReal x2296=((1.0)*x2286);
IkReal x2297=(gconst82*x2287);
evalcond[0]=((((-1.0)*x2292*x2296))+(((-1.0)*r22*x2294))+((x2286*x2288)));
evalcond[1]=(cj0+(((-1.0)*x2293*x2296))+(((-1.0)*r12*x2294))+((r11*x2295)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2294))+((r01*x2295))+(((-1.0)*x2290*x2296)));
evalcond[3]=((((-1.0)*cj2*x2291))+(((-1.0)*x2292*x2294))+((x2287*x2288))+(((-1.0)*cj1*sj2))+((r22*x2286)));
evalcond[4]=(((cj0*x2289))+(((-1.0)*cj0*sj2*x2291))+((r01*x2297))+(((-1.0)*x2290*x2294))+((r02*x2286)));
evalcond[5]=((((-1.0)*sj0*sj2*x2291))+((r12*x2286))+(((-1.0)*x2293*x2294))+((sj0*x2289))+((r11*x2297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2298=((-1.0)*r10);
IkReal x2300 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2300)==0){
continue;
}
IkReal x2299=pow(x2300,-0.5);
CheckValue<IkReal> x2301 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2298),IKFAST_ATAN2_MAGTHRESH);
if(!x2301.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2301.value));
IkReal gconst85=(r11*x2299);
IkReal gconst86=(x2298*x2299);
CheckValue<IkReal> x2302 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2302.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2302.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2303=((-1.0)*r10);
IkReal x2304=x2299;
CheckValue<IkReal> x2306 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2303),IKFAST_ATAN2_MAGTHRESH);
if(!x2306.valid){
continue;
}
IkReal x2305=((-1.0)*(x2306.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2305;
IkReal gconst84=x2305;
IkReal gconst85=(r11*x2304);
IkReal gconst86=(x2303*x2304);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2307=((1.0)*sj0);
IkReal x2308=((1.0)*gconst85);
CheckValue<IkReal> x2309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2308))+(((-1.0)*gconst86*r21)))),-1);
if(!x2309.valid){
continue;
}
CheckValue<IkReal> x2310 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2307)))),IkReal(((((-1.0)*gconst85*r11*x2307))+((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x2308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2309.value)))+(x2310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2311=IKsin(j4);
IkReal x2312=IKcos(j4);
IkReal x2313=(cj1*cj2);
IkReal x2314=(gconst86*r00);
IkReal x2315=((1.0)*sj1);
IkReal x2316=(gconst86*r10);
IkReal x2317=(gconst86*r20);
IkReal x2318=((1.0)*x2312);
IkReal x2319=((1.0)*x2311);
IkReal x2320=(gconst85*x2312);
IkReal x2321=(gconst85*x2311);
evalcond[0]=((((-1.0)*r22*x2318))+((r21*x2321))+(((-1.0)*x2317*x2319)));
evalcond[1]=(cj0+((r11*x2321))+(((-1.0)*r12*x2318))+(((-1.0)*x2316*x2319)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2318))+(((-1.0)*x2314*x2319))+((r01*x2321)));
evalcond[3]=(((r21*x2320))+(((-1.0)*cj2*x2315))+((r22*x2311))+(((-1.0)*cj1*sj2))+(((-1.0)*x2317*x2318)));
evalcond[4]=((((-1.0)*cj0*sj2*x2315))+(((-1.0)*x2314*x2318))+((r01*x2320))+((r02*x2311))+((cj0*x2313)));
evalcond[5]=(((r11*x2320))+((sj0*x2313))+((r12*x2311))+(((-1.0)*sj0*sj2*x2315))+(((-1.0)*x2316*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2322=((1.0)*gconst86);
CheckValue<IkReal> x2323=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2322)))),-1);
if(!x2323.valid){
continue;
}
CheckValue<IkReal> x2324 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2322))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2323.value)))+(x2324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2325=IKsin(j4);
IkReal x2326=IKcos(j4);
IkReal x2327=(cj1*cj2);
IkReal x2328=(gconst86*r00);
IkReal x2329=((1.0)*sj1);
IkReal x2330=(gconst86*r10);
IkReal x2331=(gconst86*r20);
IkReal x2332=((1.0)*x2326);
IkReal x2333=((1.0)*x2325);
IkReal x2334=(gconst85*x2326);
IkReal x2335=(gconst85*x2325);
evalcond[0]=(((r21*x2335))+(((-1.0)*r22*x2332))+(((-1.0)*x2331*x2333)));
evalcond[1]=(cj0+((r11*x2335))+(((-1.0)*r12*x2332))+(((-1.0)*x2330*x2333)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2328*x2333))+((r01*x2335))+(((-1.0)*r02*x2332)));
evalcond[3]=(((r21*x2334))+((r22*x2325))+(((-1.0)*x2331*x2332))+(((-1.0)*cj2*x2329))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((r02*x2325))+((cj0*x2327))+(((-1.0)*x2328*x2332))+((r01*x2334))+(((-1.0)*cj0*sj2*x2329)));
evalcond[5]=(((r11*x2334))+((sj0*x2327))+((r12*x2325))+(((-1.0)*sj0*sj2*x2329))+(((-1.0)*x2330*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2336=((-1.0)*r11);
IkReal x2338 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2338)==0){
continue;
}
IkReal x2337=pow(x2338,-0.5);
CheckValue<IkReal> x2339 = IKatan2WithCheck(IkReal(x2336),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2339.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2339.value))));
IkReal gconst88=(x2336*x2337);
IkReal gconst89=((1.0)*r10*x2337);
CheckValue<IkReal> x2340 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2340.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2340.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2341=((-1.0)*r11);
CheckValue<IkReal> x2344 = IKatan2WithCheck(IkReal(x2341),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2344.valid){
continue;
}
IkReal x2342=((1.0)*(x2344.value));
IkReal x2343=x2337;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2342)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2342)));
IkReal gconst88=(x2341*x2343);
IkReal gconst89=((1.0)*r10*x2343);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2345=((-1.0)*r11);
CheckValue<IkReal> x2348 = IKatan2WithCheck(IkReal(x2345),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2348.valid){
continue;
}
IkReal x2346=((1.0)*(x2348.value));
IkReal x2347=x2337;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2346)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2346)));
IkReal gconst88=(x2345*x2347);
IkReal gconst89=((1.0)*r10*x2347);
IkReal x2349=r12*r12;
IkReal x2350=((1.0)*sj0);
IkReal x2351=(cj0*r02);
IkReal x2352=x2337;
j4eval[0]=((IKabs(((((-1.0)*x2350*x2352))+((sj0*x2349*x2352))+((r12*x2351*x2352)))))+(IKabs(((((-1.0)*x2351))+(((-1.0)*r12*x2350))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2353=((-1.0)*r11);
CheckValue<IkReal> x2356 = IKatan2WithCheck(IkReal(x2353),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2356.valid){
continue;
}
IkReal x2354=((1.0)*(x2356.value));
IkReal x2355=x2337;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2354)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2354)));
IkReal gconst88=(x2353*x2355);
IkReal gconst89=((1.0)*r10*x2355);
IkReal x2357=((1.0)+(((-1.0)*(r12*r12))));
IkReal x2358=(cj1*r22*sj2);
IkReal x2359=(cj2*r22*sj1);
CheckValue<IkReal> x2365=IKPowWithIntegerCheck(x2357,-1);
if(!x2365.valid){
continue;
}
IkReal x2360=x2365.value;
IkReal x2361=((1.0)*x2360);
IkReal x2362=x2337;
IkReal x2363=(r12*x2362);
IkReal x2364=((((-1.0)*x2361*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x2360))+(((-1.0)*(r22*r22)))+(((-1.0)*x2361*(r10*r10)*(r20*r20))));
j4eval[0]=x2364;
j4eval[1]=((IKabs(((((-1.0)*x2358))+(((-1.0)*x2359)))))+(IKabs((((x2359*x2363))+((x2358*x2363))))));
j4eval[2]=IKsign(x2364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2366=(gconst89*r20);
IkReal x2367=(cj2*sj1);
IkReal x2368=(cj1*sj2);
IkReal x2369=((1.0)*r22);
IkReal x2370=(gconst88*r21);
CheckValue<IkReal> x2371=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x2366*x2366)))+(((-1.0)*(x2370*x2370)))+(((-1.0)*r22*x2369))+(((2.0)*x2366*x2370)))),-1);
if(!x2371.valid){
continue;
}
CheckValue<IkReal> x2372 = IKatan2WithCheck(IkReal(((((-1.0)*x2368*x2369))+(((-1.0)*x2367*x2369)))),IkReal(((((-1.0)*x2368*x2370))+((x2366*x2367))+((x2366*x2368))+(((-1.0)*x2367*x2370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2371.value)))+(x2372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2373=IKsin(j4);
IkReal x2374=IKcos(j4);
IkReal x2375=(cj1*cj2);
IkReal x2376=(gconst89*r10);
IkReal x2377=((1.0)*sj0);
IkReal x2378=(gconst89*r20);
IkReal x2379=((1.0)*sj1);
IkReal x2380=(gconst89*r00);
IkReal x2381=((1.0)*x2374);
IkReal x2382=((1.0)*x2373);
IkReal x2383=(gconst88*x2374);
IkReal x2384=(gconst88*x2373);
evalcond[0]=((((-1.0)*x2378*x2382))+(((-1.0)*r22*x2381))+((r21*x2384)));
evalcond[1]=((((-1.0)*r12*x2381))+cj0+(((-1.0)*x2376*x2382))+((r11*x2384)));
evalcond[2]=((((-1.0)*x2380*x2382))+(((-1.0)*r02*x2381))+((r01*x2384))+(((-1.0)*x2377)));
evalcond[3]=((((-1.0)*cj2*x2379))+(((-1.0)*x2378*x2381))+(((-1.0)*cj1*sj2))+((r22*x2373))+((r21*x2383)));
evalcond[4]=((((-1.0)*x2380*x2381))+((r01*x2383))+(((-1.0)*cj0*sj2*x2379))+((cj0*x2375))+((r02*x2373)));
evalcond[5]=(((r12*x2373))+(((-1.0)*x2376*x2381))+((sj0*x2375))+(((-1.0)*sj1*sj2*x2377))+((r11*x2383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2385=((1.0)*sj0);
IkReal x2386=((1.0)*cj0);
CheckValue<IkReal> x2387 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2385))+(((-1.0)*r02*x2386)))),IkReal(((((-1.0)*gconst88*r11*x2385))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2386))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2387.valid){
continue;
}
CheckValue<IkReal> x2388=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2387.value)+(((1.5707963267949)*(x2388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2389=IKsin(j4);
IkReal x2390=IKcos(j4);
IkReal x2391=(cj1*cj2);
IkReal x2392=(gconst89*r10);
IkReal x2393=((1.0)*sj0);
IkReal x2394=(gconst89*r20);
IkReal x2395=((1.0)*sj1);
IkReal x2396=(gconst89*r00);
IkReal x2397=((1.0)*x2390);
IkReal x2398=((1.0)*x2389);
IkReal x2399=(gconst88*x2390);
IkReal x2400=(gconst88*x2389);
evalcond[0]=((((-1.0)*r22*x2397))+((r21*x2400))+(((-1.0)*x2394*x2398)));
evalcond[1]=(cj0+((r11*x2400))+(((-1.0)*x2392*x2398))+(((-1.0)*r12*x2397)));
evalcond[2]=(((r01*x2400))+(((-1.0)*x2396*x2398))+(((-1.0)*r02*x2397))+(((-1.0)*x2393)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x2394*x2397))+((r22*x2389))+((r21*x2399))+(((-1.0)*cj2*x2395)));
evalcond[4]=((((-1.0)*x2396*x2397))+((r01*x2399))+((r02*x2389))+((cj0*x2391))+(((-1.0)*cj0*sj2*x2395)));
evalcond[5]=(((r11*x2399))+(((-1.0)*x2392*x2397))+(((-1.0)*sj1*sj2*x2393))+((r12*x2389))+((sj0*x2391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2401=((1.0)*gconst89);
CheckValue<IkReal> x2402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2401))+(((-1.0)*gconst88*r00)))),-1);
if(!x2402.valid){
continue;
}
CheckValue<IkReal> x2403 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2401))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2402.value)))+(x2403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2404=IKsin(j4);
IkReal x2405=IKcos(j4);
IkReal x2406=(cj1*cj2);
IkReal x2407=(gconst89*r10);
IkReal x2408=((1.0)*sj0);
IkReal x2409=(gconst89*r20);
IkReal x2410=((1.0)*sj1);
IkReal x2411=(gconst89*r00);
IkReal x2412=((1.0)*x2405);
IkReal x2413=((1.0)*x2404);
IkReal x2414=(gconst88*x2405);
IkReal x2415=(gconst88*x2404);
evalcond[0]=(((r21*x2415))+(((-1.0)*r22*x2412))+(((-1.0)*x2409*x2413)));
evalcond[1]=(((r11*x2415))+cj0+(((-1.0)*x2407*x2413))+(((-1.0)*r12*x2412)));
evalcond[2]=((((-1.0)*x2408))+((r01*x2415))+(((-1.0)*x2411*x2413))+(((-1.0)*r02*x2412)));
evalcond[3]=(((r21*x2414))+(((-1.0)*cj1*sj2))+((r22*x2404))+(((-1.0)*cj2*x2410))+(((-1.0)*x2409*x2412)));
evalcond[4]=(((cj0*x2406))+((r01*x2414))+((r02*x2404))+(((-1.0)*x2411*x2412))+(((-1.0)*cj0*sj2*x2410)));
evalcond[5]=((((-1.0)*sj1*sj2*x2408))+((r11*x2414))+(((-1.0)*x2407*x2412))+((r12*x2404))+((sj0*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2416=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2416;
j4eval[1]=IKsign(x2416);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2417=((1.0)*cj5);
IkReal x2418=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2417)));
j4eval[0]=x2418;
j4eval[1]=((IKabs(((((-1.0)*r20*x2417))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2419=(cj5*r10);
IkReal x2420=(sj1*sj2);
IkReal x2421=(r11*sj5);
IkReal x2422=((1.0)*cj1*cj2);
IkReal x2423=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2423;
j4eval[1]=((IKabs(((((-1.0)*x2420*x2421))+((cj1*cj2*x2421))+((x2419*x2420))+(((-1.0)*x2419*x2422)))))+(IKabs(((((-1.0)*r12*x2422))+((r12*x2420))))));
j4eval[2]=IKsign(x2423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2424=(cj5*r10);
IkReal x2425=(sj1*sj2);
IkReal x2426=(r11*sj5);
IkReal x2427=((1.0)*cj1*cj2);
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2428.valid){
continue;
}
CheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal(((((-1.0)*x2424*x2427))+(((-1.0)*x2425*x2426))+((cj1*cj2*x2426))+((x2424*x2425)))),IkReal(((((-1.0)*r12*x2427))+((r12*x2425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2428.value)))+(x2429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2430=IKcos(j4);
IkReal x2431=IKsin(j4);
IkReal x2432=(cj5*r00);
IkReal x2433=(cj5*r10);
IkReal x2434=(r21*sj5);
IkReal x2435=((1.0)*sj1);
IkReal x2436=(cj5*r20);
IkReal x2437=((1.0)*x2430);
IkReal x2438=((1.0)*x2431);
IkReal x2439=(sj5*x2431);
IkReal x2440=(sj5*x2430);
evalcond[0]=((((-1.0)*x2433*x2437))+((r12*x2431))+((r11*x2440)));
evalcond[1]=((((-1.0)*r22*x2437))+((x2431*x2434))+(((-1.0)*x2436*x2438)));
evalcond[2]=(((r01*x2439))+(((-1.0)*r02*x2437))+(((-1.0)*x2432*x2438)));
evalcond[3]=((1.0)+(((-1.0)*x2433*x2438))+((r11*x2439))+(((-1.0)*r12*x2437)));
evalcond[4]=((((-1.0)*sj2*x2435))+((r02*x2431))+(((-1.0)*x2432*x2437))+((r01*x2440))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x2435))+(((-1.0)*cj1*sj2))+((r22*x2431))+(((-1.0)*x2436*x2437))+((x2430*x2434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2441=((1.0)*cj5);
CheckValue<IkReal> x2442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2441)))),-1);
if(!x2442.valid){
continue;
}
CheckValue<IkReal> x2443 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2441))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2442.value)))+(x2443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2444=IKcos(j4);
IkReal x2445=IKsin(j4);
IkReal x2446=(cj5*r00);
IkReal x2447=(cj5*r10);
IkReal x2448=(r21*sj5);
IkReal x2449=((1.0)*sj1);
IkReal x2450=(cj5*r20);
IkReal x2451=((1.0)*x2444);
IkReal x2452=((1.0)*x2445);
IkReal x2453=(sj5*x2445);
IkReal x2454=(sj5*x2444);
evalcond[0]=(((r12*x2445))+(((-1.0)*x2447*x2451))+((r11*x2454)));
evalcond[1]=((((-1.0)*x2450*x2452))+(((-1.0)*r22*x2451))+((x2445*x2448)));
evalcond[2]=(((r01*x2453))+(((-1.0)*x2446*x2452))+(((-1.0)*r02*x2451)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2451))+(((-1.0)*x2447*x2452))+((r11*x2453)));
evalcond[4]=(((r02*x2445))+((r01*x2454))+(((-1.0)*x2446*x2451))+((cj1*cj2))+(((-1.0)*sj2*x2449)));
evalcond[5]=((((-1.0)*x2450*x2451))+((r22*x2445))+(((-1.0)*cj1*sj2))+((x2444*x2448))+(((-1.0)*cj2*x2449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2455=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2455.valid){
continue;
}
CheckValue<IkReal> x2456 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2455.value)))+(x2456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2457=IKcos(j4);
IkReal x2458=IKsin(j4);
IkReal x2459=(cj5*r00);
IkReal x2460=(cj5*r10);
IkReal x2461=(r21*sj5);
IkReal x2462=((1.0)*sj1);
IkReal x2463=(cj5*r20);
IkReal x2464=((1.0)*x2457);
IkReal x2465=((1.0)*x2458);
IkReal x2466=(sj5*x2458);
IkReal x2467=(sj5*x2457);
evalcond[0]=(((r11*x2467))+((r12*x2458))+(((-1.0)*x2460*x2464)));
evalcond[1]=(((x2458*x2461))+(((-1.0)*r22*x2464))+(((-1.0)*x2463*x2465)));
evalcond[2]=(((r01*x2466))+(((-1.0)*r02*x2464))+(((-1.0)*x2459*x2465)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2464))+((r11*x2466))+(((-1.0)*x2460*x2465)));
evalcond[4]=(((r02*x2458))+((r01*x2467))+(((-1.0)*sj2*x2462))+((cj1*cj2))+(((-1.0)*x2459*x2464)));
evalcond[5]=(((r22*x2458))+(((-1.0)*cj1*sj2))+(((-1.0)*x2463*x2464))+((x2457*x2461))+(((-1.0)*cj2*x2462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2468=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2468;
j4eval[1]=IKsign(x2468);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2469=((1.0)*cj5);
IkReal x2470=((((-1.0)*r21*x2469))+(((-1.0)*r20*sj5)));
j4eval[0]=x2470;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2469))+((r01*sj5))))));
j4eval[2]=IKsign(x2470);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2471=cj5*cj5;
IkReal x2472=r11*r11;
IkReal x2473=(r11*sj5);
IkReal x2474=(cj5*r10);
IkReal x2475=((((-2.0)*x2473*x2474))+(r12*r12)+x2472+(((-1.0)*x2471*x2472))+((x2471*(r10*r10))));
j4eval[0]=x2475;
j4eval[1]=IKsign(x2475);
j4eval[2]=((IKabs(r12))+(IKabs((x2473+(((-1.0)*x2474))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2476=cj5*cj5;
IkReal x2477=r11*r11;
IkReal x2478=(cj5*r10);
IkReal x2479=(r11*sj5);
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal((x2479+(((-1.0)*x2478)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
CheckValue<IkReal> x2481=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2478*x2479))+(r12*r12)+x2477+((x2476*(r10*r10)))+(((-1.0)*x2476*x2477)))),-1);
if(!x2481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2480.value)+(((1.5707963267949)*(x2481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2482=IKcos(j4);
IkReal x2483=IKsin(j4);
IkReal x2484=(cj5*r00);
IkReal x2485=(cj5*r10);
IkReal x2486=(r21*sj5);
IkReal x2487=((1.0)*cj2);
IkReal x2488=(cj5*r20);
IkReal x2489=((1.0)*x2482);
IkReal x2490=((1.0)*x2483);
IkReal x2491=(sj5*x2483);
IkReal x2492=(sj5*x2482);
evalcond[0]=((((-1.0)*x2485*x2489))+((r11*x2492))+((r12*x2483)));
evalcond[1]=((((-1.0)*r22*x2489))+((x2483*x2486))+(((-1.0)*x2488*x2490)));
evalcond[2]=((((-1.0)*r02*x2489))+(((-1.0)*x2484*x2490))+((r01*x2491)));
evalcond[3]=((-1.0)+((r11*x2491))+(((-1.0)*x2485*x2490))+(((-1.0)*r12*x2489)));
evalcond[4]=(((r02*x2483))+((sj1*sj2))+(((-1.0)*cj1*x2487))+(((-1.0)*x2484*x2489))+((r01*x2492)));
evalcond[5]=(((x2482*x2486))+((r22*x2483))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2487))+(((-1.0)*x2488*x2489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2493=((1.0)*cj5);
CheckValue<IkReal> x2494=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2493))+(((-1.0)*r20*sj5)))),-1);
if(!x2494.valid){
continue;
}
CheckValue<IkReal> x2495 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2494.value)))+(x2495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2496=IKcos(j4);
IkReal x2497=IKsin(j4);
IkReal x2498=(cj5*r00);
IkReal x2499=(cj5*r10);
IkReal x2500=(r21*sj5);
IkReal x2501=((1.0)*cj2);
IkReal x2502=(cj5*r20);
IkReal x2503=((1.0)*x2496);
IkReal x2504=((1.0)*x2497);
IkReal x2505=(sj5*x2497);
IkReal x2506=(sj5*x2496);
evalcond[0]=((((-1.0)*x2499*x2503))+((r12*x2497))+((r11*x2506)));
evalcond[1]=(((x2497*x2500))+(((-1.0)*x2502*x2504))+(((-1.0)*r22*x2503)));
evalcond[2]=((((-1.0)*x2498*x2504))+(((-1.0)*r02*x2503))+((r01*x2505)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2503))+(((-1.0)*x2499*x2504))+((r11*x2505)));
evalcond[4]=((((-1.0)*x2498*x2503))+((r02*x2497))+((sj1*sj2))+((r01*x2506))+(((-1.0)*cj1*x2501)));
evalcond[5]=(((x2496*x2500))+((r22*x2497))+(((-1.0)*cj1*sj2))+(((-1.0)*x2502*x2503))+(((-1.0)*sj1*x2501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2507 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
CheckValue<IkReal> x2508=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2507.value)+(((1.5707963267949)*(x2508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2509=IKcos(j4);
IkReal x2510=IKsin(j4);
IkReal x2511=(cj5*r00);
IkReal x2512=(cj5*r10);
IkReal x2513=(r21*sj5);
IkReal x2514=((1.0)*cj2);
IkReal x2515=(cj5*r20);
IkReal x2516=((1.0)*x2509);
IkReal x2517=((1.0)*x2510);
IkReal x2518=(sj5*x2510);
IkReal x2519=(sj5*x2509);
evalcond[0]=(((r11*x2519))+(((-1.0)*x2512*x2516))+((r12*x2510)));
evalcond[1]=(((x2510*x2513))+(((-1.0)*x2515*x2517))+(((-1.0)*r22*x2516)));
evalcond[2]=(((r01*x2518))+(((-1.0)*x2511*x2517))+(((-1.0)*r02*x2516)));
evalcond[3]=((-1.0)+((r11*x2518))+(((-1.0)*r12*x2516))+(((-1.0)*x2512*x2517)));
evalcond[4]=(((r02*x2510))+((sj1*sj2))+((r01*x2519))+(((-1.0)*x2511*x2516))+(((-1.0)*cj1*x2514)));
evalcond[5]=((((-1.0)*sj1*x2514))+((r22*x2510))+(((-1.0)*cj1*sj2))+(((-1.0)*x2515*x2516))+((x2509*x2513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2520=((-1.0)*r00);
IkReal x2522 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2522)==0){
continue;
}
IkReal x2521=pow(x2522,-0.5);
CheckValue<IkReal> x2523 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2520),IKFAST_ATAN2_MAGTHRESH);
if(!x2523.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2523.value));
IkReal gconst91=(r01*x2521);
IkReal gconst92=(x2520*x2521);
CheckValue<IkReal> x2524 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2524.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2524.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2525=((-1.0)*r00);
IkReal x2526=x2521;
CheckValue<IkReal> x2528 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2525),IKFAST_ATAN2_MAGTHRESH);
if(!x2528.valid){
continue;
}
IkReal x2527=((-1.0)*(x2528.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2527;
IkReal gconst90=x2527;
IkReal gconst91=(r01*x2526);
IkReal gconst92=(x2525*x2526);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2529=((1.0)*sj0);
IkReal x2530=((1.0)*cj0);
CheckValue<IkReal> x2531=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2531.valid){
continue;
}
CheckValue<IkReal> x2532 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2529))+(((-1.0)*r02*x2530)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r11*x2529))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2531.value)))+(x2532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2533=IKsin(j4);
IkReal x2534=IKcos(j4);
IkReal x2535=(cj1*cj2);
IkReal x2536=(gconst91*r01);
IkReal x2537=(gconst92*r00);
IkReal x2538=((1.0)*sj1);
IkReal x2539=(gconst92*r20);
IkReal x2540=(gconst92*r10);
IkReal x2541=((1.0)*x2534);
IkReal x2542=((1.0)*x2533);
IkReal x2543=(gconst91*x2534);
IkReal x2544=(gconst91*x2533);
evalcond[0]=(((r21*x2544))+(((-1.0)*x2539*x2542))+(((-1.0)*r22*x2541)));
evalcond[1]=((((-1.0)*r12*x2541))+cj0+((r11*x2544))+(((-1.0)*x2540*x2542)));
evalcond[2]=((((-1.0)*sj0))+((x2533*x2536))+(((-1.0)*r02*x2541))+(((-1.0)*x2537*x2542)));
evalcond[3]=((((-1.0)*cj2*x2538))+((r21*x2543))+(((-1.0)*cj1*sj2))+(((-1.0)*x2539*x2541))+((r22*x2533)));
evalcond[4]=(((cj0*x2535))+((r02*x2533))+(((-1.0)*x2537*x2541))+((x2534*x2536))+(((-1.0)*cj0*sj2*x2538)));
evalcond[5]=(((r11*x2543))+((sj0*x2535))+(((-1.0)*sj0*sj2*x2538))+((r12*x2533))+(((-1.0)*x2540*x2541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2545=((1.0)*gconst92);
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2545))+(((-1.0)*gconst91*r10)))),-1);
if(!x2547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2546.value)+(((1.5707963267949)*(x2547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2548=IKsin(j4);
IkReal x2549=IKcos(j4);
IkReal x2550=(cj1*cj2);
IkReal x2551=(gconst91*r01);
IkReal x2552=(gconst92*r00);
IkReal x2553=((1.0)*sj1);
IkReal x2554=(gconst92*r20);
IkReal x2555=(gconst92*r10);
IkReal x2556=((1.0)*x2549);
IkReal x2557=((1.0)*x2548);
IkReal x2558=(gconst91*x2549);
IkReal x2559=(gconst91*x2548);
evalcond[0]=((((-1.0)*x2554*x2557))+((r21*x2559))+(((-1.0)*r22*x2556)));
evalcond[1]=(cj0+(((-1.0)*r12*x2556))+(((-1.0)*x2555*x2557))+((r11*x2559)));
evalcond[2]=((((-1.0)*sj0))+((x2548*x2551))+(((-1.0)*x2552*x2557))+(((-1.0)*r02*x2556)));
evalcond[3]=((((-1.0)*x2554*x2556))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2553))+((r21*x2558))+((r22*x2548)));
evalcond[4]=((((-1.0)*cj0*sj2*x2553))+((x2549*x2551))+(((-1.0)*x2552*x2556))+((cj0*x2550))+((r02*x2548)));
evalcond[5]=((((-1.0)*x2555*x2556))+((r12*x2548))+((r11*x2558))+((sj0*x2550))+(((-1.0)*sj0*sj2*x2553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2560=((-1.0)*r01);
IkReal x2562 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2562)==0){
continue;
}
IkReal x2561=pow(x2562,-0.5);
CheckValue<IkReal> x2563 = IKatan2WithCheck(IkReal(x2560),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2563.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2563.value))));
IkReal gconst94=(x2560*x2561);
IkReal gconst95=((1.0)*r00*x2561);
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2564.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2565=((-1.0)*r01);
CheckValue<IkReal> x2568 = IKatan2WithCheck(IkReal(x2565),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2568.valid){
continue;
}
IkReal x2566=((1.0)*(x2568.value));
IkReal x2567=x2561;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2566)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2566)));
IkReal gconst94=(x2565*x2567);
IkReal gconst95=((1.0)*r00*x2567);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2569=((-1.0)*r01);
CheckValue<IkReal> x2572 = IKatan2WithCheck(IkReal(x2569),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2572.valid){
continue;
}
IkReal x2570=((1.0)*(x2572.value));
IkReal x2571=x2561;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2570)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2570)));
IkReal gconst94=(x2569*x2571);
IkReal gconst95=((1.0)*r00*x2571);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2573=((-1.0)*r01);
CheckValue<IkReal> x2576 = IKatan2WithCheck(IkReal(x2573),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2576.valid){
continue;
}
IkReal x2574=((1.0)*(x2576.value));
IkReal x2575=x2561;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2574)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2574)));
IkReal gconst94=(x2573*x2575);
IkReal gconst95=((1.0)*r00*x2575);
IkReal x2577=r02*r02;
IkReal x2578=(r12*sj0);
IkReal x2579=((1.0)*cj0);
IkReal x2580=x2561;
j4eval[0]=((IKabs(((((-1.0)*x2578))+(((-1.0)*r02*x2579)))))+(IKabs((((cj0*x2577*x2580))+(((-1.0)*x2579*x2580))+((r02*x2578*x2580))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2581=((1.0)*sj0);
IkReal x2582=((1.0)*cj0);
CheckValue<IkReal> x2583 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2582))+(((-1.0)*r12*x2581)))),IkReal(((((-1.0)*gconst94*r11*x2581))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2582))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2583.valid){
continue;
}
CheckValue<IkReal> x2584=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2583.value)+(((1.5707963267949)*(x2584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2585=IKsin(j4);
IkReal x2586=IKcos(j4);
IkReal x2587=(cj1*cj2);
IkReal x2588=(gconst95*r10);
IkReal x2589=(gconst95*r20);
IkReal x2590=((1.0)*sj1);
IkReal x2591=(gconst95*r00);
IkReal x2592=((1.0)*x2586);
IkReal x2593=((1.0)*x2585);
IkReal x2594=(gconst94*x2586);
IkReal x2595=(gconst94*x2585);
evalcond[0]=((((-1.0)*r22*x2592))+(((-1.0)*x2589*x2593))+((r21*x2595)));
evalcond[1]=(cj0+(((-1.0)*x2588*x2593))+((r11*x2595))+(((-1.0)*r12*x2592)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2595))+(((-1.0)*r02*x2592))+(((-1.0)*x2591*x2593)));
evalcond[3]=(((r22*x2585))+(((-1.0)*cj1*sj2))+(((-1.0)*x2589*x2592))+(((-1.0)*cj2*x2590))+((r21*x2594)));
evalcond[4]=(((r01*x2594))+(((-1.0)*cj0*sj2*x2590))+((cj0*x2587))+(((-1.0)*x2591*x2592))+((r02*x2585)));
evalcond[5]=((((-1.0)*sj0*sj2*x2590))+((r12*x2585))+(((-1.0)*x2588*x2592))+((r11*x2594))+((sj0*x2587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2596=((1.0)*gconst95);
CheckValue<IkReal> x2597=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2596)))),-1);
if(!x2597.valid){
continue;
}
CheckValue<IkReal> x2598 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2597.value)))+(x2598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2599=IKsin(j4);
IkReal x2600=IKcos(j4);
IkReal x2601=(cj1*cj2);
IkReal x2602=(gconst95*r10);
IkReal x2603=(gconst95*r20);
IkReal x2604=((1.0)*sj1);
IkReal x2605=(gconst95*r00);
IkReal x2606=((1.0)*x2600);
IkReal x2607=((1.0)*x2599);
IkReal x2608=(gconst94*x2600);
IkReal x2609=(gconst94*x2599);
evalcond[0]=((((-1.0)*r22*x2606))+(((-1.0)*x2603*x2607))+((r21*x2609)));
evalcond[1]=(cj0+(((-1.0)*r12*x2606))+(((-1.0)*x2602*x2607))+((r11*x2609)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2606))+((r01*x2609))+(((-1.0)*x2605*x2607)));
evalcond[3]=(((r22*x2599))+(((-1.0)*cj1*sj2))+(((-1.0)*x2603*x2606))+((r21*x2608))+(((-1.0)*cj2*x2604)));
evalcond[4]=((((-1.0)*cj0*sj2*x2604))+((cj0*x2601))+((r01*x2608))+(((-1.0)*x2605*x2606))+((r02*x2599)));
evalcond[5]=(((r12*x2599))+((sj0*x2601))+(((-1.0)*sj0*sj2*x2604))+(((-1.0)*x2602*x2606))+((r11*x2608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2610=((1.0)*gconst95);
CheckValue<IkReal> x2611 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2610))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2611.valid){
continue;
}
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2610)))),-1);
if(!x2612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2611.value)+(((1.5707963267949)*(x2612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2613=IKsin(j4);
IkReal x2614=IKcos(j4);
IkReal x2615=(cj1*cj2);
IkReal x2616=(gconst95*r10);
IkReal x2617=(gconst95*r20);
IkReal x2618=((1.0)*sj1);
IkReal x2619=(gconst95*r00);
IkReal x2620=((1.0)*x2614);
IkReal x2621=((1.0)*x2613);
IkReal x2622=(gconst94*x2614);
IkReal x2623=(gconst94*x2613);
evalcond[0]=((((-1.0)*x2617*x2621))+(((-1.0)*r22*x2620))+((r21*x2623)));
evalcond[1]=(cj0+(((-1.0)*r12*x2620))+((r11*x2623))+(((-1.0)*x2616*x2621)));
evalcond[2]=(((r01*x2623))+(((-1.0)*x2619*x2621))+(((-1.0)*sj0))+(((-1.0)*r02*x2620)));
evalcond[3]=((((-1.0)*x2617*x2620))+(((-1.0)*cj1*sj2))+((r22*x2613))+((r21*x2622))+(((-1.0)*cj2*x2618)));
evalcond[4]=(((r01*x2622))+(((-1.0)*x2619*x2620))+(((-1.0)*cj0*sj2*x2618))+((r02*x2613))+((cj0*x2615)));
evalcond[5]=(((r11*x2622))+(((-1.0)*sj0*sj2*x2618))+((sj0*x2615))+((r12*x2613))+(((-1.0)*x2616*x2620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2624=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2624;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2624);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2625=((1.0)*cj5);
IkReal x2626=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2625)));
j4eval[0]=x2626;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2625)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2627=cj5*cj5;
IkReal x2628=r01*r01;
IkReal x2629=(cj5*r00);
IkReal x2630=(r01*sj5);
IkReal x2631=((((-1.0)*x2627*x2628))+(r02*r02)+(((-2.0)*x2629*x2630))+((x2627*(r00*r00)))+x2628);
j4eval[0]=x2631;
j4eval[1]=IKsign(x2631);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2629))+x2630))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2632=cj5*cj5;
IkReal x2633=r01*r01;
IkReal x2634=(r01*sj5);
IkReal x2635=(cj5*r00);
CheckValue<IkReal> x2636 = IKatan2WithCheck(IkReal(((((-1.0)*x2635))+x2634)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2636.valid){
continue;
}
CheckValue<IkReal> x2637=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2632*x2633))+(((-2.0)*x2634*x2635))+((x2632*(r00*r00)))+(r02*r02)+x2633)),-1);
if(!x2637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2636.value)+(((1.5707963267949)*(x2637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2638=IKcos(j4);
IkReal x2639=IKsin(j4);
IkReal x2640=(cj5*r00);
IkReal x2641=(cj5*r10);
IkReal x2642=(r21*sj5);
IkReal x2643=((1.0)*sj1);
IkReal x2644=(cj5*r20);
IkReal x2645=((1.0)*x2638);
IkReal x2646=((1.0)*x2639);
IkReal x2647=(sj5*x2639);
IkReal x2648=(sj5*x2638);
evalcond[0]=((((-1.0)*x2640*x2645))+((r01*x2648))+((r02*x2639)));
evalcond[1]=((((-1.0)*r22*x2645))+(((-1.0)*x2644*x2646))+((x2639*x2642)));
evalcond[2]=(((r11*x2647))+(((-1.0)*r12*x2645))+(((-1.0)*x2641*x2646)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2645))+(((-1.0)*x2640*x2646))+((r01*x2647)));
evalcond[4]=(((r11*x2648))+((r12*x2639))+(((-1.0)*x2641*x2645))+((cj1*cj2))+(((-1.0)*sj2*x2643)));
evalcond[5]=((((-1.0)*x2644*x2645))+((r22*x2639))+((x2638*x2642))+(((-1.0)*cj2*x2643))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2649=((1.0)*cj5);
CheckValue<IkReal> x2650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2649)))),-1);
if(!x2650.valid){
continue;
}
CheckValue<IkReal> x2651 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2650.value)))+(x2651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2652=IKcos(j4);
IkReal x2653=IKsin(j4);
IkReal x2654=(cj5*r00);
IkReal x2655=(cj5*r10);
IkReal x2656=(r21*sj5);
IkReal x2657=((1.0)*sj1);
IkReal x2658=(cj5*r20);
IkReal x2659=((1.0)*x2652);
IkReal x2660=((1.0)*x2653);
IkReal x2661=(sj5*x2653);
IkReal x2662=(sj5*x2652);
evalcond[0]=(((r02*x2653))+((r01*x2662))+(((-1.0)*x2654*x2659)));
evalcond[1]=((((-1.0)*r22*x2659))+((x2653*x2656))+(((-1.0)*x2658*x2660)));
evalcond[2]=((((-1.0)*x2655*x2660))+(((-1.0)*r12*x2659))+((r11*x2661)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2659))+((r01*x2661))+(((-1.0)*x2654*x2660)));
evalcond[4]=(((r12*x2653))+((cj1*cj2))+(((-1.0)*sj2*x2657))+(((-1.0)*x2655*x2659))+((r11*x2662)));
evalcond[5]=((((-1.0)*cj2*x2657))+(((-1.0)*cj1*sj2))+(((-1.0)*x2658*x2659))+((r22*x2653))+((x2652*x2656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2663=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2663.valid){
continue;
}
CheckValue<IkReal> x2664 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2663.value)))+(x2664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2665=IKcos(j4);
IkReal x2666=IKsin(j4);
IkReal x2667=(cj5*r00);
IkReal x2668=(cj5*r10);
IkReal x2669=(r21*sj5);
IkReal x2670=((1.0)*sj1);
IkReal x2671=(cj5*r20);
IkReal x2672=((1.0)*x2665);
IkReal x2673=((1.0)*x2666);
IkReal x2674=(sj5*x2666);
IkReal x2675=(sj5*x2665);
evalcond[0]=(((r02*x2666))+(((-1.0)*x2667*x2672))+((r01*x2675)));
evalcond[1]=(((x2666*x2669))+(((-1.0)*x2671*x2673))+(((-1.0)*r22*x2672)));
evalcond[2]=((((-1.0)*r12*x2672))+((r11*x2674))+(((-1.0)*x2668*x2673)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2672))+(((-1.0)*x2667*x2673))+((r01*x2674)));
evalcond[4]=(((r12*x2666))+(((-1.0)*sj2*x2670))+((cj1*cj2))+((r11*x2675))+(((-1.0)*x2668*x2672)));
evalcond[5]=((((-1.0)*cj2*x2670))+(((-1.0)*cj1*sj2))+((r22*x2666))+(((-1.0)*x2671*x2672))+((x2665*x2669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2676=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2676;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2676);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2677=((1.0)*cj5);
IkReal x2678=((((-1.0)*r21*x2677))+(((-1.0)*r20*sj5)));
j4eval[0]=x2678;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2677))))));
j4eval[2]=IKsign(x2678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2679=(sj1*sj2);
IkReal x2680=(r01*sj5);
IkReal x2681=(cj1*cj2);
IkReal x2682=((1.0)*cj5);
IkReal x2683=((((-1.0)*r21*x2682))+(((-1.0)*r20*sj5)));
j4eval[0]=x2683;
j4eval[1]=((IKabs(((((-1.0)*r00*x2679*x2682))+(((-1.0)*x2680*x2681))+((x2679*x2680))+((cj5*r00*x2681)))))+(IKabs((((r02*x2681))+(((-1.0)*r02*x2679))))));
j4eval[2]=IKsign(x2683);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2684=(sj1*sj2);
IkReal x2685=(r01*sj5);
IkReal x2686=(cj1*cj2);
IkReal x2687=((1.0)*cj5);
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x2684*x2687))+((x2684*x2685))+((cj5*r00*x2686))+(((-1.0)*x2685*x2686)))),IkReal((((r02*x2686))+(((-1.0)*r02*x2684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
CheckValue<IkReal> x2689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2687))+(((-1.0)*r20*sj5)))),-1);
if(!x2689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2688.value)+(((1.5707963267949)*(x2689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2690=IKcos(j4);
IkReal x2691=IKsin(j4);
IkReal x2692=(cj5*r00);
IkReal x2693=(cj5*r10);
IkReal x2694=(r21*sj5);
IkReal x2695=((1.0)*cj2);
IkReal x2696=(cj5*r20);
IkReal x2697=((1.0)*x2690);
IkReal x2698=((1.0)*x2691);
IkReal x2699=(sj5*x2691);
IkReal x2700=(sj5*x2690);
evalcond[0]=((((-1.0)*x2692*x2697))+((r01*x2700))+((r02*x2691)));
evalcond[1]=(((x2691*x2694))+(((-1.0)*x2696*x2698))+(((-1.0)*r22*x2697)));
evalcond[2]=((((-1.0)*r12*x2697))+((r11*x2699))+(((-1.0)*x2693*x2698)));
evalcond[3]=((1.0)+(((-1.0)*x2692*x2698))+(((-1.0)*r02*x2697))+((r01*x2699)));
evalcond[4]=(((r12*x2691))+((r11*x2700))+(((-1.0)*cj1*x2695))+((sj1*sj2))+(((-1.0)*x2693*x2697)));
evalcond[5]=((((-1.0)*sj1*x2695))+((r22*x2691))+(((-1.0)*x2696*x2697))+(((-1.0)*cj1*sj2))+((x2690*x2694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2701=((1.0)*cj5);
CheckValue<IkReal> x2702=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2701))+(((-1.0)*r20*sj5)))),-1);
if(!x2702.valid){
continue;
}
CheckValue<IkReal> x2703 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2701))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2702.value)))+(x2703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2704=IKcos(j4);
IkReal x2705=IKsin(j4);
IkReal x2706=(cj5*r00);
IkReal x2707=(cj5*r10);
IkReal x2708=(r21*sj5);
IkReal x2709=((1.0)*cj2);
IkReal x2710=(cj5*r20);
IkReal x2711=((1.0)*x2704);
IkReal x2712=((1.0)*x2705);
IkReal x2713=(sj5*x2705);
IkReal x2714=(sj5*x2704);
evalcond[0]=((((-1.0)*x2706*x2711))+((r02*x2705))+((r01*x2714)));
evalcond[1]=(((x2705*x2708))+(((-1.0)*r22*x2711))+(((-1.0)*x2710*x2712)));
evalcond[2]=(((r11*x2713))+(((-1.0)*r12*x2711))+(((-1.0)*x2707*x2712)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2711))+(((-1.0)*x2706*x2712))+((r01*x2713)));
evalcond[4]=(((r12*x2705))+((sj1*sj2))+(((-1.0)*cj1*x2709))+((r11*x2714))+(((-1.0)*x2707*x2711)));
evalcond[5]=(((r22*x2705))+((x2704*x2708))+(((-1.0)*cj1*sj2))+(((-1.0)*x2710*x2711))+(((-1.0)*sj1*x2709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2715 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2715.valid){
continue;
}
CheckValue<IkReal> x2716=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2715.value)+(((1.5707963267949)*(x2716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2717=IKcos(j4);
IkReal x2718=IKsin(j4);
IkReal x2719=(cj5*r00);
IkReal x2720=(cj5*r10);
IkReal x2721=(r21*sj5);
IkReal x2722=((1.0)*cj2);
IkReal x2723=(cj5*r20);
IkReal x2724=((1.0)*x2717);
IkReal x2725=((1.0)*x2718);
IkReal x2726=(sj5*x2718);
IkReal x2727=(sj5*x2717);
evalcond[0]=((((-1.0)*x2719*x2724))+((r02*x2718))+((r01*x2727)));
evalcond[1]=((((-1.0)*x2723*x2725))+(((-1.0)*r22*x2724))+((x2718*x2721)));
evalcond[2]=((((-1.0)*x2720*x2725))+(((-1.0)*r12*x2724))+((r11*x2726)));
evalcond[3]=((1.0)+(((-1.0)*x2719*x2725))+((r01*x2726))+(((-1.0)*r02*x2724)));
evalcond[4]=(((r12*x2718))+((sj1*sj2))+(((-1.0)*x2720*x2724))+((r11*x2727))+(((-1.0)*cj1*x2722)));
evalcond[5]=((((-1.0)*sj1*x2722))+((x2717*x2721))+((r22*x2718))+(((-1.0)*cj1*sj2))+(((-1.0)*x2723*x2724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2728=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2728);
rxp1_1=(px*r21);
rxp1_2=(r11*x2728);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2729=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2729);
rxp1_1=(px*r21);
rxp1_2=(r11*x2729);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2730=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2730);
rxp1_1=(px*r21);
rxp1_2=(r11*x2730);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2733=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x2733.valid){
continue;
}
IkReal x2731=x2733.value;
IkReal x2732=(sj0*x2731);
cj4array[0]=((((-1.0)*cj1*cj2*x2732))+((sj1*sj2*x2732)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2734=IKsin(j4);
IkReal x2735=IKcos(j4);
IkReal x2736=(r21*sj5);
IkReal x2737=((1.0)*cj5*r20);
evalcond[0]=(r02*x2734);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2735)));
evalcond[2]=((((-1.0)*x2734*x2737))+((x2734*x2736)));
evalcond[3]=((((-1.0)*cj5*r10*x2734))+((r11*sj5*x2734)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x2735*x2736))+(((-1.0)*x2735*x2737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2739=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2739.valid){
continue;
}
IkReal x2738=x2739.value;
cj4array[0]=(((cj2*sj1*x2738))+((cj1*sj2*x2738)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2740=IKsin(j4);
IkReal x2741=IKcos(j4);
IkReal x2742=((1.0)*sj0);
IkReal x2743=((1.0)*cj5);
IkReal x2744=(sj5*x2740);
evalcond[0]=(r02*x2740);
evalcond[1]=((((-1.0)*x2742))+(((-1.0)*r02*x2741)));
evalcond[2]=(((r21*x2744))+(((-1.0)*r20*x2740*x2743)));
evalcond[3]=(((r11*x2744))+(((-1.0)*r10*x2740*x2743)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x2741*x2743))+((r11*sj5*x2741))+(((-1.0)*sj1*sj2*x2742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2745=IKPowWithIntegerCheck(r02,-1);
if(!x2745.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2745.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2746=IKsin(j4);
IkReal x2747=IKcos(j4);
IkReal x2748=((1.0)*sj1);
IkReal x2749=(r21*sj5);
IkReal x2750=(r11*sj5);
IkReal x2751=((1.0)*cj5*x2747);
IkReal x2752=((1.0)*cj5*x2746);
evalcond[0]=(r02*x2746);
evalcond[1]=(((x2746*x2749))+(((-1.0)*r20*x2752)));
evalcond[2]=(((x2746*x2750))+(((-1.0)*r10*x2752)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2748))+((x2747*x2749))+(((-1.0)*r20*x2751)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x2751))+((x2747*x2750))+(((-1.0)*sj0*sj2*x2748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2753=((1.0)*sj0);
IkReal x2754=((1.0)*cj0);
CheckValue<IkReal> x2755 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2753))+(((-1.0)*r02*x2754)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2754))+(((-1.0)*r11*sj5*x2753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2755.valid){
continue;
}
CheckValue<IkReal> x2756=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2755.value)+(((1.5707963267949)*(x2756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2757=IKsin(j4);
IkReal x2758=IKcos(j4);
IkReal x2759=(cj5*r00);
IkReal x2760=(cj1*cj2);
IkReal x2761=(cj5*r10);
IkReal x2762=(r21*sj5);
IkReal x2763=((1.0)*sj1);
IkReal x2764=(cj5*r20);
IkReal x2765=((1.0)*x2758);
IkReal x2766=((1.0)*x2757);
IkReal x2767=(sj5*x2757);
IkReal x2768=(sj5*x2758);
evalcond[0]=((((-1.0)*x2764*x2766))+((x2757*x2762))+(((-1.0)*r22*x2765)));
evalcond[1]=(cj0+(((-1.0)*r12*x2765))+(((-1.0)*x2761*x2766))+((r11*x2767)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2767))+(((-1.0)*x2759*x2766))+(((-1.0)*r02*x2765)));
evalcond[3]=((((-1.0)*x2764*x2765))+((x2758*x2762))+((r22*x2757))+(((-1.0)*cj2*x2763))+(((-1.0)*cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj2*x2763))+((r01*x2768))+(((-1.0)*x2759*x2765))+((cj0*x2760))+((r02*x2757)));
evalcond[5]=(((sj0*x2760))+(((-1.0)*x2761*x2765))+((r12*x2757))+(((-1.0)*sj0*sj2*x2763))+((r11*x2768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2769=((1.0)*cj5);
CheckValue<IkReal> x2770 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2769))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2770.valid){
continue;
}
CheckValue<IkReal> x2771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2769)))),-1);
if(!x2771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2770.value)+(((1.5707963267949)*(x2771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2772=IKsin(j4);
IkReal x2773=IKcos(j4);
IkReal x2774=(cj5*r00);
IkReal x2775=(cj1*cj2);
IkReal x2776=(cj5*r10);
IkReal x2777=(r21*sj5);
IkReal x2778=((1.0)*sj1);
IkReal x2779=(cj5*r20);
IkReal x2780=((1.0)*x2773);
IkReal x2781=((1.0)*x2772);
IkReal x2782=(sj5*x2772);
IkReal x2783=(sj5*x2773);
evalcond[0]=((((-1.0)*r22*x2780))+(((-1.0)*x2779*x2781))+((x2772*x2777)));
evalcond[1]=((((-1.0)*r12*x2780))+cj0+((r11*x2782))+(((-1.0)*x2776*x2781)));
evalcond[2]=((((-1.0)*x2774*x2781))+(((-1.0)*sj0))+((r01*x2782))+(((-1.0)*r02*x2780)));
evalcond[3]=(((r22*x2772))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2778))+(((-1.0)*x2779*x2780))+((x2773*x2777)));
evalcond[4]=((((-1.0)*x2774*x2780))+((cj0*x2775))+((r01*x2783))+(((-1.0)*cj0*sj2*x2778))+((r02*x2772)));
evalcond[5]=((((-1.0)*sj0*sj2*x2778))+((r11*x2783))+(((-1.0)*x2776*x2780))+((r12*x2772))+((sj0*x2775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2784=((1.0)*cj5);
CheckValue<IkReal> x2785 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2785.valid){
continue;
}
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2784)))),-1);
if(!x2786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2785.value)+(((1.5707963267949)*(x2786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2787=IKsin(j4);
IkReal x2788=IKcos(j4);
IkReal x2789=(cj5*r00);
IkReal x2790=(cj1*cj2);
IkReal x2791=(cj5*r10);
IkReal x2792=(r21*sj5);
IkReal x2793=((1.0)*sj1);
IkReal x2794=(cj5*r20);
IkReal x2795=((1.0)*x2788);
IkReal x2796=((1.0)*x2787);
IkReal x2797=(sj5*x2787);
IkReal x2798=(sj5*x2788);
evalcond[0]=(((x2787*x2792))+(((-1.0)*r22*x2795))+(((-1.0)*x2794*x2796)));
evalcond[1]=((((-1.0)*x2791*x2796))+cj0+((r11*x2797))+(((-1.0)*r12*x2795)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2789*x2796))+((r01*x2797))+(((-1.0)*r02*x2795)));
evalcond[3]=((((-1.0)*cj2*x2793))+(((-1.0)*cj1*sj2))+((r22*x2787))+(((-1.0)*x2794*x2795))+((x2788*x2792)));
evalcond[4]=(((r02*x2787))+(((-1.0)*x2789*x2795))+(((-1.0)*cj0*sj2*x2793))+((r01*x2798))+((cj0*x2790)));
evalcond[5]=((((-1.0)*x2791*x2795))+((r12*x2787))+((r11*x2798))+((sj0*x2790))+(((-1.0)*sj0*sj2*x2793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2799=((1.0)*cj5);
IkReal x2800=((1.0)*sj5);
IkReal x2801=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x2801;
j0eval[1]=((IKabs(((((-1.0)*r10*x2800))+(((-1.0)*r11*x2799)))))+(IKabs(((((-1.0)*r00*x2800))+(((-1.0)*r01*x2799))))));
j0eval[2]=IKsign(x2801);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2802=cj5*cj5;
IkReal x2803=r21*r21;
IkReal x2804=(cj1*sj2);
IkReal x2805=((1.0)*r22);
IkReal x2806=(cj5*r20);
IkReal x2807=(r21*sj5);
IkReal x2808=(cj2*sj1);
IkReal x2809=((((-2.0)*x2806*x2807))+(r22*r22)+((x2802*(r20*r20)))+(((-1.0)*x2802*x2803))+x2803);
j4eval[0]=x2809;
j4eval[1]=IKsign(x2809);
j4eval[2]=((IKabs(((((-1.0)*x2804*x2807))+((x2804*x2806))+(((-1.0)*x2807*x2808))+((x2806*x2808)))))+(IKabs(((((-1.0)*x2805*x2808))+(((-1.0)*x2804*x2805))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2810=((1.0)*cj5);
IkReal x2811=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2810)));
j4eval[0]=x2811;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2810)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2812=cj5*cj5;
IkReal x2813=((1.0)*r21);
IkReal x2814=(cj5*sj5);
IkReal x2815=((1.0)*r20);
IkReal x2816=((((-1.0)*r01*x2812*x2813))+(((-1.0)*r01*x2814*x2815))+(((-1.0)*r00*x2813*x2814))+((r01*r21))+((r00*r20*x2812))+((r02*r22)));
j4eval[0]=x2816;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2815)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2817=cj5*cj5;
IkReal x2818=(r21*sj5);
IkReal x2819=(r11*r21);
IkReal x2820=((1.0)*cj5*r20);
IkReal x2821=(((r10*r20*x2817))+(((-1.0)*x2817*x2819))+(((-1.0)*cj5*r10*x2818))+((r12*r22))+(((-1.0)*r11*sj5*x2820))+x2819);
j4eval[0]=x2821;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x2818))+(((-1.0)*sj0*x2820))))));
j4eval[2]=IKsign(x2821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2822=cj5*cj5;
IkReal x2823=(r21*sj5);
IkReal x2824=(r11*r21);
IkReal x2825=((1.0)*cj5*r20);
CheckValue<IkReal> x2826 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x2823))+(((-1.0)*sj0*x2825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2826.valid){
continue;
}
CheckValue<IkReal> x2827=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x2823))+(((-1.0)*x2822*x2824))+((r12*r22))+(((-1.0)*r11*sj5*x2825))+x2824+((r10*r20*x2822)))),-1);
if(!x2827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2826.value)+(((1.5707963267949)*(x2827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2828=IKsin(j4);
IkReal x2829=IKcos(j4);
IkReal x2830=(r11*sj5);
IkReal x2831=(cj5*r00);
IkReal x2832=(cj5*r10);
IkReal x2833=(r21*sj5);
IkReal x2834=(cj5*r20);
IkReal x2835=(r01*sj5);
IkReal x2836=((1.0)*x2829);
IkReal x2837=((1.0)*x2828);
evalcond[0]=(((x2828*x2833))+(((-1.0)*x2834*x2837))+(((-1.0)*r22*x2836)));
evalcond[1]=(((x2829*x2834))+(((-1.0)*x2833*x2836))+(((-1.0)*r22*x2837)));
evalcond[2]=(cj0+((x2828*x2830))+(((-1.0)*r12*x2836))+(((-1.0)*x2832*x2837)));
evalcond[3]=(((x2829*x2831))+cj0+(((-1.0)*x2835*x2836))+(((-1.0)*r02*x2837)));
evalcond[4]=(((x2829*x2832))+sj0+(((-1.0)*r12*x2837))+(((-1.0)*x2830*x2836)));
evalcond[5]=((((-1.0)*sj0))+((x2828*x2835))+(((-1.0)*x2831*x2837))+(((-1.0)*r02*x2836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2838=cj5*cj5;
IkReal x2839=((1.0)*r21);
IkReal x2840=(cj5*sj5);
IkReal x2841=((1.0)*r20);
CheckValue<IkReal> x2842 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2842.valid){
continue;
}
CheckValue<IkReal> x2843=IKPowWithIntegerCheck(IKsign((((r00*r20*x2838))+(((-1.0)*r00*x2839*x2840))+(((-1.0)*r01*x2838*x2839))+((r01*r21))+(((-1.0)*r01*x2840*x2841))+((r02*r22)))),-1);
if(!x2843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2842.value)+(((1.5707963267949)*(x2843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2844=IKsin(j4);
IkReal x2845=IKcos(j4);
IkReal x2846=(r11*sj5);
IkReal x2847=(cj5*r00);
IkReal x2848=(cj5*r10);
IkReal x2849=(r21*sj5);
IkReal x2850=(cj5*r20);
IkReal x2851=(r01*sj5);
IkReal x2852=((1.0)*x2845);
IkReal x2853=((1.0)*x2844);
evalcond[0]=(((x2844*x2849))+(((-1.0)*x2850*x2853))+(((-1.0)*r22*x2852)));
evalcond[1]=((((-1.0)*x2849*x2852))+((x2845*x2850))+(((-1.0)*r22*x2853)));
evalcond[2]=(((x2844*x2846))+cj0+(((-1.0)*r12*x2852))+(((-1.0)*x2848*x2853)));
evalcond[3]=(cj0+(((-1.0)*x2851*x2852))+(((-1.0)*r02*x2853))+((x2845*x2847)));
evalcond[4]=(sj0+(((-1.0)*r12*x2853))+((x2845*x2848))+(((-1.0)*x2846*x2852)));
evalcond[5]=((((-1.0)*sj0))+((x2844*x2851))+(((-1.0)*r02*x2852))+(((-1.0)*x2847*x2853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2854=((1.0)*cj5);
CheckValue<IkReal> x2855=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2854))+(((-1.0)*r00*sj5)))),-1);
if(!x2855.valid){
continue;
}
CheckValue<IkReal> x2856 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2855.value)))+(x2856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2857=IKsin(j4);
IkReal x2858=IKcos(j4);
IkReal x2859=(r11*sj5);
IkReal x2860=(cj5*r00);
IkReal x2861=(cj5*r10);
IkReal x2862=(r21*sj5);
IkReal x2863=(cj5*r20);
IkReal x2864=(r01*sj5);
IkReal x2865=((1.0)*x2858);
IkReal x2866=((1.0)*x2857);
evalcond[0]=(((x2857*x2862))+(((-1.0)*r22*x2865))+(((-1.0)*x2863*x2866)));
evalcond[1]=((((-1.0)*x2862*x2865))+(((-1.0)*r22*x2866))+((x2858*x2863)));
evalcond[2]=((((-1.0)*r12*x2865))+cj0+(((-1.0)*x2861*x2866))+((x2857*x2859)));
evalcond[3]=((((-1.0)*r02*x2866))+cj0+(((-1.0)*x2864*x2865))+((x2858*x2860)));
evalcond[4]=((((-1.0)*r12*x2866))+sj0+(((-1.0)*x2859*x2865))+((x2858*x2861)));
evalcond[5]=((((-1.0)*r02*x2865))+(((-1.0)*sj0))+((x2857*x2864))+(((-1.0)*x2860*x2866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2867=((1.0)*cj5);
IkReal x2868=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2867)));
j4eval[0]=x2868;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2867)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2868);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2869=((1.0)*cj5);
IkReal x2870=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2869)));
j4eval[0]=x2870;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2869)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2871=cj5*cj5;
IkReal x2872=((1.0)*sj5);
IkReal x2873=(cj5*r20);
IkReal x2874=(r11*r21);
IkReal x2875=((((-1.0)*cj5*r10*r21*x2872))+((r12*r22))+(((-1.0)*r11*x2872*x2873))+x2874+((r10*r20*x2871))+(((-1.0)*x2871*x2874)));
j4eval[0]=x2875;
j4eval[1]=IKsign(x2875);
j4eval[2]=((IKabs((((cj0*x2873))+(((-1.0)*cj0*r21*x2872)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2876=cj5*cj5;
IkReal x2877=((1.0)*sj5);
IkReal x2878=(cj5*r20);
IkReal x2879=(r11*r21);
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2877*x2878))+(((-1.0)*cj5*r10*r21*x2877))+(((-1.0)*x2876*x2879))+((r12*r22))+x2879+((r10*r20*x2876)))),-1);
if(!x2880.valid){
continue;
}
CheckValue<IkReal> x2881 = IKatan2WithCheck(IkReal((((cj0*x2878))+(((-1.0)*cj0*r21*x2877)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2880.value)))+(x2881.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2882=IKsin(j4);
IkReal x2883=IKcos(j4);
IkReal x2884=((1.0)*sj0);
IkReal x2885=(cj5*r00);
IkReal x2886=(r11*sj5);
IkReal x2887=(cj5*r10);
IkReal x2888=(r21*sj5);
IkReal x2889=(cj5*r20);
IkReal x2890=(r01*sj5);
IkReal x2891=((1.0)*x2883);
IkReal x2892=((1.0)*x2882);
evalcond[0]=((((-1.0)*r22*x2891))+(((-1.0)*x2889*x2892))+((x2882*x2888)));
evalcond[1]=((((-1.0)*r22*x2892))+(((-1.0)*x2888*x2891))+((x2883*x2889)));
evalcond[2]=(cj0+(((-1.0)*x2887*x2892))+((x2882*x2886))+(((-1.0)*r12*x2891)));
evalcond[3]=((((-1.0)*r02*x2891))+(((-1.0)*x2885*x2892))+(((-1.0)*x2884))+((x2882*x2890)));
evalcond[4]=((((-1.0)*x2890*x2891))+(((-1.0)*r02*x2892))+(((-1.0)*cj0))+((x2883*x2885)));
evalcond[5]=((((-1.0)*x2884))+(((-1.0)*x2886*x2891))+((x2883*x2887))+(((-1.0)*r12*x2892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2893=((1.0)*cj5);
CheckValue<IkReal> x2894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2893)))),-1);
if(!x2894.valid){
continue;
}
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2893))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2894.value)))+(x2895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2896=IKsin(j4);
IkReal x2897=IKcos(j4);
IkReal x2898=((1.0)*sj0);
IkReal x2899=(cj5*r00);
IkReal x2900=(r11*sj5);
IkReal x2901=(cj5*r10);
IkReal x2902=(r21*sj5);
IkReal x2903=(cj5*r20);
IkReal x2904=(r01*sj5);
IkReal x2905=((1.0)*x2897);
IkReal x2906=((1.0)*x2896);
evalcond[0]=((((-1.0)*x2903*x2906))+((x2896*x2902))+(((-1.0)*r22*x2905)));
evalcond[1]=((((-1.0)*x2902*x2905))+((x2897*x2903))+(((-1.0)*r22*x2906)));
evalcond[2]=((((-1.0)*x2901*x2906))+cj0+((x2896*x2900))+(((-1.0)*r12*x2905)));
evalcond[3]=((((-1.0)*r02*x2905))+(((-1.0)*x2898))+((x2896*x2904))+(((-1.0)*x2899*x2906)));
evalcond[4]=((((-1.0)*r02*x2906))+(((-1.0)*x2904*x2905))+((x2897*x2899))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2900*x2905))+(((-1.0)*x2898))+((x2897*x2901))+(((-1.0)*r12*x2906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2907=((1.0)*cj5);
CheckValue<IkReal> x2908 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2908.valid){
continue;
}
CheckValue<IkReal> x2909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2907)))),-1);
if(!x2909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2908.value)+(((1.5707963267949)*(x2909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2910=IKsin(j4);
IkReal x2911=IKcos(j4);
IkReal x2912=((1.0)*sj0);
IkReal x2913=(cj5*r00);
IkReal x2914=(r11*sj5);
IkReal x2915=(cj5*r10);
IkReal x2916=(r21*sj5);
IkReal x2917=(cj5*r20);
IkReal x2918=(r01*sj5);
IkReal x2919=((1.0)*x2911);
IkReal x2920=((1.0)*x2910);
evalcond[0]=((((-1.0)*x2917*x2920))+((x2910*x2916))+(((-1.0)*r22*x2919)));
evalcond[1]=(((x2911*x2917))+(((-1.0)*r22*x2920))+(((-1.0)*x2916*x2919)));
evalcond[2]=(cj0+(((-1.0)*x2915*x2920))+(((-1.0)*r12*x2919))+((x2910*x2914)));
evalcond[3]=((((-1.0)*r02*x2919))+(((-1.0)*x2913*x2920))+((x2910*x2918))+(((-1.0)*x2912)));
evalcond[4]=((((-1.0)*r02*x2920))+(((-1.0)*x2918*x2919))+((x2911*x2913))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2914*x2919))+(((-1.0)*r12*x2920))+((x2911*x2915))+(((-1.0)*x2912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2921=IKsin(j0);
IkReal x2922=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x2922))+(((-0.10915)*x2921)));
evalcond[1]=((((0.10915)*x2922))+(((-1.0)*py))+(((0.425)*x2921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2923=((1.0)*cj5);
IkReal x2924=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2923)));
j4eval[0]=x2924;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2923))))));
j4eval[2]=IKsign(x2924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2925=((1.0)*cj5);
IkReal x2926=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2925)));
j4eval[0]=x2926;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2925))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x2926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2927=cj5*cj5;
IkReal x2928=((1.0)*sj5);
IkReal x2929=(cj5*r20);
IkReal x2930=(r11*r21);
IkReal x2931=(((r12*r22))+((r10*r20*x2927))+(((-1.0)*cj5*r10*r21*x2928))+(((-1.0)*x2927*x2930))+(((-1.0)*r11*x2928*x2929))+x2930);
j4eval[0]=x2931;
j4eval[1]=IKsign(x2931);
j4eval[2]=((IKabs((((cj0*x2929))+(((-1.0)*cj0*r21*x2928)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2932=cj5*cj5;
IkReal x2933=((1.0)*sj5);
IkReal x2934=(cj5*r20);
IkReal x2935=(r11*r21);
CheckValue<IkReal> x2936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2933*x2934))+(((-1.0)*x2932*x2935))+((r12*r22))+((r10*r20*x2932))+(((-1.0)*cj5*r10*r21*x2933))+x2935)),-1);
if(!x2936.valid){
continue;
}
CheckValue<IkReal> x2937 = IKatan2WithCheck(IkReal((((cj0*x2934))+(((-1.0)*cj0*r21*x2933)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2936.value)))+(x2937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2938=IKsin(j4);
IkReal x2939=IKcos(j4);
IkReal x2940=((1.0)*sj0);
IkReal x2941=(cj5*r00);
IkReal x2942=(r11*sj5);
IkReal x2943=(cj5*r10);
IkReal x2944=(r21*sj5);
IkReal x2945=(cj5*r20);
IkReal x2946=(r01*sj5);
IkReal x2947=((1.0)*x2939);
IkReal x2948=((1.0)*x2938);
evalcond[0]=((((-1.0)*x2945*x2948))+(((-1.0)*r22*x2947))+((x2938*x2944)));
evalcond[1]=(((x2939*x2945))+(((-1.0)*r22*x2948))+(((-1.0)*x2944*x2947)));
evalcond[2]=((((-1.0)*r12*x2947))+cj0+(((-1.0)*x2943*x2948))+((x2938*x2942)));
evalcond[3]=((((-1.0)*r02*x2947))+(((-1.0)*x2940))+((x2938*x2946))+(((-1.0)*x2941*x2948)));
evalcond[4]=(((x2939*x2941))+(((-1.0)*r02*x2948))+(((-1.0)*x2946*x2947))+(((-1.0)*cj0)));
evalcond[5]=(((x2939*x2943))+(((-1.0)*r12*x2948))+(((-1.0)*x2942*x2947))+(((-1.0)*x2940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2949=((1.0)*cj5);
CheckValue<IkReal> x2950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2949)))),-1);
if(!x2950.valid){
continue;
}
CheckValue<IkReal> x2951 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2950.value)))+(x2951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2952=IKsin(j4);
IkReal x2953=IKcos(j4);
IkReal x2954=((1.0)*sj0);
IkReal x2955=(cj5*r00);
IkReal x2956=(r11*sj5);
IkReal x2957=(cj5*r10);
IkReal x2958=(r21*sj5);
IkReal x2959=(cj5*r20);
IkReal x2960=(r01*sj5);
IkReal x2961=((1.0)*x2953);
IkReal x2962=((1.0)*x2952);
evalcond[0]=((((-1.0)*x2959*x2962))+((x2952*x2958))+(((-1.0)*r22*x2961)));
evalcond[1]=(((x2953*x2959))+(((-1.0)*r22*x2962))+(((-1.0)*x2958*x2961)));
evalcond[2]=((((-1.0)*x2957*x2962))+cj0+((x2952*x2956))+(((-1.0)*r12*x2961)));
evalcond[3]=((((-1.0)*x2955*x2962))+(((-1.0)*x2954))+((x2952*x2960))+(((-1.0)*r02*x2961)));
evalcond[4]=((((-1.0)*r02*x2962))+((x2953*x2955))+(((-1.0)*x2960*x2961))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2954))+((x2953*x2957))+(((-1.0)*x2956*x2961))+(((-1.0)*r12*x2962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2963=((1.0)*cj5);
CheckValue<IkReal> x2964 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2964.valid){
continue;
}
CheckValue<IkReal> x2965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2963)))),-1);
if(!x2965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2964.value)+(((1.5707963267949)*(x2965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2966=IKsin(j4);
IkReal x2967=IKcos(j4);
IkReal x2968=((1.0)*sj0);
IkReal x2969=(cj5*r00);
IkReal x2970=(r11*sj5);
IkReal x2971=(cj5*r10);
IkReal x2972=(r21*sj5);
IkReal x2973=(cj5*r20);
IkReal x2974=(r01*sj5);
IkReal x2975=((1.0)*x2967);
IkReal x2976=((1.0)*x2966);
evalcond[0]=(((x2966*x2972))+(((-1.0)*r22*x2975))+(((-1.0)*x2973*x2976)));
evalcond[1]=((((-1.0)*x2972*x2975))+(((-1.0)*r22*x2976))+((x2967*x2973)));
evalcond[2]=(cj0+(((-1.0)*r12*x2975))+((x2966*x2970))+(((-1.0)*x2971*x2976)));
evalcond[3]=((((-1.0)*r02*x2975))+(((-1.0)*x2969*x2976))+(((-1.0)*x2968))+((x2966*x2974)));
evalcond[4]=((((-1.0)*r02*x2976))+(((-1.0)*x2974*x2975))+((x2967*x2969))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x2976))+(((-1.0)*x2968))+((x2967*x2971))+(((-1.0)*x2970*x2975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2977=IKsin(j0);
IkReal x2978=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x2977))+(((0.425)*x2978)));
evalcond[1]=((((0.10915)*x2978))+(((-1.0)*py))+(((0.425)*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2979=((1.0)*cj5);
IkReal x2980=((((-1.0)*r01*x2979))+(((-1.0)*r00*sj5)));
j4eval[0]=x2980;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2979))))));
j4eval[2]=IKsign(x2980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2981=cj5*cj5;
IkReal x2982=((1.0)*r21);
IkReal x2983=(cj5*sj5);
IkReal x2984=((1.0)*r20);
IkReal x2985=((((-1.0)*r00*x2982*x2983))+((r01*r21))+(((-1.0)*r01*x2981*x2982))+(((-1.0)*r01*x2983*x2984))+((r02*r22))+((r00*r20*x2981)));
j4eval[0]=x2985;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2984))))));
j4eval[2]=IKsign(x2985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2986=cj5*cj5;
IkReal x2987=(r21*sj5);
IkReal x2988=(r11*r21);
IkReal x2989=((1.0)*cj5*r20);
IkReal x2990=(((r10*r20*x2986))+((r12*r22))+(((-1.0)*x2986*x2988))+(((-1.0)*r11*sj5*x2989))+x2988+(((-1.0)*cj5*r10*x2987)));
j4eval[0]=x2990;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x2989))+((sj0*x2987))))));
j4eval[2]=IKsign(x2990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2991=cj5*cj5;
IkReal x2992=(r21*sj5);
IkReal x2993=(r11*r21);
IkReal x2994=((1.0)*cj5*r20);
CheckValue<IkReal> x2995=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x2992))+((r12*r22))+(((-1.0)*r11*sj5*x2994))+((r10*r20*x2991))+(((-1.0)*x2991*x2993))+x2993)),-1);
if(!x2995.valid){
continue;
}
CheckValue<IkReal> x2996 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x2992))+(((-1.0)*sj0*x2994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2995.value)))+(x2996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2997=IKsin(j4);
IkReal x2998=IKcos(j4);
IkReal x2999=(r11*sj5);
IkReal x3000=(cj5*r00);
IkReal x3001=(cj5*r10);
IkReal x3002=(r21*sj5);
IkReal x3003=(cj5*r20);
IkReal x3004=(r01*sj5);
IkReal x3005=((1.0)*x2998);
IkReal x3006=((1.0)*x2997);
evalcond[0]=((((-1.0)*r22*x3005))+(((-1.0)*x3003*x3006))+((x2997*x3002)));
evalcond[1]=((((-1.0)*r22*x3006))+(((-1.0)*x3002*x3005))+((x2998*x3003)));
evalcond[2]=(cj0+((x2997*x2999))+(((-1.0)*r12*x3005))+(((-1.0)*x3001*x3006)));
evalcond[3]=(cj0+(((-1.0)*r02*x3006))+((x2998*x3000))+(((-1.0)*x3004*x3005)));
evalcond[4]=(sj0+((x2998*x3001))+(((-1.0)*r12*x3006))+(((-1.0)*x2999*x3005)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3005))+(((-1.0)*x3000*x3006))+((x2997*x3004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3007=cj5*cj5;
IkReal x3008=((1.0)*r21);
IkReal x3009=(cj5*sj5);
IkReal x3010=((1.0)*r20);
CheckValue<IkReal> x3011 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3011.valid){
continue;
}
CheckValue<IkReal> x3012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3007*x3008))+((r01*r21))+(((-1.0)*r00*x3008*x3009))+((r00*r20*x3007))+(((-1.0)*r01*x3009*x3010))+((r02*r22)))),-1);
if(!x3012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3011.value)+(((1.5707963267949)*(x3012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3013=IKsin(j4);
IkReal x3014=IKcos(j4);
IkReal x3015=(r11*sj5);
IkReal x3016=(cj5*r00);
IkReal x3017=(cj5*r10);
IkReal x3018=(r21*sj5);
IkReal x3019=(cj5*r20);
IkReal x3020=(r01*sj5);
IkReal x3021=((1.0)*x3014);
IkReal x3022=((1.0)*x3013);
evalcond[0]=((((-1.0)*x3019*x3022))+((x3013*x3018))+(((-1.0)*r22*x3021)));
evalcond[1]=((((-1.0)*x3018*x3021))+(((-1.0)*r22*x3022))+((x3014*x3019)));
evalcond[2]=((((-1.0)*r12*x3021))+cj0+((x3013*x3015))+(((-1.0)*x3017*x3022)));
evalcond[3]=(cj0+(((-1.0)*x3020*x3021))+(((-1.0)*r02*x3022))+((x3014*x3016)));
evalcond[4]=((((-1.0)*r12*x3022))+(((-1.0)*x3015*x3021))+sj0+((x3014*x3017)));
evalcond[5]=(((x3013*x3020))+(((-1.0)*sj0))+(((-1.0)*x3016*x3022))+(((-1.0)*r02*x3021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3023=((1.0)*cj5);
CheckValue<IkReal> x3024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3023)))),-1);
if(!x3024.valid){
continue;
}
CheckValue<IkReal> x3025 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3024.value)))+(x3025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3026=IKsin(j4);
IkReal x3027=IKcos(j4);
IkReal x3028=(r11*sj5);
IkReal x3029=(cj5*r00);
IkReal x3030=(cj5*r10);
IkReal x3031=(r21*sj5);
IkReal x3032=(cj5*r20);
IkReal x3033=(r01*sj5);
IkReal x3034=((1.0)*x3027);
IkReal x3035=((1.0)*x3026);
evalcond[0]=(((x3026*x3031))+(((-1.0)*r22*x3034))+(((-1.0)*x3032*x3035)));
evalcond[1]=((((-1.0)*r22*x3035))+(((-1.0)*x3031*x3034))+((x3027*x3032)));
evalcond[2]=(cj0+(((-1.0)*x3030*x3035))+(((-1.0)*r12*x3034))+((x3026*x3028)));
evalcond[3]=(((x3027*x3029))+cj0+(((-1.0)*r02*x3035))+(((-1.0)*x3033*x3034)));
evalcond[4]=(sj0+(((-1.0)*x3028*x3034))+(((-1.0)*r12*x3035))+((x3027*x3030)));
evalcond[5]=((((-1.0)*sj0))+((x3026*x3033))+(((-1.0)*x3029*x3035))+(((-1.0)*r02*x3034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3036=((1.0)*cj5);
IkReal x3037=((((-1.0)*r01*x3036))+(((-1.0)*r00*sj5)));
j4eval[0]=x3037;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3036))))));
j4eval[2]=IKsign(x3037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3038=((1.0)*cj5);
IkReal x3039=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3038)));
j4eval[0]=x3039;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3038))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3040=cj5*cj5;
IkReal x3041=((1.0)*sj5);
IkReal x3042=(cj5*r20);
IkReal x3043=(r11*r21);
IkReal x3044=(x3043+((r12*r22))+((r10*r20*x3040))+(((-1.0)*r11*x3041*x3042))+(((-1.0)*x3040*x3043))+(((-1.0)*cj5*r10*r21*x3041)));
j4eval[0]=x3044;
j4eval[1]=IKsign(x3044);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3041))+((cj0*x3042)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3045=cj5*cj5;
IkReal x3046=((1.0)*sj5);
IkReal x3047=(cj5*r20);
IkReal x3048=(r11*r21);
CheckValue<IkReal> x3049=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3045*x3048))+x3048+((r12*r22))+(((-1.0)*r11*x3046*x3047))+((r10*r20*x3045))+(((-1.0)*cj5*r10*r21*x3046)))),-1);
if(!x3049.valid){
continue;
}
CheckValue<IkReal> x3050 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3046))+((cj0*x3047)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3049.value)))+(x3050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3051=IKsin(j4);
IkReal x3052=IKcos(j4);
IkReal x3053=((1.0)*sj0);
IkReal x3054=(cj5*r00);
IkReal x3055=(r11*sj5);
IkReal x3056=(cj5*r10);
IkReal x3057=(r21*sj5);
IkReal x3058=(cj5*r20);
IkReal x3059=(r01*sj5);
IkReal x3060=((1.0)*x3052);
IkReal x3061=((1.0)*x3051);
evalcond[0]=((((-1.0)*r22*x3060))+(((-1.0)*x3058*x3061))+((x3051*x3057)));
evalcond[1]=((((-1.0)*r22*x3061))+((x3052*x3058))+(((-1.0)*x3057*x3060)));
evalcond[2]=(cj0+(((-1.0)*r12*x3060))+((x3051*x3055))+(((-1.0)*x3056*x3061)));
evalcond[3]=((((-1.0)*x3054*x3061))+(((-1.0)*r02*x3060))+((x3051*x3059))+(((-1.0)*x3053)));
evalcond[4]=((((-1.0)*r02*x3061))+((x3052*x3054))+(((-1.0)*x3059*x3060))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3061))+((x3052*x3056))+(((-1.0)*x3055*x3060))+(((-1.0)*x3053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3062=((1.0)*cj5);
CheckValue<IkReal> x3063 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3062))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3063.valid){
continue;
}
CheckValue<IkReal> x3064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3062)))),-1);
if(!x3064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3063.value)+(((1.5707963267949)*(x3064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3065=IKsin(j4);
IkReal x3066=IKcos(j4);
IkReal x3067=((1.0)*sj0);
IkReal x3068=(cj5*r00);
IkReal x3069=(r11*sj5);
IkReal x3070=(cj5*r10);
IkReal x3071=(r21*sj5);
IkReal x3072=(cj5*r20);
IkReal x3073=(r01*sj5);
IkReal x3074=((1.0)*x3066);
IkReal x3075=((1.0)*x3065);
evalcond[0]=((((-1.0)*x3072*x3075))+(((-1.0)*r22*x3074))+((x3065*x3071)));
evalcond[1]=((((-1.0)*r22*x3075))+(((-1.0)*x3071*x3074))+((x3066*x3072)));
evalcond[2]=(cj0+((x3065*x3069))+(((-1.0)*r12*x3074))+(((-1.0)*x3070*x3075)));
evalcond[3]=((((-1.0)*r02*x3074))+((x3065*x3073))+(((-1.0)*x3067))+(((-1.0)*x3068*x3075)));
evalcond[4]=((((-1.0)*r02*x3075))+(((-1.0)*x3073*x3074))+((x3066*x3068))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3067))+(((-1.0)*r12*x3075))+(((-1.0)*x3069*x3074))+((x3066*x3070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3076=((1.0)*cj5);
CheckValue<IkReal> x3077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3076))+(((-1.0)*r00*sj5)))),-1);
if(!x3077.valid){
continue;
}
CheckValue<IkReal> x3078 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3076))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3077.value)))+(x3078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3079=IKsin(j4);
IkReal x3080=IKcos(j4);
IkReal x3081=((1.0)*sj0);
IkReal x3082=(cj5*r00);
IkReal x3083=(r11*sj5);
IkReal x3084=(cj5*r10);
IkReal x3085=(r21*sj5);
IkReal x3086=(cj5*r20);
IkReal x3087=(r01*sj5);
IkReal x3088=((1.0)*x3080);
IkReal x3089=((1.0)*x3079);
evalcond[0]=((((-1.0)*r22*x3088))+((x3079*x3085))+(((-1.0)*x3086*x3089)));
evalcond[1]=(((x3080*x3086))+(((-1.0)*r22*x3089))+(((-1.0)*x3085*x3088)));
evalcond[2]=(cj0+((x3079*x3083))+(((-1.0)*x3084*x3089))+(((-1.0)*r12*x3088)));
evalcond[3]=((((-1.0)*x3081))+(((-1.0)*x3082*x3089))+(((-1.0)*r02*x3088))+((x3079*x3087)));
evalcond[4]=(((x3080*x3082))+(((-1.0)*r02*x3089))+(((-1.0)*x3087*x3088))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3081))+((x3080*x3084))+(((-1.0)*x3083*x3088))+(((-1.0)*r12*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3090=((1.0)*cj5);
IkReal x3091=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3090)));
j4eval[0]=x3091;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3090))))));
j4eval[2]=IKsign(x3091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3092=cj5*cj5;
IkReal x3093=((1.0)*r21);
IkReal x3094=(cj5*sj5);
IkReal x3095=((1.0)*r20);
IkReal x3096=(((r00*r20*x3092))+(((-1.0)*r00*x3093*x3094))+((r01*r21))+(((-1.0)*r01*x3094*x3095))+((r02*r22))+(((-1.0)*r01*x3092*x3093)));
j4eval[0]=x3096;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3095)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3096);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3097=cj5*cj5;
IkReal x3098=(r21*sj5);
IkReal x3099=(r11*r21);
IkReal x3100=((1.0)*cj5*r20);
IkReal x3101=(x3099+(((-1.0)*cj5*r10*x3098))+((r10*r20*x3097))+((r12*r22))+(((-1.0)*r11*sj5*x3100))+(((-1.0)*x3097*x3099)));
j4eval[0]=x3101;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x3100))+((sj0*x3098))))));
j4eval[2]=IKsign(x3101);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3102=cj5*cj5;
IkReal x3103=(r21*sj5);
IkReal x3104=(r11*r21);
IkReal x3105=((1.0)*cj5*r20);
CheckValue<IkReal> x3106 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x3103))+(((-1.0)*sj0*x3105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3106.valid){
continue;
}
CheckValue<IkReal> x3107=IKPowWithIntegerCheck(IKsign((x3104+((r10*r20*x3102))+(((-1.0)*cj5*r10*x3103))+((r12*r22))+(((-1.0)*r11*sj5*x3105))+(((-1.0)*x3102*x3104)))),-1);
if(!x3107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3106.value)+(((1.5707963267949)*(x3107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3108=IKsin(j4);
IkReal x3109=IKcos(j4);
IkReal x3110=(r11*sj5);
IkReal x3111=(cj5*r00);
IkReal x3112=(cj5*r10);
IkReal x3113=(r21*sj5);
IkReal x3114=(cj5*r20);
IkReal x3115=(r01*sj5);
IkReal x3116=((1.0)*x3109);
IkReal x3117=((1.0)*x3108);
evalcond[0]=((((-1.0)*x3114*x3117))+((x3108*x3113))+(((-1.0)*r22*x3116)));
evalcond[1]=((((-1.0)*x3113*x3116))+((x3109*x3114))+(((-1.0)*r22*x3117)));
evalcond[2]=(cj0+(((-1.0)*r12*x3116))+((x3108*x3110))+(((-1.0)*x3112*x3117)));
evalcond[3]=((((-1.0)*x3115*x3116))+(((-1.0)*r02*x3117))+cj0+((x3109*x3111)));
evalcond[4]=(sj0+(((-1.0)*r12*x3117))+(((-1.0)*x3110*x3116))+((x3109*x3112)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3116))+((x3108*x3115))+(((-1.0)*x3111*x3117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3118=cj5*cj5;
IkReal x3119=((1.0)*r21);
IkReal x3120=(cj5*sj5);
IkReal x3121=((1.0)*r20);
CheckValue<IkReal> x3122=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x3118*x3119))+((r00*r20*x3118))+(((-1.0)*r00*x3119*x3120))+((r02*r22))+(((-1.0)*r01*x3120*x3121)))),-1);
if(!x3122.valid){
continue;
}
CheckValue<IkReal> x3123 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3122.value)))+(x3123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3124=IKsin(j4);
IkReal x3125=IKcos(j4);
IkReal x3126=(r11*sj5);
IkReal x3127=(cj5*r00);
IkReal x3128=(cj5*r10);
IkReal x3129=(r21*sj5);
IkReal x3130=(cj5*r20);
IkReal x3131=(r01*sj5);
IkReal x3132=((1.0)*x3125);
IkReal x3133=((1.0)*x3124);
evalcond[0]=((((-1.0)*x3130*x3133))+((x3124*x3129))+(((-1.0)*r22*x3132)));
evalcond[1]=(((x3125*x3130))+(((-1.0)*r22*x3133))+(((-1.0)*x3129*x3132)));
evalcond[2]=(cj0+(((-1.0)*x3128*x3133))+(((-1.0)*r12*x3132))+((x3124*x3126)));
evalcond[3]=((((-1.0)*x3131*x3132))+cj0+(((-1.0)*r02*x3133))+((x3125*x3127)));
evalcond[4]=(sj0+((x3125*x3128))+(((-1.0)*r12*x3133))+(((-1.0)*x3126*x3132)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3132))+((x3124*x3131))+(((-1.0)*x3127*x3133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3134=((1.0)*cj5);
CheckValue<IkReal> x3135=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3134)))),-1);
if(!x3135.valid){
continue;
}
CheckValue<IkReal> x3136 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3135.value)))+(x3136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3137=IKsin(j4);
IkReal x3138=IKcos(j4);
IkReal x3139=(r11*sj5);
IkReal x3140=(cj5*r00);
IkReal x3141=(cj5*r10);
IkReal x3142=(r21*sj5);
IkReal x3143=(cj5*r20);
IkReal x3144=(r01*sj5);
IkReal x3145=((1.0)*x3138);
IkReal x3146=((1.0)*x3137);
evalcond[0]=((((-1.0)*x3143*x3146))+(((-1.0)*r22*x3145))+((x3137*x3142)));
evalcond[1]=((((-1.0)*r22*x3146))+(((-1.0)*x3142*x3145))+((x3138*x3143)));
evalcond[2]=((((-1.0)*r12*x3145))+cj0+(((-1.0)*x3141*x3146))+((x3137*x3139)));
evalcond[3]=(cj0+(((-1.0)*x3144*x3145))+(((-1.0)*r02*x3146))+((x3138*x3140)));
evalcond[4]=((((-1.0)*r12*x3146))+sj0+(((-1.0)*x3139*x3145))+((x3138*x3141)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3140*x3146))+(((-1.0)*r02*x3145))+((x3137*x3144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3147=IKcos(j0);
IkReal x3148=IKsin(j0);
evalcond[0]=((((-0.10915)*x3148))+(((-1.0)*px))+(((-0.425)*x3147)));
evalcond[1]=((((0.10915)*x3147))+(((-1.0)*py))+(((-0.425)*x3148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3149=((1.0)*cj5);
IkReal x3150=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3149)));
j4eval[0]=x3150;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3149))))));
j4eval[2]=IKsign(x3150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3151=cj5*cj5;
IkReal x3152=((1.0)*r21);
IkReal x3153=(cj5*sj5);
IkReal x3154=((1.0)*r20);
IkReal x3155=(((r00*r20*x3151))+(((-1.0)*r01*x3151*x3152))+((r01*r21))+(((-1.0)*r00*x3152*x3153))+((r02*r22))+(((-1.0)*r01*x3153*x3154)));
j4eval[0]=x3155;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3154)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3156=cj5*cj5;
IkReal x3157=(r21*sj5);
IkReal x3158=(r11*r21);
IkReal x3159=((1.0)*cj5*r20);
IkReal x3160=(x3158+((r10*r20*x3156))+((r12*r22))+(((-1.0)*r11*sj5*x3159))+(((-1.0)*cj5*r10*x3157))+(((-1.0)*x3156*x3158)));
j4eval[0]=x3160;
j4eval[1]=((IKabs(((((-1.0)*sj0*x3159))+((sj0*x3157)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3160);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3161=cj5*cj5;
IkReal x3162=(r21*sj5);
IkReal x3163=(r11*r21);
IkReal x3164=((1.0)*cj5*r20);
CheckValue<IkReal> x3165 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x3164))+((sj0*x3162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3165.valid){
continue;
}
CheckValue<IkReal> x3166=IKPowWithIntegerCheck(IKsign((x3163+((r10*r20*x3161))+((r12*r22))+(((-1.0)*cj5*r10*x3162))+(((-1.0)*r11*sj5*x3164))+(((-1.0)*x3161*x3163)))),-1);
if(!x3166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3165.value)+(((1.5707963267949)*(x3166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3167=IKsin(j4);
IkReal x3168=IKcos(j4);
IkReal x3169=(r11*sj5);
IkReal x3170=(cj5*r00);
IkReal x3171=(cj5*r10);
IkReal x3172=(r21*sj5);
IkReal x3173=(cj5*r20);
IkReal x3174=(r01*sj5);
IkReal x3175=((1.0)*x3168);
IkReal x3176=((1.0)*x3167);
evalcond[0]=((((-1.0)*x3173*x3176))+((x3167*x3172))+(((-1.0)*r22*x3175)));
evalcond[1]=(((x3168*x3173))+(((-1.0)*x3172*x3175))+(((-1.0)*r22*x3176)));
evalcond[2]=(cj0+(((-1.0)*r12*x3175))+((x3167*x3169))+(((-1.0)*x3171*x3176)));
evalcond[3]=((((-1.0)*x3174*x3175))+cj0+((x3168*x3170))+(((-1.0)*r02*x3176)));
evalcond[4]=((((-1.0)*x3169*x3175))+sj0+((x3168*x3171))+(((-1.0)*r12*x3176)));
evalcond[5]=((((-1.0)*sj0))+((x3167*x3174))+(((-1.0)*x3170*x3176))+(((-1.0)*r02*x3175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3177=cj5*cj5;
IkReal x3178=((1.0)*r21);
IkReal x3179=(cj5*sj5);
IkReal x3180=((1.0)*r20);
CheckValue<IkReal> x3181 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3181.valid){
continue;
}
CheckValue<IkReal> x3182=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x3177*x3178))+(((-1.0)*r00*x3178*x3179))+(((-1.0)*r01*x3179*x3180))+((r02*r22))+((r00*r20*x3177)))),-1);
if(!x3182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3181.value)+(((1.5707963267949)*(x3182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3183=IKsin(j4);
IkReal x3184=IKcos(j4);
IkReal x3185=(r11*sj5);
IkReal x3186=(cj5*r00);
IkReal x3187=(cj5*r10);
IkReal x3188=(r21*sj5);
IkReal x3189=(cj5*r20);
IkReal x3190=(r01*sj5);
IkReal x3191=((1.0)*x3184);
IkReal x3192=((1.0)*x3183);
evalcond[0]=((((-1.0)*r22*x3191))+((x3183*x3188))+(((-1.0)*x3189*x3192)));
evalcond[1]=((((-1.0)*r22*x3192))+((x3184*x3189))+(((-1.0)*x3188*x3191)));
evalcond[2]=(cj0+(((-1.0)*x3187*x3192))+(((-1.0)*r12*x3191))+((x3183*x3185)));
evalcond[3]=((((-1.0)*x3190*x3191))+cj0+((x3184*x3186))+(((-1.0)*r02*x3192)));
evalcond[4]=((((-1.0)*x3185*x3191))+sj0+((x3184*x3187))+(((-1.0)*r12*x3192)));
evalcond[5]=((((-1.0)*sj0))+((x3183*x3190))+(((-1.0)*x3186*x3192))+(((-1.0)*r02*x3191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3193=((1.0)*cj5);
CheckValue<IkReal> x3194 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3194.valid){
continue;
}
CheckValue<IkReal> x3195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3193))+(((-1.0)*r00*sj5)))),-1);
if(!x3195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3194.value)+(((1.5707963267949)*(x3195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3196=IKsin(j4);
IkReal x3197=IKcos(j4);
IkReal x3198=(r11*sj5);
IkReal x3199=(cj5*r00);
IkReal x3200=(cj5*r10);
IkReal x3201=(r21*sj5);
IkReal x3202=(cj5*r20);
IkReal x3203=(r01*sj5);
IkReal x3204=((1.0)*x3197);
IkReal x3205=((1.0)*x3196);
evalcond[0]=(((x3196*x3201))+(((-1.0)*x3202*x3205))+(((-1.0)*r22*x3204)));
evalcond[1]=(((x3197*x3202))+(((-1.0)*x3201*x3204))+(((-1.0)*r22*x3205)));
evalcond[2]=(cj0+(((-1.0)*x3200*x3205))+(((-1.0)*r12*x3204))+((x3196*x3198)));
evalcond[3]=((((-1.0)*r02*x3205))+cj0+(((-1.0)*x3203*x3204))+((x3197*x3199)));
evalcond[4]=(((x3197*x3200))+sj0+(((-1.0)*r12*x3205))+(((-1.0)*x3198*x3204)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3204))+((x3196*x3203))+(((-1.0)*x3199*x3205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3206=IKcos(j0);
IkReal x3207=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3207))+(((-0.425)*x3206)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x3206))+(((-0.425)*x3207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3208=((1.0)*cj5);
IkReal x3209=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3208)));
j4eval[0]=x3209;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3208)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3209);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3210=((1.0)*cj5);
IkReal x3211=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3210)));
j4eval[0]=x3211;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3210))))));
j4eval[2]=IKsign(x3211);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3212=cj5*cj5;
IkReal x3213=((1.0)*sj5);
IkReal x3214=(cj5*r20);
IkReal x3215=(r11*r21);
IkReal x3216=(x3215+(((-1.0)*r11*x3213*x3214))+((r12*r22))+((r10*r20*x3212))+(((-1.0)*x3212*x3215))+(((-1.0)*cj5*r10*r21*x3213)));
j4eval[0]=x3216;
j4eval[1]=IKsign(x3216);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3213))+((cj0*x3214)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3217=cj5*cj5;
IkReal x3218=((1.0)*sj5);
IkReal x3219=(cj5*r20);
IkReal x3220=(r11*r21);
CheckValue<IkReal> x3221=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3218*x3219))+x3220+(((-1.0)*x3217*x3220))+((r12*r22))+((r10*r20*x3217))+(((-1.0)*cj5*r10*r21*x3218)))),-1);
if(!x3221.valid){
continue;
}
CheckValue<IkReal> x3222 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3218))+((cj0*x3219)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3221.value)))+(x3222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3223=IKsin(j4);
IkReal x3224=IKcos(j4);
IkReal x3225=((1.0)*sj0);
IkReal x3226=(cj5*r00);
IkReal x3227=(r11*sj5);
IkReal x3228=(cj5*r10);
IkReal x3229=(r21*sj5);
IkReal x3230=(cj5*r20);
IkReal x3231=(r01*sj5);
IkReal x3232=((1.0)*x3224);
IkReal x3233=((1.0)*x3223);
evalcond[0]=((((-1.0)*x3230*x3233))+((x3223*x3229))+(((-1.0)*r22*x3232)));
evalcond[1]=((((-1.0)*x3229*x3232))+((x3224*x3230))+(((-1.0)*r22*x3233)));
evalcond[2]=(cj0+(((-1.0)*x3228*x3233))+((x3223*x3227))+(((-1.0)*r12*x3232)));
evalcond[3]=(((x3223*x3231))+(((-1.0)*r02*x3232))+(((-1.0)*x3226*x3233))+(((-1.0)*x3225)));
evalcond[4]=((((-1.0)*r02*x3233))+(((-1.0)*x3231*x3232))+((x3224*x3226))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3233))+(((-1.0)*x3227*x3232))+((x3224*x3228))+(((-1.0)*x3225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3234=((1.0)*cj5);
CheckValue<IkReal> x3235 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3235.valid){
continue;
}
CheckValue<IkReal> x3236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3234)))),-1);
if(!x3236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3235.value)+(((1.5707963267949)*(x3236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3237=IKsin(j4);
IkReal x3238=IKcos(j4);
IkReal x3239=((1.0)*sj0);
IkReal x3240=(cj5*r00);
IkReal x3241=(r11*sj5);
IkReal x3242=(cj5*r10);
IkReal x3243=(r21*sj5);
IkReal x3244=(cj5*r20);
IkReal x3245=(r01*sj5);
IkReal x3246=((1.0)*x3238);
IkReal x3247=((1.0)*x3237);
evalcond[0]=(((x3237*x3243))+(((-1.0)*x3244*x3247))+(((-1.0)*r22*x3246)));
evalcond[1]=((((-1.0)*x3243*x3246))+((x3238*x3244))+(((-1.0)*r22*x3247)));
evalcond[2]=(cj0+(((-1.0)*r12*x3246))+((x3237*x3241))+(((-1.0)*x3242*x3247)));
evalcond[3]=((((-1.0)*x3240*x3247))+((x3237*x3245))+(((-1.0)*x3239))+(((-1.0)*r02*x3246)));
evalcond[4]=(((x3238*x3240))+(((-1.0)*x3245*x3246))+(((-1.0)*r02*x3247))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3247))+(((-1.0)*x3239))+((x3238*x3242))+(((-1.0)*x3241*x3246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3248=((1.0)*cj5);
CheckValue<IkReal> x3249 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3248)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3249.valid){
continue;
}
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3248))+(((-1.0)*r00*sj5)))),-1);
if(!x3250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3249.value)+(((1.5707963267949)*(x3250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3251=IKsin(j4);
IkReal x3252=IKcos(j4);
IkReal x3253=((1.0)*sj0);
IkReal x3254=(cj5*r00);
IkReal x3255=(r11*sj5);
IkReal x3256=(cj5*r10);
IkReal x3257=(r21*sj5);
IkReal x3258=(cj5*r20);
IkReal x3259=(r01*sj5);
IkReal x3260=((1.0)*x3252);
IkReal x3261=((1.0)*x3251);
evalcond[0]=(((x3251*x3257))+(((-1.0)*r22*x3260))+(((-1.0)*x3258*x3261)));
evalcond[1]=((((-1.0)*x3257*x3260))+((x3252*x3258))+(((-1.0)*r22*x3261)));
evalcond[2]=(cj0+(((-1.0)*r12*x3260))+(((-1.0)*x3256*x3261))+((x3251*x3255)));
evalcond[3]=((((-1.0)*x3254*x3261))+((x3251*x3259))+(((-1.0)*r02*x3260))+(((-1.0)*x3253)));
evalcond[4]=(((x3252*x3254))+(((-1.0)*r02*x3261))+(((-1.0)*x3259*x3260))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3261))+((x3252*x3256))+(((-1.0)*x3255*x3260))+(((-1.0)*x3253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3262=(cj2*sj1);
IkReal x3263=((8500.0)*sj1);
IkReal x3264=(cj5*r01);
IkReal x3265=(r00*sj5);
IkReal x3266=(cj1*sj2);
IkReal x3267=((20000.0)*px);
CheckValue<IkReal> x3268=IKPowWithIntegerCheck(((((-2183.0)*x3266))+(((-2183.0)*x3262))),-1);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269=IKPowWithIntegerCheck(((((-1.0)*x3266))+(((-1.0)*x3262))),-1);
if(!x3269.valid){
continue;
}
if( IKabs(((x3268.value)*(((((-5952.0)*x3262*x3264))+(((-5952.0)*x3262*x3265))+((x3262*x3267))+(((-5952.0)*x3264*x3266))+(((-5952.0)*x3265*x3266))+(((-1.0)*x3263*x3265))+(((-1.0)*x3263*x3264))+((x3266*x3267)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3269.value)*(((((-1.0)*x3265))+(((-1.0)*x3264)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3268.value)*(((((-5952.0)*x3262*x3264))+(((-5952.0)*x3262*x3265))+((x3262*x3267))+(((-5952.0)*x3264*x3266))+(((-5952.0)*x3265*x3266))+(((-1.0)*x3263*x3265))+(((-1.0)*x3263*x3264))+((x3266*x3267))))))+IKsqr(((x3269.value)*(((((-1.0)*x3265))+(((-1.0)*x3264))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3268.value)*(((((-5952.0)*x3262*x3264))+(((-5952.0)*x3262*x3265))+((x3262*x3267))+(((-5952.0)*x3264*x3266))+(((-5952.0)*x3265*x3266))+(((-1.0)*x3263*x3265))+(((-1.0)*x3263*x3264))+((x3266*x3267))))), ((x3269.value)*(((((-1.0)*x3265))+(((-1.0)*x3264))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3270=IKcos(j0);
IkReal x3271=IKsin(j0);
IkReal x3272=(cj1*sj2);
IkReal x3273=(cj5*r01);
IkReal x3274=(cj5*r11);
IkReal x3275=(cj2*sj1);
IkReal x3276=((0.425)*sj1);
IkReal x3277=(r00*sj5);
IkReal x3278=(r10*sj5);
IkReal x3279=((0.39225)*x3271);
IkReal x3280=((1.0)*x3270);
IkReal x3281=((1.0)*x3271);
IkReal x3282=((0.39225)*x3270);
evalcond[0]=((((-1.0)*x3272*x3280))+x3277+x3273+(((-1.0)*x3275*x3280)));
evalcond[1]=((((-1.0)*x3272*x3281))+x3274+x3278+(((-1.0)*x3275*x3281)));
evalcond[2]=((((-0.10915)*x3271))+((x3272*x3282))+(((-1.0)*px))+(((-0.09465)*x3277))+(((-0.09465)*x3273))+((x3275*x3282))+((x3270*x3276)));
evalcond[3]=(((x3272*x3279))+(((0.10915)*x3270))+((x3275*x3279))+(((-1.0)*py))+(((-0.09465)*x3278))+(((-0.09465)*x3274))+((x3271*x3276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3283=((1.0)*cj5);
IkReal x3284=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3283)));
j4eval[0]=x3284;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3283))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3285=((1.0)*cj5);
IkReal x3286=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3285)));
j4eval[0]=x3286;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x3285))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3287=((1.0)*sj0);
IkReal x3288=((1.0)*cj0);
IkReal x3289=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3289;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x3288))+(((-1.0)*r11*sj5*x3287))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x3287))+(((-1.0)*r02*x3288))))));
j4eval[2]=IKsign(x3289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3290=((-1.0)*r20);
IkReal x3292 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3292)==0){
continue;
}
IkReal x3291=pow(x3292,-0.5);
CheckValue<IkReal> x3293 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3290),IKFAST_ATAN2_MAGTHRESH);
if(!x3293.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3293.value));
IkReal gconst97=(r21*x3291);
IkReal gconst98=(x3290*x3291);
CheckValue<IkReal> x3294 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3294.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3294.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3295=((-1.0)*r20);
IkReal x3296=x3291;
CheckValue<IkReal> x3298 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3295),IKFAST_ATAN2_MAGTHRESH);
if(!x3298.valid){
continue;
}
IkReal x3297=((-1.0)*(x3298.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3297;
IkReal gconst96=x3297;
IkReal gconst97=(r21*x3296);
IkReal gconst98=(x3295*x3296);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3299=((-1.0)*r20);
IkReal x3300=x3291;
CheckValue<IkReal> x3302 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3299),IKFAST_ATAN2_MAGTHRESH);
if(!x3302.valid){
continue;
}
IkReal x3301=((-1.0)*(x3302.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3301;
IkReal gconst96=x3301;
IkReal gconst97=(r21*x3300);
IkReal gconst98=(x3299*x3300);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3303=((-1.0)*r20);
IkReal x3304=x3291;
CheckValue<IkReal> x3306 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3303),IKFAST_ATAN2_MAGTHRESH);
if(!x3306.valid){
continue;
}
IkReal x3305=((-1.0)*(x3306.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3305;
IkReal gconst96=x3305;
IkReal gconst97=(r21*x3304);
IkReal gconst98=(x3303*x3304);
IkReal x3307=r22*r22;
CheckValue<IkReal> x3310=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3307))),-1);
if(!x3310.valid){
continue;
}
IkReal x3308=x3310.value;
IkReal x3309=(((x3308*(r21*r21*r21*r21)))+x3307+(((2.0)*x3308*(r20*r20)*(r21*r21)))+((x3308*(r20*r20*r20*r20))));
j4eval[0]=x3309;
j4eval[1]=IKsign(x3309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3311=(cj2*sj1);
IkReal x3312=(gconst98*r20);
IkReal x3313=(gconst97*r21);
IkReal x3314=((1.0)*cj1*sj2);
CheckValue<IkReal> x3315 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3311))+(((-1.0)*r22*x3314)))),IkReal(((((-1.0)*x3311*x3313))+(((-1.0)*x3313*x3314))+((cj1*sj2*x3312))+((x3311*x3312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3315.valid){
continue;
}
CheckValue<IkReal> x3316=IKPowWithIntegerCheck(IKsign(((x3312*x3312)+(r22*r22)+(x3313*x3313)+(((-2.0)*x3312*x3313)))),-1);
if(!x3316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3315.value)+(((1.5707963267949)*(x3316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3317=IKsin(j4);
IkReal x3318=IKcos(j4);
IkReal x3319=(cj1*cj2);
IkReal x3320=((1.0)*sj1);
IkReal x3321=((1.0)*x3318);
IkReal x3322=(gconst98*x3318);
IkReal x3323=(gconst97*x3317);
IkReal x3324=((1.0)*x3317);
IkReal x3325=(gconst98*x3324);
evalcond[0]=((((-1.0)*r20*x3325))+((r21*x3323))+(((-1.0)*r22*x3321)));
evalcond[1]=(cj0+((r11*x3323))+(((-1.0)*r10*x3325))+(((-1.0)*r12*x3321)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3321))+((r01*x3323))+(((-1.0)*r00*x3325)));
evalcond[3]=((((-1.0)*gconst97*r21*x3321))+((r20*x3322))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3320))+(((-1.0)*r22*x3324)));
evalcond[4]=((((-1.0)*r02*x3324))+((r00*x3322))+((cj0*x3319))+(((-1.0)*cj0*sj2*x3320))+(((-1.0)*gconst97*r01*x3321)));
evalcond[5]=((((-1.0)*gconst97*r11*x3321))+(((-1.0)*sj0*sj2*x3320))+(((-1.0)*r12*x3324))+((sj0*x3319))+((r10*x3322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3326=((1.0)*gconst98);
CheckValue<IkReal> x3327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3326))+(((-1.0)*gconst97*r10)))),-1);
if(!x3327.valid){
continue;
}
CheckValue<IkReal> x3328 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3327.value)))+(x3328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3329=IKsin(j4);
IkReal x3330=IKcos(j4);
IkReal x3331=(cj1*cj2);
IkReal x3332=((1.0)*sj1);
IkReal x3333=((1.0)*x3330);
IkReal x3334=(gconst98*x3330);
IkReal x3335=(gconst97*x3329);
IkReal x3336=((1.0)*x3329);
IkReal x3337=(gconst98*x3336);
evalcond[0]=(((r21*x3335))+(((-1.0)*r20*x3337))+(((-1.0)*r22*x3333)));
evalcond[1]=(cj0+((r11*x3335))+(((-1.0)*r10*x3337))+(((-1.0)*r12*x3333)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3333))+(((-1.0)*r00*x3337))+((r01*x3335)));
evalcond[3]=((((-1.0)*gconst97*r21*x3333))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3336))+(((-1.0)*cj2*x3332))+((r20*x3334)));
evalcond[4]=((((-1.0)*gconst97*r01*x3333))+((cj0*x3331))+(((-1.0)*r02*x3336))+(((-1.0)*cj0*sj2*x3332))+((r00*x3334)));
evalcond[5]=(((r10*x3334))+(((-1.0)*sj0*sj2*x3332))+(((-1.0)*gconst97*r11*x3333))+((sj0*x3331))+(((-1.0)*r12*x3336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3338=((1.0)*gconst98);
CheckValue<IkReal> x3339=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3338))+(((-1.0)*gconst97*r00)))),-1);
if(!x3339.valid){
continue;
}
CheckValue<IkReal> x3340 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3339.value)))+(x3340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3341=IKsin(j4);
IkReal x3342=IKcos(j4);
IkReal x3343=(cj1*cj2);
IkReal x3344=((1.0)*sj1);
IkReal x3345=((1.0)*x3342);
IkReal x3346=(gconst98*x3342);
IkReal x3347=(gconst97*x3341);
IkReal x3348=((1.0)*x3341);
IkReal x3349=(gconst98*x3348);
evalcond[0]=((((-1.0)*r20*x3349))+((r21*x3347))+(((-1.0)*r22*x3345)));
evalcond[1]=((((-1.0)*r10*x3349))+cj0+(((-1.0)*r12*x3345))+((r11*x3347)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3345))+((r01*x3347))+(((-1.0)*r00*x3349)));
evalcond[3]=((((-1.0)*cj2*x3344))+(((-1.0)*gconst97*r21*x3345))+(((-1.0)*cj1*sj2))+((r20*x3346))+(((-1.0)*r22*x3348)));
evalcond[4]=(((r00*x3346))+(((-1.0)*cj0*sj2*x3344))+((cj0*x3343))+(((-1.0)*gconst97*r01*x3345))+(((-1.0)*r02*x3348)));
evalcond[5]=(((r10*x3346))+((sj0*x3343))+(((-1.0)*sj0*sj2*x3344))+(((-1.0)*gconst97*r11*x3345))+(((-1.0)*r12*x3348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3350=((-1.0)*r21);
IkReal x3352 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3352)==0){
continue;
}
IkReal x3351=pow(x3352,-0.5);
CheckValue<IkReal> x3353 = IKatan2WithCheck(IkReal(x3350),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3353.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3353.value))));
IkReal gconst100=(x3350*x3351);
IkReal gconst101=((1.0)*r20*x3351);
CheckValue<IkReal> x3354 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3354.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3354.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3355=((-1.0)*r21);
CheckValue<IkReal> x3358 = IKatan2WithCheck(IkReal(x3355),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3358.valid){
continue;
}
IkReal x3356=((1.0)*(x3358.value));
IkReal x3357=x3351;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3356)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3356)));
IkReal gconst100=(x3355*x3357);
IkReal gconst101=((1.0)*r20*x3357);
IkReal x3359=r22*r22;
IkReal x3360=((1.0)*x3359);
CheckValue<IkReal> x3364=IKPowWithIntegerCheck(((-1.0)+x3359),-1);
if(!x3364.valid){
continue;
}
IkReal x3361=x3364.value;
if((((1.0)+(((-1.0)*x3360)))) < -0.00001)
continue;
IkReal x3362=IKsqrt(((1.0)+(((-1.0)*x3360))));
IkReal x3363=(cj0*x3361*x3362);
j4eval[0]=((IKabs(((((-1.0)*x3360*x3363))+x3363)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3365=((-1.0)*r21);
CheckValue<IkReal> x3368 = IKatan2WithCheck(IkReal(x3365),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3368.valid){
continue;
}
IkReal x3366=((1.0)*(x3368.value));
IkReal x3367=x3351;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3366)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3366)));
IkReal gconst100=(x3365*x3367);
IkReal gconst101=((1.0)*r20*x3367);
IkReal x3369=r22*r22;
IkReal x3370=((1.0)*x3369);
CheckValue<IkReal> x3374=IKPowWithIntegerCheck(((-1.0)+x3369),-1);
if(!x3374.valid){
continue;
}
IkReal x3371=x3374.value;
if((((1.0)+(((-1.0)*x3370)))) < -0.00001)
continue;
IkReal x3372=IKsqrt(((1.0)+(((-1.0)*x3370))));
IkReal x3373=(sj0*x3371*x3372);
j4eval[0]=((IKabs((x3373+(((-1.0)*x3370*x3373)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3375=((-1.0)*r21);
CheckValue<IkReal> x3378 = IKatan2WithCheck(IkReal(x3375),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3378.valid){
continue;
}
IkReal x3376=((1.0)*(x3378.value));
IkReal x3377=x3351;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3376)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3376)));
IkReal gconst100=(x3375*x3377);
IkReal gconst101=((1.0)*r20*x3377);
IkReal x3379=r22*r22;
IkReal x3380=(r12*sj0);
IkReal x3381=(cj0*r02);
CheckValue<IkReal> x3385=IKPowWithIntegerCheck(((-1.0)+x3379),-1);
if(!x3385.valid){
continue;
}
IkReal x3382=x3385.value;
if((((1.0)+(((-1.0)*x3379)))) < -0.00001)
continue;
IkReal x3383=IKsqrt(((1.0)+(((-1.0)*x3379))));
IkReal x3384=(r22*x3382*x3383);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3380*x3384))+((x3381*x3384)))))+(IKabs(((((-1.0)*x3380))+(((-1.0)*x3381))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3386=((1.0)*sj0);
IkReal x3387=((1.0)*gconst100);
CheckValue<IkReal> x3388 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3386)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x3386))+(((-1.0)*cj0*r01*x3387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3388.valid){
continue;
}
CheckValue<IkReal> x3389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3387))+(((-1.0)*gconst101*r21)))),-1);
if(!x3389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3388.value)+(((1.5707963267949)*(x3389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3390=IKsin(j4);
IkReal x3391=IKcos(j4);
IkReal x3392=(cj1*cj2);
IkReal x3393=(gconst101*r20);
IkReal x3394=(gconst101*r10);
IkReal x3395=((1.0)*sj1);
IkReal x3396=(gconst101*r00);
IkReal x3397=((1.0)*x3391);
IkReal x3398=((1.0)*x3390);
IkReal x3399=(gconst100*x3390);
evalcond[0]=((((-1.0)*r22*x3397))+((r21*x3399))+(((-1.0)*x3393*x3398)));
evalcond[1]=((((-1.0)*x3394*x3398))+cj0+((r11*x3399))+(((-1.0)*r12*x3397)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3399))+(((-1.0)*x3396*x3398))+(((-1.0)*r02*x3397)));
evalcond[3]=((((-1.0)*r22*x3398))+((x3391*x3393))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3395))+(((-1.0)*gconst100*r21*x3397)));
evalcond[4]=(((x3391*x3396))+((cj0*x3392))+(((-1.0)*cj0*sj2*x3395))+(((-1.0)*r02*x3398))+(((-1.0)*gconst100*r01*x3397)));
evalcond[5]=((((-1.0)*sj0*sj2*x3395))+((x3391*x3394))+((sj0*x3392))+(((-1.0)*r12*x3398))+(((-1.0)*gconst100*r11*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3400=((1.0)*gconst101);
CheckValue<IkReal> x3401 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3400))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3401.valid){
continue;
}
CheckValue<IkReal> x3402=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3400)))),-1);
if(!x3402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3401.value)+(((1.5707963267949)*(x3402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3403=IKsin(j4);
IkReal x3404=IKcos(j4);
IkReal x3405=(cj1*cj2);
IkReal x3406=(gconst101*r20);
IkReal x3407=(gconst101*r10);
IkReal x3408=((1.0)*sj1);
IkReal x3409=(gconst101*r00);
IkReal x3410=((1.0)*x3404);
IkReal x3411=((1.0)*x3403);
IkReal x3412=(gconst100*x3403);
evalcond[0]=((((-1.0)*r22*x3410))+((r21*x3412))+(((-1.0)*x3406*x3411)));
evalcond[1]=((((-1.0)*x3407*x3411))+cj0+((r11*x3412))+(((-1.0)*r12*x3410)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3410))+((r01*x3412))+(((-1.0)*x3409*x3411)));
evalcond[3]=((((-1.0)*r22*x3411))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3408))+((x3404*x3406))+(((-1.0)*gconst100*r21*x3410)));
evalcond[4]=((((-1.0)*r02*x3411))+(((-1.0)*cj0*sj2*x3408))+(((-1.0)*gconst100*r01*x3410))+((cj0*x3405))+((x3404*x3409)));
evalcond[5]=((((-1.0)*sj0*sj2*x3408))+((sj0*x3405))+(((-1.0)*gconst100*r11*x3410))+(((-1.0)*r12*x3411))+((x3404*x3407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3413=((1.0)*gconst101);
CheckValue<IkReal> x3414=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3413)))),-1);
if(!x3414.valid){
continue;
}
CheckValue<IkReal> x3415 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3414.value)))+(x3415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3416=IKsin(j4);
IkReal x3417=IKcos(j4);
IkReal x3418=(cj1*cj2);
IkReal x3419=(gconst101*r20);
IkReal x3420=(gconst101*r10);
IkReal x3421=((1.0)*sj1);
IkReal x3422=(gconst101*r00);
IkReal x3423=((1.0)*x3417);
IkReal x3424=((1.0)*x3416);
IkReal x3425=(gconst100*x3416);
evalcond[0]=((((-1.0)*x3419*x3424))+(((-1.0)*r22*x3423))+((r21*x3425)));
evalcond[1]=((((-1.0)*r12*x3423))+cj0+(((-1.0)*x3420*x3424))+((r11*x3425)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3422*x3424))+(((-1.0)*r02*x3423))+((r01*x3425)));
evalcond[3]=(((x3417*x3419))+(((-1.0)*cj2*x3421))+(((-1.0)*gconst100*r21*x3423))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3424)));
evalcond[4]=((((-1.0)*cj0*sj2*x3421))+((cj0*x3418))+((x3417*x3422))+(((-1.0)*r02*x3424))+(((-1.0)*gconst100*r01*x3423)));
evalcond[5]=(((sj0*x3418))+(((-1.0)*r12*x3424))+((x3417*x3420))+(((-1.0)*gconst100*r11*x3423))+(((-1.0)*sj0*sj2*x3421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3426=((-1.0)*r10);
IkReal x3428 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3428)==0){
continue;
}
IkReal x3427=pow(x3428,-0.5);
CheckValue<IkReal> x3429 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3426),IKFAST_ATAN2_MAGTHRESH);
if(!x3429.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3429.value));
IkReal gconst103=(r11*x3427);
IkReal gconst104=(x3426*x3427);
CheckValue<IkReal> x3430 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3430.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3430.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3431=((-1.0)*r10);
IkReal x3432=x3427;
CheckValue<IkReal> x3434 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3431),IKFAST_ATAN2_MAGTHRESH);
if(!x3434.valid){
continue;
}
IkReal x3433=((-1.0)*(x3434.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3433;
IkReal gconst102=x3433;
IkReal gconst103=(r11*x3432);
IkReal gconst104=(x3431*x3432);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3435=((1.0)*sj0);
IkReal x3436=((1.0)*gconst103);
CheckValue<IkReal> x3437 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3435))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3436))+(((-1.0)*gconst103*r11*x3435))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3437.valid){
continue;
}
CheckValue<IkReal> x3438=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3436)))),-1);
if(!x3438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3437.value)+(((1.5707963267949)*(x3438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3439=IKsin(j4);
IkReal x3440=IKcos(j4);
IkReal x3441=(gconst103*r11);
IkReal x3442=(cj1*cj2);
IkReal x3443=(gconst103*r01);
IkReal x3444=((1.0)*sj2);
IkReal x3445=(gconst103*r21);
IkReal x3446=((1.0)*x3440);
IkReal x3447=(gconst104*x3440);
IkReal x3448=((1.0)*x3439);
evalcond[0]=((((-1.0)*gconst104*r20*x3448))+(((-1.0)*r22*x3446))+((x3439*x3445)));
evalcond[1]=(cj0+(((-1.0)*r12*x3446))+(((-1.0)*gconst104*r10*x3448))+((x3439*x3441)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst104*r00*x3448))+(((-1.0)*r02*x3446))+((x3439*x3443)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3444))+((r20*x3447))+(((-1.0)*r22*x3448))+(((-1.0)*x3445*x3446)));
evalcond[4]=((((-1.0)*cj0*sj1*x3444))+(((-1.0)*x3443*x3446))+(((-1.0)*r02*x3448))+((cj0*x3442))+((r00*x3447)));
evalcond[5]=(((r10*x3447))+((sj0*x3442))+(((-1.0)*x3441*x3446))+(((-1.0)*sj0*sj1*x3444))+(((-1.0)*r12*x3448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3449=((1.0)*gconst104);
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3449))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
CheckValue<IkReal> x3451=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3449)))),-1);
if(!x3451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3450.value)+(((1.5707963267949)*(x3451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3452=IKsin(j4);
IkReal x3453=IKcos(j4);
IkReal x3454=(gconst103*r11);
IkReal x3455=(cj1*cj2);
IkReal x3456=(gconst103*r01);
IkReal x3457=((1.0)*sj2);
IkReal x3458=(gconst103*r21);
IkReal x3459=((1.0)*x3453);
IkReal x3460=(gconst104*x3453);
IkReal x3461=((1.0)*x3452);
evalcond[0]=((((-1.0)*gconst104*r20*x3461))+((x3452*x3458))+(((-1.0)*r22*x3459)));
evalcond[1]=(cj0+(((-1.0)*gconst104*r10*x3461))+(((-1.0)*r12*x3459))+((x3452*x3454)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst104*r00*x3461))+((x3452*x3456))+(((-1.0)*r02*x3459)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*x3458*x3459))+((r20*x3460))+(((-1.0)*r22*x3461))+(((-1.0)*cj1*x3457)));
evalcond[4]=((((-1.0)*r02*x3461))+((r00*x3460))+((cj0*x3455))+(((-1.0)*cj0*sj1*x3457))+(((-1.0)*x3456*x3459)));
evalcond[5]=(((sj0*x3455))+(((-1.0)*x3454*x3459))+(((-1.0)*r12*x3461))+(((-1.0)*sj0*sj1*x3457))+((r10*x3460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3462=((-1.0)*r11);
IkReal x3464 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3464)==0){
continue;
}
IkReal x3463=pow(x3464,-0.5);
CheckValue<IkReal> x3465 = IKatan2WithCheck(IkReal(x3462),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3465.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3465.value))));
IkReal gconst106=(x3462*x3463);
IkReal gconst107=((1.0)*r10*x3463);
CheckValue<IkReal> x3466 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3466.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3466.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3467=((-1.0)*r11);
CheckValue<IkReal> x3470 = IKatan2WithCheck(IkReal(x3467),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3470.valid){
continue;
}
IkReal x3468=((1.0)*(x3470.value));
IkReal x3469=x3463;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3468)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3468)));
IkReal gconst106=(x3467*x3469);
IkReal gconst107=((1.0)*r10*x3469);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3471=((-1.0)*r11);
CheckValue<IkReal> x3474 = IKatan2WithCheck(IkReal(x3471),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3474.valid){
continue;
}
IkReal x3472=((1.0)*(x3474.value));
IkReal x3473=x3463;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3472)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3472)));
IkReal gconst106=(x3471*x3473);
IkReal gconst107=((1.0)*r10*x3473);
IkReal x3475=r12*r12;
IkReal x3476=((1.0)*sj0);
IkReal x3477=(cj0*r02);
IkReal x3478=x3463;
j4eval[0]=((IKabs((((sj0*x3475*x3478))+((r12*x3477*x3478))+(((-1.0)*x3476*x3478)))))+(IKabs(((((-1.0)*r12*x3476))+(((-1.0)*x3477))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3479=((-1.0)*r11);
CheckValue<IkReal> x3482 = IKatan2WithCheck(IkReal(x3479),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3482.valid){
continue;
}
IkReal x3480=((1.0)*(x3482.value));
IkReal x3481=x3463;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3480)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3480)));
IkReal gconst106=(x3479*x3481);
IkReal gconst107=((1.0)*r10*x3481);
IkReal x3483=((1.0)*r22);
IkReal x3484=(cj1*sj2);
IkReal x3485=(cj2*sj1);
IkReal x3486=x3463;
IkReal x3487=(r12*r22*x3486);
j4eval[0]=((IKabs((((x3484*x3487))+((x3485*x3487)))))+(IKabs(((((-1.0)*x3483*x3485))+(((-1.0)*x3483*x3484))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3488=((1.0)*r22);
IkReal x3489=(cj1*sj2);
IkReal x3490=(gconst106*r21);
IkReal x3491=(cj2*sj1);
IkReal x3492=(gconst107*r20);
CheckValue<IkReal> x3493=IKPowWithIntegerCheck(IKsign(((x3492*x3492)+(r22*r22)+(x3490*x3490)+(((-2.0)*x3490*x3492)))),-1);
if(!x3493.valid){
continue;
}
CheckValue<IkReal> x3494 = IKatan2WithCheck(IkReal(((((-1.0)*x3488*x3491))+(((-1.0)*x3488*x3489)))),IkReal(((((-1.0)*x3490*x3491))+((x3491*x3492))+(((-1.0)*x3489*x3490))+((x3489*x3492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3493.value)))+(x3494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3495=IKsin(j4);
IkReal x3496=IKcos(j4);
IkReal x3497=(cj1*cj2);
IkReal x3498=((1.0)*sj1);
IkReal x3499=((1.0)*x3496);
IkReal x3500=(gconst106*x3495);
IkReal x3501=((1.0)*x3495);
IkReal x3502=(gconst107*x3496);
IkReal x3503=(gconst107*x3501);
evalcond[0]=((((-1.0)*r22*x3499))+(((-1.0)*r20*x3503))+((r21*x3500)));
evalcond[1]=((((-1.0)*r10*x3503))+(((-1.0)*r12*x3499))+cj0+((r11*x3500)));
evalcond[2]=(((r01*x3500))+(((-1.0)*r02*x3499))+(((-1.0)*sj0))+(((-1.0)*r00*x3503)));
evalcond[3]=((((-1.0)*cj2*x3498))+(((-1.0)*gconst106*r21*x3499))+((r20*x3502))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3501)));
evalcond[4]=(((cj0*x3497))+(((-1.0)*cj0*sj2*x3498))+((r00*x3502))+(((-1.0)*r02*x3501))+(((-1.0)*gconst106*r01*x3499)));
evalcond[5]=((((-1.0)*r12*x3501))+(((-1.0)*gconst106*r11*x3499))+(((-1.0)*sj0*sj2*x3498))+((r10*x3502))+((sj0*x3497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3504=((1.0)*sj0);
IkReal x3505=((1.0)*gconst106);
CheckValue<IkReal> x3506 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3504))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3505))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3504))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3506.valid){
continue;
}
CheckValue<IkReal> x3507=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3505)))),-1);
if(!x3507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3506.value)+(((1.5707963267949)*(x3507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3508=IKsin(j4);
IkReal x3509=IKcos(j4);
IkReal x3510=(cj1*cj2);
IkReal x3511=((1.0)*sj1);
IkReal x3512=((1.0)*x3509);
IkReal x3513=(gconst106*x3508);
IkReal x3514=((1.0)*x3508);
IkReal x3515=(gconst107*x3509);
IkReal x3516=(gconst107*x3514);
evalcond[0]=(((r21*x3513))+(((-1.0)*r22*x3512))+(((-1.0)*r20*x3516)));
evalcond[1]=(cj0+(((-1.0)*r10*x3516))+((r11*x3513))+(((-1.0)*r12*x3512)));
evalcond[2]=((((-1.0)*r02*x3512))+(((-1.0)*sj0))+((r01*x3513))+(((-1.0)*r00*x3516)));
evalcond[3]=((((-1.0)*cj2*x3511))+((r20*x3515))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3514))+(((-1.0)*gconst106*r21*x3512)));
evalcond[4]=((((-1.0)*r02*x3514))+((r00*x3515))+((cj0*x3510))+(((-1.0)*cj0*sj2*x3511))+(((-1.0)*gconst106*r01*x3512)));
evalcond[5]=(((r10*x3515))+(((-1.0)*r12*x3514))+((sj0*x3510))+(((-1.0)*sj0*sj2*x3511))+(((-1.0)*gconst106*r11*x3512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3517=((1.0)*gconst107);
CheckValue<IkReal> x3518=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3517)))),-1);
if(!x3518.valid){
continue;
}
CheckValue<IkReal> x3519 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3517))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3518.value)))+(x3519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3520=IKsin(j4);
IkReal x3521=IKcos(j4);
IkReal x3522=(cj1*cj2);
IkReal x3523=((1.0)*sj1);
IkReal x3524=((1.0)*x3521);
IkReal x3525=(gconst106*x3520);
IkReal x3526=((1.0)*x3520);
IkReal x3527=(gconst107*x3521);
IkReal x3528=(gconst107*x3526);
evalcond[0]=((((-1.0)*r20*x3528))+((r21*x3525))+(((-1.0)*r22*x3524)));
evalcond[1]=(cj0+(((-1.0)*r10*x3528))+((r11*x3525))+(((-1.0)*r12*x3524)));
evalcond[2]=((((-1.0)*r02*x3524))+(((-1.0)*sj0))+((r01*x3525))+(((-1.0)*r00*x3528)));
evalcond[3]=((((-1.0)*cj2*x3523))+((r20*x3527))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3526))+(((-1.0)*gconst106*r21*x3524)));
evalcond[4]=((((-1.0)*r02*x3526))+((cj0*x3522))+((r00*x3527))+(((-1.0)*cj0*sj2*x3523))+(((-1.0)*gconst106*r01*x3524)));
evalcond[5]=((((-1.0)*sj0*sj2*x3523))+((r10*x3527))+((sj0*x3522))+(((-1.0)*r12*x3526))+(((-1.0)*gconst106*r11*x3524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3529=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3529;
j4eval[1]=IKsign(x3529);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3530=((1.0)*cj5);
IkReal x3531=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3530)));
j4eval[0]=x3531;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3530))))));
j4eval[2]=IKsign(x3531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3532=cj5*cj5;
IkReal x3533=r11*r11;
IkReal x3534=(r11*sj5);
IkReal x3535=(cj5*r10);
IkReal x3536=((r12*r12)+(((-1.0)*x3532*x3533))+x3533+((x3532*(r10*r10)))+(((-2.0)*x3534*x3535)));
j4eval[0]=x3536;
j4eval[1]=IKsign(x3536);
j4eval[2]=((IKabs((x3535+(((-1.0)*x3534)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3537=cj5*cj5;
IkReal x3538=r11*r11;
IkReal x3539=(cj5*r10);
IkReal x3540=(r11*sj5);
CheckValue<IkReal> x3541 = IKatan2WithCheck(IkReal((x3539+(((-1.0)*x3540)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3541.valid){
continue;
}
CheckValue<IkReal> x3542=IKPowWithIntegerCheck(IKsign(((r12*r12)+x3538+(((-1.0)*x3537*x3538))+(((-2.0)*x3539*x3540))+((x3537*(r10*r10))))),-1);
if(!x3542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3541.value)+(((1.5707963267949)*(x3542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3543=IKsin(j4);
IkReal x3544=IKcos(j4);
IkReal x3545=(cj5*r10);
IkReal x3546=(r01*sj5);
IkReal x3547=((1.0)*sj1);
IkReal x3548=(cj5*r00);
IkReal x3549=(cj5*r20);
IkReal x3550=((1.0)*x3544);
IkReal x3551=((1.0)*x3543);
IkReal x3552=(sj5*x3543);
evalcond[0]=(((r21*x3552))+(((-1.0)*r22*x3550))+(((-1.0)*x3549*x3551)));
evalcond[1]=(((x3543*x3546))+(((-1.0)*x3548*x3551))+(((-1.0)*r02*x3550)));
evalcond[2]=((((-1.0)*r12*x3551))+((x3544*x3545))+(((-1.0)*r11*sj5*x3550)));
evalcond[3]=((1.0)+(((-1.0)*x3545*x3551))+(((-1.0)*r12*x3550))+((r11*x3552)));
evalcond[4]=((((-1.0)*sj2*x3547))+(((-1.0)*x3546*x3550))+((x3544*x3548))+((cj1*cj2))+(((-1.0)*r02*x3551)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x3550))+(((-1.0)*cj2*x3547))+(((-1.0)*r22*x3551))+((x3544*x3549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3553=((1.0)*cj5);
CheckValue<IkReal> x3554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3553))+(((-1.0)*r00*sj5)))),-1);
if(!x3554.valid){
continue;
}
CheckValue<IkReal> x3555 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3553))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3554.value)))+(x3555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3556=IKsin(j4);
IkReal x3557=IKcos(j4);
IkReal x3558=(cj5*r10);
IkReal x3559=(r01*sj5);
IkReal x3560=((1.0)*sj1);
IkReal x3561=(cj5*r00);
IkReal x3562=(cj5*r20);
IkReal x3563=((1.0)*x3557);
IkReal x3564=((1.0)*x3556);
IkReal x3565=(sj5*x3556);
evalcond[0]=(((r21*x3565))+(((-1.0)*r22*x3563))+(((-1.0)*x3562*x3564)));
evalcond[1]=(((x3556*x3559))+(((-1.0)*r02*x3563))+(((-1.0)*x3561*x3564)));
evalcond[2]=((((-1.0)*r12*x3564))+(((-1.0)*r11*sj5*x3563))+((x3557*x3558)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3563))+((r11*x3565))+(((-1.0)*x3558*x3564)));
evalcond[4]=((((-1.0)*r02*x3564))+(((-1.0)*sj2*x3560))+(((-1.0)*x3559*x3563))+((cj1*cj2))+((x3557*x3561)));
evalcond[5]=((((-1.0)*cj2*x3560))+(((-1.0)*r21*sj5*x3563))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3564))+((x3557*x3562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3566=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3566.valid){
continue;
}
CheckValue<IkReal> x3567 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3566.value)))+(x3567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3568=IKsin(j4);
IkReal x3569=IKcos(j4);
IkReal x3570=(cj5*r10);
IkReal x3571=(r01*sj5);
IkReal x3572=((1.0)*sj1);
IkReal x3573=(cj5*r00);
IkReal x3574=(cj5*r20);
IkReal x3575=((1.0)*x3569);
IkReal x3576=((1.0)*x3568);
IkReal x3577=(sj5*x3568);
evalcond[0]=(((r21*x3577))+(((-1.0)*x3574*x3576))+(((-1.0)*r22*x3575)));
evalcond[1]=((((-1.0)*x3573*x3576))+((x3568*x3571))+(((-1.0)*r02*x3575)));
evalcond[2]=((((-1.0)*r11*sj5*x3575))+((x3569*x3570))+(((-1.0)*r12*x3576)));
evalcond[3]=((1.0)+((r11*x3577))+(((-1.0)*r12*x3575))+(((-1.0)*x3570*x3576)));
evalcond[4]=(((x3569*x3573))+(((-1.0)*x3571*x3575))+(((-1.0)*sj2*x3572))+((cj1*cj2))+(((-1.0)*r02*x3576)));
evalcond[5]=((((-1.0)*cj2*x3572))+(((-1.0)*cj1*sj2))+((x3569*x3574))+(((-1.0)*r22*x3576))+(((-1.0)*r21*sj5*x3575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3578=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3578;
j4eval[1]=IKsign(x3578);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3579=((1.0)*cj5);
IkReal x3580=((((-1.0)*r21*x3579))+(((-1.0)*r20*sj5)));
j4eval[0]=x3580;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3579))))));
j4eval[2]=IKsign(x3580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3581=cj5*cj5;
IkReal x3582=r11*r11;
IkReal x3583=(cj5*r10);
IkReal x3584=(r11*sj5);
IkReal x3585=((((2.0)*x3583*x3584))+(((-1.0)*x3581*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x3582))+((x3581*x3582)));
j4eval[0]=x3585;
j4eval[1]=((IKabs(r12))+(IKabs((x3583+(((-1.0)*x3584))))));
j4eval[2]=IKsign(x3585);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3586=cj5*cj5;
IkReal x3587=r11*r11;
IkReal x3588=(cj5*r10);
IkReal x3589=(r11*sj5);
CheckValue<IkReal> x3590 = IKatan2WithCheck(IkReal((x3588+(((-1.0)*x3589)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3590.valid){
continue;
}
CheckValue<IkReal> x3591=IKPowWithIntegerCheck(IKsign((((x3586*x3587))+(((2.0)*x3588*x3589))+(((-1.0)*x3586*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x3587)))),-1);
if(!x3591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3590.value)+(((1.5707963267949)*(x3591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3592=IKsin(j4);
IkReal x3593=IKcos(j4);
IkReal x3594=(cj5*r10);
IkReal x3595=(r01*sj5);
IkReal x3596=((1.0)*cj2);
IkReal x3597=(cj5*r00);
IkReal x3598=(cj5*r20);
IkReal x3599=((1.0)*x3593);
IkReal x3600=((1.0)*x3592);
IkReal x3601=(sj5*x3592);
evalcond[0]=((((-1.0)*r22*x3599))+(((-1.0)*x3598*x3600))+((r21*x3601)));
evalcond[1]=(((x3592*x3595))+(((-1.0)*r02*x3599))+(((-1.0)*x3597*x3600)));
evalcond[2]=((((-1.0)*r11*sj5*x3599))+(((-1.0)*r12*x3600))+((x3593*x3594)));
evalcond[3]=((-1.0)+((r11*x3601))+(((-1.0)*x3594*x3600))+(((-1.0)*r12*x3599)));
evalcond[4]=((((-1.0)*cj1*x3596))+((sj1*sj2))+((x3593*x3597))+(((-1.0)*r02*x3600))+(((-1.0)*x3595*x3599)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x3593*x3598))+(((-1.0)*sj1*x3596))+(((-1.0)*r22*x3600))+(((-1.0)*r21*sj5*x3599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3602=((1.0)*cj5);
CheckValue<IkReal> x3603 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x3602))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3603.valid){
continue;
}
CheckValue<IkReal> x3604=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3602))+(((-1.0)*r20*sj5)))),-1);
if(!x3604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3603.value)+(((1.5707963267949)*(x3604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3605=IKsin(j4);
IkReal x3606=IKcos(j4);
IkReal x3607=(cj5*r10);
IkReal x3608=(r01*sj5);
IkReal x3609=((1.0)*cj2);
IkReal x3610=(cj5*r00);
IkReal x3611=(cj5*r20);
IkReal x3612=((1.0)*x3606);
IkReal x3613=((1.0)*x3605);
IkReal x3614=(sj5*x3605);
evalcond[0]=((((-1.0)*x3611*x3613))+((r21*x3614))+(((-1.0)*r22*x3612)));
evalcond[1]=((((-1.0)*r02*x3612))+(((-1.0)*x3610*x3613))+((x3605*x3608)));
evalcond[2]=(((x3606*x3607))+(((-1.0)*r12*x3613))+(((-1.0)*r11*sj5*x3612)));
evalcond[3]=((-1.0)+((r11*x3614))+(((-1.0)*r12*x3612))+(((-1.0)*x3607*x3613)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r02*x3613))+(((-1.0)*x3608*x3612))+(((-1.0)*cj1*x3609))+((x3606*x3610)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x3612))+(((-1.0)*r22*x3613))+(((-1.0)*sj1*x3609))+((x3606*x3611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3615 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3615.valid){
continue;
}
CheckValue<IkReal> x3616=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3615.value)+(((1.5707963267949)*(x3616.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3617=IKsin(j4);
IkReal x3618=IKcos(j4);
IkReal x3619=(cj5*r10);
IkReal x3620=(r01*sj5);
IkReal x3621=((1.0)*cj2);
IkReal x3622=(cj5*r00);
IkReal x3623=(cj5*r20);
IkReal x3624=((1.0)*x3618);
IkReal x3625=((1.0)*x3617);
IkReal x3626=(sj5*x3617);
evalcond[0]=(((r21*x3626))+(((-1.0)*x3623*x3625))+(((-1.0)*r22*x3624)));
evalcond[1]=((((-1.0)*x3622*x3625))+((x3617*x3620))+(((-1.0)*r02*x3624)));
evalcond[2]=(((x3618*x3619))+(((-1.0)*r11*sj5*x3624))+(((-1.0)*r12*x3625)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3624))+((r11*x3626))+(((-1.0)*x3619*x3625)));
evalcond[4]=(((x3618*x3622))+((sj1*sj2))+(((-1.0)*cj1*x3621))+(((-1.0)*r02*x3625))+(((-1.0)*x3620*x3624)));
evalcond[5]=(((x3618*x3623))+(((-1.0)*sj1*x3621))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x3624))+(((-1.0)*r22*x3625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3627=((-1.0)*r00);
IkReal x3629 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3629)==0){
continue;
}
IkReal x3628=pow(x3629,-0.5);
CheckValue<IkReal> x3630 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3627),IKFAST_ATAN2_MAGTHRESH);
if(!x3630.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3630.value));
IkReal gconst109=(r01*x3628);
IkReal gconst110=(x3627*x3628);
CheckValue<IkReal> x3631 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3631.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3631.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3632=((-1.0)*r00);
IkReal x3633=x3628;
CheckValue<IkReal> x3635 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3632),IKFAST_ATAN2_MAGTHRESH);
if(!x3635.valid){
continue;
}
IkReal x3634=((-1.0)*(x3635.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x3634;
IkReal gconst108=x3634;
IkReal gconst109=(r01*x3633);
IkReal gconst110=(x3632*x3633);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3636=((1.0)*sj0);
IkReal x3637=((1.0)*gconst109);
CheckValue<IkReal> x3638=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst110*r21))+(((-1.0)*r20*x3637)))),-1);
if(!x3638.valid){
continue;
}
CheckValue<IkReal> x3639 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3636))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3636))+(((-1.0)*cj0*r01*x3637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3638.value)))+(x3639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3640=IKsin(j4);
IkReal x3641=IKcos(j4);
IkReal x3642=(gconst110*r00);
IkReal x3643=((1.0)*sj2);
IkReal x3644=(cj1*cj2);
IkReal x3645=((1.0)*x3641);
IkReal x3646=((1.0)*x3640);
IkReal x3647=(gconst109*x3640);
IkReal x3648=(gconst110*x3641);
evalcond[0]=(((r21*x3647))+(((-1.0)*r22*x3645))+(((-1.0)*gconst110*r20*x3646)));
evalcond[1]=(((r11*x3647))+cj0+(((-1.0)*gconst110*r10*x3646))+(((-1.0)*r12*x3645)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3647))+(((-1.0)*x3642*x3646))+(((-1.0)*r02*x3645)));
evalcond[3]=(((r20*x3648))+(((-1.0)*gconst109*r21*x3645))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x3646))+(((-1.0)*cj1*x3643)));
evalcond[4]=(((x3641*x3642))+(((-1.0)*gconst109*r01*x3645))+(((-1.0)*cj0*sj1*x3643))+(((-1.0)*r02*x3646))+((cj0*x3644)));
evalcond[5]=((((-1.0)*r12*x3646))+((r10*x3648))+(((-1.0)*gconst109*r11*x3645))+((sj0*x3644))+(((-1.0)*sj0*sj1*x3643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3649=((1.0)*gconst110);
CheckValue<IkReal> x3650 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3650.valid){
continue;
}
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3649))+(((-1.0)*gconst109*r10)))),-1);
if(!x3651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3650.value)+(((1.5707963267949)*(x3651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3652=IKsin(j4);
IkReal x3653=IKcos(j4);
IkReal x3654=(gconst110*r00);
IkReal x3655=((1.0)*sj2);
IkReal x3656=(cj1*cj2);
IkReal x3657=((1.0)*x3653);
IkReal x3658=((1.0)*x3652);
IkReal x3659=(gconst109*x3652);
IkReal x3660=(gconst110*x3653);
evalcond[0]=(((r21*x3659))+(((-1.0)*r22*x3657))+(((-1.0)*gconst110*r20*x3658)));
evalcond[1]=(cj0+((r11*x3659))+(((-1.0)*gconst110*r10*x3658))+(((-1.0)*r12*x3657)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3654*x3658))+(((-1.0)*r02*x3657))+((r01*x3659)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*gconst109*r21*x3657))+((r20*x3660))+(((-1.0)*cj1*x3655))+(((-1.0)*r22*x3658)));
evalcond[4]=(((x3653*x3654))+(((-1.0)*gconst109*r01*x3657))+(((-1.0)*r02*x3658))+((cj0*x3656))+(((-1.0)*cj0*sj1*x3655)));
evalcond[5]=((((-1.0)*sj0*sj1*x3655))+(((-1.0)*gconst109*r11*x3657))+((r10*x3660))+((sj0*x3656))+(((-1.0)*r12*x3658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3661=((-1.0)*r01);
IkReal x3663 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3663)==0){
continue;
}
IkReal x3662=pow(x3663,-0.5);
CheckValue<IkReal> x3664 = IKatan2WithCheck(IkReal(x3661),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3664.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3664.value))));
IkReal gconst112=(x3661*x3662);
IkReal gconst113=((1.0)*r00*x3662);
CheckValue<IkReal> x3665 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3665.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3665.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3666=((-1.0)*r01);
CheckValue<IkReal> x3669 = IKatan2WithCheck(IkReal(x3666),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3669.valid){
continue;
}
IkReal x3667=((1.0)*(x3669.value));
IkReal x3668=x3662;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3667)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3667)));
IkReal gconst112=(x3666*x3668);
IkReal gconst113=((1.0)*r00*x3668);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3670=((-1.0)*r01);
CheckValue<IkReal> x3673 = IKatan2WithCheck(IkReal(x3670),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3673.valid){
continue;
}
IkReal x3671=((1.0)*(x3673.value));
IkReal x3672=x3662;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3671)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3671)));
IkReal gconst112=(x3670*x3672);
IkReal gconst113=((1.0)*r00*x3672);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3674=((-1.0)*r01);
CheckValue<IkReal> x3677 = IKatan2WithCheck(IkReal(x3674),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3677.valid){
continue;
}
IkReal x3675=((1.0)*(x3677.value));
IkReal x3676=x3662;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3675)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3675)));
IkReal gconst112=(x3674*x3676);
IkReal gconst113=((1.0)*r00*x3676);
IkReal x3678=r02*r02;
IkReal x3679=(r12*sj0);
IkReal x3680=((1.0)*cj0);
IkReal x3681=x3662;
j4eval[0]=((IKabs((((cj0*x3678*x3681))+((r02*x3679*x3681))+(((-1.0)*x3680*x3681)))))+(IKabs(((((-1.0)*x3679))+(((-1.0)*r02*x3680))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3682=((1.0)*sj0);
IkReal x3683=((1.0)*gconst112);
CheckValue<IkReal> x3684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3683))+(((-1.0)*gconst113*r21)))),-1);
if(!x3684.valid){
continue;
}
CheckValue<IkReal> x3685 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3682)))),IkReal(((((-1.0)*gconst112*r11*x3682))+(((-1.0)*cj0*r01*x3683))+((gconst113*r10*sj0))+((cj0*gconst113*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3684.value)))+(x3685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3686=IKsin(j4);
IkReal x3687=IKcos(j4);
IkReal x3688=(cj1*cj2);
IkReal x3689=(gconst112*r01);
IkReal x3690=((1.0)*sj2);
IkReal x3691=((1.0)*x3687);
IkReal x3692=(gconst112*x3686);
IkReal x3693=(gconst113*x3687);
IkReal x3694=((1.0)*x3686);
IkReal x3695=(gconst113*x3694);
evalcond[0]=((((-1.0)*r20*x3695))+(((-1.0)*r22*x3691))+((r21*x3692)));
evalcond[1]=(cj0+(((-1.0)*r12*x3691))+(((-1.0)*r10*x3695))+((r11*x3692)));
evalcond[2]=((((-1.0)*sj0))+((x3686*x3689))+(((-1.0)*r02*x3691))+(((-1.0)*r00*x3695)));
evalcond[3]=(((r20*x3693))+(((-1.0)*r22*x3694))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3690))+(((-1.0)*gconst112*r21*x3691)));
evalcond[4]=(((r00*x3693))+(((-1.0)*x3689*x3691))+((cj0*x3688))+(((-1.0)*cj0*sj1*x3690))+(((-1.0)*r02*x3694)));
evalcond[5]=((((-1.0)*gconst112*r11*x3691))+((sj0*x3688))+(((-1.0)*r12*x3694))+(((-1.0)*sj0*sj1*x3690))+((r10*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3696=((1.0)*gconst113);
CheckValue<IkReal> x3697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3696))+(((-1.0)*gconst112*r10)))),-1);
if(!x3697.valid){
continue;
}
CheckValue<IkReal> x3698 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3697.value)))+(x3698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3699=IKsin(j4);
IkReal x3700=IKcos(j4);
IkReal x3701=(cj1*cj2);
IkReal x3702=(gconst112*r01);
IkReal x3703=((1.0)*sj2);
IkReal x3704=((1.0)*x3700);
IkReal x3705=(gconst112*x3699);
IkReal x3706=(gconst113*x3700);
IkReal x3707=((1.0)*x3699);
IkReal x3708=(gconst113*x3707);
evalcond[0]=(((r21*x3705))+(((-1.0)*r20*x3708))+(((-1.0)*r22*x3704)));
evalcond[1]=(cj0+(((-1.0)*r10*x3708))+((r11*x3705))+(((-1.0)*r12*x3704)));
evalcond[2]=((((-1.0)*r02*x3704))+(((-1.0)*sj0))+(((-1.0)*r00*x3708))+((x3699*x3702)));
evalcond[3]=((((-1.0)*gconst112*r21*x3704))+(((-1.0)*cj1*x3703))+(((-1.0)*cj2*sj1))+((r20*x3706))+(((-1.0)*r22*x3707)));
evalcond[4]=((((-1.0)*r02*x3707))+(((-1.0)*cj0*sj1*x3703))+((r00*x3706))+((cj0*x3701))+(((-1.0)*x3702*x3704)));
evalcond[5]=(((sj0*x3701))+(((-1.0)*sj0*sj1*x3703))+((r10*x3706))+(((-1.0)*r12*x3707))+(((-1.0)*gconst112*r11*x3704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3709=((1.0)*gconst113);
CheckValue<IkReal> x3710 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x3709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3710.valid){
continue;
}
CheckValue<IkReal> x3711=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3709))+(((-1.0)*gconst112*r00)))),-1);
if(!x3711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3710.value)+(((1.5707963267949)*(x3711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3712=IKsin(j4);
IkReal x3713=IKcos(j4);
IkReal x3714=(cj1*cj2);
IkReal x3715=(gconst112*r01);
IkReal x3716=((1.0)*sj2);
IkReal x3717=((1.0)*x3713);
IkReal x3718=(gconst112*x3712);
IkReal x3719=(gconst113*x3713);
IkReal x3720=((1.0)*x3712);
IkReal x3721=(gconst113*x3720);
evalcond[0]=((((-1.0)*r20*x3721))+((r21*x3718))+(((-1.0)*r22*x3717)));
evalcond[1]=(((r11*x3718))+cj0+(((-1.0)*r12*x3717))+(((-1.0)*r10*x3721)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3717))+(((-1.0)*r00*x3721))+((x3712*x3715)));
evalcond[3]=((((-1.0)*r22*x3720))+((r20*x3719))+(((-1.0)*cj1*x3716))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst112*r21*x3717)));
evalcond[4]=((((-1.0)*x3715*x3717))+((r00*x3719))+((cj0*x3714))+(((-1.0)*cj0*sj1*x3716))+(((-1.0)*r02*x3720)));
evalcond[5]=((((-1.0)*r12*x3720))+((sj0*x3714))+(((-1.0)*sj0*sj1*x3716))+(((-1.0)*gconst112*r11*x3717))+((r10*x3719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3722=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3722;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3723=((1.0)*cj5);
IkReal x3724=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3723)));
j4eval[0]=x3724;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3723)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3725=cj5*cj5;
IkReal x3726=r01*r01;
IkReal x3727=(r01*sj5);
IkReal x3728=(cj5*r00);
IkReal x3729=(((x3725*x3726))+(((-1.0)*(r02*r02)))+(((-1.0)*x3725*(r00*r00)))+(((-1.0)*x3726))+(((2.0)*x3727*x3728)));
j4eval[0]=x3729;
j4eval[1]=IKsign(x3729);
j4eval[2]=((IKabs(r02))+(IKabs((x3728+(((-1.0)*x3727))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3730=cj5*cj5;
IkReal x3731=r01*r01;
IkReal x3732=(r01*sj5);
IkReal x3733=(cj5*r00);
CheckValue<IkReal> x3734 = IKatan2WithCheck(IkReal((x3733+(((-1.0)*x3732)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3734.valid){
continue;
}
CheckValue<IkReal> x3735=IKPowWithIntegerCheck(IKsign(((((2.0)*x3732*x3733))+(((-1.0)*x3730*(r00*r00)))+((x3730*x3731))+(((-1.0)*(r02*r02)))+(((-1.0)*x3731)))),-1);
if(!x3735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3734.value)+(((1.5707963267949)*(x3735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3736=IKsin(j4);
IkReal x3737=IKcos(j4);
IkReal x3738=(cj5*r10);
IkReal x3739=(r01*sj5);
IkReal x3740=((1.0)*sj1);
IkReal x3741=(cj5*r00);
IkReal x3742=(cj5*r20);
IkReal x3743=((1.0)*x3737);
IkReal x3744=((1.0)*x3736);
IkReal x3745=(sj5*x3736);
evalcond[0]=((((-1.0)*r22*x3743))+(((-1.0)*x3742*x3744))+((r21*x3745)));
evalcond[1]=((((-1.0)*r12*x3743))+((r11*x3745))+(((-1.0)*x3738*x3744)));
evalcond[2]=(((x3737*x3741))+(((-1.0)*x3739*x3743))+(((-1.0)*r02*x3744)));
evalcond[3]=((-1.0)+(((-1.0)*x3741*x3744))+((x3736*x3739))+(((-1.0)*r02*x3743)));
evalcond[4]=((((-1.0)*r11*sj5*x3743))+(((-1.0)*r12*x3744))+(((-1.0)*sj2*x3740))+((cj1*cj2))+((x3737*x3738)));
evalcond[5]=((((-1.0)*r22*x3744))+((x3737*x3742))+(((-1.0)*r21*sj5*x3743))+(((-1.0)*cj2*x3740))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3746=((1.0)*cj5);
CheckValue<IkReal> x3747 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3746))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3747.valid){
continue;
}
CheckValue<IkReal> x3748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3746)))),-1);
if(!x3748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3747.value)+(((1.5707963267949)*(x3748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3749=IKsin(j4);
IkReal x3750=IKcos(j4);
IkReal x3751=(cj5*r10);
IkReal x3752=(r01*sj5);
IkReal x3753=((1.0)*sj1);
IkReal x3754=(cj5*r00);
IkReal x3755=(cj5*r20);
IkReal x3756=((1.0)*x3750);
IkReal x3757=((1.0)*x3749);
IkReal x3758=(sj5*x3749);
evalcond[0]=((((-1.0)*r22*x3756))+(((-1.0)*x3755*x3757))+((r21*x3758)));
evalcond[1]=((((-1.0)*r12*x3756))+((r11*x3758))+(((-1.0)*x3751*x3757)));
evalcond[2]=((((-1.0)*x3752*x3756))+((x3750*x3754))+(((-1.0)*r02*x3757)));
evalcond[3]=((-1.0)+(((-1.0)*x3754*x3757))+((x3749*x3752))+(((-1.0)*r02*x3756)));
evalcond[4]=((((-1.0)*r11*sj5*x3756))+(((-1.0)*r12*x3757))+(((-1.0)*sj2*x3753))+((cj1*cj2))+((x3750*x3751)));
evalcond[5]=((((-1.0)*r22*x3757))+(((-1.0)*r21*sj5*x3756))+(((-1.0)*cj2*x3753))+(((-1.0)*cj1*sj2))+((x3750*x3755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3759=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3759.valid){
continue;
}
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3759.value)))+(x3760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3761=IKsin(j4);
IkReal x3762=IKcos(j4);
IkReal x3763=(cj5*r10);
IkReal x3764=(r01*sj5);
IkReal x3765=((1.0)*sj1);
IkReal x3766=(cj5*r00);
IkReal x3767=(cj5*r20);
IkReal x3768=((1.0)*x3762);
IkReal x3769=((1.0)*x3761);
IkReal x3770=(sj5*x3761);
evalcond[0]=(((r21*x3770))+(((-1.0)*x3767*x3769))+(((-1.0)*r22*x3768)));
evalcond[1]=((((-1.0)*x3763*x3769))+((r11*x3770))+(((-1.0)*r12*x3768)));
evalcond[2]=((((-1.0)*x3764*x3768))+((x3762*x3766))+(((-1.0)*r02*x3769)));
evalcond[3]=((-1.0)+((x3761*x3764))+(((-1.0)*r02*x3768))+(((-1.0)*x3766*x3769)));
evalcond[4]=((((-1.0)*r11*sj5*x3768))+(((-1.0)*sj2*x3765))+((x3762*x3763))+((cj1*cj2))+(((-1.0)*r12*x3769)));
evalcond[5]=((((-1.0)*r22*x3769))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3765))+((x3762*x3767))+(((-1.0)*r21*sj5*x3768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3771=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3771;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3772=((1.0)*cj5);
IkReal x3773=((((-1.0)*r21*x3772))+(((-1.0)*r20*sj5)));
j4eval[0]=x3773;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x3772))))));
j4eval[2]=IKsign(x3773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3774=cj5*cj5;
IkReal x3775=r01*r01;
IkReal x3776=(cj5*r00);
IkReal x3777=(r01*sj5);
IkReal x3778=((((-1.0)*x3774*x3775))+((x3774*(r00*r00)))+x3775+(r02*r02)+(((-2.0)*x3776*x3777)));
j4eval[0]=x3778;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3777))+x3776))));
j4eval[2]=IKsign(x3778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3779=cj5*cj5;
IkReal x3780=r01*r01;
IkReal x3781=(r01*sj5);
IkReal x3782=(cj5*r00);
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3779*x3780))+(((-2.0)*x3781*x3782))+x3780+(r02*r02)+((x3779*(r00*r00))))),-1);
if(!x3783.valid){
continue;
}
CheckValue<IkReal> x3784 = IKatan2WithCheck(IkReal(((((-1.0)*x3781))+x3782)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3783.value)))+(x3784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3785=IKsin(j4);
IkReal x3786=IKcos(j4);
IkReal x3787=(cj5*r10);
IkReal x3788=(r01*sj5);
IkReal x3789=((1.0)*cj2);
IkReal x3790=(cj5*r00);
IkReal x3791=(cj5*r20);
IkReal x3792=((1.0)*x3786);
IkReal x3793=((1.0)*x3785);
IkReal x3794=(sj5*x3785);
evalcond[0]=(((r21*x3794))+(((-1.0)*x3791*x3793))+(((-1.0)*r22*x3792)));
evalcond[1]=((((-1.0)*r12*x3792))+((r11*x3794))+(((-1.0)*x3787*x3793)));
evalcond[2]=(((x3786*x3790))+(((-1.0)*r02*x3793))+(((-1.0)*x3788*x3792)));
evalcond[3]=((1.0)+((x3785*x3788))+(((-1.0)*x3790*x3793))+(((-1.0)*r02*x3792)));
evalcond[4]=((((-1.0)*r12*x3793))+(((-1.0)*r11*sj5*x3792))+((sj1*sj2))+(((-1.0)*cj1*x3789))+((x3786*x3787)));
evalcond[5]=((((-1.0)*r21*sj5*x3792))+(((-1.0)*sj1*x3789))+((x3786*x3791))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3795=((1.0)*cj5);
CheckValue<IkReal> x3796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3795))+(((-1.0)*r20*sj5)))),-1);
if(!x3796.valid){
continue;
}
CheckValue<IkReal> x3797 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3796.value)))+(x3797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3798=IKsin(j4);
IkReal x3799=IKcos(j4);
IkReal x3800=(cj5*r10);
IkReal x3801=(r01*sj5);
IkReal x3802=((1.0)*cj2);
IkReal x3803=(cj5*r00);
IkReal x3804=(cj5*r20);
IkReal x3805=((1.0)*x3799);
IkReal x3806=((1.0)*x3798);
IkReal x3807=(sj5*x3798);
evalcond[0]=(((r21*x3807))+(((-1.0)*x3804*x3806))+(((-1.0)*r22*x3805)));
evalcond[1]=(((r11*x3807))+(((-1.0)*x3800*x3806))+(((-1.0)*r12*x3805)));
evalcond[2]=(((x3799*x3803))+(((-1.0)*x3801*x3805))+(((-1.0)*r02*x3806)));
evalcond[3]=((1.0)+((x3798*x3801))+(((-1.0)*r02*x3805))+(((-1.0)*x3803*x3806)));
evalcond[4]=(((x3799*x3800))+(((-1.0)*r11*sj5*x3805))+((sj1*sj2))+(((-1.0)*cj1*x3802))+(((-1.0)*r12*x3806)));
evalcond[5]=(((x3799*x3804))+(((-1.0)*sj1*x3802))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x3805))+(((-1.0)*r22*x3806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3808 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3808.valid){
continue;
}
CheckValue<IkReal> x3809=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3808.value)+(((1.5707963267949)*(x3809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3810=IKsin(j4);
IkReal x3811=IKcos(j4);
IkReal x3812=(cj5*r10);
IkReal x3813=(r01*sj5);
IkReal x3814=((1.0)*cj2);
IkReal x3815=(cj5*r00);
IkReal x3816=(cj5*r20);
IkReal x3817=((1.0)*x3811);
IkReal x3818=((1.0)*x3810);
IkReal x3819=(sj5*x3810);
evalcond[0]=((((-1.0)*r22*x3817))+((r21*x3819))+(((-1.0)*x3816*x3818)));
evalcond[1]=((((-1.0)*r12*x3817))+((r11*x3819))+(((-1.0)*x3812*x3818)));
evalcond[2]=(((x3811*x3815))+(((-1.0)*r02*x3818))+(((-1.0)*x3813*x3817)));
evalcond[3]=((1.0)+((x3810*x3813))+(((-1.0)*x3815*x3818))+(((-1.0)*r02*x3817)));
evalcond[4]=(((x3811*x3812))+(((-1.0)*r12*x3818))+(((-1.0)*cj1*x3814))+((sj1*sj2))+(((-1.0)*r11*sj5*x3817)));
evalcond[5]=(((x3811*x3816))+(((-1.0)*r22*x3818))+(((-1.0)*sj1*x3814))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x3817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3820=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3820);
rxp1_1=(px*r21);
rxp1_2=(r11*x3820);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3821=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3821);
rxp1_1=(px*r21);
rxp1_2=(r11*x3821);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3822=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3822);
rxp1_1=(px*r21);
rxp1_2=(r11*x3822);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3825=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3825.valid){
continue;
}
IkReal x3823=x3825.value;
IkReal x3824=(sj0*x3823);
cj4array[0]=(((sj1*sj2*x3824))+(((-1.0)*cj1*cj2*x3824)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3826=IKsin(j4);
IkReal x3827=IKcos(j4);
IkReal x3828=(r21*sj5);
IkReal x3829=(cj5*r20);
IkReal x3830=((1.0)*x3826);
IkReal x3831=((1.0)*x3827);
evalcond[0]=((-1.0)*r02*x3826);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3831)));
evalcond[2]=(((x3826*x3828))+(((-1.0)*x3829*x3830)));
evalcond[3]=((((-1.0)*cj5*r10*x3830))+((r11*sj5*x3826)));
evalcond[4]=((((-1.0)*x3828*x3831))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x3827*x3829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3833=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3833.valid){
continue;
}
IkReal x3832=x3833.value;
cj4array[0]=(((cj2*sj1*x3832))+((cj1*sj2*x3832)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3834=IKsin(j4);
IkReal x3835=IKcos(j4);
IkReal x3836=(r11*sj5);
IkReal x3837=((1.0)*sj0);
IkReal x3838=((1.0)*x3835);
IkReal x3839=((1.0)*cj5*x3834);
evalcond[0]=((-1.0)*r02*x3834);
evalcond[1]=((((-1.0)*r02*x3838))+(((-1.0)*x3837)));
evalcond[2]=((((-1.0)*r20*x3839))+((r21*sj5*x3834)));
evalcond[3]=(((x3834*x3836))+(((-1.0)*r10*x3839)));
evalcond[4]=((((-1.0)*sj1*sj2*x3837))+((cj1*cj2*sj0))+((cj5*r10*x3835))+(((-1.0)*x3836*x3838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(r02,-1);
if(!x3840.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3840.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3841=IKsin(j4);
IkReal x3842=IKcos(j4);
IkReal x3843=((1.0)*sj1);
IkReal x3844=(cj5*x3842);
IkReal x3845=(sj5*x3841);
IkReal x3846=((1.0)*sj5*x3842);
IkReal x3847=((1.0)*cj5*x3841);
evalcond[0]=((-1.0)*r02*x3841);
evalcond[1]=(((r21*x3845))+(((-1.0)*r20*x3847)));
evalcond[2]=((((-1.0)*r10*x3847))+((r11*x3845)));
evalcond[3]=((((-1.0)*r21*x3846))+((r20*x3844))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3843)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r11*x3846))+((r10*x3844))+(((-1.0)*sj0*sj2*x3843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3848=((1.0)*sj0);
IkReal x3849=((1.0)*cj0);
CheckValue<IkReal> x3850 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3849))+(((-1.0)*r12*x3848)))),IkReal(((((-1.0)*r11*sj5*x3848))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3849))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3850.valid){
continue;
}
CheckValue<IkReal> x3851=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3850.value)+(((1.5707963267949)*(x3851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3852=IKsin(j4);
IkReal x3853=IKcos(j4);
IkReal x3854=(cj1*cj2);
IkReal x3855=(cj5*r10);
IkReal x3856=(r01*sj5);
IkReal x3857=(cj5*r00);
IkReal x3858=((1.0)*sj1);
IkReal x3859=(cj5*r20);
IkReal x3860=((1.0)*x3853);
IkReal x3861=((1.0)*x3852);
IkReal x3862=(sj5*x3852);
evalcond[0]=(((r21*x3862))+(((-1.0)*x3859*x3861))+(((-1.0)*r22*x3860)));
evalcond[1]=(((r11*x3862))+cj0+(((-1.0)*x3855*x3861))+(((-1.0)*r12*x3860)));
evalcond[2]=((((-1.0)*r02*x3860))+(((-1.0)*sj0))+((x3852*x3856))+(((-1.0)*x3857*x3861)));
evalcond[3]=((((-1.0)*cj2*x3858))+(((-1.0)*r21*sj5*x3860))+(((-1.0)*cj1*sj2))+((x3853*x3859))+(((-1.0)*r22*x3861)));
evalcond[4]=((((-1.0)*r02*x3861))+((x3853*x3857))+(((-1.0)*x3856*x3860))+((cj0*x3854))+(((-1.0)*cj0*sj2*x3858)));
evalcond[5]=((((-1.0)*r11*sj5*x3860))+((x3853*x3855))+(((-1.0)*r12*x3861))+(((-1.0)*sj0*sj2*x3858))+((sj0*x3854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3863=((1.0)*cj5);
CheckValue<IkReal> x3864 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3863))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3864.valid){
continue;
}
CheckValue<IkReal> x3865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3863)))),-1);
if(!x3865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3864.value)+(((1.5707963267949)*(x3865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3866=IKsin(j4);
IkReal x3867=IKcos(j4);
IkReal x3868=(cj1*cj2);
IkReal x3869=(cj5*r10);
IkReal x3870=(r01*sj5);
IkReal x3871=(cj5*r00);
IkReal x3872=((1.0)*sj1);
IkReal x3873=(cj5*r20);
IkReal x3874=((1.0)*x3867);
IkReal x3875=((1.0)*x3866);
IkReal x3876=(sj5*x3866);
evalcond[0]=((((-1.0)*x3873*x3875))+((r21*x3876))+(((-1.0)*r22*x3874)));
evalcond[1]=(cj0+(((-1.0)*r12*x3874))+(((-1.0)*x3869*x3875))+((r11*x3876)));
evalcond[2]=((((-1.0)*sj0))+((x3866*x3870))+(((-1.0)*x3871*x3875))+(((-1.0)*r02*x3874)));
evalcond[3]=(((x3867*x3873))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3875))+(((-1.0)*cj2*x3872))+(((-1.0)*r21*sj5*x3874)));
evalcond[4]=(((x3867*x3871))+(((-1.0)*x3870*x3874))+(((-1.0)*r02*x3875))+(((-1.0)*cj0*sj2*x3872))+((cj0*x3868)));
evalcond[5]=((((-1.0)*r11*sj5*x3874))+((x3867*x3869))+(((-1.0)*sj0*sj2*x3872))+(((-1.0)*r12*x3875))+((sj0*x3868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3877=((1.0)*cj5);
CheckValue<IkReal> x3878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3877)))),-1);
if(!x3878.valid){
continue;
}
CheckValue<IkReal> x3879 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3878.value)))+(x3879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3880=IKsin(j4);
IkReal x3881=IKcos(j4);
IkReal x3882=(cj1*cj2);
IkReal x3883=(cj5*r10);
IkReal x3884=(r01*sj5);
IkReal x3885=(cj5*r00);
IkReal x3886=((1.0)*sj1);
IkReal x3887=(cj5*r20);
IkReal x3888=((1.0)*x3881);
IkReal x3889=((1.0)*x3880);
IkReal x3890=(sj5*x3880);
evalcond[0]=((((-1.0)*r22*x3888))+((r21*x3890))+(((-1.0)*x3887*x3889)));
evalcond[1]=(cj0+(((-1.0)*x3883*x3889))+((r11*x3890))+(((-1.0)*r12*x3888)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3888))+((x3880*x3884))+(((-1.0)*x3885*x3889)));
evalcond[3]=((((-1.0)*r22*x3889))+(((-1.0)*cj1*sj2))+((x3881*x3887))+(((-1.0)*cj2*x3886))+(((-1.0)*r21*sj5*x3888)));
evalcond[4]=((((-1.0)*r02*x3889))+(((-1.0)*cj0*sj2*x3886))+((cj0*x3882))+((x3881*x3885))+(((-1.0)*x3884*x3888)));
evalcond[5]=(((sj0*x3882))+(((-1.0)*r11*sj5*x3888))+((x3881*x3883))+(((-1.0)*r12*x3889))+(((-1.0)*sj0*sj2*x3886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3891=cj5*cj5;
IkReal x3892=r21*r21;
IkReal x3893=(cj1*sj2);
IkReal x3894=((1.0)*r22);
IkReal x3895=(cj5*r20);
IkReal x3896=(r21*sj5);
IkReal x3897=(cj2*sj1);
CheckValue<IkReal> x3898 = IKatan2WithCheck(IkReal(((((-1.0)*x3893*x3894))+(((-1.0)*x3894*x3897)))),IkReal((((x3895*x3897))+(((-1.0)*x3893*x3896))+((x3893*x3895))+(((-1.0)*x3896*x3897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3898.valid){
continue;
}
CheckValue<IkReal> x3899=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x3895*x3896))+x3892+((x3891*(r20*r20)))+(((-1.0)*x3891*x3892)))),-1);
if(!x3899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3898.value)+(((1.5707963267949)*(x3899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3900=IKsin(j4);
IkReal x3901=IKcos(j4);
IkReal x3902=(r21*sj5);
IkReal x3903=(cj5*r20);
IkReal x3904=((1.0)*x3901);
IkReal x3905=((1.0)*x3900);
evalcond[0]=(((x3900*x3902))+(((-1.0)*x3903*x3905))+(((-1.0)*r22*x3904)));
evalcond[1]=(((x3901*x3903))+(((-1.0)*x3902*x3904))+(((-1.0)*r22*x3905))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3906=(cj5*sj4);
IkReal x3907=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3906))+((r01*x3907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3907))+((r10*x3906))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3906))+((r01*x3907))))+IKsqr(((((-1.0)*r11*x3907))+((r10*x3906))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3906))+((r01*x3907))), ((((-1.0)*r11*x3907))+((r10*x3906))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3908=IKcos(j0);
IkReal x3909=IKsin(j0);
IkReal x3910=(cj4*cj5);
IkReal x3911=((0.39225)*cj1);
IkReal x3912=(cj5*r01);
IkReal x3913=((1.0)*sj1);
IkReal x3914=(r11*sj5);
IkReal x3915=((1.0)*sj4);
IkReal x3916=((0.425)*sj1);
IkReal x3917=(r00*sj5);
IkReal x3918=(cj5*r11);
IkReal x3919=((1.0)*cj4);
IkReal x3920=((0.39225)*sj1);
IkReal x3921=(r01*sj5);
IkReal x3922=(r10*sj5);
IkReal x3923=(sj2*x3909);
IkReal x3924=(cj1*x3908);
IkReal x3925=(cj2*x3909);
IkReal x3926=(cj2*x3908);
IkReal x3927=(sj2*x3908);
evalcond[0]=(((sj4*x3914))+x3908+(((-1.0)*cj5*r10*x3915))+(((-1.0)*r12*x3919)));
evalcond[1]=((((-1.0)*r02*x3919))+(((-1.0)*x3909))+((sj4*x3921))+(((-1.0)*cj5*r00*x3915)));
evalcond[2]=((((-1.0)*x3913*x3926))+x3917+x3912+(((-1.0)*sj2*x3924)));
evalcond[3]=((((-1.0)*x3913*x3925))+(((-1.0)*cj1*x3923))+x3922+x3918);
evalcond[4]=((((-1.0)*r02*x3915))+((cj2*x3924))+(((-1.0)*x3913*x3927))+(((-1.0)*x3919*x3921))+((r00*x3910)));
evalcond[5]=((((-1.0)*x3914*x3919))+((r10*x3910))+(((-1.0)*x3913*x3923))+((cj1*x3925))+(((-1.0)*r12*x3915)));
evalcond[6]=(((x3920*x3926))+((x3911*x3927))+(((-1.0)*px))+((x3908*x3916))+(((-0.09465)*x3912))+(((-0.09465)*x3917))+(((-0.10915)*x3909)));
evalcond[7]=((((0.10915)*x3908))+((x3920*x3925))+(((-0.09465)*x3922))+((x3911*x3923))+(((-1.0)*py))+((x3909*x3916))+(((-0.09465)*x3918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3928=((1.0)*cj5);
IkReal x3929=((1.0)*sj5);
CheckValue<IkReal> x3930 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3929))+(((-1.0)*r11*x3928)))),IkReal(((((-1.0)*r01*x3928))+(((-1.0)*r00*x3929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3930.valid){
continue;
}
CheckValue<IkReal> x3931=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x3931.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3930.value)+(((1.5707963267949)*(x3931.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3932=IKcos(j0);
IkReal x3933=IKsin(j0);
IkReal x3934=(cj1*sj2);
IkReal x3935=(cj5*r01);
IkReal x3936=(cj5*r11);
IkReal x3937=(cj2*sj1);
IkReal x3938=((0.425)*sj1);
IkReal x3939=(r00*sj5);
IkReal x3940=(r10*sj5);
IkReal x3941=((0.39225)*x3933);
IkReal x3942=((1.0)*x3932);
IkReal x3943=((1.0)*x3933);
IkReal x3944=((0.39225)*x3932);
evalcond[0]=((((-1.0)*x3937*x3942))+(((-1.0)*x3934*x3942))+x3939+x3935);
evalcond[1]=((((-1.0)*x3937*x3943))+(((-1.0)*x3934*x3943))+x3936+x3940);
evalcond[2]=((((-0.10915)*x3933))+(((-0.09465)*x3935))+(((-0.09465)*x3939))+((x3932*x3938))+(((-1.0)*px))+((x3934*x3944))+((x3937*x3944)));
evalcond[3]=((((-0.09465)*x3936))+(((-0.09465)*x3940))+((x3933*x3938))+(((-1.0)*py))+((x3934*x3941))+((x3937*x3941))+(((0.10915)*x3932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3945=((1.0)*cj5);
IkReal x3946=((((-1.0)*r01*x3945))+(((-1.0)*r00*sj5)));
j4eval[0]=x3946;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3945))))));
j4eval[2]=IKsign(x3946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3947=((1.0)*cj5);
IkReal x3948=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3947)));
j4eval[0]=x3948;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3947))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3949=((1.0)*sj0);
IkReal x3950=((1.0)*cj0);
IkReal x3951=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3951;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x3949))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3950)))))+(IKabs(((((-1.0)*r12*x3949))+(((-1.0)*r02*x3950))))));
j4eval[2]=IKsign(x3951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3952=((-1.0)*r20);
IkReal x3954 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3954)==0){
continue;
}
IkReal x3953=pow(x3954,-0.5);
CheckValue<IkReal> x3955 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3952),IKFAST_ATAN2_MAGTHRESH);
if(!x3955.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3955.value));
IkReal gconst97=(r21*x3953);
IkReal gconst98=(x3952*x3953);
CheckValue<IkReal> x3956 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3956.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3956.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3957=((-1.0)*r20);
IkReal x3958=x3953;
CheckValue<IkReal> x3960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3957),IKFAST_ATAN2_MAGTHRESH);
if(!x3960.valid){
continue;
}
IkReal x3959=((-1.0)*(x3960.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3959;
IkReal gconst96=x3959;
IkReal gconst97=(r21*x3958);
IkReal gconst98=(x3957*x3958);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3961=((-1.0)*r20);
IkReal x3962=x3953;
CheckValue<IkReal> x3964 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3961),IKFAST_ATAN2_MAGTHRESH);
if(!x3964.valid){
continue;
}
IkReal x3963=((-1.0)*(x3964.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3963;
IkReal gconst96=x3963;
IkReal gconst97=(r21*x3962);
IkReal gconst98=(x3961*x3962);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3965=((-1.0)*r20);
IkReal x3966=x3953;
CheckValue<IkReal> x3968 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3965),IKFAST_ATAN2_MAGTHRESH);
if(!x3968.valid){
continue;
}
IkReal x3967=((-1.0)*(x3968.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3967;
IkReal gconst96=x3967;
IkReal gconst97=(r21*x3966);
IkReal gconst98=(x3965*x3966);
IkReal x3969=r22*r22;
CheckValue<IkReal> x3972=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3969))),-1);
if(!x3972.valid){
continue;
}
IkReal x3970=x3972.value;
IkReal x3971=(((x3970*(r21*r21*r21*r21)))+(((2.0)*x3970*(r20*r20)*(r21*r21)))+x3969+((x3970*(r20*r20*r20*r20))));
j4eval[0]=x3971;
j4eval[1]=IKsign(x3971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3973=(cj2*sj1);
IkReal x3974=(gconst98*r20);
IkReal x3975=(gconst97*r21);
IkReal x3976=((1.0)*cj1*sj2);
CheckValue<IkReal> x3977=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x3974*x3974)+(x3975*x3975)+(((-2.0)*x3974*x3975)))),-1);
if(!x3977.valid){
continue;
}
CheckValue<IkReal> x3978 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3973))+(((-1.0)*r22*x3976)))),IkReal((((x3973*x3974))+(((-1.0)*x3973*x3975))+(((-1.0)*x3975*x3976))+((cj1*sj2*x3974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3977.value)))+(x3978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3979=IKsin(j4);
IkReal x3980=IKcos(j4);
IkReal x3981=(cj1*cj2);
IkReal x3982=((1.0)*sj1);
IkReal x3983=((1.0)*x3980);
IkReal x3984=(gconst98*x3980);
IkReal x3985=(gconst97*x3979);
IkReal x3986=((1.0)*x3979);
IkReal x3987=(gconst98*x3986);
evalcond[0]=(((r21*x3985))+(((-1.0)*r22*x3983))+(((-1.0)*r20*x3987)));
evalcond[1]=((((-1.0)*r12*x3983))+((r11*x3985))+cj0+(((-1.0)*r10*x3987)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3985))+(((-1.0)*r00*x3987))+(((-1.0)*r02*x3983)));
evalcond[3]=((((-1.0)*cj2*x3982))+(((-1.0)*r22*x3986))+(((-1.0)*cj1*sj2))+((r20*x3984))+(((-1.0)*gconst97*r21*x3983)));
evalcond[4]=(((r00*x3984))+(((-1.0)*gconst97*r01*x3983))+((cj0*x3981))+(((-1.0)*cj0*sj2*x3982))+(((-1.0)*r02*x3986)));
evalcond[5]=(((r10*x3984))+(((-1.0)*r12*x3986))+(((-1.0)*gconst97*r11*x3983))+(((-1.0)*sj0*sj2*x3982))+((sj0*x3981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3988=((1.0)*gconst98);
CheckValue<IkReal> x3989 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3989.valid){
continue;
}
CheckValue<IkReal> x3990=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3988))+(((-1.0)*gconst97*r10)))),-1);
if(!x3990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3989.value)+(((1.5707963267949)*(x3990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3991=IKsin(j4);
IkReal x3992=IKcos(j4);
IkReal x3993=(cj1*cj2);
IkReal x3994=((1.0)*sj1);
IkReal x3995=((1.0)*x3992);
IkReal x3996=(gconst98*x3992);
IkReal x3997=(gconst97*x3991);
IkReal x3998=((1.0)*x3991);
IkReal x3999=(gconst98*x3998);
evalcond[0]=(((r21*x3997))+(((-1.0)*r22*x3995))+(((-1.0)*r20*x3999)));
evalcond[1]=(cj0+(((-1.0)*r12*x3995))+(((-1.0)*r10*x3999))+((r11*x3997)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3995))+(((-1.0)*r00*x3999))+((r01*x3997)));
evalcond[3]=((((-1.0)*gconst97*r21*x3995))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3994))+(((-1.0)*r22*x3998))+((r20*x3996)));
evalcond[4]=((((-1.0)*cj0*sj2*x3994))+(((-1.0)*r02*x3998))+((r00*x3996))+(((-1.0)*gconst97*r01*x3995))+((cj0*x3993)));
evalcond[5]=((((-1.0)*gconst97*r11*x3995))+((r10*x3996))+(((-1.0)*r12*x3998))+(((-1.0)*sj0*sj2*x3994))+((sj0*x3993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4000=((1.0)*gconst98);
CheckValue<IkReal> x4001 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4000))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4001.valid){
continue;
}
CheckValue<IkReal> x4002=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4000))+(((-1.0)*gconst97*r00)))),-1);
if(!x4002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4001.value)+(((1.5707963267949)*(x4002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4003=IKsin(j4);
IkReal x4004=IKcos(j4);
IkReal x4005=(cj1*cj2);
IkReal x4006=((1.0)*sj1);
IkReal x4007=((1.0)*x4004);
IkReal x4008=(gconst98*x4004);
IkReal x4009=(gconst97*x4003);
IkReal x4010=((1.0)*x4003);
IkReal x4011=(gconst98*x4010);
evalcond[0]=((((-1.0)*r22*x4007))+(((-1.0)*r20*x4011))+((r21*x4009)));
evalcond[1]=(cj0+(((-1.0)*r10*x4011))+(((-1.0)*r12*x4007))+((r11*x4009)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4007))+((r01*x4009))+(((-1.0)*r00*x4011)));
evalcond[3]=((((-1.0)*r22*x4010))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4006))+(((-1.0)*gconst97*r21*x4007))+((r20*x4008)));
evalcond[4]=(((cj0*x4005))+(((-1.0)*gconst97*r01*x4007))+(((-1.0)*r02*x4010))+((r00*x4008))+(((-1.0)*cj0*sj2*x4006)));
evalcond[5]=((((-1.0)*r12*x4010))+((r10*x4008))+((sj0*x4005))+(((-1.0)*gconst97*r11*x4007))+(((-1.0)*sj0*sj2*x4006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4012=((-1.0)*r21);
IkReal x4014 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4014)==0){
continue;
}
IkReal x4013=pow(x4014,-0.5);
CheckValue<IkReal> x4015 = IKatan2WithCheck(IkReal(x4012),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4015.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4015.value))));
IkReal gconst100=(x4012*x4013);
IkReal gconst101=((1.0)*r20*x4013);
CheckValue<IkReal> x4016 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4016.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4016.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4017=((-1.0)*r21);
CheckValue<IkReal> x4020 = IKatan2WithCheck(IkReal(x4017),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4020.valid){
continue;
}
IkReal x4018=((1.0)*(x4020.value));
IkReal x4019=x4013;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4018)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4018)));
IkReal gconst100=(x4017*x4019);
IkReal gconst101=((1.0)*r20*x4019);
IkReal x4021=r22*r22;
IkReal x4022=((1.0)*x4021);
CheckValue<IkReal> x4026=IKPowWithIntegerCheck(((-1.0)+x4021),-1);
if(!x4026.valid){
continue;
}
IkReal x4023=x4026.value;
if((((1.0)+(((-1.0)*x4022)))) < -0.00001)
continue;
IkReal x4024=IKsqrt(((1.0)+(((-1.0)*x4022))));
IkReal x4025=(cj0*x4023*x4024);
j4eval[0]=((IKabs(((((-1.0)*x4022*x4025))+x4025)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4027=((-1.0)*r21);
CheckValue<IkReal> x4030 = IKatan2WithCheck(IkReal(x4027),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4030.valid){
continue;
}
IkReal x4028=((1.0)*(x4030.value));
IkReal x4029=x4013;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4028)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4028)));
IkReal gconst100=(x4027*x4029);
IkReal gconst101=((1.0)*r20*x4029);
IkReal x4031=r22*r22;
IkReal x4032=((1.0)*x4031);
CheckValue<IkReal> x4036=IKPowWithIntegerCheck(((-1.0)+x4031),-1);
if(!x4036.valid){
continue;
}
IkReal x4033=x4036.value;
if((((1.0)+(((-1.0)*x4032)))) < -0.00001)
continue;
IkReal x4034=IKsqrt(((1.0)+(((-1.0)*x4032))));
IkReal x4035=(sj0*x4033*x4034);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4035+(((-1.0)*x4032*x4035))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4037=((-1.0)*r21);
CheckValue<IkReal> x4040 = IKatan2WithCheck(IkReal(x4037),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4040.valid){
continue;
}
IkReal x4038=((1.0)*(x4040.value));
IkReal x4039=x4013;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4038)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4038)));
IkReal gconst100=(x4037*x4039);
IkReal gconst101=((1.0)*r20*x4039);
IkReal x4041=r22*r22;
IkReal x4042=(r12*sj0);
IkReal x4043=(cj0*r02);
CheckValue<IkReal> x4047=IKPowWithIntegerCheck(((-1.0)+x4041),-1);
if(!x4047.valid){
continue;
}
IkReal x4044=x4047.value;
if((((1.0)+(((-1.0)*x4041)))) < -0.00001)
continue;
IkReal x4045=IKsqrt(((1.0)+(((-1.0)*x4041))));
IkReal x4046=(r22*x4044*x4045);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4043*x4046))+((x4042*x4046)))))+(IKabs(((((-1.0)*x4043))+(((-1.0)*x4042))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4048=((1.0)*sj0);
IkReal x4049=((1.0)*gconst100);
CheckValue<IkReal> x4050 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4048))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4049))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4050.valid){
continue;
}
CheckValue<IkReal> x4051=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4049))+(((-1.0)*gconst101*r21)))),-1);
if(!x4051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4050.value)+(((1.5707963267949)*(x4051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4052=IKsin(j4);
IkReal x4053=IKcos(j4);
IkReal x4054=(cj1*cj2);
IkReal x4055=(gconst101*r20);
IkReal x4056=(gconst101*r10);
IkReal x4057=((1.0)*sj1);
IkReal x4058=(gconst101*r00);
IkReal x4059=((1.0)*x4053);
IkReal x4060=((1.0)*x4052);
IkReal x4061=(gconst100*x4052);
evalcond[0]=((((-1.0)*x4055*x4060))+((r21*x4061))+(((-1.0)*r22*x4059)));
evalcond[1]=(cj0+(((-1.0)*r12*x4059))+((r11*x4061))+(((-1.0)*x4056*x4060)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4058*x4060))+(((-1.0)*r02*x4059))+((r01*x4061)));
evalcond[3]=((((-1.0)*cj2*x4057))+(((-1.0)*gconst100*r21*x4059))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4060))+((x4053*x4055)));
evalcond[4]=((((-1.0)*gconst100*r01*x4059))+(((-1.0)*cj0*sj2*x4057))+((cj0*x4054))+(((-1.0)*r02*x4060))+((x4053*x4058)));
evalcond[5]=(((sj0*x4054))+(((-1.0)*r12*x4060))+(((-1.0)*sj0*sj2*x4057))+(((-1.0)*gconst100*r11*x4059))+((x4053*x4056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4062=((1.0)*gconst101);
CheckValue<IkReal> x4063 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst100*r21*sj0))+(((-1.0)*r20*sj0*x4062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4063.valid){
continue;
}
CheckValue<IkReal> x4064=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4062)))),-1);
if(!x4064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4063.value)+(((1.5707963267949)*(x4064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4065=IKsin(j4);
IkReal x4066=IKcos(j4);
IkReal x4067=(cj1*cj2);
IkReal x4068=(gconst101*r20);
IkReal x4069=(gconst101*r10);
IkReal x4070=((1.0)*sj1);
IkReal x4071=(gconst101*r00);
IkReal x4072=((1.0)*x4066);
IkReal x4073=((1.0)*x4065);
IkReal x4074=(gconst100*x4065);
evalcond[0]=((((-1.0)*x4068*x4073))+(((-1.0)*r22*x4072))+((r21*x4074)));
evalcond[1]=((((-1.0)*x4069*x4073))+cj0+(((-1.0)*r12*x4072))+((r11*x4074)));
evalcond[2]=((((-1.0)*x4071*x4073))+(((-1.0)*sj0))+(((-1.0)*r02*x4072))+((r01*x4074)));
evalcond[3]=((((-1.0)*r22*x4073))+((x4066*x4068))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4070))+(((-1.0)*gconst100*r21*x4072)));
evalcond[4]=((((-1.0)*r02*x4073))+((cj0*x4067))+((x4066*x4071))+(((-1.0)*cj0*sj2*x4070))+(((-1.0)*gconst100*r01*x4072)));
evalcond[5]=(((sj0*x4067))+((x4066*x4069))+(((-1.0)*gconst100*r11*x4072))+(((-1.0)*r12*x4073))+(((-1.0)*sj0*sj2*x4070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4075=((1.0)*gconst101);
CheckValue<IkReal> x4076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4075))+(((-1.0)*gconst100*r00)))),-1);
if(!x4076.valid){
continue;
}
CheckValue<IkReal> x4077 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4076.value)))+(x4077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4078=IKsin(j4);
IkReal x4079=IKcos(j4);
IkReal x4080=(cj1*cj2);
IkReal x4081=(gconst101*r20);
IkReal x4082=(gconst101*r10);
IkReal x4083=((1.0)*sj1);
IkReal x4084=(gconst101*r00);
IkReal x4085=((1.0)*x4079);
IkReal x4086=((1.0)*x4078);
IkReal x4087=(gconst100*x4078);
evalcond[0]=(((r21*x4087))+(((-1.0)*r22*x4085))+(((-1.0)*x4081*x4086)));
evalcond[1]=(cj0+(((-1.0)*r12*x4085))+(((-1.0)*x4082*x4086))+((r11*x4087)));
evalcond[2]=(((r01*x4087))+(((-1.0)*sj0))+(((-1.0)*r02*x4085))+(((-1.0)*x4084*x4086)));
evalcond[3]=(((x4079*x4081))+(((-1.0)*cj2*x4083))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4086))+(((-1.0)*gconst100*r21*x4085)));
evalcond[4]=(((cj0*x4080))+((x4079*x4084))+(((-1.0)*r02*x4086))+(((-1.0)*cj0*sj2*x4083))+(((-1.0)*gconst100*r01*x4085)));
evalcond[5]=(((x4079*x4082))+(((-1.0)*r12*x4086))+(((-1.0)*sj0*sj2*x4083))+((sj0*x4080))+(((-1.0)*gconst100*r11*x4085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4088=((-1.0)*r10);
IkReal x4090 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4090)==0){
continue;
}
IkReal x4089=pow(x4090,-0.5);
CheckValue<IkReal> x4091 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4088),IKFAST_ATAN2_MAGTHRESH);
if(!x4091.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4091.value));
IkReal gconst103=(r11*x4089);
IkReal gconst104=(x4088*x4089);
CheckValue<IkReal> x4092 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4092.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4092.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4093=((-1.0)*r10);
IkReal x4094=x4089;
CheckValue<IkReal> x4096 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4093),IKFAST_ATAN2_MAGTHRESH);
if(!x4096.valid){
continue;
}
IkReal x4095=((-1.0)*(x4096.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4095;
IkReal gconst102=x4095;
IkReal gconst103=(r11*x4094);
IkReal gconst104=(x4093*x4094);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4097=((1.0)*sj0);
IkReal x4098=((1.0)*gconst103);
CheckValue<IkReal> x4099=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4098))+(((-1.0)*gconst104*r21)))),-1);
if(!x4099.valid){
continue;
}
CheckValue<IkReal> x4100 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4097))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4098))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x4097))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4099.value)))+(x4100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4101=IKsin(j4);
IkReal x4102=IKcos(j4);
IkReal x4103=(gconst103*r11);
IkReal x4104=(cj1*cj2);
IkReal x4105=(gconst103*r01);
IkReal x4106=((1.0)*sj2);
IkReal x4107=(gconst103*r21);
IkReal x4108=((1.0)*x4102);
IkReal x4109=(gconst104*x4102);
IkReal x4110=((1.0)*x4101);
evalcond[0]=((((-1.0)*r22*x4108))+(((-1.0)*gconst104*r20*x4110))+((x4101*x4107)));
evalcond[1]=(cj0+(((-1.0)*gconst104*r10*x4110))+(((-1.0)*r12*x4108))+((x4101*x4103)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst104*r00*x4110))+((x4101*x4105))+(((-1.0)*r02*x4108)));
evalcond[3]=((((-1.0)*r22*x4110))+(((-1.0)*cj1*x4106))+(((-1.0)*cj2*sj1))+(((-1.0)*x4107*x4108))+((r20*x4109)));
evalcond[4]=((((-1.0)*x4105*x4108))+((cj0*x4104))+(((-1.0)*cj0*sj1*x4106))+(((-1.0)*r02*x4110))+((r00*x4109)));
evalcond[5]=((((-1.0)*r12*x4110))+(((-1.0)*sj0*sj1*x4106))+((sj0*x4104))+(((-1.0)*x4103*x4108))+((r10*x4109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4111=((1.0)*gconst104);
CheckValue<IkReal> x4112 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4111))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4112.valid){
continue;
}
CheckValue<IkReal> x4113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4111))+(((-1.0)*gconst103*r00)))),-1);
if(!x4113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4112.value)+(((1.5707963267949)*(x4113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4114=IKsin(j4);
IkReal x4115=IKcos(j4);
IkReal x4116=(gconst103*r11);
IkReal x4117=(cj1*cj2);
IkReal x4118=(gconst103*r01);
IkReal x4119=((1.0)*sj2);
IkReal x4120=(gconst103*r21);
IkReal x4121=((1.0)*x4115);
IkReal x4122=(gconst104*x4115);
IkReal x4123=((1.0)*x4114);
evalcond[0]=((((-1.0)*r22*x4121))+(((-1.0)*gconst104*r20*x4123))+((x4114*x4120)));
evalcond[1]=((((-1.0)*r12*x4121))+(((-1.0)*gconst104*r10*x4123))+cj0+((x4114*x4116)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst104*r00*x4123))+((x4114*x4118))+(((-1.0)*r02*x4121)));
evalcond[3]=((((-1.0)*r22*x4123))+((r20*x4122))+(((-1.0)*cj1*x4119))+(((-1.0)*cj2*sj1))+(((-1.0)*x4120*x4121)));
evalcond[4]=(((cj0*x4117))+(((-1.0)*x4118*x4121))+(((-1.0)*r02*x4123))+((r00*x4122))+(((-1.0)*cj0*sj1*x4119)));
evalcond[5]=((((-1.0)*r12*x4123))+((sj0*x4117))+(((-1.0)*x4116*x4121))+(((-1.0)*sj0*sj1*x4119))+((r10*x4122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4124=((-1.0)*r11);
IkReal x4126 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4126)==0){
continue;
}
IkReal x4125=pow(x4126,-0.5);
CheckValue<IkReal> x4127 = IKatan2WithCheck(IkReal(x4124),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4127.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4127.value))));
IkReal gconst106=(x4124*x4125);
IkReal gconst107=((1.0)*r10*x4125);
CheckValue<IkReal> x4128 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4128.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4128.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4129=((-1.0)*r11);
CheckValue<IkReal> x4132 = IKatan2WithCheck(IkReal(x4129),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4132.valid){
continue;
}
IkReal x4130=((1.0)*(x4132.value));
IkReal x4131=x4125;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4130)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4130)));
IkReal gconst106=(x4129*x4131);
IkReal gconst107=((1.0)*r10*x4131);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4133=((-1.0)*r11);
CheckValue<IkReal> x4136 = IKatan2WithCheck(IkReal(x4133),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4136.valid){
continue;
}
IkReal x4134=((1.0)*(x4136.value));
IkReal x4135=x4125;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4134)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4134)));
IkReal gconst106=(x4133*x4135);
IkReal gconst107=((1.0)*r10*x4135);
IkReal x4137=r12*r12;
IkReal x4138=((1.0)*sj0);
IkReal x4139=(cj0*r02);
IkReal x4140=x4125;
j4eval[0]=((IKabs(((((-1.0)*x4139))+(((-1.0)*r12*x4138)))))+(IKabs((((r12*x4139*x4140))+(((-1.0)*x4138*x4140))+((sj0*x4137*x4140))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4141=((-1.0)*r11);
CheckValue<IkReal> x4144 = IKatan2WithCheck(IkReal(x4141),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4144.valid){
continue;
}
IkReal x4142=((1.0)*(x4144.value));
IkReal x4143=x4125;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4142)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4142)));
IkReal gconst106=(x4141*x4143);
IkReal gconst107=((1.0)*r10*x4143);
IkReal x4145=((1.0)*r22);
IkReal x4146=(cj1*sj2);
IkReal x4147=(cj2*sj1);
IkReal x4148=x4125;
IkReal x4149=(r12*r22*x4148);
j4eval[0]=((IKabs((((x4147*x4149))+((x4146*x4149)))))+(IKabs(((((-1.0)*x4145*x4147))+(((-1.0)*x4145*x4146))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4150=((1.0)*r22);
IkReal x4151=(cj1*sj2);
IkReal x4152=(gconst106*r21);
IkReal x4153=(cj2*sj1);
IkReal x4154=(gconst107*r20);
CheckValue<IkReal> x4155 = IKatan2WithCheck(IkReal(((((-1.0)*x4150*x4153))+(((-1.0)*x4150*x4151)))),IkReal(((((-1.0)*x4151*x4152))+((x4153*x4154))+((x4151*x4154))+(((-1.0)*x4152*x4153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4155.valid){
continue;
}
CheckValue<IkReal> x4156=IKPowWithIntegerCheck(IKsign(((x4152*x4152)+(((-2.0)*x4152*x4154))+(r22*r22)+(x4154*x4154))),-1);
if(!x4156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4155.value)+(((1.5707963267949)*(x4156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4157=IKsin(j4);
IkReal x4158=IKcos(j4);
IkReal x4159=(cj1*cj2);
IkReal x4160=((1.0)*sj1);
IkReal x4161=((1.0)*x4158);
IkReal x4162=(gconst106*x4157);
IkReal x4163=((1.0)*x4157);
IkReal x4164=(gconst107*x4158);
IkReal x4165=(gconst107*x4163);
evalcond[0]=(((r21*x4162))+(((-1.0)*r20*x4165))+(((-1.0)*r22*x4161)));
evalcond[1]=(cj0+(((-1.0)*r10*x4165))+(((-1.0)*r12*x4161))+((r11*x4162)));
evalcond[2]=((((-1.0)*r00*x4165))+((r01*x4162))+(((-1.0)*r02*x4161))+(((-1.0)*sj0)));
evalcond[3]=((((-1.0)*cj2*x4160))+(((-1.0)*gconst106*r21*x4161))+((r20*x4164))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4163)));
evalcond[4]=((((-1.0)*r02*x4163))+((r00*x4164))+((cj0*x4159))+(((-1.0)*cj0*sj2*x4160))+(((-1.0)*gconst106*r01*x4161)));
evalcond[5]=(((r10*x4164))+(((-1.0)*sj0*sj2*x4160))+(((-1.0)*gconst106*r11*x4161))+(((-1.0)*r12*x4163))+((sj0*x4159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4166=((1.0)*sj0);
IkReal x4167=((1.0)*gconst106);
CheckValue<IkReal> x4168=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4167)))),-1);
if(!x4168.valid){
continue;
}
CheckValue<IkReal> x4169 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4166))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst106*r11*x4166))+(((-1.0)*cj0*r01*x4167))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4168.value)))+(x4169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4170=IKsin(j4);
IkReal x4171=IKcos(j4);
IkReal x4172=(cj1*cj2);
IkReal x4173=((1.0)*sj1);
IkReal x4174=((1.0)*x4171);
IkReal x4175=(gconst106*x4170);
IkReal x4176=((1.0)*x4170);
IkReal x4177=(gconst107*x4171);
IkReal x4178=(gconst107*x4176);
evalcond[0]=((((-1.0)*r20*x4178))+((r21*x4175))+(((-1.0)*r22*x4174)));
evalcond[1]=(((r11*x4175))+cj0+(((-1.0)*r12*x4174))+(((-1.0)*r10*x4178)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x4178))+((r01*x4175))+(((-1.0)*r02*x4174)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x4176))+(((-1.0)*gconst106*r21*x4174))+(((-1.0)*cj2*x4173))+((r20*x4177)));
evalcond[4]=(((cj0*x4172))+(((-1.0)*cj0*sj2*x4173))+(((-1.0)*gconst106*r01*x4174))+((r00*x4177))+(((-1.0)*r02*x4176)));
evalcond[5]=(((sj0*x4172))+(((-1.0)*sj0*sj2*x4173))+((r10*x4177))+(((-1.0)*r12*x4176))+(((-1.0)*gconst106*r11*x4174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4179=((1.0)*gconst107);
CheckValue<IkReal> x4180=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4179)))),-1);
if(!x4180.valid){
continue;
}
CheckValue<IkReal> x4181 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x4179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4180.value)))+(x4181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4182=IKsin(j4);
IkReal x4183=IKcos(j4);
IkReal x4184=(cj1*cj2);
IkReal x4185=((1.0)*sj1);
IkReal x4186=((1.0)*x4183);
IkReal x4187=(gconst106*x4182);
IkReal x4188=((1.0)*x4182);
IkReal x4189=(gconst107*x4183);
IkReal x4190=(gconst107*x4188);
evalcond[0]=(((r21*x4187))+(((-1.0)*r20*x4190))+(((-1.0)*r22*x4186)));
evalcond[1]=((((-1.0)*r12*x4186))+cj0+((r11*x4187))+(((-1.0)*r10*x4190)));
evalcond[2]=((((-1.0)*r00*x4190))+(((-1.0)*sj0))+(((-1.0)*r02*x4186))+((r01*x4187)));
evalcond[3]=(((r20*x4189))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4188))+(((-1.0)*cj2*x4185))+(((-1.0)*gconst106*r21*x4186)));
evalcond[4]=((((-1.0)*cj0*sj2*x4185))+(((-1.0)*gconst106*r01*x4186))+(((-1.0)*r02*x4188))+((r00*x4189))+((cj0*x4184)));
evalcond[5]=((((-1.0)*r12*x4188))+((sj0*x4184))+(((-1.0)*sj0*sj2*x4185))+((r10*x4189))+(((-1.0)*gconst106*r11*x4186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4191=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4191;
j4eval[1]=IKsign(x4191);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4192=((1.0)*cj5);
IkReal x4193=((((-1.0)*r01*x4192))+(((-1.0)*r00*sj5)));
j4eval[0]=x4193;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4192))+((r21*sj5))))));
j4eval[2]=IKsign(x4193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4194=cj5*cj5;
IkReal x4195=r11*r11;
IkReal x4196=(r11*sj5);
IkReal x4197=(cj5*r10);
IkReal x4198=((((-2.0)*x4196*x4197))+(r12*r12)+((x4194*(r10*r10)))+x4195+(((-1.0)*x4194*x4195)));
j4eval[0]=x4198;
j4eval[1]=IKsign(x4198);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4196))+x4197))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4199=cj5*cj5;
IkReal x4200=r11*r11;
IkReal x4201=(cj5*r10);
IkReal x4202=(r11*sj5);
CheckValue<IkReal> x4203 = IKatan2WithCheck(IkReal((x4201+(((-1.0)*x4202)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x4203.valid){
continue;
}
CheckValue<IkReal> x4204=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x4199*x4200))+((x4199*(r10*r10)))+x4200+(((-2.0)*x4201*x4202)))),-1);
if(!x4204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4203.value)+(((1.5707963267949)*(x4204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4205=IKsin(j4);
IkReal x4206=IKcos(j4);
IkReal x4207=(cj5*r10);
IkReal x4208=(r01*sj5);
IkReal x4209=((1.0)*sj1);
IkReal x4210=(cj5*r00);
IkReal x4211=(cj5*r20);
IkReal x4212=((1.0)*x4206);
IkReal x4213=((1.0)*x4205);
IkReal x4214=(sj5*x4205);
evalcond[0]=((((-1.0)*r22*x4212))+(((-1.0)*x4211*x4213))+((r21*x4214)));
evalcond[1]=((((-1.0)*x4210*x4213))+(((-1.0)*r02*x4212))+((x4205*x4208)));
evalcond[2]=((((-1.0)*r12*x4213))+((x4206*x4207))+(((-1.0)*r11*sj5*x4212)));
evalcond[3]=((1.0)+((r11*x4214))+(((-1.0)*r12*x4212))+(((-1.0)*x4207*x4213)));
evalcond[4]=((((-1.0)*r02*x4213))+((x4206*x4210))+(((-1.0)*sj2*x4209))+(((-1.0)*x4208*x4212))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x4209))+((x4206*x4211))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4213))+(((-1.0)*r21*sj5*x4212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4215=((1.0)*cj5);
CheckValue<IkReal> x4216 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4215))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4216.valid){
continue;
}
CheckValue<IkReal> x4217=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4215))+(((-1.0)*r00*sj5)))),-1);
if(!x4217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4216.value)+(((1.5707963267949)*(x4217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4218=IKsin(j4);
IkReal x4219=IKcos(j4);
IkReal x4220=(cj5*r10);
IkReal x4221=(r01*sj5);
IkReal x4222=((1.0)*sj1);
IkReal x4223=(cj5*r00);
IkReal x4224=(cj5*r20);
IkReal x4225=((1.0)*x4219);
IkReal x4226=((1.0)*x4218);
IkReal x4227=(sj5*x4218);
evalcond[0]=((((-1.0)*x4224*x4226))+(((-1.0)*r22*x4225))+((r21*x4227)));
evalcond[1]=(((x4218*x4221))+(((-1.0)*x4223*x4226))+(((-1.0)*r02*x4225)));
evalcond[2]=((((-1.0)*r12*x4226))+(((-1.0)*r11*sj5*x4225))+((x4219*x4220)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4225))+((r11*x4227))+(((-1.0)*x4220*x4226)));
evalcond[4]=((((-1.0)*sj2*x4222))+(((-1.0)*x4221*x4225))+(((-1.0)*r02*x4226))+((x4219*x4223))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x4222))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4226))+((x4219*x4224))+(((-1.0)*r21*sj5*x4225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4228=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4228.valid){
continue;
}
CheckValue<IkReal> x4229 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4228.value)))+(x4229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4230=IKsin(j4);
IkReal x4231=IKcos(j4);
IkReal x4232=(cj5*r10);
IkReal x4233=(r01*sj5);
IkReal x4234=((1.0)*sj1);
IkReal x4235=(cj5*r00);
IkReal x4236=(cj5*r20);
IkReal x4237=((1.0)*x4231);
IkReal x4238=((1.0)*x4230);
IkReal x4239=(sj5*x4230);
evalcond[0]=((((-1.0)*r22*x4237))+(((-1.0)*x4236*x4238))+((r21*x4239)));
evalcond[1]=(((x4230*x4233))+(((-1.0)*r02*x4237))+(((-1.0)*x4235*x4238)));
evalcond[2]=(((x4231*x4232))+(((-1.0)*r12*x4238))+(((-1.0)*r11*sj5*x4237)));
evalcond[3]=((1.0)+(((-1.0)*x4232*x4238))+(((-1.0)*r12*x4237))+((r11*x4239)));
evalcond[4]=((((-1.0)*sj2*x4234))+((x4231*x4235))+(((-1.0)*x4233*x4237))+(((-1.0)*r02*x4238))+((cj1*cj2)));
evalcond[5]=(((x4231*x4236))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4238))+(((-1.0)*r21*sj5*x4237))+(((-1.0)*cj2*x4234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4240=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4240;
j4eval[1]=IKsign(x4240);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4241=((1.0)*cj5);
IkReal x4242=((((-1.0)*r21*x4241))+(((-1.0)*r20*sj5)));
j4eval[0]=x4242;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4241))))));
j4eval[2]=IKsign(x4242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4243=cj5*cj5;
IkReal x4244=r11*r11;
IkReal x4245=(cj5*r10);
IkReal x4246=(r11*sj5);
IkReal x4247=((((2.0)*x4245*x4246))+(((-1.0)*x4243*(r10*r10)))+((x4243*x4244))+(((-1.0)*(r12*r12)))+(((-1.0)*x4244)));
j4eval[0]=x4247;
j4eval[1]=((IKabs(r12))+(IKabs((x4245+(((-1.0)*x4246))))));
j4eval[2]=IKsign(x4247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4248=cj5*cj5;
IkReal x4249=r11*r11;
IkReal x4250=(cj5*r10);
IkReal x4251=(r11*sj5);
CheckValue<IkReal> x4252=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4248*(r10*r10)))+((x4248*x4249))+(((2.0)*x4250*x4251))+(((-1.0)*(r12*r12)))+(((-1.0)*x4249)))),-1);
if(!x4252.valid){
continue;
}
CheckValue<IkReal> x4253 = IKatan2WithCheck(IkReal((x4250+(((-1.0)*x4251)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x4253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4252.value)))+(x4253.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4254=IKsin(j4);
IkReal x4255=IKcos(j4);
IkReal x4256=(cj5*r10);
IkReal x4257=(r01*sj5);
IkReal x4258=((1.0)*cj2);
IkReal x4259=(cj5*r00);
IkReal x4260=(cj5*r20);
IkReal x4261=((1.0)*x4255);
IkReal x4262=((1.0)*x4254);
IkReal x4263=(sj5*x4254);
evalcond[0]=(((r21*x4263))+(((-1.0)*r22*x4261))+(((-1.0)*x4260*x4262)));
evalcond[1]=((((-1.0)*x4259*x4262))+(((-1.0)*r02*x4261))+((x4254*x4257)));
evalcond[2]=((((-1.0)*r12*x4262))+(((-1.0)*r11*sj5*x4261))+((x4255*x4256)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4261))+((r11*x4263))+(((-1.0)*x4256*x4262)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x4258))+(((-1.0)*r02*x4262))+((x4255*x4259))+(((-1.0)*x4257*x4261)));
evalcond[5]=((((-1.0)*sj1*x4258))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4262))+((x4255*x4260))+(((-1.0)*r21*sj5*x4261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4264=((1.0)*cj5);
CheckValue<IkReal> x4265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4264))+(((-1.0)*r20*sj5)))),-1);
if(!x4265.valid){
continue;
}
CheckValue<IkReal> x4266 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4265.value)))+(x4266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4267=IKsin(j4);
IkReal x4268=IKcos(j4);
IkReal x4269=(cj5*r10);
IkReal x4270=(r01*sj5);
IkReal x4271=((1.0)*cj2);
IkReal x4272=(cj5*r00);
IkReal x4273=(cj5*r20);
IkReal x4274=((1.0)*x4268);
IkReal x4275=((1.0)*x4267);
IkReal x4276=(sj5*x4267);
evalcond[0]=((((-1.0)*x4273*x4275))+((r21*x4276))+(((-1.0)*r22*x4274)));
evalcond[1]=(((x4267*x4270))+(((-1.0)*r02*x4274))+(((-1.0)*x4272*x4275)));
evalcond[2]=((((-1.0)*r12*x4275))+(((-1.0)*r11*sj5*x4274))+((x4268*x4269)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4274))+((r11*x4276))+(((-1.0)*x4269*x4275)));
evalcond[4]=((((-1.0)*cj1*x4271))+((sj1*sj2))+(((-1.0)*r02*x4275))+((x4268*x4272))+(((-1.0)*x4270*x4274)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x4275))+((x4268*x4273))+(((-1.0)*r21*sj5*x4274))+(((-1.0)*sj1*x4271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4277 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4277.valid){
continue;
}
CheckValue<IkReal> x4278=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4277.value)+(((1.5707963267949)*(x4278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4279=IKsin(j4);
IkReal x4280=IKcos(j4);
IkReal x4281=(cj5*r10);
IkReal x4282=(r01*sj5);
IkReal x4283=((1.0)*cj2);
IkReal x4284=(cj5*r00);
IkReal x4285=(cj5*r20);
IkReal x4286=((1.0)*x4280);
IkReal x4287=((1.0)*x4279);
IkReal x4288=(sj5*x4279);
evalcond[0]=((((-1.0)*r22*x4286))+(((-1.0)*x4285*x4287))+((r21*x4288)));
evalcond[1]=(((x4279*x4282))+(((-1.0)*r02*x4286))+(((-1.0)*x4284*x4287)));
evalcond[2]=(((x4280*x4281))+(((-1.0)*r12*x4287))+(((-1.0)*r11*sj5*x4286)));
evalcond[3]=((-1.0)+((r11*x4288))+(((-1.0)*r12*x4286))+(((-1.0)*x4281*x4287)));
evalcond[4]=(((x4280*x4284))+(((-1.0)*x4282*x4286))+(((-1.0)*r02*x4287))+((sj1*sj2))+(((-1.0)*cj1*x4283)));
evalcond[5]=((((-1.0)*r21*sj5*x4286))+((x4280*x4285))+(((-1.0)*sj1*x4283))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4289=((-1.0)*r00);
IkReal x4291 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4291)==0){
continue;
}
IkReal x4290=pow(x4291,-0.5);
CheckValue<IkReal> x4292 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4289),IKFAST_ATAN2_MAGTHRESH);
if(!x4292.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4292.value));
IkReal gconst109=(r01*x4290);
IkReal gconst110=(x4289*x4290);
CheckValue<IkReal> x4293 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4293.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4293.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4294=((-1.0)*r00);
IkReal x4295=x4290;
CheckValue<IkReal> x4297 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4294),IKFAST_ATAN2_MAGTHRESH);
if(!x4297.valid){
continue;
}
IkReal x4296=((-1.0)*(x4297.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4296;
IkReal gconst108=x4296;
IkReal gconst109=(r01*x4295);
IkReal gconst110=(x4294*x4295);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4298=((1.0)*sj0);
IkReal x4299=((1.0)*gconst109);
CheckValue<IkReal> x4300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4299))+(((-1.0)*gconst110*r21)))),-1);
if(!x4300.valid){
continue;
}
CheckValue<IkReal> x4301 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4298)))),IkReal(((((-1.0)*cj0*r01*x4299))+(((-1.0)*gconst109*r11*x4298))+((cj0*gconst110*r00))+((gconst110*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4300.value)))+(x4301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4302=IKsin(j4);
IkReal x4303=IKcos(j4);
IkReal x4304=(gconst110*r00);
IkReal x4305=((1.0)*sj2);
IkReal x4306=(cj1*cj2);
IkReal x4307=((1.0)*x4303);
IkReal x4308=((1.0)*x4302);
IkReal x4309=(gconst109*x4302);
IkReal x4310=(gconst110*x4303);
evalcond[0]=((((-1.0)*r22*x4307))+(((-1.0)*gconst110*r20*x4308))+((r21*x4309)));
evalcond[1]=((((-1.0)*r12*x4307))+((r11*x4309))+cj0+(((-1.0)*gconst110*r10*x4308)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4309))+(((-1.0)*r02*x4307))+(((-1.0)*x4304*x4308)));
evalcond[3]=(((r20*x4310))+(((-1.0)*r22*x4308))+(((-1.0)*gconst109*r21*x4307))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4305)));
evalcond[4]=((((-1.0)*cj0*sj1*x4305))+(((-1.0)*gconst109*r01*x4307))+((x4303*x4304))+((cj0*x4306))+(((-1.0)*r02*x4308)));
evalcond[5]=(((sj0*x4306))+(((-1.0)*r12*x4308))+(((-1.0)*sj0*sj1*x4305))+((r10*x4310))+(((-1.0)*gconst109*r11*x4307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4311=((1.0)*gconst110);
CheckValue<IkReal> x4312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4311))+(((-1.0)*gconst109*r10)))),-1);
if(!x4312.valid){
continue;
}
CheckValue<IkReal> x4313 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4312.value)))+(x4313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4314=IKsin(j4);
IkReal x4315=IKcos(j4);
IkReal x4316=(gconst110*r00);
IkReal x4317=((1.0)*sj2);
IkReal x4318=(cj1*cj2);
IkReal x4319=((1.0)*x4315);
IkReal x4320=((1.0)*x4314);
IkReal x4321=(gconst109*x4314);
IkReal x4322=(gconst110*x4315);
evalcond[0]=((((-1.0)*r22*x4319))+((r21*x4321))+(((-1.0)*gconst110*r20*x4320)));
evalcond[1]=(cj0+((r11*x4321))+(((-1.0)*r12*x4319))+(((-1.0)*gconst110*r10*x4320)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4316*x4320))+(((-1.0)*r02*x4319))+((r01*x4321)));
evalcond[3]=(((r20*x4322))+(((-1.0)*cj1*x4317))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x4320))+(((-1.0)*gconst109*r21*x4319)));
evalcond[4]=((((-1.0)*r02*x4320))+((x4315*x4316))+((cj0*x4318))+(((-1.0)*cj0*sj1*x4317))+(((-1.0)*gconst109*r01*x4319)));
evalcond[5]=(((sj0*x4318))+(((-1.0)*gconst109*r11*x4319))+(((-1.0)*sj0*sj1*x4317))+(((-1.0)*r12*x4320))+((r10*x4322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4323=((-1.0)*r01);
IkReal x4325 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4325)==0){
continue;
}
IkReal x4324=pow(x4325,-0.5);
CheckValue<IkReal> x4326 = IKatan2WithCheck(IkReal(x4323),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4326.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4326.value))));
IkReal gconst112=(x4323*x4324);
IkReal gconst113=((1.0)*r00*x4324);
CheckValue<IkReal> x4327 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4327.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4327.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4328=((-1.0)*r01);
CheckValue<IkReal> x4331 = IKatan2WithCheck(IkReal(x4328),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4331.valid){
continue;
}
IkReal x4329=((1.0)*(x4331.value));
IkReal x4330=x4324;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4329)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4329)));
IkReal gconst112=(x4328*x4330);
IkReal gconst113=((1.0)*r00*x4330);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4332=((-1.0)*r01);
CheckValue<IkReal> x4335 = IKatan2WithCheck(IkReal(x4332),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4335.valid){
continue;
}
IkReal x4333=((1.0)*(x4335.value));
IkReal x4334=x4324;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4333)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4333)));
IkReal gconst112=(x4332*x4334);
IkReal gconst113=((1.0)*r00*x4334);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4336=((-1.0)*r01);
CheckValue<IkReal> x4339 = IKatan2WithCheck(IkReal(x4336),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
IkReal x4337=((1.0)*(x4339.value));
IkReal x4338=x4324;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4337)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4337)));
IkReal gconst112=(x4336*x4338);
IkReal gconst113=((1.0)*r00*x4338);
IkReal x4340=r02*r02;
IkReal x4341=(r12*sj0);
IkReal x4342=((1.0)*cj0);
IkReal x4343=x4324;
j4eval[0]=((IKabs(((((-1.0)*x4342*x4343))+((cj0*x4340*x4343))+((r02*x4341*x4343)))))+(IKabs(((((-1.0)*r02*x4342))+(((-1.0)*x4341))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4344=((1.0)*sj0);
IkReal x4345=((1.0)*gconst112);
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4344))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4345))+(((-1.0)*gconst112*r11*x4344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
CheckValue<IkReal> x4347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4345))+(((-1.0)*gconst113*r21)))),-1);
if(!x4347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4346.value)+(((1.5707963267949)*(x4347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4348=IKsin(j4);
IkReal x4349=IKcos(j4);
IkReal x4350=(cj1*cj2);
IkReal x4351=(gconst112*r01);
IkReal x4352=((1.0)*sj2);
IkReal x4353=((1.0)*x4349);
IkReal x4354=(gconst112*x4348);
IkReal x4355=(gconst113*x4349);
IkReal x4356=((1.0)*x4348);
IkReal x4357=(gconst113*x4356);
evalcond[0]=(((r21*x4354))+(((-1.0)*r22*x4353))+(((-1.0)*r20*x4357)));
evalcond[1]=(cj0+(((-1.0)*r12*x4353))+(((-1.0)*r10*x4357))+((r11*x4354)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4353))+((x4348*x4351))+(((-1.0)*r00*x4357)));
evalcond[3]=(((r20*x4355))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst112*r21*x4353))+(((-1.0)*cj1*x4352))+(((-1.0)*r22*x4356)));
evalcond[4]=(((cj0*x4350))+(((-1.0)*r02*x4356))+(((-1.0)*x4351*x4353))+(((-1.0)*cj0*sj1*x4352))+((r00*x4355)));
evalcond[5]=((((-1.0)*r12*x4356))+(((-1.0)*sj0*sj1*x4352))+(((-1.0)*gconst112*r11*x4353))+((sj0*x4350))+((r10*x4355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4358=((1.0)*gconst113);
CheckValue<IkReal> x4359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4358))+(((-1.0)*gconst112*r10)))),-1);
if(!x4359.valid){
continue;
}
CheckValue<IkReal> x4360 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4359.value)))+(x4360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4361=IKsin(j4);
IkReal x4362=IKcos(j4);
IkReal x4363=(cj1*cj2);
IkReal x4364=(gconst112*r01);
IkReal x4365=((1.0)*sj2);
IkReal x4366=((1.0)*x4362);
IkReal x4367=(gconst112*x4361);
IkReal x4368=(gconst113*x4362);
IkReal x4369=((1.0)*x4361);
IkReal x4370=(gconst113*x4369);
evalcond[0]=((((-1.0)*r22*x4366))+((r21*x4367))+(((-1.0)*r20*x4370)));
evalcond[1]=(cj0+((r11*x4367))+(((-1.0)*r12*x4366))+(((-1.0)*r10*x4370)));
evalcond[2]=((((-1.0)*sj0))+((x4361*x4364))+(((-1.0)*r02*x4366))+(((-1.0)*r00*x4370)));
evalcond[3]=((((-1.0)*cj1*x4365))+(((-1.0)*r22*x4369))+(((-1.0)*gconst112*r21*x4366))+((r20*x4368))+(((-1.0)*cj2*sj1)));
evalcond[4]=(((r00*x4368))+((cj0*x4363))+(((-1.0)*x4364*x4366))+(((-1.0)*r02*x4369))+(((-1.0)*cj0*sj1*x4365)));
evalcond[5]=(((r10*x4368))+((sj0*x4363))+(((-1.0)*r12*x4369))+(((-1.0)*sj0*sj1*x4365))+(((-1.0)*gconst112*r11*x4366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4371=((1.0)*gconst113);
CheckValue<IkReal> x4372 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4371)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4372.valid){
continue;
}
CheckValue<IkReal> x4373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4371))+(((-1.0)*gconst112*r00)))),-1);
if(!x4373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4372.value)+(((1.5707963267949)*(x4373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4374=IKsin(j4);
IkReal x4375=IKcos(j4);
IkReal x4376=(cj1*cj2);
IkReal x4377=(gconst112*r01);
IkReal x4378=((1.0)*sj2);
IkReal x4379=((1.0)*x4375);
IkReal x4380=(gconst112*x4374);
IkReal x4381=(gconst113*x4375);
IkReal x4382=((1.0)*x4374);
IkReal x4383=(gconst113*x4382);
evalcond[0]=((((-1.0)*r22*x4379))+((r21*x4380))+(((-1.0)*r20*x4383)));
evalcond[1]=(cj0+(((-1.0)*r10*x4383))+((r11*x4380))+(((-1.0)*r12*x4379)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x4383))+((x4374*x4377))+(((-1.0)*r02*x4379)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x4382))+((r20*x4381))+(((-1.0)*gconst112*r21*x4379))+(((-1.0)*cj1*x4378)));
evalcond[4]=((((-1.0)*cj0*sj1*x4378))+(((-1.0)*r02*x4382))+((r00*x4381))+(((-1.0)*x4377*x4379))+((cj0*x4376)));
evalcond[5]=((((-1.0)*r12*x4382))+((sj0*x4376))+(((-1.0)*sj0*sj1*x4378))+(((-1.0)*gconst112*r11*x4379))+((r10*x4381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4384=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4384;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4385=((1.0)*cj5);
IkReal x4386=((((-1.0)*r11*x4385))+(((-1.0)*r10*sj5)));
j4eval[0]=x4386;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4385)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4387=cj5*cj5;
IkReal x4388=r01*r01;
IkReal x4389=(r01*sj5);
IkReal x4390=(cj5*r00);
IkReal x4391=((((-1.0)*x4388))+(((-1.0)*x4387*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4389*x4390))+((x4387*x4388)));
j4eval[0]=x4391;
j4eval[1]=IKsign(x4391);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4389))+x4390))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4392=cj5*cj5;
IkReal x4393=r01*r01;
IkReal x4394=(r01*sj5);
IkReal x4395=(cj5*r00);
CheckValue<IkReal> x4396=IKPowWithIntegerCheck(IKsign((((x4392*x4393))+(((-1.0)*x4393))+(((-1.0)*(r02*r02)))+(((-1.0)*x4392*(r00*r00)))+(((2.0)*x4394*x4395)))),-1);
if(!x4396.valid){
continue;
}
CheckValue<IkReal> x4397 = IKatan2WithCheck(IkReal(((((-1.0)*x4394))+x4395)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x4397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4396.value)))+(x4397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4398=IKsin(j4);
IkReal x4399=IKcos(j4);
IkReal x4400=(cj5*r10);
IkReal x4401=(r01*sj5);
IkReal x4402=((1.0)*sj1);
IkReal x4403=(cj5*r00);
IkReal x4404=(cj5*r20);
IkReal x4405=((1.0)*x4399);
IkReal x4406=((1.0)*x4398);
IkReal x4407=(sj5*x4398);
evalcond[0]=(((r21*x4407))+(((-1.0)*r22*x4405))+(((-1.0)*x4404*x4406)));
evalcond[1]=(((r11*x4407))+(((-1.0)*x4400*x4406))+(((-1.0)*r12*x4405)));
evalcond[2]=((((-1.0)*x4401*x4405))+(((-1.0)*r02*x4406))+((x4399*x4403)));
evalcond[3]=((-1.0)+(((-1.0)*x4403*x4406))+(((-1.0)*r02*x4405))+((x4398*x4401)));
evalcond[4]=((((-1.0)*sj2*x4402))+(((-1.0)*r11*sj5*x4405))+(((-1.0)*r12*x4406))+((cj1*cj2))+((x4399*x4400)));
evalcond[5]=((((-1.0)*r21*sj5*x4405))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4402))+(((-1.0)*r22*x4406))+((x4399*x4404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4408=((1.0)*cj5);
CheckValue<IkReal> x4409 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4409.valid){
continue;
}
CheckValue<IkReal> x4410=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4408)))),-1);
if(!x4410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4409.value)+(((1.5707963267949)*(x4410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4411=IKsin(j4);
IkReal x4412=IKcos(j4);
IkReal x4413=(cj5*r10);
IkReal x4414=(r01*sj5);
IkReal x4415=((1.0)*sj1);
IkReal x4416=(cj5*r00);
IkReal x4417=(cj5*r20);
IkReal x4418=((1.0)*x4412);
IkReal x4419=((1.0)*x4411);
IkReal x4420=(sj5*x4411);
evalcond[0]=((((-1.0)*x4417*x4419))+(((-1.0)*r22*x4418))+((r21*x4420)));
evalcond[1]=((((-1.0)*r12*x4418))+(((-1.0)*x4413*x4419))+((r11*x4420)));
evalcond[2]=(((x4412*x4416))+(((-1.0)*r02*x4419))+(((-1.0)*x4414*x4418)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4418))+(((-1.0)*x4416*x4419))+((x4411*x4414)));
evalcond[4]=((((-1.0)*sj2*x4415))+(((-1.0)*r11*sj5*x4418))+((x4412*x4413))+(((-1.0)*r12*x4419))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r21*sj5*x4418))+(((-1.0)*cj1*sj2))+((x4412*x4417))+(((-1.0)*cj2*x4415))+(((-1.0)*r22*x4419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4421=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4421.valid){
continue;
}
CheckValue<IkReal> x4422 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4421.value)))+(x4422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4423=IKsin(j4);
IkReal x4424=IKcos(j4);
IkReal x4425=(cj5*r10);
IkReal x4426=(r01*sj5);
IkReal x4427=((1.0)*sj1);
IkReal x4428=(cj5*r00);
IkReal x4429=(cj5*r20);
IkReal x4430=((1.0)*x4424);
IkReal x4431=((1.0)*x4423);
IkReal x4432=(sj5*x4423);
evalcond[0]=((((-1.0)*x4429*x4431))+(((-1.0)*r22*x4430))+((r21*x4432)));
evalcond[1]=((((-1.0)*x4425*x4431))+(((-1.0)*r12*x4430))+((r11*x4432)));
evalcond[2]=((((-1.0)*r02*x4431))+((x4424*x4428))+(((-1.0)*x4426*x4430)));
evalcond[3]=((-1.0)+(((-1.0)*x4428*x4431))+((x4423*x4426))+(((-1.0)*r02*x4430)));
evalcond[4]=(((x4424*x4425))+(((-1.0)*r12*x4431))+(((-1.0)*sj2*x4427))+(((-1.0)*r11*sj5*x4430))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4427))+((x4424*x4429))+(((-1.0)*r22*x4431))+(((-1.0)*r21*sj5*x4430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4433=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4433;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4434=((1.0)*cj5);
IkReal x4435=((((-1.0)*r21*x4434))+(((-1.0)*r20*sj5)));
j4eval[0]=x4435;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4434))+((r11*sj5))))));
j4eval[2]=IKsign(x4435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4436=cj5*cj5;
IkReal x4437=r01*r01;
IkReal x4438=(cj5*r00);
IkReal x4439=(r01*sj5);
IkReal x4440=((((-1.0)*x4436*x4437))+x4437+(((-2.0)*x4438*x4439))+((x4436*(r00*r00)))+(r02*r02));
j4eval[0]=x4440;
j4eval[1]=((IKabs(r02))+(IKabs((x4438+(((-1.0)*x4439))))));
j4eval[2]=IKsign(x4440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4441=cj5*cj5;
IkReal x4442=r01*r01;
IkReal x4443=(r01*sj5);
IkReal x4444=(cj5*r00);
CheckValue<IkReal> x4445=IKPowWithIntegerCheck(IKsign((x4442+(((-2.0)*x4443*x4444))+((x4441*(r00*r00)))+(((-1.0)*x4441*x4442))+(r02*r02))),-1);
if(!x4445.valid){
continue;
}
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal((x4444+(((-1.0)*x4443)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4445.value)))+(x4446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4447=IKsin(j4);
IkReal x4448=IKcos(j4);
IkReal x4449=(cj5*r10);
IkReal x4450=(r01*sj5);
IkReal x4451=((1.0)*cj2);
IkReal x4452=(cj5*r00);
IkReal x4453=(cj5*r20);
IkReal x4454=((1.0)*x4448);
IkReal x4455=((1.0)*x4447);
IkReal x4456=(sj5*x4447);
evalcond[0]=(((r21*x4456))+(((-1.0)*r22*x4454))+(((-1.0)*x4453*x4455)));
evalcond[1]=((((-1.0)*r12*x4454))+(((-1.0)*x4449*x4455))+((r11*x4456)));
evalcond[2]=((((-1.0)*r02*x4455))+((x4448*x4452))+(((-1.0)*x4450*x4454)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4454))+((x4447*x4450))+(((-1.0)*x4452*x4455)));
evalcond[4]=((((-1.0)*r12*x4455))+((sj1*sj2))+(((-1.0)*r11*sj5*x4454))+(((-1.0)*cj1*x4451))+((x4448*x4449)));
evalcond[5]=((((-1.0)*sj1*x4451))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4455))+(((-1.0)*r21*sj5*x4454))+((x4448*x4453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4457=((1.0)*cj5);
CheckValue<IkReal> x4458=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4457))+(((-1.0)*r20*sj5)))),-1);
if(!x4458.valid){
continue;
}
CheckValue<IkReal> x4459 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4458.value)))+(x4459.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4460=IKsin(j4);
IkReal x4461=IKcos(j4);
IkReal x4462=(cj5*r10);
IkReal x4463=(r01*sj5);
IkReal x4464=((1.0)*cj2);
IkReal x4465=(cj5*r00);
IkReal x4466=(cj5*r20);
IkReal x4467=((1.0)*x4461);
IkReal x4468=((1.0)*x4460);
IkReal x4469=(sj5*x4460);
evalcond[0]=((((-1.0)*r22*x4467))+(((-1.0)*x4466*x4468))+((r21*x4469)));
evalcond[1]=((((-1.0)*x4462*x4468))+((r11*x4469))+(((-1.0)*r12*x4467)));
evalcond[2]=((((-1.0)*x4463*x4467))+(((-1.0)*r02*x4468))+((x4461*x4465)));
evalcond[3]=((1.0)+(((-1.0)*x4465*x4468))+(((-1.0)*r02*x4467))+((x4460*x4463)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r12*x4468))+(((-1.0)*r11*sj5*x4467))+(((-1.0)*cj1*x4464))+((x4461*x4462)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x4468))+(((-1.0)*sj1*x4464))+((x4461*x4466))+(((-1.0)*r21*sj5*x4467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4470 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4470.valid){
continue;
}
CheckValue<IkReal> x4471=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4470.value)+(((1.5707963267949)*(x4471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4472=IKsin(j4);
IkReal x4473=IKcos(j4);
IkReal x4474=(cj5*r10);
IkReal x4475=(r01*sj5);
IkReal x4476=((1.0)*cj2);
IkReal x4477=(cj5*r00);
IkReal x4478=(cj5*r20);
IkReal x4479=((1.0)*x4473);
IkReal x4480=((1.0)*x4472);
IkReal x4481=(sj5*x4472);
evalcond[0]=(((r21*x4481))+(((-1.0)*x4478*x4480))+(((-1.0)*r22*x4479)));
evalcond[1]=(((r11*x4481))+(((-1.0)*r12*x4479))+(((-1.0)*x4474*x4480)));
evalcond[2]=((((-1.0)*x4475*x4479))+((x4473*x4477))+(((-1.0)*r02*x4480)));
evalcond[3]=((1.0)+((x4472*x4475))+(((-1.0)*x4477*x4480))+(((-1.0)*r02*x4479)));
evalcond[4]=((((-1.0)*cj1*x4476))+(((-1.0)*r12*x4480))+((sj1*sj2))+((x4473*x4474))+(((-1.0)*r11*sj5*x4479)));
evalcond[5]=((((-1.0)*sj1*x4476))+(((-1.0)*r21*sj5*x4479))+(((-1.0)*cj1*sj2))+((x4473*x4478))+(((-1.0)*r22*x4480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4482=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4482);
rxp1_1=(px*r21);
rxp1_2=(r11*x4482);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4483=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4483);
rxp1_1=(px*r21);
rxp1_2=(r11*x4483);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4484=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4484);
rxp1_1=(px*r21);
rxp1_2=(r11*x4484);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4487=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x4487.valid){
continue;
}
IkReal x4485=x4487.value;
IkReal x4486=(sj0*x4485);
cj4array[0]=((((-1.0)*cj1*cj2*x4486))+((sj1*sj2*x4486)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4488=IKsin(j4);
IkReal x4489=IKcos(j4);
IkReal x4490=(r21*sj5);
IkReal x4491=(cj5*r20);
IkReal x4492=((1.0)*x4488);
IkReal x4493=((1.0)*x4489);
evalcond[0]=((-1.0)*r02*x4488);
evalcond[1]=((((-1.0)*r02*x4493))+(((-1.0)*sj0)));
evalcond[2]=(((x4488*x4490))+(((-1.0)*x4491*x4492)));
evalcond[3]=(((r11*sj5*x4488))+(((-1.0)*cj5*r10*x4492)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x4490*x4493))+((x4489*x4491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4495=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x4495.valid){
continue;
}
IkReal x4494=x4495.value;
cj4array[0]=(((cj2*sj1*x4494))+((cj1*sj2*x4494)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4496=IKsin(j4);
IkReal x4497=IKcos(j4);
IkReal x4498=(r11*sj5);
IkReal x4499=((1.0)*sj0);
IkReal x4500=((1.0)*x4497);
IkReal x4501=((1.0)*cj5*x4496);
evalcond[0]=((-1.0)*r02*x4496);
evalcond[1]=((((-1.0)*r02*x4500))+(((-1.0)*x4499)));
evalcond[2]=(((r21*sj5*x4496))+(((-1.0)*r20*x4501)));
evalcond[3]=(((x4496*x4498))+(((-1.0)*r10*x4501)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x4498*x4500))+(((-1.0)*sj1*sj2*x4499))+((cj5*r10*x4497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4502=IKPowWithIntegerCheck(r02,-1);
if(!x4502.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4502.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4503=IKsin(j4);
IkReal x4504=IKcos(j4);
IkReal x4505=((1.0)*sj1);
IkReal x4506=(cj5*x4504);
IkReal x4507=(sj5*x4503);
IkReal x4508=((1.0)*sj5*x4504);
IkReal x4509=((1.0)*cj5*x4503);
evalcond[0]=((-1.0)*r02*x4503);
evalcond[1]=(((r21*x4507))+(((-1.0)*r20*x4509)));
evalcond[2]=(((r11*x4507))+(((-1.0)*r10*x4509)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4505))+((r20*x4506))+(((-1.0)*r21*x4508)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x4506))+(((-1.0)*sj0*sj2*x4505))+(((-1.0)*r11*x4508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4510=((1.0)*sj0);
IkReal x4511=((1.0)*cj0);
CheckValue<IkReal> x4512=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4512.valid){
continue;
}
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4511))+(((-1.0)*r12*x4510)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4510))+(((-1.0)*r01*sj5*x4511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4512.value)))+(x4513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4514=IKsin(j4);
IkReal x4515=IKcos(j4);
IkReal x4516=(cj1*cj2);
IkReal x4517=(cj5*r10);
IkReal x4518=(r01*sj5);
IkReal x4519=(cj5*r00);
IkReal x4520=((1.0)*sj1);
IkReal x4521=(cj5*r20);
IkReal x4522=((1.0)*x4515);
IkReal x4523=((1.0)*x4514);
IkReal x4524=(sj5*x4514);
evalcond[0]=(((r21*x4524))+(((-1.0)*x4521*x4523))+(((-1.0)*r22*x4522)));
evalcond[1]=((((-1.0)*r12*x4522))+((r11*x4524))+cj0+(((-1.0)*x4517*x4523)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4522))+(((-1.0)*x4519*x4523))+((x4514*x4518)));
evalcond[3]=((((-1.0)*cj2*x4520))+((x4515*x4521))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4523))+(((-1.0)*r21*sj5*x4522)));
evalcond[4]=((((-1.0)*cj0*sj2*x4520))+(((-1.0)*r02*x4523))+(((-1.0)*x4518*x4522))+((cj0*x4516))+((x4515*x4519)));
evalcond[5]=((((-1.0)*r12*x4523))+(((-1.0)*sj0*sj2*x4520))+((sj0*x4516))+((x4515*x4517))+(((-1.0)*r11*sj5*x4522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4525=((1.0)*cj5);
CheckValue<IkReal> x4526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4525)))),-1);
if(!x4526.valid){
continue;
}
CheckValue<IkReal> x4527 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4525))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4526.value)))+(x4527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4528=IKsin(j4);
IkReal x4529=IKcos(j4);
IkReal x4530=(cj1*cj2);
IkReal x4531=(cj5*r10);
IkReal x4532=(r01*sj5);
IkReal x4533=(cj5*r00);
IkReal x4534=((1.0)*sj1);
IkReal x4535=(cj5*r20);
IkReal x4536=((1.0)*x4529);
IkReal x4537=((1.0)*x4528);
IkReal x4538=(sj5*x4528);
evalcond[0]=(((r21*x4538))+(((-1.0)*r22*x4536))+(((-1.0)*x4535*x4537)));
evalcond[1]=(cj0+(((-1.0)*x4531*x4537))+(((-1.0)*r12*x4536))+((r11*x4538)));
evalcond[2]=((((-1.0)*sj0))+((x4528*x4532))+(((-1.0)*x4533*x4537))+(((-1.0)*r02*x4536)));
evalcond[3]=((((-1.0)*cj2*x4534))+((x4529*x4535))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4537))+(((-1.0)*r21*sj5*x4536)));
evalcond[4]=(((x4529*x4533))+((cj0*x4530))+(((-1.0)*cj0*sj2*x4534))+(((-1.0)*r02*x4537))+(((-1.0)*x4532*x4536)));
evalcond[5]=((((-1.0)*sj0*sj2*x4534))+((sj0*x4530))+((x4529*x4531))+(((-1.0)*r11*sj5*x4536))+(((-1.0)*r12*x4537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4539=((1.0)*cj5);
CheckValue<IkReal> x4540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4539))+(((-1.0)*r00*sj5)))),-1);
if(!x4540.valid){
continue;
}
CheckValue<IkReal> x4541 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4540.value)))+(x4541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4542=IKsin(j4);
IkReal x4543=IKcos(j4);
IkReal x4544=(cj1*cj2);
IkReal x4545=(cj5*r10);
IkReal x4546=(r01*sj5);
IkReal x4547=(cj5*r00);
IkReal x4548=((1.0)*sj1);
IkReal x4549=(cj5*r20);
IkReal x4550=((1.0)*x4543);
IkReal x4551=((1.0)*x4542);
IkReal x4552=(sj5*x4542);
evalcond[0]=((((-1.0)*x4549*x4551))+((r21*x4552))+(((-1.0)*r22*x4550)));
evalcond[1]=((((-1.0)*r12*x4550))+cj0+((r11*x4552))+(((-1.0)*x4545*x4551)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4547*x4551))+((x4542*x4546))+(((-1.0)*r02*x4550)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4548))+(((-1.0)*r22*x4551))+((x4543*x4549))+(((-1.0)*r21*sj5*x4550)));
evalcond[4]=((((-1.0)*cj0*sj2*x4548))+((x4543*x4547))+((cj0*x4544))+(((-1.0)*r02*x4551))+(((-1.0)*x4546*x4550)));
evalcond[5]=((((-1.0)*r12*x4551))+(((-1.0)*sj0*sj2*x4548))+(((-1.0)*r11*sj5*x4550))+((sj0*x4544))+((x4543*x4545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4553=((1.0)*cj5);
IkReal x4554=((1.0)*sj5);
IkReal x4555=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4555;
j0eval[1]=IKsign(x4555);
j0eval[2]=((IKabs(((((-1.0)*r01*x4553))+(((-1.0)*r00*x4554)))))+(IKabs(((((-1.0)*r11*x4553))+(((-1.0)*r10*x4554))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4556=r21*r21;
IkReal x4557=cj5*cj5;
IkReal x4558=(sj1*sj2);
IkReal x4559=(r21*sj5);
IkReal x4560=(cj5*r20);
IkReal x4561=(cj1*cj2);
IkReal x4562=(((x4556*x4557))+(((-1.0)*x4557*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4556))+(((2.0)*x4559*x4560)));
j4eval[0]=x4562;
j4eval[1]=((IKabs(((((-1.0)*x4559*x4561))+(((-1.0)*x4558*x4560))+((x4560*x4561))+((x4558*x4559)))))+(IKabs((((r22*x4558))+(((-1.0)*r22*x4561))))));
j4eval[2]=IKsign(x4562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4563=IKsin(j0);
IkReal x4564=IKcos(j0);
evalcond[0]=((((-0.10915)*x4563))+(((0.39225)*x4564))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x4563))+(((-1.0)*py))+(((0.10915)*x4564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4565=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4565;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4566=((1.0)*cj5);
IkReal x4567=((((-1.0)*r01*x4566))+(((-1.0)*r00*sj5)));
j4eval[0]=x4567;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4566))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4568=((1.0)*cj5);
IkReal x4569=((((-1.0)*r01*x4568))+(((-1.0)*r00*sj5)));
j4eval[0]=x4569;
j4eval[1]=IKsign(x4569);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4568))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4570=((1.0)*cj5);
CheckValue<IkReal> x4571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4570))+(((-1.0)*r00*sj5)))),-1);
if(!x4571.valid){
continue;
}
CheckValue<IkReal> x4572 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4570)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4571.value)))+(x4572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4573=IKcos(j4);
IkReal x4574=IKsin(j4);
IkReal x4575=((1.0)*sj0);
IkReal x4576=(cj5*r00);
IkReal x4577=(cj5*r10);
IkReal x4578=(cj5*r20);
IkReal x4579=((1.0)*x4573);
IkReal x4580=((1.0)*x4574);
IkReal x4581=(sj5*x4573);
IkReal x4582=(sj5*x4574);
evalcond[0]=(((r21*x4581))+((r22*x4574))+(((-1.0)*x4578*x4579)));
evalcond[1]=(((r21*x4582))+(((-1.0)*r22*x4579))+(((-1.0)*x4578*x4580)));
evalcond[2]=(cj0+((r11*x4582))+(((-1.0)*r12*x4579))+(((-1.0)*x4577*x4580)));
evalcond[3]=((((-1.0)*x4576*x4579))+((r02*x4574))+((r01*x4581))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4577*x4579))+(((-1.0)*x4575))+((r12*x4574))+((r11*x4581)));
evalcond[5]=((((-1.0)*x4575))+(((-1.0)*r02*x4579))+((r01*x4582))+(((-1.0)*x4576*x4580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4583=((1.0)*cj5);
CheckValue<IkReal> x4584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4583))+(((-1.0)*r00*sj5)))),-1);
if(!x4584.valid){
continue;
}
CheckValue<IkReal> x4585 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4584.value)))+(x4585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4586=IKcos(j4);
IkReal x4587=IKsin(j4);
IkReal x4588=((1.0)*sj0);
IkReal x4589=(cj5*r00);
IkReal x4590=(cj5*r10);
IkReal x4591=(cj5*r20);
IkReal x4592=((1.0)*x4586);
IkReal x4593=((1.0)*x4587);
IkReal x4594=(sj5*x4586);
IkReal x4595=(sj5*x4587);
evalcond[0]=(((r21*x4594))+((r22*x4587))+(((-1.0)*x4591*x4592)));
evalcond[1]=(((r21*x4595))+(((-1.0)*r22*x4592))+(((-1.0)*x4591*x4593)));
evalcond[2]=(cj0+((r11*x4595))+(((-1.0)*r12*x4592))+(((-1.0)*x4590*x4593)));
evalcond[3]=(((r02*x4587))+(((-1.0)*x4589*x4592))+(((-1.0)*cj0))+((r01*x4594)));
evalcond[4]=((((-1.0)*x4588))+((r11*x4594))+((r12*x4587))+(((-1.0)*x4590*x4592)));
evalcond[5]=((((-1.0)*x4588))+(((-1.0)*x4589*x4593))+(((-1.0)*r02*x4592))+((r01*x4595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4596 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4596.valid){
continue;
}
CheckValue<IkReal> x4597=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4596.value)+(((1.5707963267949)*(x4597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4598=IKcos(j4);
IkReal x4599=IKsin(j4);
IkReal x4600=((1.0)*sj0);
IkReal x4601=(cj5*r00);
IkReal x4602=(cj5*r10);
IkReal x4603=(cj5*r20);
IkReal x4604=((1.0)*x4598);
IkReal x4605=((1.0)*x4599);
IkReal x4606=(sj5*x4598);
IkReal x4607=(sj5*x4599);
evalcond[0]=(((r22*x4599))+(((-1.0)*x4603*x4604))+((r21*x4606)));
evalcond[1]=((((-1.0)*x4603*x4605))+((r21*x4607))+(((-1.0)*r22*x4604)));
evalcond[2]=(((r11*x4607))+cj0+(((-1.0)*x4602*x4605))+(((-1.0)*r12*x4604)));
evalcond[3]=(((r01*x4606))+((r02*x4599))+(((-1.0)*x4601*x4604))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4606))+(((-1.0)*x4600))+(((-1.0)*x4602*x4604))+((r12*x4599)));
evalcond[5]=((((-1.0)*x4600))+((r01*x4607))+(((-1.0)*r02*x4604))+(((-1.0)*x4601*x4605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4608=IKcos(j0);
IkReal x4609=IKsin(j0);
evalcond[0]=((((-0.39225)*x4608))+(((-0.10915)*x4609))+(((-1.0)*px)));
evalcond[1]=((((-0.39225)*x4609))+(((-1.0)*py))+(((0.10915)*x4608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4610=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4610;
j4eval[1]=IKsign(x4610);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4611=((1.0)*cj5);
IkReal x4612=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4611)));
j4eval[0]=x4612;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4611)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4612);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4613=cj5*cj5;
IkReal x4614=((1.0)*r20);
IkReal x4615=(r01*r21);
IkReal x4616=(r21*sj5);
IkReal x4617=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4615))+(((-1.0)*r00*x4613*x4614))+((cj5*r00*x4616))+((x4613*x4615)));
j4eval[0]=x4617;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4614))+((cj0*x4616)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4617);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4618=cj5*cj5;
IkReal x4619=((1.0)*r20);
IkReal x4620=(r01*r21);
IkReal x4621=(r21*sj5);
CheckValue<IkReal> x4622 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4621))+(((-1.0)*cj0*cj5*x4619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4622.valid){
continue;
}
CheckValue<IkReal> x4623=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4620))+((x4618*x4620))+(((-1.0)*r00*x4618*x4619))+((cj5*r00*x4621)))),-1);
if(!x4623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4622.value)+(((1.5707963267949)*(x4623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4624=IKcos(j4);
IkReal x4625=IKsin(j4);
IkReal x4626=(cj5*r00);
IkReal x4627=(cj5*r10);
IkReal x4628=(cj5*r20);
IkReal x4629=((1.0)*x4624);
IkReal x4630=((1.0)*x4625);
IkReal x4631=(sj5*x4624);
IkReal x4632=(sj5*x4625);
evalcond[0]=(((r21*x4631))+((r22*x4625))+(((-1.0)*x4628*x4629)));
evalcond[1]=(((r21*x4632))+(((-1.0)*r22*x4629))+(((-1.0)*x4628*x4630)));
evalcond[2]=(((r01*x4631))+cj0+(((-1.0)*x4626*x4629))+((r02*x4625)));
evalcond[3]=(((r12*x4625))+sj0+(((-1.0)*x4627*x4629))+((r11*x4631)));
evalcond[4]=(cj0+((r11*x4632))+(((-1.0)*x4627*x4630))+(((-1.0)*r12*x4629)));
evalcond[5]=(((r01*x4632))+(((-1.0)*sj0))+(((-1.0)*r02*x4629))+(((-1.0)*x4626*x4630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4633=((1.0)*cj5);
CheckValue<IkReal> x4634 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4633)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4634.valid){
continue;
}
CheckValue<IkReal> x4635=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4633)))),-1);
if(!x4635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4634.value)+(((1.5707963267949)*(x4635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4636=IKcos(j4);
IkReal x4637=IKsin(j4);
IkReal x4638=(cj5*r00);
IkReal x4639=(cj5*r10);
IkReal x4640=(cj5*r20);
IkReal x4641=((1.0)*x4636);
IkReal x4642=((1.0)*x4637);
IkReal x4643=(sj5*x4636);
IkReal x4644=(sj5*x4637);
evalcond[0]=(((r21*x4643))+(((-1.0)*x4640*x4641))+((r22*x4637)));
evalcond[1]=(((r21*x4644))+(((-1.0)*x4640*x4642))+(((-1.0)*r22*x4641)));
evalcond[2]=(cj0+((r01*x4643))+((r02*x4637))+(((-1.0)*x4638*x4641)));
evalcond[3]=(((r12*x4637))+sj0+((r11*x4643))+(((-1.0)*x4639*x4641)));
evalcond[4]=(cj0+((r11*x4644))+(((-1.0)*r12*x4641))+(((-1.0)*x4639*x4642)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4641))+((r01*x4644))+(((-1.0)*x4638*x4642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4645 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4645.valid){
continue;
}
CheckValue<IkReal> x4646=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4645.value)+(((1.5707963267949)*(x4646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4647=IKcos(j4);
IkReal x4648=IKsin(j4);
IkReal x4649=(cj5*r00);
IkReal x4650=(cj5*r10);
IkReal x4651=(cj5*r20);
IkReal x4652=((1.0)*x4647);
IkReal x4653=((1.0)*x4648);
IkReal x4654=(sj5*x4647);
IkReal x4655=(sj5*x4648);
evalcond[0]=(((r22*x4648))+(((-1.0)*x4651*x4652))+((r21*x4654)));
evalcond[1]=((((-1.0)*r22*x4652))+(((-1.0)*x4651*x4653))+((r21*x4655)));
evalcond[2]=(((r02*x4648))+cj0+(((-1.0)*x4649*x4652))+((r01*x4654)));
evalcond[3]=(sj0+((r11*x4654))+((r12*x4648))+(((-1.0)*x4650*x4652)));
evalcond[4]=(((r11*x4655))+cj0+(((-1.0)*x4650*x4653))+(((-1.0)*r12*x4652)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4649*x4653))+(((-1.0)*r02*x4652))+((r01*x4655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4656=IKsin(j0);
IkReal x4657=IKcos(j0);
evalcond[0]=((((-0.10915)*x4656))+(((-1.0)*px))+(((0.81725)*x4657)));
evalcond[1]=((((0.10915)*x4657))+(((-1.0)*py))+(((0.81725)*x4656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4658=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4658;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4658);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4659=((1.0)*cj5);
IkReal x4660=((((-1.0)*r01*x4659))+(((-1.0)*r00*sj5)));
j4eval[0]=x4660;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x4659))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4661=((1.0)*cj5);
IkReal x4662=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4661)));
j4eval[0]=x4662;
j4eval[1]=IKsign(x4662);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4661))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4663=((1.0)*cj5);
CheckValue<IkReal> x4664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4663)))),-1);
if(!x4664.valid){
continue;
}
CheckValue<IkReal> x4665 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4663))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4664.value)))+(x4665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4666=IKcos(j4);
IkReal x4667=IKsin(j4);
IkReal x4668=((1.0)*sj0);
IkReal x4669=(cj5*r00);
IkReal x4670=(cj5*r10);
IkReal x4671=(cj5*r20);
IkReal x4672=((1.0)*x4666);
IkReal x4673=((1.0)*x4667);
IkReal x4674=(sj5*x4666);
IkReal x4675=(sj5*x4667);
evalcond[0]=(((r21*x4674))+((r22*x4667))+(((-1.0)*x4671*x4672)));
evalcond[1]=(((r21*x4675))+(((-1.0)*r22*x4672))+(((-1.0)*x4671*x4673)));
evalcond[2]=(cj0+((r11*x4675))+(((-1.0)*r12*x4672))+(((-1.0)*x4670*x4673)));
evalcond[3]=(((r02*x4667))+(((-1.0)*x4669*x4672))+((r01*x4674))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4667))+((r11*x4674))+(((-1.0)*x4668))+(((-1.0)*x4670*x4672)));
evalcond[5]=((((-1.0)*r02*x4672))+(((-1.0)*x4669*x4673))+((r01*x4675))+(((-1.0)*x4668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4676=((1.0)*cj5);
CheckValue<IkReal> x4677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4676)))),-1);
if(!x4677.valid){
continue;
}
CheckValue<IkReal> x4678 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4677.value)))+(x4678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4679=IKcos(j4);
IkReal x4680=IKsin(j4);
IkReal x4681=((1.0)*sj0);
IkReal x4682=(cj5*r00);
IkReal x4683=(cj5*r10);
IkReal x4684=(cj5*r20);
IkReal x4685=((1.0)*x4679);
IkReal x4686=((1.0)*x4680);
IkReal x4687=(sj5*x4679);
IkReal x4688=(sj5*x4680);
evalcond[0]=((((-1.0)*x4684*x4685))+((r22*x4680))+((r21*x4687)));
evalcond[1]=((((-1.0)*x4684*x4686))+((r21*x4688))+(((-1.0)*r22*x4685)));
evalcond[2]=(cj0+(((-1.0)*x4683*x4686))+((r11*x4688))+(((-1.0)*r12*x4685)));
evalcond[3]=(((r02*x4680))+(((-1.0)*x4682*x4685))+((r01*x4687))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4683*x4685))+((r12*x4680))+((r11*x4687))+(((-1.0)*x4681)));
evalcond[5]=((((-1.0)*x4682*x4686))+(((-1.0)*r02*x4685))+((r01*x4688))+(((-1.0)*x4681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
CheckValue<IkReal> x4690=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4689.value)+(((1.5707963267949)*(x4690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4691=IKcos(j4);
IkReal x4692=IKsin(j4);
IkReal x4693=((1.0)*sj0);
IkReal x4694=(cj5*r00);
IkReal x4695=(cj5*r10);
IkReal x4696=(cj5*r20);
IkReal x4697=((1.0)*x4691);
IkReal x4698=((1.0)*x4692);
IkReal x4699=(sj5*x4691);
IkReal x4700=(sj5*x4692);
evalcond[0]=((((-1.0)*x4696*x4697))+((r22*x4692))+((r21*x4699)));
evalcond[1]=((((-1.0)*x4696*x4698))+((r21*x4700))+(((-1.0)*r22*x4697)));
evalcond[2]=((((-1.0)*r12*x4697))+cj0+(((-1.0)*x4695*x4698))+((r11*x4700)));
evalcond[3]=(((r02*x4692))+((r01*x4699))+(((-1.0)*x4694*x4697))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4692))+(((-1.0)*x4693))+(((-1.0)*x4695*x4697))+((r11*x4699)));
evalcond[5]=((((-1.0)*r02*x4697))+((r01*x4700))+(((-1.0)*x4694*x4698))+(((-1.0)*x4693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4701=IKsin(j0);
IkReal x4702=IKcos(j0);
evalcond[0]=((((-0.10915)*x4701))+(((-1.0)*px))+(((0.03275)*x4702)));
evalcond[1]=((((-1.0)*py))+(((0.03275)*x4701))+(((0.10915)*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4703=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4703;
j4eval[1]=IKsign(x4703);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4704=((1.0)*cj5);
IkReal x4705=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4704)));
j4eval[0]=x4705;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4704)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4706=cj5*cj5;
IkReal x4707=((1.0)*r20);
IkReal x4708=(r01*r21);
IkReal x4709=(r21*sj5);
IkReal x4710=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4708))+((cj5*r00*x4709))+((x4706*x4708))+(((-1.0)*r00*x4706*x4707)));
j4eval[0]=x4710;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4707))+((cj0*x4709)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4711=cj5*cj5;
IkReal x4712=((1.0)*r20);
IkReal x4713=(r01*r21);
IkReal x4714=(r21*sj5);
CheckValue<IkReal> x4715 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4714))+(((-1.0)*cj0*cj5*x4712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4715.valid){
continue;
}
CheckValue<IkReal> x4716=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4713))+((x4711*x4713))+((cj5*r00*x4714))+(((-1.0)*r00*x4711*x4712)))),-1);
if(!x4716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4715.value)+(((1.5707963267949)*(x4716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4717=IKcos(j4);
IkReal x4718=IKsin(j4);
IkReal x4719=(cj5*r00);
IkReal x4720=(cj5*r10);
IkReal x4721=(cj5*r20);
IkReal x4722=((1.0)*x4717);
IkReal x4723=((1.0)*x4718);
IkReal x4724=(sj5*x4717);
IkReal x4725=(sj5*x4718);
evalcond[0]=(((r22*x4718))+((r21*x4724))+(((-1.0)*x4721*x4722)));
evalcond[1]=(((r21*x4725))+(((-1.0)*x4721*x4723))+(((-1.0)*r22*x4722)));
evalcond[2]=(cj0+(((-1.0)*x4719*x4722))+((r01*x4724))+((r02*x4718)));
evalcond[3]=(((r11*x4724))+sj0+((r12*x4718))+(((-1.0)*x4720*x4722)));
evalcond[4]=(((r11*x4725))+cj0+(((-1.0)*r12*x4722))+(((-1.0)*x4720*x4723)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4719*x4723))+((r01*x4725))+(((-1.0)*r02*x4722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4726=((1.0)*cj5);
CheckValue<IkReal> x4727 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4726)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4727.valid){
continue;
}
CheckValue<IkReal> x4728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4726)))),-1);
if(!x4728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4727.value)+(((1.5707963267949)*(x4728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4729=IKcos(j4);
IkReal x4730=IKsin(j4);
IkReal x4731=(cj5*r00);
IkReal x4732=(cj5*r10);
IkReal x4733=(cj5*r20);
IkReal x4734=((1.0)*x4729);
IkReal x4735=((1.0)*x4730);
IkReal x4736=(sj5*x4729);
IkReal x4737=(sj5*x4730);
evalcond[0]=(((r21*x4736))+(((-1.0)*x4733*x4734))+((r22*x4730)));
evalcond[1]=(((r21*x4737))+(((-1.0)*x4733*x4735))+(((-1.0)*r22*x4734)));
evalcond[2]=((((-1.0)*x4731*x4734))+cj0+((r02*x4730))+((r01*x4736)));
evalcond[3]=(((r11*x4736))+sj0+(((-1.0)*x4732*x4734))+((r12*x4730)));
evalcond[4]=(((r11*x4737))+cj0+(((-1.0)*r12*x4734))+(((-1.0)*x4732*x4735)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4731*x4735))+((r01*x4737))+(((-1.0)*r02*x4734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4738 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4738.valid){
continue;
}
CheckValue<IkReal> x4739=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4738.value)+(((1.5707963267949)*(x4739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4740=IKcos(j4);
IkReal x4741=IKsin(j4);
IkReal x4742=(cj5*r00);
IkReal x4743=(cj5*r10);
IkReal x4744=(cj5*r20);
IkReal x4745=((1.0)*x4740);
IkReal x4746=((1.0)*x4741);
IkReal x4747=(sj5*x4740);
IkReal x4748=(sj5*x4741);
evalcond[0]=((((-1.0)*x4744*x4745))+((r22*x4741))+((r21*x4747)));
evalcond[1]=((((-1.0)*x4744*x4746))+(((-1.0)*r22*x4745))+((r21*x4748)));
evalcond[2]=(cj0+((r01*x4747))+((r02*x4741))+(((-1.0)*x4742*x4745)));
evalcond[3]=(((r11*x4747))+sj0+((r12*x4741))+(((-1.0)*x4743*x4745)));
evalcond[4]=(((r11*x4748))+(((-1.0)*r12*x4745))+cj0+(((-1.0)*x4743*x4746)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4748))+(((-1.0)*x4742*x4746))+(((-1.0)*r02*x4745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4749=IKcos(j0);
IkReal x4750=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x4749))+(((-0.10915)*x4750)));
evalcond[1]=((((0.10915)*x4749))+(((-1.0)*py))+(((-0.39225)*x4750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4751=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4751;
j4eval[1]=IKsign(x4751);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4752=((1.0)*cj5);
IkReal x4753=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4752)));
j4eval[0]=x4753;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4752))))));
j4eval[2]=IKsign(x4753);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4754=cj5*cj5;
IkReal x4755=((1.0)*r20);
IkReal x4756=(r01*r21);
IkReal x4757=(r21*sj5);
IkReal x4758=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4757))+((x4754*x4756))+(((-1.0)*r00*x4754*x4755))+(((-1.0)*x4756)));
j4eval[0]=x4758;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4755))+((cj0*x4757)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4759=cj5*cj5;
IkReal x4760=((1.0)*r20);
IkReal x4761=(r01*r21);
IkReal x4762=(r21*sj5);
CheckValue<IkReal> x4763 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4762))+(((-1.0)*cj0*cj5*x4760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4763.valid){
continue;
}
CheckValue<IkReal> x4764=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x4761))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4759*x4760))+((x4759*x4761))+((cj5*r00*x4762)))),-1);
if(!x4764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4763.value)+(((1.5707963267949)*(x4764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4765=IKcos(j4);
IkReal x4766=IKsin(j4);
IkReal x4767=(cj5*r00);
IkReal x4768=(cj5*r10);
IkReal x4769=(cj5*r20);
IkReal x4770=((1.0)*x4765);
IkReal x4771=((1.0)*x4766);
IkReal x4772=(sj5*x4765);
IkReal x4773=(sj5*x4766);
evalcond[0]=(((r22*x4766))+(((-1.0)*x4769*x4770))+((r21*x4772)));
evalcond[1]=((((-1.0)*x4769*x4771))+(((-1.0)*r22*x4770))+((r21*x4773)));
evalcond[2]=(((r02*x4766))+cj0+((r01*x4772))+(((-1.0)*x4767*x4770)));
evalcond[3]=(sj0+((r11*x4772))+((r12*x4766))+(((-1.0)*x4768*x4770)));
evalcond[4]=(((r11*x4773))+cj0+(((-1.0)*r12*x4770))+(((-1.0)*x4768*x4771)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4773))+(((-1.0)*x4767*x4771))+(((-1.0)*r02*x4770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4774=((1.0)*cj5);
CheckValue<IkReal> x4775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4774))+(((-1.0)*r10*sj5)))),-1);
if(!x4775.valid){
continue;
}
CheckValue<IkReal> x4776 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4774)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4775.value)))+(x4776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4777=IKcos(j4);
IkReal x4778=IKsin(j4);
IkReal x4779=(cj5*r00);
IkReal x4780=(cj5*r10);
IkReal x4781=(cj5*r20);
IkReal x4782=((1.0)*x4777);
IkReal x4783=((1.0)*x4778);
IkReal x4784=(sj5*x4777);
IkReal x4785=(sj5*x4778);
evalcond[0]=((((-1.0)*x4781*x4782))+((r22*x4778))+((r21*x4784)));
evalcond[1]=((((-1.0)*x4781*x4783))+(((-1.0)*r22*x4782))+((r21*x4785)));
evalcond[2]=((((-1.0)*x4779*x4782))+cj0+((r01*x4784))+((r02*x4778)));
evalcond[3]=(sj0+((r12*x4778))+((r11*x4784))+(((-1.0)*x4780*x4782)));
evalcond[4]=(cj0+((r11*x4785))+(((-1.0)*x4780*x4783))+(((-1.0)*r12*x4782)));
evalcond[5]=((((-1.0)*x4779*x4783))+(((-1.0)*sj0))+((r01*x4785))+(((-1.0)*r02*x4782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4786 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4786.valid){
continue;
}
CheckValue<IkReal> x4787=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4786.value)+(((1.5707963267949)*(x4787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4788=IKcos(j4);
IkReal x4789=IKsin(j4);
IkReal x4790=(cj5*r00);
IkReal x4791=(cj5*r10);
IkReal x4792=(cj5*r20);
IkReal x4793=((1.0)*x4788);
IkReal x4794=((1.0)*x4789);
IkReal x4795=(sj5*x4788);
IkReal x4796=(sj5*x4789);
evalcond[0]=(((r21*x4795))+((r22*x4789))+(((-1.0)*x4792*x4793)));
evalcond[1]=(((r21*x4796))+(((-1.0)*r22*x4793))+(((-1.0)*x4792*x4794)));
evalcond[2]=(((r02*x4789))+cj0+((r01*x4795))+(((-1.0)*x4790*x4793)));
evalcond[3]=(sj0+((r12*x4789))+((r11*x4795))+(((-1.0)*x4791*x4793)));
evalcond[4]=(cj0+(((-1.0)*r12*x4793))+((r11*x4796))+(((-1.0)*x4791*x4794)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4796))+(((-1.0)*r02*x4793))+(((-1.0)*x4790*x4794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4797=IKsin(j0);
IkReal x4798=IKcos(j0);
evalcond[0]=((((-0.10915)*x4797))+(((-1.0)*px))+(((0.39225)*x4798)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x4798))+(((0.39225)*x4797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4799=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4799;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4799);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4800=((1.0)*cj5);
IkReal x4801=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4800)));
j4eval[0]=x4801;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4800)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4802=((1.0)*cj5);
IkReal x4803=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4802)));
j4eval[0]=x4803;
j4eval[1]=IKsign(x4803);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4802)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4804=((1.0)*cj5);
CheckValue<IkReal> x4805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4804)))),-1);
if(!x4805.valid){
continue;
}
CheckValue<IkReal> x4806 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4804)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4805.value)))+(x4806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4807=IKcos(j4);
IkReal x4808=IKsin(j4);
IkReal x4809=((1.0)*sj0);
IkReal x4810=(cj5*r00);
IkReal x4811=(cj5*r10);
IkReal x4812=(cj5*r20);
IkReal x4813=((1.0)*x4807);
IkReal x4814=((1.0)*x4808);
IkReal x4815=(sj5*x4807);
IkReal x4816=(sj5*x4808);
evalcond[0]=(((r21*x4815))+((r22*x4808))+(((-1.0)*x4812*x4813)));
evalcond[1]=(((r21*x4816))+(((-1.0)*r22*x4813))+(((-1.0)*x4812*x4814)));
evalcond[2]=((((-1.0)*x4811*x4814))+cj0+((r11*x4816))+(((-1.0)*r12*x4813)));
evalcond[3]=(((r02*x4808))+(((-1.0)*x4810*x4813))+(((-1.0)*cj0))+((r01*x4815)));
evalcond[4]=((((-1.0)*x4811*x4813))+((r11*x4815))+((r12*x4808))+(((-1.0)*x4809)));
evalcond[5]=((((-1.0)*r02*x4813))+(((-1.0)*x4809))+(((-1.0)*x4810*x4814))+((r01*x4816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4817=((1.0)*cj5);
CheckValue<IkReal> x4818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4817))+(((-1.0)*r00*sj5)))),-1);
if(!x4818.valid){
continue;
}
CheckValue<IkReal> x4819 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4818.value)))+(x4819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4820=IKcos(j4);
IkReal x4821=IKsin(j4);
IkReal x4822=((1.0)*sj0);
IkReal x4823=(cj5*r00);
IkReal x4824=(cj5*r10);
IkReal x4825=(cj5*r20);
IkReal x4826=((1.0)*x4820);
IkReal x4827=((1.0)*x4821);
IkReal x4828=(sj5*x4820);
IkReal x4829=(sj5*x4821);
evalcond[0]=(((r22*x4821))+((r21*x4828))+(((-1.0)*x4825*x4826)));
evalcond[1]=(((r21*x4829))+(((-1.0)*r22*x4826))+(((-1.0)*x4825*x4827)));
evalcond[2]=(cj0+((r11*x4829))+(((-1.0)*x4824*x4827))+(((-1.0)*r12*x4826)));
evalcond[3]=((((-1.0)*x4823*x4826))+((r02*x4821))+((r01*x4828))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4822))+((r11*x4828))+((r12*x4821))+(((-1.0)*x4824*x4826)));
evalcond[5]=((((-1.0)*x4822))+(((-1.0)*r02*x4826))+(((-1.0)*x4823*x4827))+((r01*x4829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4830 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4830.valid){
continue;
}
CheckValue<IkReal> x4831=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4830.value)+(((1.5707963267949)*(x4831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4832=IKcos(j4);
IkReal x4833=IKsin(j4);
IkReal x4834=((1.0)*sj0);
IkReal x4835=(cj5*r00);
IkReal x4836=(cj5*r10);
IkReal x4837=(cj5*r20);
IkReal x4838=((1.0)*x4832);
IkReal x4839=((1.0)*x4833);
IkReal x4840=(sj5*x4832);
IkReal x4841=(sj5*x4833);
evalcond[0]=(((r22*x4833))+((r21*x4840))+(((-1.0)*x4837*x4838)));
evalcond[1]=((((-1.0)*r22*x4838))+((r21*x4841))+(((-1.0)*x4837*x4839)));
evalcond[2]=(cj0+(((-1.0)*r12*x4838))+((r11*x4841))+(((-1.0)*x4836*x4839)));
evalcond[3]=((((-1.0)*x4835*x4838))+((r01*x4840))+((r02*x4833))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4833))+((r11*x4840))+(((-1.0)*x4834))+(((-1.0)*x4836*x4838)));
evalcond[5]=((((-1.0)*x4835*x4839))+(((-1.0)*r02*x4838))+(((-1.0)*x4834))+((r01*x4841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4842=IKcos(j0);
IkReal x4843=IKsin(j0);
evalcond[0]=((((-0.81725)*x4842))+(((-0.10915)*x4843))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x4842))+(((-0.81725)*x4843))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4844=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4844;
j4eval[1]=IKsign(x4844);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4845=((1.0)*cj5);
IkReal x4846=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4845)));
j4eval[0]=x4846;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4845))))));
j4eval[2]=IKsign(x4846);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4847=cj5*cj5;
IkReal x4848=((1.0)*r20);
IkReal x4849=(r01*r21);
IkReal x4850=(r21*sj5);
IkReal x4851=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4847*x4848))+((x4847*x4849))+((cj5*r00*x4850))+(((-1.0)*x4849)));
j4eval[0]=x4851;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x4850))+(((-1.0)*cj0*cj5*x4848))))));
j4eval[2]=IKsign(x4851);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4852=cj5*cj5;
IkReal x4853=((1.0)*r20);
IkReal x4854=(r01*r21);
IkReal x4855=(r21*sj5);
CheckValue<IkReal> x4856 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4853))+((cj0*x4855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4856.valid){
continue;
}
CheckValue<IkReal> x4857=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4852*x4853))+(((-1.0)*x4854))+((cj5*r00*x4855))+((x4852*x4854)))),-1);
if(!x4857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4856.value)+(((1.5707963267949)*(x4857.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4858=IKcos(j4);
IkReal x4859=IKsin(j4);
IkReal x4860=(cj5*r00);
IkReal x4861=(cj5*r10);
IkReal x4862=(cj5*r20);
IkReal x4863=((1.0)*x4858);
IkReal x4864=((1.0)*x4859);
IkReal x4865=(sj5*x4858);
IkReal x4866=(sj5*x4859);
evalcond[0]=((((-1.0)*x4862*x4863))+((r22*x4859))+((r21*x4865)));
evalcond[1]=((((-1.0)*x4862*x4864))+(((-1.0)*r22*x4863))+((r21*x4866)));
evalcond[2]=(((r01*x4865))+cj0+((r02*x4859))+(((-1.0)*x4860*x4863)));
evalcond[3]=(((r11*x4865))+sj0+((r12*x4859))+(((-1.0)*x4861*x4863)));
evalcond[4]=(((r11*x4866))+cj0+(((-1.0)*r12*x4863))+(((-1.0)*x4861*x4864)));
evalcond[5]=(((r01*x4866))+(((-1.0)*sj0))+(((-1.0)*r02*x4863))+(((-1.0)*x4860*x4864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4867=((1.0)*cj5);
CheckValue<IkReal> x4868 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x4867))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4868.valid){
continue;
}
CheckValue<IkReal> x4869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4867)))),-1);
if(!x4869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4868.value)+(((1.5707963267949)*(x4869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4870=IKcos(j4);
IkReal x4871=IKsin(j4);
IkReal x4872=(cj5*r00);
IkReal x4873=(cj5*r10);
IkReal x4874=(cj5*r20);
IkReal x4875=((1.0)*x4870);
IkReal x4876=((1.0)*x4871);
IkReal x4877=(sj5*x4870);
IkReal x4878=(sj5*x4871);
evalcond[0]=((((-1.0)*x4874*x4875))+((r21*x4877))+((r22*x4871)));
evalcond[1]=((((-1.0)*r22*x4875))+(((-1.0)*x4874*x4876))+((r21*x4878)));
evalcond[2]=(((r02*x4871))+cj0+((r01*x4877))+(((-1.0)*x4872*x4875)));
evalcond[3]=(sj0+((r12*x4871))+((r11*x4877))+(((-1.0)*x4873*x4875)));
evalcond[4]=(cj0+(((-1.0)*r12*x4875))+((r11*x4878))+(((-1.0)*x4873*x4876)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4878))+(((-1.0)*r02*x4875))+(((-1.0)*x4872*x4876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4879 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4879.valid){
continue;
}
CheckValue<IkReal> x4880=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4879.value)+(((1.5707963267949)*(x4880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4881=IKcos(j4);
IkReal x4882=IKsin(j4);
IkReal x4883=(cj5*r00);
IkReal x4884=(cj5*r10);
IkReal x4885=(cj5*r20);
IkReal x4886=((1.0)*x4881);
IkReal x4887=((1.0)*x4882);
IkReal x4888=(sj5*x4881);
IkReal x4889=(sj5*x4882);
evalcond[0]=((((-1.0)*x4885*x4886))+((r22*x4882))+((r21*x4888)));
evalcond[1]=((((-1.0)*x4885*x4887))+(((-1.0)*r22*x4886))+((r21*x4889)));
evalcond[2]=(cj0+((r02*x4882))+(((-1.0)*x4883*x4886))+((r01*x4888)));
evalcond[3]=(((r12*x4882))+sj0+((r11*x4888))+(((-1.0)*x4884*x4886)));
evalcond[4]=(((r11*x4889))+cj0+(((-1.0)*r12*x4886))+(((-1.0)*x4884*x4887)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4883*x4887))+(((-1.0)*r02*x4886))+((r01*x4889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4890=IKcos(j0);
IkReal x4891=IKsin(j0);
evalcond[0]=((((-0.10915)*x4891))+(((-1.0)*px))+(((-0.03275)*x4890)));
evalcond[1]=((((-1.0)*py))+(((-0.03275)*x4891))+(((0.10915)*x4890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4892=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4892;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4893=((1.0)*cj5);
IkReal x4894=((((-1.0)*r01*x4893))+(((-1.0)*r00*sj5)));
j4eval[0]=x4894;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4893))))));
j4eval[2]=IKsign(x4894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4895=((1.0)*cj5);
IkReal x4896=((((-1.0)*r01*x4895))+(((-1.0)*r00*sj5)));
j4eval[0]=x4896;
j4eval[1]=IKsign(x4896);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4895))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4897=((1.0)*cj5);
CheckValue<IkReal> x4898 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4897))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4898.valid){
continue;
}
CheckValue<IkReal> x4899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4897))+(((-1.0)*r00*sj5)))),-1);
if(!x4899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4898.value)+(((1.5707963267949)*(x4899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4900=IKcos(j4);
IkReal x4901=IKsin(j4);
IkReal x4902=((1.0)*sj0);
IkReal x4903=(cj5*r00);
IkReal x4904=(cj5*r10);
IkReal x4905=(cj5*r20);
IkReal x4906=((1.0)*x4900);
IkReal x4907=((1.0)*x4901);
IkReal x4908=(sj5*x4900);
IkReal x4909=(sj5*x4901);
evalcond[0]=((((-1.0)*x4905*x4906))+((r21*x4908))+((r22*x4901)));
evalcond[1]=((((-1.0)*x4905*x4907))+((r21*x4909))+(((-1.0)*r22*x4906)));
evalcond[2]=((((-1.0)*r12*x4906))+cj0+(((-1.0)*x4904*x4907))+((r11*x4909)));
evalcond[3]=(((r02*x4901))+(((-1.0)*x4903*x4906))+((r01*x4908))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4902))+(((-1.0)*x4904*x4906))+((r11*x4908))+((r12*x4901)));
evalcond[5]=((((-1.0)*x4902))+(((-1.0)*x4903*x4907))+(((-1.0)*r02*x4906))+((r01*x4909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4910=((1.0)*cj5);
CheckValue<IkReal> x4911 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4910))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4911.valid){
continue;
}
CheckValue<IkReal> x4912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4910)))),-1);
if(!x4912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4911.value)+(((1.5707963267949)*(x4912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4913=IKcos(j4);
IkReal x4914=IKsin(j4);
IkReal x4915=((1.0)*sj0);
IkReal x4916=(cj5*r00);
IkReal x4917=(cj5*r10);
IkReal x4918=(cj5*r20);
IkReal x4919=((1.0)*x4913);
IkReal x4920=((1.0)*x4914);
IkReal x4921=(sj5*x4913);
IkReal x4922=(sj5*x4914);
evalcond[0]=((((-1.0)*x4918*x4919))+((r21*x4921))+((r22*x4914)));
evalcond[1]=((((-1.0)*x4918*x4920))+((r21*x4922))+(((-1.0)*r22*x4919)));
evalcond[2]=(cj0+(((-1.0)*r12*x4919))+(((-1.0)*x4917*x4920))+((r11*x4922)));
evalcond[3]=(((r02*x4914))+((r01*x4921))+(((-1.0)*x4916*x4919))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4915))+((r12*x4914))+((r11*x4921))+(((-1.0)*x4917*x4919)));
evalcond[5]=((((-1.0)*r02*x4919))+(((-1.0)*x4915))+(((-1.0)*x4916*x4920))+((r01*x4922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4923 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4923.valid){
continue;
}
CheckValue<IkReal> x4924=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4923.value)+(((1.5707963267949)*(x4924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4925=IKcos(j4);
IkReal x4926=IKsin(j4);
IkReal x4927=((1.0)*sj0);
IkReal x4928=(cj5*r00);
IkReal x4929=(cj5*r10);
IkReal x4930=(cj5*r20);
IkReal x4931=((1.0)*x4925);
IkReal x4932=((1.0)*x4926);
IkReal x4933=(sj5*x4925);
IkReal x4934=(sj5*x4926);
evalcond[0]=((((-1.0)*x4930*x4931))+((r22*x4926))+((r21*x4933)));
evalcond[1]=((((-1.0)*x4930*x4932))+((r21*x4934))+(((-1.0)*r22*x4931)));
evalcond[2]=(cj0+(((-1.0)*r12*x4931))+(((-1.0)*x4929*x4932))+((r11*x4934)));
evalcond[3]=(((r01*x4933))+((r02*x4926))+(((-1.0)*x4928*x4931))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4929*x4931))+((r11*x4933))+(((-1.0)*x4927))+((r12*x4926)));
evalcond[5]=((((-1.0)*r02*x4931))+((r01*x4934))+(((-1.0)*x4928*x4932))+(((-1.0)*x4927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4935=((8500.0)*sj1);
IkReal x4936=(cj5*r01);
IkReal x4937=(r00*sj5);
IkReal x4938=(sj1*sj2);
IkReal x4939=(cj1*cj2);
IkReal x4940=((20000.0)*px);
IkReal x4941=((7845.0)*cj2*sj1);
IkReal x4942=((7845.0)*cj1*sj2);
CheckValue<IkReal> x4943=IKPowWithIntegerCheck(((((2183.0)*x4939))+(((-2183.0)*x4938))),-1);
if(!x4943.valid){
continue;
}
CheckValue<IkReal> x4944=IKPowWithIntegerCheck((x4939+(((-1.0)*x4938))),-1);
if(!x4944.valid){
continue;
}
if( IKabs(((x4943.value)*(((((-1.0)*x4939*x4940))+(((-1.0)*x4935*x4937))+(((-1.0)*x4935*x4936))+(((-1.0)*x4937*x4941))+(((-1.0)*x4937*x4942))+(((-1.0)*x4936*x4941))+(((-1.0)*x4936*x4942))+(((-1893.0)*x4937*x4939))+(((-1893.0)*x4936*x4939))+(((1893.0)*x4937*x4938))+((x4938*x4940))+(((1893.0)*x4936*x4938)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4944.value)*(((((-1.0)*x4937))+(((-1.0)*x4936)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4943.value)*(((((-1.0)*x4939*x4940))+(((-1.0)*x4935*x4937))+(((-1.0)*x4935*x4936))+(((-1.0)*x4937*x4941))+(((-1.0)*x4937*x4942))+(((-1.0)*x4936*x4941))+(((-1.0)*x4936*x4942))+(((-1893.0)*x4937*x4939))+(((-1893.0)*x4936*x4939))+(((1893.0)*x4937*x4938))+((x4938*x4940))+(((1893.0)*x4936*x4938))))))+IKsqr(((x4944.value)*(((((-1.0)*x4937))+(((-1.0)*x4936))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4943.value)*(((((-1.0)*x4939*x4940))+(((-1.0)*x4935*x4937))+(((-1.0)*x4935*x4936))+(((-1.0)*x4937*x4941))+(((-1.0)*x4937*x4942))+(((-1.0)*x4936*x4941))+(((-1.0)*x4936*x4942))+(((-1893.0)*x4937*x4939))+(((-1893.0)*x4936*x4939))+(((1893.0)*x4937*x4938))+((x4938*x4940))+(((1893.0)*x4936*x4938))))), ((x4944.value)*(((((-1.0)*x4937))+(((-1.0)*x4936))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4945=IKcos(j0);
IkReal x4946=IKsin(j0);
IkReal x4947=((0.39225)*cj1);
IkReal x4948=((1.0)*sj1);
IkReal x4949=(cj1*cj2);
IkReal x4950=(cj5*r11);
IkReal x4951=(r00*sj5);
IkReal x4952=(cj5*r01);
IkReal x4953=((0.39225)*cj2);
IkReal x4954=(r10*sj5);
IkReal x4955=(sj2*x4946);
IkReal x4956=(sj1*x4945);
IkReal x4957=(sj2*x4945);
IkReal x4958=(sj1*x4946);
evalcond[0]=(x4952+x4951+(((-1.0)*x4948*x4957))+((x4945*x4949)));
evalcond[1]=(x4950+x4954+((x4946*x4949))+(((-1.0)*x4948*x4955)));
evalcond[2]=((((-0.10915)*x4946))+(((-0.09465)*x4952))+(((-0.09465)*x4951))+(((-1.0)*px))+((x4947*x4957))+(((0.425)*x4956))+((x4953*x4956)));
evalcond[3]=((((-0.09465)*x4950))+(((-0.09465)*x4954))+(((-1.0)*py))+(((0.10915)*x4945))+((x4947*x4955))+(((0.425)*x4958))+((x4953*x4958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4959=((1.0)*cj5);
IkReal x4960=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4959)));
j4eval[0]=x4960;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4959))))));
j4eval[2]=IKsign(x4960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4961=((1.0)*cj5);
IkReal x4962=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4961)));
j4eval[0]=x4962;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4961))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4963=((1.0)*sj0);
IkReal x4964=((1.0)*cj0);
IkReal x4965=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4965;
j4eval[1]=((IKabs(((((-1.0)*r02*x4964))+(((-1.0)*r12*x4963)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4964))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4963))))));
j4eval[2]=IKsign(x4965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4966=((-1.0)*r20);
IkReal x4968 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4968)==0){
continue;
}
IkReal x4967=pow(x4968,-0.5);
CheckValue<IkReal> x4969 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4966),IKFAST_ATAN2_MAGTHRESH);
if(!x4969.valid){
continue;
}
IkReal gconst114=((-1.0)*(x4969.value));
IkReal gconst115=(r21*x4967);
IkReal gconst116=(x4966*x4967);
CheckValue<IkReal> x4970 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4970.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4970.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4971=((-1.0)*r20);
IkReal x4972=x4967;
CheckValue<IkReal> x4974 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4971),IKFAST_ATAN2_MAGTHRESH);
if(!x4974.valid){
continue;
}
IkReal x4973=((-1.0)*(x4974.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4973;
IkReal gconst114=x4973;
IkReal gconst115=(r21*x4972);
IkReal gconst116=(x4971*x4972);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4975=((-1.0)*r20);
IkReal x4976=x4967;
CheckValue<IkReal> x4978 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4975),IKFAST_ATAN2_MAGTHRESH);
if(!x4978.valid){
continue;
}
IkReal x4977=((-1.0)*(x4978.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4977;
IkReal gconst114=x4977;
IkReal gconst115=(r21*x4976);
IkReal gconst116=(x4975*x4976);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4979=((-1.0)*r20);
IkReal x4980=x4967;
CheckValue<IkReal> x4982 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4979),IKFAST_ATAN2_MAGTHRESH);
if(!x4982.valid){
continue;
}
IkReal x4981=((-1.0)*(x4982.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4981;
IkReal gconst114=x4981;
IkReal gconst115=(r21*x4980);
IkReal gconst116=(x4979*x4980);
IkReal x4983=((1.0)*(r22*r22));
CheckValue<IkReal> x4987=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4983))),-1);
if(!x4987.valid){
continue;
}
IkReal x4984=x4987.value;
IkReal x4985=((1.0)*x4984);
IkReal x4986=((((-2.0)*x4984*(r20*r20)*(r21*r21)))+(((-1.0)*x4983))+(((-1.0)*x4985*(r21*r21*r21*r21)))+(((-1.0)*x4985*(r20*r20*r20*r20))));
j4eval[0]=x4986;
j4eval[1]=IKsign(x4986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4988=(sj1*sj2);
IkReal x4989=(gconst116*r20);
IkReal x4990=(gconst115*r21);
IkReal x4991=(cj1*cj2);
CheckValue<IkReal> x4992 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4991))+((r22*x4988)))),IkReal((((x4988*x4990))+((x4989*x4991))+(((-1.0)*x4988*x4989))+(((-1.0)*x4990*x4991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4992.valid){
continue;
}
CheckValue<IkReal> x4993=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x4989*x4989)))+(((-1.0)*(x4990*x4990)))+(((2.0)*x4989*x4990)))),-1);
if(!x4993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4992.value)+(((1.5707963267949)*(x4993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4994=IKsin(j4);
IkReal x4995=IKcos(j4);
IkReal x4996=(gconst115*r21);
IkReal x4997=((1.0)*cj2);
IkReal x4998=((1.0)*sj0);
IkReal x4999=(cj1*sj2);
IkReal x5000=((1.0)*x4995);
IkReal x5001=(gconst115*x4995);
IkReal x5002=(gconst115*x4994);
IkReal x5003=((1.0)*gconst116*x4994);
evalcond[0]=(((x4994*x4996))+(((-1.0)*r22*x5000))+(((-1.0)*r20*x5003)));
evalcond[1]=(((r11*x5002))+cj0+(((-1.0)*r12*x5000))+(((-1.0)*r10*x5003)));
evalcond[2]=((((-1.0)*x4998))+((r01*x5002))+(((-1.0)*r00*x5003))+(((-1.0)*r02*x5000)));
evalcond[3]=(((x4995*x4996))+((r22*x4994))+((sj1*sj2))+(((-1.0)*gconst116*r20*x5000))+(((-1.0)*cj1*x4997)));
evalcond[4]=((((-1.0)*cj0*x4999))+(((-1.0)*gconst116*r00*x5000))+((r02*x4994))+((r01*x5001))+(((-1.0)*cj0*sj1*x4997)));
evalcond[5]=(((r11*x5001))+(((-1.0)*sj0*sj1*x4997))+(((-1.0)*gconst116*r10*x5000))+((r12*x4994))+(((-1.0)*x4998*x4999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5004=((1.0)*gconst116);
CheckValue<IkReal> x5005 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5004))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5005.valid){
continue;
}
CheckValue<IkReal> x5006=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5004)))),-1);
if(!x5006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5005.value)+(((1.5707963267949)*(x5006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5007=IKsin(j4);
IkReal x5008=IKcos(j4);
IkReal x5009=(gconst115*r21);
IkReal x5010=((1.0)*cj2);
IkReal x5011=((1.0)*sj0);
IkReal x5012=(cj1*sj2);
IkReal x5013=((1.0)*x5008);
IkReal x5014=(gconst115*x5008);
IkReal x5015=(gconst115*x5007);
IkReal x5016=((1.0)*gconst116*x5007);
evalcond[0]=((((-1.0)*r20*x5016))+(((-1.0)*r22*x5013))+((x5007*x5009)));
evalcond[1]=(cj0+(((-1.0)*r10*x5016))+(((-1.0)*r12*x5013))+((r11*x5015)));
evalcond[2]=((((-1.0)*r02*x5013))+((r01*x5015))+(((-1.0)*r00*x5016))+(((-1.0)*x5011)));
evalcond[3]=(((x5008*x5009))+((sj1*sj2))+(((-1.0)*gconst116*r20*x5013))+((r22*x5007))+(((-1.0)*cj1*x5010)));
evalcond[4]=((((-1.0)*gconst116*r00*x5013))+(((-1.0)*cj0*x5012))+((r02*x5007))+((r01*x5014))+(((-1.0)*cj0*sj1*x5010)));
evalcond[5]=(((r12*x5007))+(((-1.0)*sj0*sj1*x5010))+(((-1.0)*gconst116*r10*x5013))+(((-1.0)*x5011*x5012))+((r11*x5014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5017=((1.0)*gconst116);
CheckValue<IkReal> x5018 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5018.valid){
continue;
}
CheckValue<IkReal> x5019=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5017)))),-1);
if(!x5019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5018.value)+(((1.5707963267949)*(x5019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5020=IKsin(j4);
IkReal x5021=IKcos(j4);
IkReal x5022=(gconst115*r21);
IkReal x5023=((1.0)*cj2);
IkReal x5024=((1.0)*sj0);
IkReal x5025=(cj1*sj2);
IkReal x5026=((1.0)*x5021);
IkReal x5027=(gconst115*x5021);
IkReal x5028=(gconst115*x5020);
IkReal x5029=((1.0)*gconst116*x5020);
evalcond[0]=((((-1.0)*r20*x5029))+((x5020*x5022))+(((-1.0)*r22*x5026)));
evalcond[1]=(((r11*x5028))+cj0+(((-1.0)*r12*x5026))+(((-1.0)*r10*x5029)));
evalcond[2]=((((-1.0)*r00*x5029))+(((-1.0)*r02*x5026))+((r01*x5028))+(((-1.0)*x5024)));
evalcond[3]=(((x5021*x5022))+((sj1*sj2))+((r22*x5020))+(((-1.0)*gconst116*r20*x5026))+(((-1.0)*cj1*x5023)));
evalcond[4]=(((r02*x5020))+(((-1.0)*cj0*x5025))+(((-1.0)*cj0*sj1*x5023))+(((-1.0)*gconst116*r00*x5026))+((r01*x5027)));
evalcond[5]=(((r11*x5027))+(((-1.0)*sj0*sj1*x5023))+((r12*x5020))+(((-1.0)*gconst116*r10*x5026))+(((-1.0)*x5024*x5025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5030=((-1.0)*r21);
IkReal x5032 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5032)==0){
continue;
}
IkReal x5031=pow(x5032,-0.5);
CheckValue<IkReal> x5033 = IKatan2WithCheck(IkReal(x5030),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5033.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5033.value))));
IkReal gconst118=(x5030*x5031);
IkReal gconst119=((1.0)*r20*x5031);
CheckValue<IkReal> x5034 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5034.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5034.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5035=((-1.0)*r21);
CheckValue<IkReal> x5038 = IKatan2WithCheck(IkReal(x5035),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5038.valid){
continue;
}
IkReal x5036=((1.0)*(x5038.value));
IkReal x5037=x5031;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5036)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5036)));
IkReal gconst118=(x5035*x5037);
IkReal gconst119=((1.0)*r20*x5037);
IkReal x5039=r22*r22;
IkReal x5040=((1.0)*x5039);
CheckValue<IkReal> x5044=IKPowWithIntegerCheck(((-1.0)+x5039),-1);
if(!x5044.valid){
continue;
}
IkReal x5041=x5044.value;
if((((1.0)+(((-1.0)*x5040)))) < -0.00001)
continue;
IkReal x5042=IKsqrt(((1.0)+(((-1.0)*x5040))));
IkReal x5043=(cj0*x5041*x5042);
j4eval[0]=((IKabs(((((-1.0)*x5040*x5043))+x5043)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5045=((-1.0)*r21);
CheckValue<IkReal> x5048 = IKatan2WithCheck(IkReal(x5045),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5048.valid){
continue;
}
IkReal x5046=((1.0)*(x5048.value));
IkReal x5047=x5031;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5046)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5046)));
IkReal gconst118=(x5045*x5047);
IkReal gconst119=((1.0)*r20*x5047);
IkReal x5049=r22*r22;
IkReal x5050=((1.0)*x5049);
CheckValue<IkReal> x5054=IKPowWithIntegerCheck(((-1.0)+x5049),-1);
if(!x5054.valid){
continue;
}
IkReal x5051=x5054.value;
if((((1.0)+(((-1.0)*x5050)))) < -0.00001)
continue;
IkReal x5052=IKsqrt(((1.0)+(((-1.0)*x5050))));
IkReal x5053=(sj0*x5051*x5052);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5053+(((-1.0)*x5050*x5053))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5055=((-1.0)*r21);
CheckValue<IkReal> x5058 = IKatan2WithCheck(IkReal(x5055),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5058.valid){
continue;
}
IkReal x5056=((1.0)*(x5058.value));
IkReal x5057=x5031;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5056)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5056)));
IkReal gconst118=(x5055*x5057);
IkReal gconst119=((1.0)*r20*x5057);
IkReal x5059=r22*r22;
IkReal x5060=(r12*sj0);
IkReal x5061=(cj0*r02);
CheckValue<IkReal> x5065=IKPowWithIntegerCheck(((-1.0)+x5059),-1);
if(!x5065.valid){
continue;
}
IkReal x5062=x5065.value;
if((((1.0)+(((-1.0)*x5059)))) < -0.00001)
continue;
IkReal x5063=IKsqrt(((1.0)+(((-1.0)*x5059))));
IkReal x5064=(r22*x5062*x5063);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x5060*x5064))+((x5061*x5064)))))+(IKabs(((((-1.0)*x5060))+(((-1.0)*x5061))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5066=((1.0)*sj0);
IkReal x5067=((1.0)*gconst118);
CheckValue<IkReal> x5068 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5066)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5066))+((cj0*gconst119*r00))+(((-1.0)*cj0*r01*x5067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5068.valid){
continue;
}
CheckValue<IkReal> x5069=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5067)))),-1);
if(!x5069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5068.value)+(((1.5707963267949)*(x5069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5070=IKsin(j4);
IkReal x5071=IKcos(j4);
IkReal x5072=(gconst118*r01);
IkReal x5073=(gconst119*r20);
IkReal x5074=((1.0)*cj2);
IkReal x5075=(gconst119*r10);
IkReal x5076=(gconst119*r00);
IkReal x5077=(gconst118*r21);
IkReal x5078=((1.0)*sj0);
IkReal x5079=(gconst118*r11);
IkReal x5080=(cj1*sj2);
IkReal x5081=((1.0)*x5071);
IkReal x5082=((1.0)*x5070);
evalcond[0]=((((-1.0)*x5073*x5082))+((x5070*x5077))+(((-1.0)*r22*x5081)));
evalcond[1]=((((-1.0)*r12*x5081))+cj0+(((-1.0)*x5075*x5082))+((x5070*x5079)));
evalcond[2]=((((-1.0)*x5078))+((x5070*x5072))+(((-1.0)*r02*x5081))+(((-1.0)*x5076*x5082)));
evalcond[3]=((((-1.0)*x5073*x5081))+((sj1*sj2))+((x5071*x5077))+(((-1.0)*cj1*x5074))+((r22*x5070)));
evalcond[4]=((((-1.0)*cj0*sj1*x5074))+((r02*x5070))+((x5071*x5072))+(((-1.0)*cj0*x5080))+(((-1.0)*x5076*x5081)));
evalcond[5]=((((-1.0)*x5075*x5081))+(((-1.0)*x5078*x5080))+(((-1.0)*sj0*sj1*x5074))+((x5071*x5079))+((r12*x5070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5083=((1.0)*gconst119);
CheckValue<IkReal> x5084 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5083))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5084.valid){
continue;
}
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5083))+(((-1.0)*gconst118*r10)))),-1);
if(!x5085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5084.value)+(((1.5707963267949)*(x5085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5086=IKsin(j4);
IkReal x5087=IKcos(j4);
IkReal x5088=(gconst118*r01);
IkReal x5089=(gconst119*r20);
IkReal x5090=((1.0)*cj2);
IkReal x5091=(gconst119*r10);
IkReal x5092=(gconst119*r00);
IkReal x5093=(gconst118*r21);
IkReal x5094=((1.0)*sj0);
IkReal x5095=(gconst118*r11);
IkReal x5096=(cj1*sj2);
IkReal x5097=((1.0)*x5087);
IkReal x5098=((1.0)*x5086);
evalcond[0]=((((-1.0)*r22*x5097))+((x5086*x5093))+(((-1.0)*x5089*x5098)));
evalcond[1]=(cj0+(((-1.0)*x5091*x5098))+((x5086*x5095))+(((-1.0)*r12*x5097)));
evalcond[2]=(((x5086*x5088))+(((-1.0)*x5094))+(((-1.0)*x5092*x5098))+(((-1.0)*r02*x5097)));
evalcond[3]=(((x5087*x5093))+(((-1.0)*cj1*x5090))+((r22*x5086))+((sj1*sj2))+(((-1.0)*x5089*x5097)));
evalcond[4]=((((-1.0)*cj0*sj1*x5090))+((x5087*x5088))+(((-1.0)*x5092*x5097))+((r02*x5086))+(((-1.0)*cj0*x5096)));
evalcond[5]=(((x5087*x5095))+(((-1.0)*x5091*x5097))+((r12*x5086))+(((-1.0)*sj0*sj1*x5090))+(((-1.0)*x5094*x5096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5099=((1.0)*gconst119);
CheckValue<IkReal> x5100 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5100.valid){
continue;
}
CheckValue<IkReal> x5101=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5099)))),-1);
if(!x5101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5100.value)+(((1.5707963267949)*(x5101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5102=IKsin(j4);
IkReal x5103=IKcos(j4);
IkReal x5104=(gconst118*r01);
IkReal x5105=(gconst119*r20);
IkReal x5106=((1.0)*cj2);
IkReal x5107=(gconst119*r10);
IkReal x5108=(gconst119*r00);
IkReal x5109=(gconst118*r21);
IkReal x5110=((1.0)*sj0);
IkReal x5111=(gconst118*r11);
IkReal x5112=(cj1*sj2);
IkReal x5113=((1.0)*x5103);
IkReal x5114=((1.0)*x5102);
evalcond[0]=((((-1.0)*r22*x5113))+((x5102*x5109))+(((-1.0)*x5105*x5114)));
evalcond[1]=(cj0+((x5102*x5111))+(((-1.0)*x5107*x5114))+(((-1.0)*r12*x5113)));
evalcond[2]=(((x5102*x5104))+(((-1.0)*r02*x5113))+(((-1.0)*x5108*x5114))+(((-1.0)*x5110)));
evalcond[3]=(((r22*x5102))+((sj1*sj2))+(((-1.0)*cj1*x5106))+((x5103*x5109))+(((-1.0)*x5105*x5113)));
evalcond[4]=((((-1.0)*cj0*x5112))+((r02*x5102))+(((-1.0)*x5108*x5113))+((x5103*x5104))+(((-1.0)*cj0*sj1*x5106)));
evalcond[5]=(((r12*x5102))+(((-1.0)*x5110*x5112))+(((-1.0)*sj0*sj1*x5106))+(((-1.0)*x5107*x5113))+((x5103*x5111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5115=((-1.0)*r10);
IkReal x5117 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5117)==0){
continue;
}
IkReal x5116=pow(x5117,-0.5);
CheckValue<IkReal> x5118 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5115),IKFAST_ATAN2_MAGTHRESH);
if(!x5118.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5118.value));
IkReal gconst121=(r11*x5116);
IkReal gconst122=(x5115*x5116);
CheckValue<IkReal> x5119 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5119.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5119.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5120=((-1.0)*r10);
IkReal x5121=x5116;
CheckValue<IkReal> x5123 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5120),IKFAST_ATAN2_MAGTHRESH);
if(!x5123.valid){
continue;
}
IkReal x5122=((-1.0)*(x5123.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5122;
IkReal gconst120=x5122;
IkReal gconst121=(r11*x5121);
IkReal gconst122=(x5120*x5121);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5124=((1.0)*sj0);
IkReal x5125=((1.0)*gconst121);
CheckValue<IkReal> x5126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5125))+(((-1.0)*gconst122*r21)))),-1);
if(!x5126.valid){
continue;
}
CheckValue<IkReal> x5127 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5124)))),IkReal(((((-1.0)*gconst121*r11*x5124))+(((-1.0)*cj0*r01*x5125))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5126.value)))+(x5127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5128=IKsin(j4);
IkReal x5129=IKcos(j4);
IkReal x5130=(gconst121*r11);
IkReal x5131=(gconst122*r00);
IkReal x5132=((1.0)*cj2);
IkReal x5133=((1.0)*sj0);
IkReal x5134=(gconst122*r10);
IkReal x5135=(gconst122*r20);
IkReal x5136=(cj1*sj2);
IkReal x5137=((1.0)*x5129);
IkReal x5138=(gconst121*x5128);
IkReal x5139=((1.0)*x5128);
IkReal x5140=(gconst121*x5129);
evalcond[0]=((((-1.0)*x5135*x5139))+((r21*x5138))+(((-1.0)*r22*x5137)));
evalcond[1]=(cj0+((x5128*x5130))+(((-1.0)*r12*x5137))+(((-1.0)*x5134*x5139)));
evalcond[2]=((((-1.0)*x5131*x5139))+((r01*x5138))+(((-1.0)*x5133))+(((-1.0)*r02*x5137)));
evalcond[3]=(((r21*x5140))+((r22*x5128))+((sj1*sj2))+(((-1.0)*x5135*x5137))+(((-1.0)*cj1*x5132)));
evalcond[4]=((((-1.0)*x5131*x5137))+((r01*x5140))+(((-1.0)*cj0*x5136))+(((-1.0)*cj0*sj1*x5132))+((r02*x5128)));
evalcond[5]=(((r12*x5128))+((x5129*x5130))+(((-1.0)*x5133*x5136))+(((-1.0)*x5134*x5137))+(((-1.0)*sj0*sj1*x5132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5141=((1.0)*gconst122);
CheckValue<IkReal> x5142 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5141))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5142.valid){
continue;
}
CheckValue<IkReal> x5143=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5141)))),-1);
if(!x5143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5142.value)+(((1.5707963267949)*(x5143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5144=IKsin(j4);
IkReal x5145=IKcos(j4);
IkReal x5146=(gconst121*r11);
IkReal x5147=(gconst122*r00);
IkReal x5148=((1.0)*cj2);
IkReal x5149=((1.0)*sj0);
IkReal x5150=(gconst122*r10);
IkReal x5151=(gconst122*r20);
IkReal x5152=(cj1*sj2);
IkReal x5153=((1.0)*x5145);
IkReal x5154=(gconst121*x5144);
IkReal x5155=((1.0)*x5144);
IkReal x5156=(gconst121*x5145);
evalcond[0]=(((r21*x5154))+(((-1.0)*x5151*x5155))+(((-1.0)*r22*x5153)));
evalcond[1]=(((x5144*x5146))+cj0+(((-1.0)*r12*x5153))+(((-1.0)*x5150*x5155)));
evalcond[2]=(((r01*x5154))+(((-1.0)*x5149))+(((-1.0)*x5147*x5155))+(((-1.0)*r02*x5153)));
evalcond[3]=(((r21*x5156))+(((-1.0)*x5151*x5153))+((sj1*sj2))+(((-1.0)*cj1*x5148))+((r22*x5144)));
evalcond[4]=((((-1.0)*cj0*x5152))+((r01*x5156))+(((-1.0)*cj0*sj1*x5148))+((r02*x5144))+(((-1.0)*x5147*x5153)));
evalcond[5]=(((r12*x5144))+((x5145*x5146))+(((-1.0)*x5150*x5153))+(((-1.0)*sj0*sj1*x5148))+(((-1.0)*x5149*x5152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5157=((-1.0)*r11);
IkReal x5159 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5159)==0){
continue;
}
IkReal x5158=pow(x5159,-0.5);
CheckValue<IkReal> x5160 = IKatan2WithCheck(IkReal(x5157),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5160.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5160.value))));
IkReal gconst124=(x5157*x5158);
IkReal gconst125=((1.0)*r10*x5158);
CheckValue<IkReal> x5161 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5161.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5161.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5162=((-1.0)*r11);
CheckValue<IkReal> x5165 = IKatan2WithCheck(IkReal(x5162),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5165.valid){
continue;
}
IkReal x5163=((1.0)*(x5165.value));
IkReal x5164=x5158;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5163)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5163)));
IkReal gconst124=(x5162*x5164);
IkReal gconst125=((1.0)*r10*x5164);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5166=((-1.0)*r11);
CheckValue<IkReal> x5169 = IKatan2WithCheck(IkReal(x5166),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5169.valid){
continue;
}
IkReal x5167=((1.0)*(x5169.value));
IkReal x5168=x5158;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5167)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5167)));
IkReal gconst124=(x5166*x5168);
IkReal gconst125=((1.0)*r10*x5168);
IkReal x5170=r12*r12;
IkReal x5171=((1.0)*sj0);
IkReal x5172=(cj0*r02);
IkReal x5173=x5158;
j4eval[0]=((IKabs((((sj0*x5170*x5173))+((r12*x5172*x5173))+(((-1.0)*x5171*x5173)))))+(IKabs(((((-1.0)*r12*x5171))+(((-1.0)*x5172))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5174=((-1.0)*r11);
CheckValue<IkReal> x5177 = IKatan2WithCheck(IkReal(x5174),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5177.valid){
continue;
}
IkReal x5175=((1.0)*(x5177.value));
IkReal x5176=x5158;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5175)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5175)));
IkReal gconst124=(x5174*x5176);
IkReal gconst125=((1.0)*r10*x5176);
IkReal x5178=r12*r12;
IkReal x5179=((1.0)+(((-1.0)*x5178)));
IkReal x5180=(r22*sj1*sj2);
IkReal x5181=(cj1*cj2*r22);
CheckValue<IkReal> x5188=IKPowWithIntegerCheck(x5179,-1);
if(!x5188.valid){
continue;
}
IkReal x5182=x5188.value;
CheckValue<IkReal> x5189=IKPowWithIntegerCheck(((-1.0)+x5178),-1);
if(!x5189.valid){
continue;
}
IkReal x5183=x5189.value;
IkReal x5184=((1.0)*x5182);
if((x5179) < -0.00001)
continue;
IkReal x5185=IKsqrt(x5179);
IkReal x5186=(r12*x5183*x5185);
IkReal x5187=((((-1.0)*x5184*(r11*r11)*(r21*r21)))+(((-1.0)*x5184*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x5182)));
j4eval[0]=x5187;
j4eval[1]=IKsign(x5187);
j4eval[2]=((IKabs((x5180+(((-1.0)*x5181)))))+(IKabs((((x5181*x5186))+(((-1.0)*x5180*x5186))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5190=(sj1*sj2);
IkReal x5191=(gconst125*r20);
IkReal x5192=(gconst124*r21);
IkReal x5193=(cj1*cj2);
CheckValue<IkReal> x5194=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5192*x5192)))+(((-1.0)*(x5191*x5191)))+(((-1.0)*(r22*r22)))+(((2.0)*x5191*x5192)))),-1);
if(!x5194.valid){
continue;
}
CheckValue<IkReal> x5195 = IKatan2WithCheck(IkReal((((r22*x5190))+(((-1.0)*r22*x5193)))),IkReal(((((-1.0)*x5190*x5191))+(((-1.0)*x5192*x5193))+((x5191*x5193))+((x5190*x5192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5194.value)))+(x5195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5196=IKsin(j4);
IkReal x5197=IKcos(j4);
IkReal x5198=(gconst125*r20);
IkReal x5199=(gconst124*r01);
IkReal x5200=((1.0)*cj2);
IkReal x5201=((1.0)*sj0);
IkReal x5202=(gconst125*r00);
IkReal x5203=(gconst125*r10);
IkReal x5204=(cj1*sj2);
IkReal x5205=((1.0)*x5197);
IkReal x5206=((1.0)*x5196);
IkReal x5207=(gconst124*x5196);
IkReal x5208=(gconst124*x5197);
evalcond[0]=((((-1.0)*x5198*x5206))+(((-1.0)*r22*x5205))+((r21*x5207)));
evalcond[1]=((((-1.0)*x5203*x5206))+cj0+((r11*x5207))+(((-1.0)*r12*x5205)));
evalcond[2]=((((-1.0)*x5201))+(((-1.0)*r02*x5205))+((x5196*x5199))+(((-1.0)*x5202*x5206)));
evalcond[3]=(((sj1*sj2))+((r22*x5196))+(((-1.0)*x5198*x5205))+(((-1.0)*cj1*x5200))+((r21*x5208)));
evalcond[4]=(((r02*x5196))+(((-1.0)*cj0*x5204))+((x5197*x5199))+(((-1.0)*cj0*sj1*x5200))+(((-1.0)*x5202*x5205)));
evalcond[5]=((((-1.0)*x5203*x5205))+(((-1.0)*x5201*x5204))+((r11*x5208))+(((-1.0)*sj0*sj1*x5200))+((r12*x5196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5209=((1.0)*sj0);
IkReal x5210=((1.0)*cj0);
CheckValue<IkReal> x5211 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5209))+(((-1.0)*r02*x5210)))),IkReal(((((-1.0)*gconst124*r11*x5209))+((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5210))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5211.valid){
continue;
}
CheckValue<IkReal> x5212=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5211.value)+(((1.5707963267949)*(x5212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5213=IKsin(j4);
IkReal x5214=IKcos(j4);
IkReal x5215=(gconst125*r20);
IkReal x5216=(gconst124*r01);
IkReal x5217=((1.0)*cj2);
IkReal x5218=((1.0)*sj0);
IkReal x5219=(gconst125*r00);
IkReal x5220=(gconst125*r10);
IkReal x5221=(cj1*sj2);
IkReal x5222=((1.0)*x5214);
IkReal x5223=((1.0)*x5213);
IkReal x5224=(gconst124*x5213);
IkReal x5225=(gconst124*x5214);
evalcond[0]=((((-1.0)*x5215*x5223))+((r21*x5224))+(((-1.0)*r22*x5222)));
evalcond[1]=(cj0+(((-1.0)*r12*x5222))+(((-1.0)*x5220*x5223))+((r11*x5224)));
evalcond[2]=((((-1.0)*x5218))+(((-1.0)*x5219*x5223))+((x5213*x5216))+(((-1.0)*r02*x5222)));
evalcond[3]=((((-1.0)*x5215*x5222))+((r21*x5225))+((sj1*sj2))+((r22*x5213))+(((-1.0)*cj1*x5217)));
evalcond[4]=((((-1.0)*cj0*x5221))+(((-1.0)*x5219*x5222))+((x5214*x5216))+((r02*x5213))+(((-1.0)*cj0*sj1*x5217)));
evalcond[5]=(((r12*x5213))+(((-1.0)*x5218*x5221))+(((-1.0)*sj0*sj1*x5217))+(((-1.0)*x5220*x5222))+((r11*x5225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5226=((1.0)*gconst125);
CheckValue<IkReal> x5227 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5226))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5227.valid){
continue;
}
CheckValue<IkReal> x5228=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5226)))),-1);
if(!x5228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5227.value)+(((1.5707963267949)*(x5228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5229=IKsin(j4);
IkReal x5230=IKcos(j4);
IkReal x5231=(gconst125*r20);
IkReal x5232=(gconst124*r01);
IkReal x5233=((1.0)*cj2);
IkReal x5234=((1.0)*sj0);
IkReal x5235=(gconst125*r00);
IkReal x5236=(gconst125*r10);
IkReal x5237=(cj1*sj2);
IkReal x5238=((1.0)*x5230);
IkReal x5239=((1.0)*x5229);
IkReal x5240=(gconst124*x5229);
IkReal x5241=(gconst124*x5230);
evalcond[0]=((((-1.0)*r22*x5238))+(((-1.0)*x5231*x5239))+((r21*x5240)));
evalcond[1]=((((-1.0)*x5236*x5239))+((r11*x5240))+cj0+(((-1.0)*r12*x5238)));
evalcond[2]=((((-1.0)*x5234))+(((-1.0)*x5235*x5239))+(((-1.0)*r02*x5238))+((x5229*x5232)));
evalcond[3]=((((-1.0)*cj1*x5233))+((r22*x5229))+((sj1*sj2))+(((-1.0)*x5231*x5238))+((r21*x5241)));
evalcond[4]=((((-1.0)*x5235*x5238))+(((-1.0)*cj0*sj1*x5233))+((r02*x5229))+(((-1.0)*cj0*x5237))+((x5230*x5232)));
evalcond[5]=((((-1.0)*x5236*x5238))+(((-1.0)*x5234*x5237))+((r11*x5241))+(((-1.0)*sj0*sj1*x5233))+((r12*x5229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5242=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5242;
j4eval[1]=IKsign(x5242);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5243=((1.0)*cj5);
IkReal x5244=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5243)));
j4eval[0]=x5244;
j4eval[1]=((IKabs(((((-1.0)*r20*x5243))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5245=(sj1*sj2);
IkReal x5246=(cj5*r10);
IkReal x5247=(r11*sj5);
IkReal x5248=(cj1*cj2);
IkReal x5249=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x5249;
j4eval[1]=((IKabs((((r12*x5248))+(((-1.0)*r12*x5245)))))+(IKabs((((x5245*x5247))+(((-1.0)*x5247*x5248))+((x5246*x5248))+(((-1.0)*x5245*x5246))))));
j4eval[2]=IKsign(x5249);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5250=(sj1*sj2);
IkReal x5251=(cj5*r10);
IkReal x5252=(r11*sj5);
IkReal x5253=(cj1*cj2);
CheckValue<IkReal> x5254=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x5254.valid){
continue;
}
CheckValue<IkReal> x5255 = IKatan2WithCheck(IkReal((((x5250*x5252))+((x5251*x5253))+(((-1.0)*x5252*x5253))+(((-1.0)*x5250*x5251)))),IkReal((((r12*x5253))+(((-1.0)*r12*x5250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5254.value)))+(x5255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5256=IKcos(j4);
IkReal x5257=IKsin(j4);
IkReal x5258=(cj5*r00);
IkReal x5259=(cj5*r10);
IkReal x5260=(r21*sj5);
IkReal x5261=((1.0)*cj2);
IkReal x5262=(cj5*r20);
IkReal x5263=((1.0)*x5256);
IkReal x5264=((1.0)*x5257);
IkReal x5265=(sj5*x5257);
IkReal x5266=(sj5*x5256);
evalcond[0]=(((r12*x5257))+(((-1.0)*x5259*x5263))+((r11*x5266)));
evalcond[1]=((((-1.0)*r22*x5263))+((x5257*x5260))+(((-1.0)*x5262*x5264)));
evalcond[2]=((((-1.0)*x5258*x5264))+((r01*x5265))+(((-1.0)*r02*x5263)));
evalcond[3]=((1.0)+(((-1.0)*x5259*x5264))+(((-1.0)*r12*x5263))+((r11*x5265)));
evalcond[4]=(((r22*x5257))+((sj1*sj2))+((x5256*x5260))+(((-1.0)*x5262*x5263))+(((-1.0)*cj1*x5261)));
evalcond[5]=((((-1.0)*x5258*x5263))+((r01*x5266))+(((-1.0)*sj1*x5261))+(((-1.0)*cj1*sj2))+((r02*x5257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5267=((1.0)*cj5);
CheckValue<IkReal> x5268 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5268.valid){
continue;
}
CheckValue<IkReal> x5269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5267)))),-1);
if(!x5269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5268.value)+(((1.5707963267949)*(x5269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5270=IKcos(j4);
IkReal x5271=IKsin(j4);
IkReal x5272=(cj5*r00);
IkReal x5273=(cj5*r10);
IkReal x5274=(r21*sj5);
IkReal x5275=((1.0)*cj2);
IkReal x5276=(cj5*r20);
IkReal x5277=((1.0)*x5270);
IkReal x5278=((1.0)*x5271);
IkReal x5279=(sj5*x5271);
IkReal x5280=(sj5*x5270);
evalcond[0]=((((-1.0)*x5273*x5277))+((r11*x5280))+((r12*x5271)));
evalcond[1]=((((-1.0)*x5276*x5278))+((x5271*x5274))+(((-1.0)*r22*x5277)));
evalcond[2]=((((-1.0)*x5272*x5278))+((r01*x5279))+(((-1.0)*r02*x5277)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5277))+((r11*x5279))+(((-1.0)*x5273*x5278)));
evalcond[4]=(((r22*x5271))+(((-1.0)*cj1*x5275))+((sj1*sj2))+(((-1.0)*x5276*x5277))+((x5270*x5274)));
evalcond[5]=((((-1.0)*x5272*x5277))+((r02*x5271))+(((-1.0)*sj1*x5275))+(((-1.0)*cj1*sj2))+((r01*x5280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5281=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5281.valid){
continue;
}
CheckValue<IkReal> x5282 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5281.value)))+(x5282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5283=IKcos(j4);
IkReal x5284=IKsin(j4);
IkReal x5285=(cj5*r00);
IkReal x5286=(cj5*r10);
IkReal x5287=(r21*sj5);
IkReal x5288=((1.0)*cj2);
IkReal x5289=(cj5*r20);
IkReal x5290=((1.0)*x5283);
IkReal x5291=((1.0)*x5284);
IkReal x5292=(sj5*x5284);
IkReal x5293=(sj5*x5283);
evalcond[0]=(((r12*x5284))+(((-1.0)*x5286*x5290))+((r11*x5293)));
evalcond[1]=((((-1.0)*x5289*x5291))+(((-1.0)*r22*x5290))+((x5284*x5287)));
evalcond[2]=((((-1.0)*x5285*x5291))+((r01*x5292))+(((-1.0)*r02*x5290)));
evalcond[3]=((1.0)+(((-1.0)*x5286*x5291))+(((-1.0)*r12*x5290))+((r11*x5292)));
evalcond[4]=((((-1.0)*x5289*x5290))+((r22*x5284))+(((-1.0)*cj1*x5288))+((sj1*sj2))+((x5283*x5287)));
evalcond[5]=((((-1.0)*x5285*x5290))+((r02*x5284))+(((-1.0)*sj1*x5288))+(((-1.0)*cj1*sj2))+((r01*x5293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5294=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5294;
j4eval[1]=IKsign(x5294);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5295=((1.0)*cj5);
IkReal x5296=((((-1.0)*r21*x5295))+(((-1.0)*r20*sj5)));
j4eval[0]=x5296;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5295))))));
j4eval[2]=IKsign(x5296);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5297=cj5*cj5;
IkReal x5298=r11*r11;
IkReal x5299=(r11*sj5);
IkReal x5300=(cj5*r10);
IkReal x5301=((r12*r12)+(((-1.0)*x5297*x5298))+x5298+((x5297*(r10*r10)))+(((-2.0)*x5299*x5300)));
j4eval[0]=x5301;
j4eval[1]=IKsign(x5301);
j4eval[2]=((IKabs(r12))+(IKabs((x5299+(((-1.0)*x5300))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5302=cj5*cj5;
IkReal x5303=r11*r11;
IkReal x5304=(cj5*r10);
IkReal x5305=(r11*sj5);
CheckValue<IkReal> x5306 = IKatan2WithCheck(IkReal((x5305+(((-1.0)*x5304)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5306.valid){
continue;
}
CheckValue<IkReal> x5307=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5302*(r10*r10)))+x5303+(((-2.0)*x5304*x5305))+(((-1.0)*x5302*x5303)))),-1);
if(!x5307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5306.value)+(((1.5707963267949)*(x5307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5308=IKcos(j4);
IkReal x5309=IKsin(j4);
IkReal x5310=(cj5*r00);
IkReal x5311=(cj5*r10);
IkReal x5312=(r21*sj5);
IkReal x5313=(cj5*r20);
IkReal x5314=((1.0)*x5308);
IkReal x5315=((1.0)*x5309);
IkReal x5316=(sj5*x5309);
IkReal x5317=(sj5*x5308);
evalcond[0]=(((r12*x5309))+((r11*x5317))+(((-1.0)*x5311*x5314)));
evalcond[1]=((((-1.0)*x5313*x5315))+((x5309*x5312))+(((-1.0)*r22*x5314)));
evalcond[2]=((((-1.0)*x5310*x5315))+((r01*x5316))+(((-1.0)*r02*x5314)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5314))+((r11*x5316))+(((-1.0)*x5311*x5315)));
evalcond[4]=((((-1.0)*x5310*x5314))+((cj2*sj1))+((r01*x5317))+((cj1*sj2))+((r02*x5309)));
evalcond[5]=((((-1.0)*x5313*x5314))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5309))+((x5308*x5312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5318=((1.0)*cj5);
CheckValue<IkReal> x5319 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5319.valid){
continue;
}
CheckValue<IkReal> x5320=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5318))+(((-1.0)*r20*sj5)))),-1);
if(!x5320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5319.value)+(((1.5707963267949)*(x5320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5321=IKcos(j4);
IkReal x5322=IKsin(j4);
IkReal x5323=(cj5*r00);
IkReal x5324=(cj5*r10);
IkReal x5325=(r21*sj5);
IkReal x5326=(cj5*r20);
IkReal x5327=((1.0)*x5321);
IkReal x5328=((1.0)*x5322);
IkReal x5329=(sj5*x5322);
IkReal x5330=(sj5*x5321);
evalcond[0]=(((r11*x5330))+((r12*x5322))+(((-1.0)*x5324*x5327)));
evalcond[1]=(((x5322*x5325))+(((-1.0)*x5326*x5328))+(((-1.0)*r22*x5327)));
evalcond[2]=((((-1.0)*r02*x5327))+(((-1.0)*x5323*x5328))+((r01*x5329)));
evalcond[3]=((-1.0)+((r11*x5329))+(((-1.0)*r12*x5327))+(((-1.0)*x5324*x5328)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5323*x5327))+((r01*x5330))+((r02*x5322)));
evalcond[5]=((((-1.0)*x5326*x5327))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5321*x5325))+((r22*x5322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5331 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5331.valid){
continue;
}
CheckValue<IkReal> x5332=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5331.value)+(((1.5707963267949)*(x5332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5333=IKcos(j4);
IkReal x5334=IKsin(j4);
IkReal x5335=(cj5*r00);
IkReal x5336=(cj5*r10);
IkReal x5337=(r21*sj5);
IkReal x5338=(cj5*r20);
IkReal x5339=((1.0)*x5333);
IkReal x5340=((1.0)*x5334);
IkReal x5341=(sj5*x5334);
IkReal x5342=(sj5*x5333);
evalcond[0]=(((r12*x5334))+((r11*x5342))+(((-1.0)*x5336*x5339)));
evalcond[1]=(((x5334*x5337))+(((-1.0)*x5338*x5340))+(((-1.0)*r22*x5339)));
evalcond[2]=(((r01*x5341))+(((-1.0)*r02*x5339))+(((-1.0)*x5335*x5340)));
evalcond[3]=((-1.0)+(((-1.0)*x5336*x5340))+(((-1.0)*r12*x5339))+((r11*x5341)));
evalcond[4]=(((cj2*sj1))+((r01*x5342))+((cj1*sj2))+(((-1.0)*x5335*x5339))+((r02*x5334)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5338*x5339))+((r22*x5334))+((x5333*x5337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5343=((-1.0)*r00);
IkReal x5345 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5345)==0){
continue;
}
IkReal x5344=pow(x5345,-0.5);
CheckValue<IkReal> x5346 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5343),IKFAST_ATAN2_MAGTHRESH);
if(!x5346.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5346.value));
IkReal gconst127=(r01*x5344);
IkReal gconst128=(x5343*x5344);
CheckValue<IkReal> x5347 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5347.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5347.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5348=((-1.0)*r00);
IkReal x5349=x5344;
CheckValue<IkReal> x5351 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5348),IKFAST_ATAN2_MAGTHRESH);
if(!x5351.valid){
continue;
}
IkReal x5350=((-1.0)*(x5351.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5350;
IkReal gconst126=x5350;
IkReal gconst127=(r01*x5349);
IkReal gconst128=(x5348*x5349);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5352=((1.0)*sj0);
IkReal x5353=((1.0)*gconst127);
CheckValue<IkReal> x5354 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5352))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x5353))+(((-1.0)*gconst127*r11*x5352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5354.valid){
continue;
}
CheckValue<IkReal> x5355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5353))+(((-1.0)*gconst128*r21)))),-1);
if(!x5355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5354.value)+(((1.5707963267949)*(x5355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5356=IKsin(j4);
IkReal x5357=IKcos(j4);
IkReal x5358=(gconst127*r01);
IkReal x5359=(gconst128*r10);
IkReal x5360=((1.0)*cj2);
IkReal x5361=(gconst128*r00);
IkReal x5362=((1.0)*sj0);
IkReal x5363=(gconst128*r20);
IkReal x5364=(cj1*sj2);
IkReal x5365=((1.0)*x5357);
IkReal x5366=((1.0)*x5356);
IkReal x5367=(gconst127*x5357);
IkReal x5368=(gconst127*x5356);
evalcond[0]=((((-1.0)*r22*x5365))+((r21*x5368))+(((-1.0)*x5363*x5366)));
evalcond[1]=(cj0+(((-1.0)*x5359*x5366))+(((-1.0)*r12*x5365))+((r11*x5368)));
evalcond[2]=((((-1.0)*r02*x5365))+((x5356*x5358))+(((-1.0)*x5361*x5366))+(((-1.0)*x5362)));
evalcond[3]=(((sj1*sj2))+((r22*x5356))+((r21*x5367))+(((-1.0)*x5363*x5365))+(((-1.0)*cj1*x5360)));
evalcond[4]=(((x5357*x5358))+(((-1.0)*cj0*x5364))+(((-1.0)*cj0*sj1*x5360))+((r02*x5356))+(((-1.0)*x5361*x5365)));
evalcond[5]=((((-1.0)*sj0*sj1*x5360))+((r12*x5356))+(((-1.0)*x5362*x5364))+(((-1.0)*x5359*x5365))+((r11*x5367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5369=((1.0)*gconst128);
CheckValue<IkReal> x5370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5369))+(((-1.0)*gconst127*r10)))),-1);
if(!x5370.valid){
continue;
}
CheckValue<IkReal> x5371 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5370.value)))+(x5371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5372=IKsin(j4);
IkReal x5373=IKcos(j4);
IkReal x5374=(gconst127*r01);
IkReal x5375=(gconst128*r10);
IkReal x5376=((1.0)*cj2);
IkReal x5377=(gconst128*r00);
IkReal x5378=((1.0)*sj0);
IkReal x5379=(gconst128*r20);
IkReal x5380=(cj1*sj2);
IkReal x5381=((1.0)*x5373);
IkReal x5382=((1.0)*x5372);
IkReal x5383=(gconst127*x5373);
IkReal x5384=(gconst127*x5372);
evalcond[0]=((((-1.0)*x5379*x5382))+(((-1.0)*r22*x5381))+((r21*x5384)));
evalcond[1]=(cj0+((r11*x5384))+(((-1.0)*r12*x5381))+(((-1.0)*x5375*x5382)));
evalcond[2]=((((-1.0)*x5378))+((x5372*x5374))+(((-1.0)*r02*x5381))+(((-1.0)*x5377*x5382)));
evalcond[3]=(((r22*x5372))+((sj1*sj2))+(((-1.0)*cj1*x5376))+(((-1.0)*x5379*x5381))+((r21*x5383)));
evalcond[4]=((((-1.0)*cj0*x5380))+((r02*x5372))+((x5373*x5374))+(((-1.0)*cj0*sj1*x5376))+(((-1.0)*x5377*x5381)));
evalcond[5]=(((r11*x5383))+((r12*x5372))+(((-1.0)*x5375*x5381))+(((-1.0)*sj0*sj1*x5376))+(((-1.0)*x5378*x5380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5385=((-1.0)*r01);
IkReal x5387 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5387)==0){
continue;
}
IkReal x5386=pow(x5387,-0.5);
CheckValue<IkReal> x5388 = IKatan2WithCheck(IkReal(x5385),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5388.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5388.value))));
IkReal gconst130=(x5385*x5386);
IkReal gconst131=((1.0)*r00*x5386);
CheckValue<IkReal> x5389 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5389.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5389.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5390=((-1.0)*r01);
CheckValue<IkReal> x5393 = IKatan2WithCheck(IkReal(x5390),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5393.valid){
continue;
}
IkReal x5391=((1.0)*(x5393.value));
IkReal x5392=x5386;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5391)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5391)));
IkReal gconst130=(x5390*x5392);
IkReal gconst131=((1.0)*r00*x5392);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5394=((-1.0)*r01);
CheckValue<IkReal> x5397 = IKatan2WithCheck(IkReal(x5394),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5397.valid){
continue;
}
IkReal x5395=((1.0)*(x5397.value));
IkReal x5396=x5386;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5395)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5395)));
IkReal gconst130=(x5394*x5396);
IkReal gconst131=((1.0)*r00*x5396);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5398=((-1.0)*r01);
CheckValue<IkReal> x5401 = IKatan2WithCheck(IkReal(x5398),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5401.valid){
continue;
}
IkReal x5399=((1.0)*(x5401.value));
IkReal x5400=x5386;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5399)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5399)));
IkReal gconst130=(x5398*x5400);
IkReal gconst131=((1.0)*r00*x5400);
IkReal x5402=r02*r02;
IkReal x5403=(r12*sj0);
IkReal x5404=((1.0)*cj0);
IkReal x5405=x5386;
j4eval[0]=((IKabs(((((-1.0)*x5403))+(((-1.0)*r02*x5404)))))+(IKabs(((((-1.0)*x5404*x5405))+((r02*x5403*x5405))+((cj0*x5402*x5405))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5406=((1.0)*sj0);
IkReal x5407=((1.0)*gconst130);
CheckValue<IkReal> x5408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5407))+(((-1.0)*gconst131*r21)))),-1);
if(!x5408.valid){
continue;
}
CheckValue<IkReal> x5409 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5406)))),IkReal(((((-1.0)*cj0*r01*x5407))+((gconst131*r10*sj0))+(((-1.0)*gconst130*r11*x5406))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5408.value)))+(x5409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5410=IKsin(j4);
IkReal x5411=IKcos(j4);
IkReal x5412=(gconst131*r10);
IkReal x5413=(gconst130*r11);
IkReal x5414=((1.0)*cj2);
IkReal x5415=(gconst131*r20);
IkReal x5416=((1.0)*sj0);
IkReal x5417=(gconst131*r00);
IkReal x5418=(cj1*sj2);
IkReal x5419=((1.0)*x5411);
IkReal x5420=((1.0)*x5410);
IkReal x5421=(gconst130*x5411);
IkReal x5422=(gconst130*x5410);
evalcond[0]=(((r21*x5422))+(((-1.0)*x5415*x5420))+(((-1.0)*r22*x5419)));
evalcond[1]=(((x5410*x5413))+cj0+(((-1.0)*x5412*x5420))+(((-1.0)*r12*x5419)));
evalcond[2]=((((-1.0)*r02*x5419))+(((-1.0)*x5417*x5420))+((r01*x5422))+(((-1.0)*x5416)));
evalcond[3]=((((-1.0)*cj1*x5414))+(((-1.0)*x5415*x5419))+((r22*x5410))+((sj1*sj2))+((r21*x5421)));
evalcond[4]=(((r01*x5421))+(((-1.0)*cj0*sj1*x5414))+((r02*x5410))+(((-1.0)*x5417*x5419))+(((-1.0)*cj0*x5418)));
evalcond[5]=((((-1.0)*x5412*x5419))+(((-1.0)*x5416*x5418))+(((-1.0)*sj0*sj1*x5414))+((x5411*x5413))+((r12*x5410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5423=((1.0)*gconst131);
CheckValue<IkReal> x5424 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x5423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5424.valid){
continue;
}
CheckValue<IkReal> x5425=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x5423)))),-1);
if(!x5425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5424.value)+(((1.5707963267949)*(x5425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5426=IKsin(j4);
IkReal x5427=IKcos(j4);
IkReal x5428=(gconst131*r10);
IkReal x5429=(gconst130*r11);
IkReal x5430=((1.0)*cj2);
IkReal x5431=(gconst131*r20);
IkReal x5432=((1.0)*sj0);
IkReal x5433=(gconst131*r00);
IkReal x5434=(cj1*sj2);
IkReal x5435=((1.0)*x5427);
IkReal x5436=((1.0)*x5426);
IkReal x5437=(gconst130*x5427);
IkReal x5438=(gconst130*x5426);
evalcond[0]=((((-1.0)*x5431*x5436))+(((-1.0)*r22*x5435))+((r21*x5438)));
evalcond[1]=((((-1.0)*x5428*x5436))+cj0+((x5426*x5429))+(((-1.0)*r12*x5435)));
evalcond[2]=((((-1.0)*r02*x5435))+(((-1.0)*x5432))+(((-1.0)*x5433*x5436))+((r01*x5438)));
evalcond[3]=((((-1.0)*x5431*x5435))+(((-1.0)*cj1*x5430))+((r22*x5426))+((sj1*sj2))+((r21*x5437)));
evalcond[4]=((((-1.0)*cj0*sj1*x5430))+((r02*x5426))+(((-1.0)*x5433*x5435))+((r01*x5437))+(((-1.0)*cj0*x5434)));
evalcond[5]=((((-1.0)*x5428*x5435))+((r12*x5426))+((x5427*x5429))+(((-1.0)*sj0*sj1*x5430))+(((-1.0)*x5432*x5434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5439=((1.0)*gconst131);
CheckValue<IkReal> x5440 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5439)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5440.valid){
continue;
}
CheckValue<IkReal> x5441=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5439))+(((-1.0)*gconst130*r00)))),-1);
if(!x5441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5440.value)+(((1.5707963267949)*(x5441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5442=IKsin(j4);
IkReal x5443=IKcos(j4);
IkReal x5444=(gconst131*r10);
IkReal x5445=(gconst130*r11);
IkReal x5446=((1.0)*cj2);
IkReal x5447=(gconst131*r20);
IkReal x5448=((1.0)*sj0);
IkReal x5449=(gconst131*r00);
IkReal x5450=(cj1*sj2);
IkReal x5451=((1.0)*x5443);
IkReal x5452=((1.0)*x5442);
IkReal x5453=(gconst130*x5443);
IkReal x5454=(gconst130*x5442);
evalcond[0]=(((r21*x5454))+(((-1.0)*r22*x5451))+(((-1.0)*x5447*x5452)));
evalcond[1]=((((-1.0)*r12*x5451))+cj0+(((-1.0)*x5444*x5452))+((x5442*x5445)));
evalcond[2]=(((r01*x5454))+(((-1.0)*x5448))+(((-1.0)*r02*x5451))+(((-1.0)*x5449*x5452)));
evalcond[3]=(((r21*x5453))+(((-1.0)*cj1*x5446))+((sj1*sj2))+((r22*x5442))+(((-1.0)*x5447*x5451)));
evalcond[4]=((((-1.0)*cj0*sj1*x5446))+((r01*x5453))+(((-1.0)*cj0*x5450))+(((-1.0)*x5449*x5451))+((r02*x5442)));
evalcond[5]=((((-1.0)*sj0*sj1*x5446))+((r12*x5442))+(((-1.0)*x5444*x5451))+(((-1.0)*x5448*x5450))+((x5443*x5445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5455=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5455;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5455);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5456=((1.0)*cj5);
IkReal x5457=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5456)));
j4eval[0]=x5457;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5456))))));
j4eval[2]=IKsign(x5457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5458=cj5*cj5;
IkReal x5459=r01*r01;
IkReal x5460=(cj5*r00);
IkReal x5461=(r01*sj5);
IkReal x5462=((((-2.0)*x5460*x5461))+x5459+(r02*r02)+((x5458*(r00*r00)))+(((-1.0)*x5458*x5459)));
j4eval[0]=x5462;
j4eval[1]=IKsign(x5462);
j4eval[2]=((IKabs(r02))+(IKabs((x5461+(((-1.0)*x5460))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5463=cj5*cj5;
IkReal x5464=r01*r01;
IkReal x5465=(r01*sj5);
IkReal x5466=(cj5*r00);
CheckValue<IkReal> x5467=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5465*x5466))+x5464+(((-1.0)*x5463*x5464))+((x5463*(r00*r00)))+(r02*r02))),-1);
if(!x5467.valid){
continue;
}
CheckValue<IkReal> x5468 = IKatan2WithCheck(IkReal((x5465+(((-1.0)*x5466)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5467.value)))+(x5468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5469=IKcos(j4);
IkReal x5470=IKsin(j4);
IkReal x5471=(cj5*r00);
IkReal x5472=(cj5*r10);
IkReal x5473=(r21*sj5);
IkReal x5474=((1.0)*cj2);
IkReal x5475=(cj5*r20);
IkReal x5476=((1.0)*x5469);
IkReal x5477=((1.0)*x5470);
IkReal x5478=(sj5*x5470);
IkReal x5479=(sj5*x5469);
evalcond[0]=(((r01*x5479))+(((-1.0)*x5471*x5476))+((r02*x5470)));
evalcond[1]=((((-1.0)*x5475*x5477))+((x5470*x5473))+(((-1.0)*r22*x5476)));
evalcond[2]=((((-1.0)*r12*x5476))+(((-1.0)*x5472*x5477))+((r11*x5478)));
evalcond[3]=((-1.0)+((r01*x5478))+(((-1.0)*x5471*x5477))+(((-1.0)*r02*x5476)));
evalcond[4]=((((-1.0)*x5475*x5476))+(((-1.0)*cj1*x5474))+((sj1*sj2))+((x5469*x5473))+((r22*x5470)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5474))+(((-1.0)*x5472*x5476))+((r12*x5470))+((r11*x5479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5480=((1.0)*cj5);
CheckValue<IkReal> x5481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5480))+(((-1.0)*r10*sj5)))),-1);
if(!x5481.valid){
continue;
}
CheckValue<IkReal> x5482 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5480))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5481.value)))+(x5482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5483=IKcos(j4);
IkReal x5484=IKsin(j4);
IkReal x5485=(cj5*r00);
IkReal x5486=(cj5*r10);
IkReal x5487=(r21*sj5);
IkReal x5488=((1.0)*cj2);
IkReal x5489=(cj5*r20);
IkReal x5490=((1.0)*x5483);
IkReal x5491=((1.0)*x5484);
IkReal x5492=(sj5*x5484);
IkReal x5493=(sj5*x5483);
evalcond[0]=(((r01*x5493))+(((-1.0)*x5485*x5490))+((r02*x5484)));
evalcond[1]=((((-1.0)*x5489*x5491))+(((-1.0)*r22*x5490))+((x5484*x5487)));
evalcond[2]=((((-1.0)*r12*x5490))+((r11*x5492))+(((-1.0)*x5486*x5491)));
evalcond[3]=((-1.0)+((r01*x5492))+(((-1.0)*x5485*x5491))+(((-1.0)*r02*x5490)));
evalcond[4]=(((x5483*x5487))+(((-1.0)*x5489*x5490))+((sj1*sj2))+(((-1.0)*cj1*x5488))+((r22*x5484)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r12*x5484))+((r11*x5493))+(((-1.0)*x5486*x5490))+(((-1.0)*sj1*x5488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5494=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5494.valid){
continue;
}
CheckValue<IkReal> x5495 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5494.value)))+(x5495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5496=IKcos(j4);
IkReal x5497=IKsin(j4);
IkReal x5498=(cj5*r00);
IkReal x5499=(cj5*r10);
IkReal x5500=(r21*sj5);
IkReal x5501=((1.0)*cj2);
IkReal x5502=(cj5*r20);
IkReal x5503=((1.0)*x5496);
IkReal x5504=((1.0)*x5497);
IkReal x5505=(sj5*x5497);
IkReal x5506=(sj5*x5496);
evalcond[0]=((((-1.0)*x5498*x5503))+((r01*x5506))+((r02*x5497)));
evalcond[1]=((((-1.0)*x5502*x5504))+(((-1.0)*r22*x5503))+((x5497*x5500)));
evalcond[2]=((((-1.0)*r12*x5503))+((r11*x5505))+(((-1.0)*x5499*x5504)));
evalcond[3]=((-1.0)+(((-1.0)*x5498*x5504))+(((-1.0)*r02*x5503))+((r01*x5505)));
evalcond[4]=((((-1.0)*x5502*x5503))+((sj1*sj2))+(((-1.0)*cj1*x5501))+((x5496*x5500))+((r22*x5497)));
evalcond[5]=((((-1.0)*sj1*x5501))+((r12*x5497))+(((-1.0)*cj1*sj2))+((r11*x5506))+(((-1.0)*x5499*x5503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5507=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5507;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5508=((1.0)*cj5);
IkReal x5509=((((-1.0)*r21*x5508))+(((-1.0)*r20*sj5)));
j4eval[0]=x5509;
j4eval[1]=((IKabs(((((-1.0)*r10*x5508))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5510=cj5*cj5;
IkReal x5511=r01*r01;
IkReal x5512=(r01*sj5);
IkReal x5513=(cj5*r00);
IkReal x5514=((((-1.0)*x5510*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x5511))+(((2.0)*x5512*x5513))+((x5510*x5511)));
j4eval[0]=x5514;
j4eval[1]=IKsign(x5514);
j4eval[2]=((IKabs(r02))+(IKabs((x5512+(((-1.0)*x5513))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5515=cj5*cj5;
IkReal x5516=r01*r01;
IkReal x5517=(r01*sj5);
IkReal x5518=(cj5*r00);
CheckValue<IkReal> x5519 = IKatan2WithCheck(IkReal((x5517+(((-1.0)*x5518)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5519.valid){
continue;
}
CheckValue<IkReal> x5520=IKPowWithIntegerCheck(IKsign(((((2.0)*x5517*x5518))+((x5515*x5516))+(((-1.0)*(r02*r02)))+(((-1.0)*x5516))+(((-1.0)*x5515*(r00*r00))))),-1);
if(!x5520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5519.value)+(((1.5707963267949)*(x5520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5521=IKcos(j4);
IkReal x5522=IKsin(j4);
IkReal x5523=(cj5*r00);
IkReal x5524=(cj5*r10);
IkReal x5525=(r21*sj5);
IkReal x5526=(cj5*r20);
IkReal x5527=((1.0)*x5521);
IkReal x5528=((1.0)*x5522);
IkReal x5529=(sj5*x5522);
IkReal x5530=(sj5*x5521);
evalcond[0]=(((r02*x5522))+(((-1.0)*x5523*x5527))+((r01*x5530)));
evalcond[1]=((((-1.0)*r22*x5527))+((x5522*x5525))+(((-1.0)*x5526*x5528)));
evalcond[2]=(((r11*x5529))+(((-1.0)*x5524*x5528))+(((-1.0)*r12*x5527)));
evalcond[3]=((1.0)+(((-1.0)*x5523*x5528))+(((-1.0)*r02*x5527))+((r01*x5529)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x5530))+(((-1.0)*x5524*x5527))+((r12*x5522)));
evalcond[5]=(((x5521*x5525))+((r22*x5522))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5526*x5527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5531=((1.0)*cj5);
CheckValue<IkReal> x5532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5531))+(((-1.0)*r20*sj5)))),-1);
if(!x5532.valid){
continue;
}
CheckValue<IkReal> x5533 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x5531))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5532.value)))+(x5533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5534=IKcos(j4);
IkReal x5535=IKsin(j4);
IkReal x5536=(cj5*r00);
IkReal x5537=(cj5*r10);
IkReal x5538=(r21*sj5);
IkReal x5539=(cj5*r20);
IkReal x5540=((1.0)*x5534);
IkReal x5541=((1.0)*x5535);
IkReal x5542=(sj5*x5535);
IkReal x5543=(sj5*x5534);
evalcond[0]=((((-1.0)*x5536*x5540))+((r02*x5535))+((r01*x5543)));
evalcond[1]=((((-1.0)*x5539*x5541))+((x5535*x5538))+(((-1.0)*r22*x5540)));
evalcond[2]=(((r11*x5542))+(((-1.0)*x5537*x5541))+(((-1.0)*r12*x5540)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5540))+(((-1.0)*x5536*x5541))+((r01*x5542)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x5543))+(((-1.0)*x5537*x5540))+((r12*x5535)));
evalcond[5]=((((-1.0)*x5539*x5540))+((x5534*x5538))+((r22*x5535))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5544 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5544.valid){
continue;
}
CheckValue<IkReal> x5545=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5544.value)+(((1.5707963267949)*(x5545.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5546=IKcos(j4);
IkReal x5547=IKsin(j4);
IkReal x5548=(cj5*r00);
IkReal x5549=(cj5*r10);
IkReal x5550=(r21*sj5);
IkReal x5551=(cj5*r20);
IkReal x5552=((1.0)*x5546);
IkReal x5553=((1.0)*x5547);
IkReal x5554=(sj5*x5547);
IkReal x5555=(sj5*x5546);
evalcond[0]=(((r01*x5555))+(((-1.0)*x5548*x5552))+((r02*x5547)));
evalcond[1]=((((-1.0)*x5551*x5553))+((x5547*x5550))+(((-1.0)*r22*x5552)));
evalcond[2]=(((r11*x5554))+(((-1.0)*x5549*x5553))+(((-1.0)*r12*x5552)));
evalcond[3]=((1.0)+((r01*x5554))+(((-1.0)*x5548*x5553))+(((-1.0)*r02*x5552)));
evalcond[4]=(((cj2*sj1))+((r12*x5547))+((r11*x5555))+((cj1*sj2))+(((-1.0)*x5549*x5552)));
evalcond[5]=((((-1.0)*x5551*x5552))+((x5546*x5550))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5556=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5556);
rxp1_1=(px*r21);
rxp1_2=(r11*x5556);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5557=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5557);
rxp1_1=(px*r21);
rxp1_2=(r11*x5557);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5558=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5558);
rxp1_1=(px*r21);
rxp1_2=(r11*x5558);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5561=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x5561.valid){
continue;
}
IkReal x5559=x5561.value;
IkReal x5560=(sj0*x5559);
cj4array[0]=(((cj1*sj2*x5560))+((cj2*sj1*x5560)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5562=IKsin(j4);
IkReal x5563=IKcos(j4);
IkReal x5564=(r21*sj5);
IkReal x5565=((1.0)*cj5*r20);
evalcond[0]=(r02*x5562);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x5563)));
evalcond[2]=(((x5562*x5564))+(((-1.0)*x5562*x5565)));
evalcond[3]=((((-1.0)*cj5*r10*x5562))+((r11*sj5*x5562)));
evalcond[4]=((((-1.0)*x5563*x5565))+((x5563*x5564))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5567=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5567.valid){
continue;
}
IkReal x5566=x5567.value;
cj4array[0]=(((cj1*cj2*x5566))+(((-1.0)*sj1*sj2*x5566)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5568=IKsin(j4);
IkReal x5569=IKcos(j4);
IkReal x5570=((1.0)*sj0);
IkReal x5571=((1.0)*cj5);
IkReal x5572=(sj5*x5568);
evalcond[0]=(r02*x5568);
evalcond[1]=((((-1.0)*x5570))+(((-1.0)*r02*x5569)));
evalcond[2]=(((r21*x5572))+(((-1.0)*r20*x5568*x5571)));
evalcond[3]=((((-1.0)*r10*x5568*x5571))+((r11*x5572)));
evalcond[4]=((((-1.0)*r10*x5569*x5571))+(((-1.0)*cj1*sj2*x5570))+(((-1.0)*cj2*sj1*x5570))+((r11*sj5*x5569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5573=IKPowWithIntegerCheck(r02,-1);
if(!x5573.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x5573.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5574=IKsin(j4);
IkReal x5575=IKcos(j4);
IkReal x5576=((1.0)*cj1);
IkReal x5577=(r21*sj5);
IkReal x5578=((1.0)*cj5);
IkReal x5579=(r11*sj5);
evalcond[0]=(r02*x5574);
evalcond[1]=(((x5574*x5577))+(((-1.0)*r20*x5574*x5578)));
evalcond[2]=(((x5574*x5579))+(((-1.0)*r10*x5574*x5578)));
evalcond[3]=(((x5575*x5577))+((sj1*sj2))+(((-1.0)*cj2*x5576))+(((-1.0)*r20*x5575*x5578)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x5576))+((x5575*x5579))+(((-1.0)*r10*x5575*x5578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5580=((1.0)*sj0);
IkReal x5581=((1.0)*cj0);
CheckValue<IkReal> x5582 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5580))+(((-1.0)*r02*x5581)))),IkReal(((((-1.0)*r01*sj5*x5581))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5582.valid){
continue;
}
CheckValue<IkReal> x5583=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5582.value)+(((1.5707963267949)*(x5583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5584=IKsin(j4);
IkReal x5585=IKcos(j4);
IkReal x5586=(cj5*r00);
IkReal x5587=(cj5*r10);
IkReal x5588=(r21*sj5);
IkReal x5589=((1.0)*cj2);
IkReal x5590=((1.0)*sj0);
IkReal x5591=(cj1*sj2);
IkReal x5592=(cj5*r20);
IkReal x5593=((1.0)*x5585);
IkReal x5594=((1.0)*x5584);
IkReal x5595=(sj5*x5584);
IkReal x5596=(sj5*x5585);
evalcond[0]=((((-1.0)*x5592*x5594))+((x5584*x5588))+(((-1.0)*r22*x5593)));
evalcond[1]=((((-1.0)*r12*x5593))+cj0+((r11*x5595))+(((-1.0)*x5587*x5594)));
evalcond[2]=((((-1.0)*x5586*x5594))+(((-1.0)*r02*x5593))+(((-1.0)*x5590))+((r01*x5595)));
evalcond[3]=((((-1.0)*x5592*x5593))+((sj1*sj2))+((x5585*x5588))+(((-1.0)*cj1*x5589))+((r22*x5584)));
evalcond[4]=((((-1.0)*cj0*x5591))+(((-1.0)*x5586*x5593))+((r02*x5584))+(((-1.0)*cj0*sj1*x5589))+((r01*x5596)));
evalcond[5]=((((-1.0)*x5590*x5591))+((r11*x5596))+((r12*x5584))+(((-1.0)*x5587*x5593))+(((-1.0)*sj0*sj1*x5589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5597=((1.0)*cj5);
CheckValue<IkReal> x5598 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5598.valid){
continue;
}
CheckValue<IkReal> x5599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5597))+(((-1.0)*r10*sj5)))),-1);
if(!x5599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5598.value)+(((1.5707963267949)*(x5599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5600=IKsin(j4);
IkReal x5601=IKcos(j4);
IkReal x5602=(cj5*r00);
IkReal x5603=(cj5*r10);
IkReal x5604=(r21*sj5);
IkReal x5605=((1.0)*cj2);
IkReal x5606=((1.0)*sj0);
IkReal x5607=(cj1*sj2);
IkReal x5608=(cj5*r20);
IkReal x5609=((1.0)*x5601);
IkReal x5610=((1.0)*x5600);
IkReal x5611=(sj5*x5600);
IkReal x5612=(sj5*x5601);
evalcond[0]=(((x5600*x5604))+(((-1.0)*r22*x5609))+(((-1.0)*x5608*x5610)));
evalcond[1]=(cj0+(((-1.0)*x5603*x5610))+(((-1.0)*r12*x5609))+((r11*x5611)));
evalcond[2]=((((-1.0)*x5602*x5610))+((r01*x5611))+(((-1.0)*r02*x5609))+(((-1.0)*x5606)));
evalcond[3]=((((-1.0)*x5608*x5609))+((sj1*sj2))+((x5601*x5604))+(((-1.0)*cj1*x5605))+((r22*x5600)));
evalcond[4]=(((r02*x5600))+(((-1.0)*x5602*x5609))+((r01*x5612))+(((-1.0)*cj0*x5607))+(((-1.0)*cj0*sj1*x5605)));
evalcond[5]=((((-1.0)*x5603*x5609))+((r12*x5600))+(((-1.0)*x5606*x5607))+((r11*x5612))+(((-1.0)*sj0*sj1*x5605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5613=((1.0)*cj5);
CheckValue<IkReal> x5614=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5613))+(((-1.0)*r00*sj5)))),-1);
if(!x5614.valid){
continue;
}
CheckValue<IkReal> x5615 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5614.value)))+(x5615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5616=IKsin(j4);
IkReal x5617=IKcos(j4);
IkReal x5618=(cj5*r00);
IkReal x5619=(cj5*r10);
IkReal x5620=(r21*sj5);
IkReal x5621=((1.0)*cj2);
IkReal x5622=((1.0)*sj0);
IkReal x5623=(cj1*sj2);
IkReal x5624=(cj5*r20);
IkReal x5625=((1.0)*x5617);
IkReal x5626=((1.0)*x5616);
IkReal x5627=(sj5*x5616);
IkReal x5628=(sj5*x5617);
evalcond[0]=((((-1.0)*r22*x5625))+(((-1.0)*x5624*x5626))+((x5616*x5620)));
evalcond[1]=(cj0+(((-1.0)*x5619*x5626))+(((-1.0)*r12*x5625))+((r11*x5627)));
evalcond[2]=((((-1.0)*x5618*x5626))+((r01*x5627))+(((-1.0)*r02*x5625))+(((-1.0)*x5622)));
evalcond[3]=(((x5617*x5620))+((sj1*sj2))+(((-1.0)*x5624*x5625))+(((-1.0)*cj1*x5621))+((r22*x5616)));
evalcond[4]=((((-1.0)*x5618*x5625))+((r02*x5616))+(((-1.0)*cj0*sj1*x5621))+((r01*x5628))+(((-1.0)*cj0*x5623)));
evalcond[5]=((((-1.0)*x5619*x5625))+((r12*x5616))+(((-1.0)*x5622*x5623))+((r11*x5628))+(((-1.0)*sj0*sj1*x5621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5629=r21*r21;
IkReal x5630=cj5*cj5;
IkReal x5631=(sj1*sj2);
IkReal x5632=(r21*sj5);
IkReal x5633=(cj1*cj2);
IkReal x5634=(cj5*r20);
CheckValue<IkReal> x5635 = IKatan2WithCheck(IkReal((((r22*x5631))+(((-1.0)*r22*x5633)))),IkReal(((((-1.0)*x5632*x5633))+(((-1.0)*x5631*x5634))+((x5631*x5632))+((x5633*x5634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5635.valid){
continue;
}
CheckValue<IkReal> x5636=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5630*(r20*r20)))+((x5629*x5630))+(((2.0)*x5632*x5634))+(((-1.0)*(r22*r22)))+(((-1.0)*x5629)))),-1);
if(!x5636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5635.value)+(((1.5707963267949)*(x5636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5637=IKsin(j4);
IkReal x5638=IKcos(j4);
IkReal x5639=(r21*sj5);
IkReal x5640=(cj5*r20);
IkReal x5641=((1.0)*x5638);
evalcond[0]=((((-1.0)*r22*x5641))+(((-1.0)*x5637*x5640))+((x5637*x5639)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5637))+(((-1.0)*x5640*x5641))+((x5638*x5639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5642=(cj5*sj4);
IkReal x5643=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x5643))+(((-1.0)*r00*x5642)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x5643))+((cj4*r12))+((r10*x5642)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x5643))+(((-1.0)*r00*x5642))))+IKsqr(((((-1.0)*r11*x5643))+((cj4*r12))+((r10*x5642))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x5643))+(((-1.0)*r00*x5642))), ((((-1.0)*r11*x5643))+((cj4*r12))+((r10*x5642))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5644=IKcos(j0);
IkReal x5645=IKsin(j0);
IkReal x5646=((0.39225)*cj1);
IkReal x5647=(cj5*r01);
IkReal x5648=((1.0)*sj1);
IkReal x5649=(r11*sj5);
IkReal x5650=((0.425)*sj1);
IkReal x5651=(r00*sj5);
IkReal x5652=(cj5*r11);
IkReal x5653=((1.0)*cj4);
IkReal x5654=(r01*sj5);
IkReal x5655=((0.39225)*sj1);
IkReal x5656=(r10*sj5);
IkReal x5657=(sj2*x5645);
IkReal x5658=(cj1*x5644);
IkReal x5659=(cj2*x5645);
IkReal x5660=(cj5*x5653);
IkReal x5661=(cj2*x5644);
IkReal x5662=(sj2*x5644);
IkReal x5663=((1.0)*cj5*sj4);
evalcond[0]=(x5644+(((-1.0)*r12*x5653))+((sj4*x5649))+(((-1.0)*r10*x5663)));
evalcond[1]=((((-1.0)*r00*x5663))+((sj4*x5654))+(((-1.0)*r02*x5653))+(((-1.0)*x5645)));
evalcond[2]=(x5651+x5647+(((-1.0)*x5648*x5662))+((cj2*x5658)));
evalcond[3]=(x5656+x5652+(((-1.0)*x5648*x5657))+((cj1*x5659)));
evalcond[4]=((((-1.0)*r00*x5660))+(((-1.0)*x5648*x5661))+((cj4*x5654))+((r02*sj4))+(((-1.0)*sj2*x5658)));
evalcond[5]=(((cj4*x5649))+(((-1.0)*x5648*x5659))+(((-1.0)*r10*x5660))+((r12*sj4))+(((-1.0)*cj1*x5657)));
evalcond[6]=((((-0.10915)*x5645))+(((-0.09465)*x5651))+(((-0.09465)*x5647))+((x5644*x5650))+(((-1.0)*px))+((x5646*x5662))+((x5655*x5661)));
evalcond[7]=(((x5645*x5650))+(((-0.09465)*x5656))+(((-0.09465)*x5652))+(((0.10915)*x5644))+((x5655*x5659))+((x5646*x5657))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5664=((1.0)*cj5);
IkReal x5665=((1.0)*sj5);
CheckValue<IkReal> x5666 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5665))+(((-1.0)*r11*x5664)))),IkReal(((((-1.0)*r01*x5664))+(((-1.0)*r00*x5665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5666.valid){
continue;
}
CheckValue<IkReal> x5667=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x5667.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5666.value)+(((1.5707963267949)*(x5667.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5668=IKcos(j0);
IkReal x5669=IKsin(j0);
IkReal x5670=((0.39225)*cj1);
IkReal x5671=((1.0)*sj1);
IkReal x5672=(cj1*cj2);
IkReal x5673=(cj5*r11);
IkReal x5674=(r00*sj5);
IkReal x5675=(cj5*r01);
IkReal x5676=((0.39225)*cj2);
IkReal x5677=(r10*sj5);
IkReal x5678=(sj2*x5669);
IkReal x5679=(sj1*x5668);
IkReal x5680=(sj2*x5668);
IkReal x5681=(sj1*x5669);
evalcond[0]=(x5674+x5675+((x5668*x5672))+(((-1.0)*x5671*x5680)));
evalcond[1]=(x5673+x5677+(((-1.0)*x5671*x5678))+((x5669*x5672)));
evalcond[2]=((((-0.09465)*x5674))+(((-0.09465)*x5675))+(((0.425)*x5679))+(((-0.10915)*x5669))+((x5676*x5679))+(((-1.0)*px))+((x5670*x5680)));
evalcond[3]=((((-0.09465)*x5673))+(((-0.09465)*x5677))+(((0.10915)*x5668))+((x5670*x5678))+(((-1.0)*py))+(((0.425)*x5681))+((x5676*x5681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5682=((1.0)*cj5);
IkReal x5683=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5682)));
j4eval[0]=x5683;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5682))))));
j4eval[2]=IKsign(x5683);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5684=((1.0)*cj5);
IkReal x5685=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5684)));
j4eval[0]=x5685;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5684))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x5685);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5686=((1.0)*sj0);
IkReal x5687=((1.0)*cj0);
IkReal x5688=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5688;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x5687))+(((-1.0)*r11*sj5*x5686)))))+(IKabs(((((-1.0)*r02*x5687))+(((-1.0)*r12*x5686))))));
j4eval[2]=IKsign(x5688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5689=((-1.0)*r20);
IkReal x5691 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5691)==0){
continue;
}
IkReal x5690=pow(x5691,-0.5);
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5689),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5692.value));
IkReal gconst115=(r21*x5690);
IkReal gconst116=(x5689*x5690);
CheckValue<IkReal> x5693 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5693.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5693.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5694=((-1.0)*r20);
IkReal x5695=x5690;
CheckValue<IkReal> x5697 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5694),IKFAST_ATAN2_MAGTHRESH);
if(!x5697.valid){
continue;
}
IkReal x5696=((-1.0)*(x5697.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5696;
IkReal gconst114=x5696;
IkReal gconst115=(r21*x5695);
IkReal gconst116=(x5694*x5695);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5698=((-1.0)*r20);
IkReal x5699=x5690;
CheckValue<IkReal> x5701 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5698),IKFAST_ATAN2_MAGTHRESH);
if(!x5701.valid){
continue;
}
IkReal x5700=((-1.0)*(x5701.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5700;
IkReal gconst114=x5700;
IkReal gconst115=(r21*x5699);
IkReal gconst116=(x5698*x5699);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5702=((-1.0)*r20);
IkReal x5703=x5690;
CheckValue<IkReal> x5705 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5702),IKFAST_ATAN2_MAGTHRESH);
if(!x5705.valid){
continue;
}
IkReal x5704=((-1.0)*(x5705.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5704;
IkReal gconst114=x5704;
IkReal gconst115=(r21*x5703);
IkReal gconst116=(x5702*x5703);
IkReal x5706=((1.0)*(r22*r22));
CheckValue<IkReal> x5710=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5706))),-1);
if(!x5710.valid){
continue;
}
IkReal x5707=x5710.value;
IkReal x5708=((1.0)*x5707);
IkReal x5709=((((-1.0)*x5708*(r20*r20*r20*r20)))+(((-2.0)*x5707*(r20*r20)*(r21*r21)))+(((-1.0)*x5708*(r21*r21*r21*r21)))+(((-1.0)*x5706)));
j4eval[0]=x5709;
j4eval[1]=IKsign(x5709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5711=(sj1*sj2);
IkReal x5712=(gconst116*r20);
IkReal x5713=(gconst115*r21);
IkReal x5714=(cj1*cj2);
CheckValue<IkReal> x5715 = IKatan2WithCheck(IkReal((((r22*x5711))+(((-1.0)*r22*x5714)))),IkReal(((((-1.0)*x5711*x5712))+((x5711*x5713))+((x5712*x5714))+(((-1.0)*x5713*x5714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5715.valid){
continue;
}
CheckValue<IkReal> x5716=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5713*x5713)))+(((-1.0)*(x5712*x5712)))+(((2.0)*x5712*x5713))+(((-1.0)*(r22*r22))))),-1);
if(!x5716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5715.value)+(((1.5707963267949)*(x5716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5717=IKsin(j4);
IkReal x5718=IKcos(j4);
IkReal x5719=(gconst115*r21);
IkReal x5720=((1.0)*cj2);
IkReal x5721=((1.0)*sj0);
IkReal x5722=(cj1*sj2);
IkReal x5723=((1.0)*x5718);
IkReal x5724=(gconst115*x5718);
IkReal x5725=(gconst115*x5717);
IkReal x5726=((1.0)*gconst116*x5717);
evalcond[0]=((((-1.0)*r20*x5726))+(((-1.0)*r22*x5723))+((x5717*x5719)));
evalcond[1]=(((r11*x5725))+cj0+(((-1.0)*r12*x5723))+(((-1.0)*r10*x5726)));
evalcond[2]=(((r01*x5725))+(((-1.0)*x5721))+(((-1.0)*r02*x5723))+(((-1.0)*r00*x5726)));
evalcond[3]=(((r22*x5717))+((sj1*sj2))+(((-1.0)*gconst116*r20*x5723))+(((-1.0)*cj1*x5720))+((x5718*x5719)));
evalcond[4]=(((r02*x5717))+(((-1.0)*cj0*sj1*x5720))+((r01*x5724))+(((-1.0)*gconst116*r00*x5723))+(((-1.0)*cj0*x5722)));
evalcond[5]=(((r11*x5724))+(((-1.0)*gconst116*r10*x5723))+((r12*x5717))+(((-1.0)*x5721*x5722))+(((-1.0)*sj0*sj1*x5720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5727=((1.0)*gconst116);
CheckValue<IkReal> x5728=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5727)))),-1);
if(!x5728.valid){
continue;
}
CheckValue<IkReal> x5729 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5727))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5728.value)))+(x5729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5730=IKsin(j4);
IkReal x5731=IKcos(j4);
IkReal x5732=(gconst115*r21);
IkReal x5733=((1.0)*cj2);
IkReal x5734=((1.0)*sj0);
IkReal x5735=(cj1*sj2);
IkReal x5736=((1.0)*x5731);
IkReal x5737=(gconst115*x5731);
IkReal x5738=(gconst115*x5730);
IkReal x5739=((1.0)*gconst116*x5730);
evalcond[0]=((((-1.0)*r20*x5739))+((x5730*x5732))+(((-1.0)*r22*x5736)));
evalcond[1]=(((r11*x5738))+cj0+(((-1.0)*r12*x5736))+(((-1.0)*r10*x5739)));
evalcond[2]=(((r01*x5738))+(((-1.0)*x5734))+(((-1.0)*r02*x5736))+(((-1.0)*r00*x5739)));
evalcond[3]=(((sj1*sj2))+((x5731*x5732))+(((-1.0)*gconst116*r20*x5736))+(((-1.0)*cj1*x5733))+((r22*x5730)));
evalcond[4]=(((r01*x5737))+(((-1.0)*cj0*sj1*x5733))+((r02*x5730))+(((-1.0)*gconst116*r00*x5736))+(((-1.0)*cj0*x5735)));
evalcond[5]=(((r11*x5737))+((r12*x5730))+(((-1.0)*x5734*x5735))+(((-1.0)*gconst116*r10*x5736))+(((-1.0)*sj0*sj1*x5733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5740=((1.0)*gconst116);
CheckValue<IkReal> x5741 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5740))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5741.valid){
continue;
}
CheckValue<IkReal> x5742=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5740))+(((-1.0)*gconst115*r00)))),-1);
if(!x5742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5741.value)+(((1.5707963267949)*(x5742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5743=IKsin(j4);
IkReal x5744=IKcos(j4);
IkReal x5745=(gconst115*r21);
IkReal x5746=((1.0)*cj2);
IkReal x5747=((1.0)*sj0);
IkReal x5748=(cj1*sj2);
IkReal x5749=((1.0)*x5744);
IkReal x5750=(gconst115*x5744);
IkReal x5751=(gconst115*x5743);
IkReal x5752=((1.0)*gconst116*x5743);
evalcond[0]=((((-1.0)*r20*x5752))+((x5743*x5745))+(((-1.0)*r22*x5749)));
evalcond[1]=(cj0+(((-1.0)*r10*x5752))+(((-1.0)*r12*x5749))+((r11*x5751)));
evalcond[2]=((((-1.0)*r00*x5752))+(((-1.0)*r02*x5749))+((r01*x5751))+(((-1.0)*x5747)));
evalcond[3]=((((-1.0)*cj1*x5746))+((r22*x5743))+(((-1.0)*gconst116*r20*x5749))+((x5744*x5745))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x5748))+((r01*x5750))+(((-1.0)*cj0*sj1*x5746))+(((-1.0)*gconst116*r00*x5749))+((r02*x5743)));
evalcond[5]=((((-1.0)*gconst116*r10*x5749))+(((-1.0)*sj0*sj1*x5746))+(((-1.0)*x5747*x5748))+((r11*x5750))+((r12*x5743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5753=((-1.0)*r21);
IkReal x5755 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5755)==0){
continue;
}
IkReal x5754=pow(x5755,-0.5);
CheckValue<IkReal> x5756 = IKatan2WithCheck(IkReal(x5753),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5756.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5756.value))));
IkReal gconst118=(x5753*x5754);
IkReal gconst119=((1.0)*r20*x5754);
CheckValue<IkReal> x5757 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5757.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5757.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5758=((-1.0)*r21);
CheckValue<IkReal> x5761 = IKatan2WithCheck(IkReal(x5758),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5761.valid){
continue;
}
IkReal x5759=((1.0)*(x5761.value));
IkReal x5760=x5754;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5759)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5759)));
IkReal gconst118=(x5758*x5760);
IkReal gconst119=((1.0)*r20*x5760);
IkReal x5762=r22*r22;
IkReal x5763=((1.0)*x5762);
CheckValue<IkReal> x5767=IKPowWithIntegerCheck(((-1.0)+x5762),-1);
if(!x5767.valid){
continue;
}
IkReal x5764=x5767.value;
if((((1.0)+(((-1.0)*x5763)))) < -0.00001)
continue;
IkReal x5765=IKsqrt(((1.0)+(((-1.0)*x5763))));
IkReal x5766=(cj0*x5764*x5765);
j4eval[0]=((IKabs(((((-1.0)*x5763*x5766))+x5766)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5768=((-1.0)*r21);
CheckValue<IkReal> x5771 = IKatan2WithCheck(IkReal(x5768),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5771.valid){
continue;
}
IkReal x5769=((1.0)*(x5771.value));
IkReal x5770=x5754;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5769)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5769)));
IkReal gconst118=(x5768*x5770);
IkReal gconst119=((1.0)*r20*x5770);
IkReal x5772=r22*r22;
IkReal x5773=((1.0)*x5772);
CheckValue<IkReal> x5777=IKPowWithIntegerCheck(((-1.0)+x5772),-1);
if(!x5777.valid){
continue;
}
IkReal x5774=x5777.value;
if((((1.0)+(((-1.0)*x5773)))) < -0.00001)
continue;
IkReal x5775=IKsqrt(((1.0)+(((-1.0)*x5773))));
IkReal x5776=(sj0*x5774*x5775);
j4eval[0]=((IKabs(((((-1.0)*x5773*x5776))+x5776)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5778=((-1.0)*r21);
CheckValue<IkReal> x5781 = IKatan2WithCheck(IkReal(x5778),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5781.valid){
continue;
}
IkReal x5779=((1.0)*(x5781.value));
IkReal x5780=x5754;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5779)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5779)));
IkReal gconst118=(x5778*x5780);
IkReal gconst119=((1.0)*r20*x5780);
IkReal x5782=r22*r22;
IkReal x5783=(r12*sj0);
IkReal x5784=(cj0*r02);
CheckValue<IkReal> x5788=IKPowWithIntegerCheck(((-1.0)+x5782),-1);
if(!x5788.valid){
continue;
}
IkReal x5785=x5788.value;
if((((1.0)+(((-1.0)*x5782)))) < -0.00001)
continue;
IkReal x5786=IKsqrt(((1.0)+(((-1.0)*x5782))));
IkReal x5787=(r22*x5785*x5786);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5783))+(((-1.0)*x5784)))))+(IKabs((((x5784*x5787))+((x5783*x5787))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5789=((1.0)*sj0);
IkReal x5790=((1.0)*gconst118);
CheckValue<IkReal> x5791=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5790)))),-1);
if(!x5791.valid){
continue;
}
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5789)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5789))+(((-1.0)*cj0*r01*x5790))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5791.value)))+(x5792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5793=IKsin(j4);
IkReal x5794=IKcos(j4);
IkReal x5795=(gconst118*r01);
IkReal x5796=(gconst119*r20);
IkReal x5797=((1.0)*cj2);
IkReal x5798=(gconst119*r10);
IkReal x5799=(gconst119*r00);
IkReal x5800=(gconst118*r21);
IkReal x5801=((1.0)*sj0);
IkReal x5802=(gconst118*r11);
IkReal x5803=(cj1*sj2);
IkReal x5804=((1.0)*x5794);
IkReal x5805=((1.0)*x5793);
evalcond[0]=((((-1.0)*r22*x5804))+(((-1.0)*x5796*x5805))+((x5793*x5800)));
evalcond[1]=(cj0+(((-1.0)*x5798*x5805))+(((-1.0)*r12*x5804))+((x5793*x5802)));
evalcond[2]=(((x5793*x5795))+(((-1.0)*x5801))+(((-1.0)*x5799*x5805))+(((-1.0)*r02*x5804)));
evalcond[3]=(((x5794*x5800))+(((-1.0)*cj1*x5797))+((sj1*sj2))+(((-1.0)*x5796*x5804))+((r22*x5793)));
evalcond[4]=((((-1.0)*cj0*sj1*x5797))+(((-1.0)*cj0*x5803))+((x5794*x5795))+(((-1.0)*x5799*x5804))+((r02*x5793)));
evalcond[5]=(((x5794*x5802))+(((-1.0)*x5798*x5804))+((r12*x5793))+(((-1.0)*sj0*sj1*x5797))+(((-1.0)*x5801*x5803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5806=((1.0)*gconst119);
CheckValue<IkReal> x5807=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5806)))),-1);
if(!x5807.valid){
continue;
}
CheckValue<IkReal> x5808 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x5806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5807.value)))+(x5808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5809=IKsin(j4);
IkReal x5810=IKcos(j4);
IkReal x5811=(gconst118*r01);
IkReal x5812=(gconst119*r20);
IkReal x5813=((1.0)*cj2);
IkReal x5814=(gconst119*r10);
IkReal x5815=(gconst119*r00);
IkReal x5816=(gconst118*r21);
IkReal x5817=((1.0)*sj0);
IkReal x5818=(gconst118*r11);
IkReal x5819=(cj1*sj2);
IkReal x5820=((1.0)*x5810);
IkReal x5821=((1.0)*x5809);
evalcond[0]=((((-1.0)*r22*x5820))+((x5809*x5816))+(((-1.0)*x5812*x5821)));
evalcond[1]=(cj0+(((-1.0)*x5814*x5821))+((x5809*x5818))+(((-1.0)*r12*x5820)));
evalcond[2]=((((-1.0)*r02*x5820))+(((-1.0)*x5817))+((x5809*x5811))+(((-1.0)*x5815*x5821)));
evalcond[3]=((((-1.0)*cj1*x5813))+((x5810*x5816))+((sj1*sj2))+((r22*x5809))+(((-1.0)*x5812*x5820)));
evalcond[4]=(((x5810*x5811))+(((-1.0)*cj0*sj1*x5813))+(((-1.0)*x5815*x5820))+((r02*x5809))+(((-1.0)*cj0*x5819)));
evalcond[5]=(((x5810*x5818))+(((-1.0)*x5814*x5820))+(((-1.0)*sj0*sj1*x5813))+((r12*x5809))+(((-1.0)*x5817*x5819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5822=((1.0)*gconst119);
CheckValue<IkReal> x5823=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5822))+(((-1.0)*gconst118*r00)))),-1);
if(!x5823.valid){
continue;
}
CheckValue<IkReal> x5824 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5823.value)))+(x5824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5825=IKsin(j4);
IkReal x5826=IKcos(j4);
IkReal x5827=(gconst118*r01);
IkReal x5828=(gconst119*r20);
IkReal x5829=((1.0)*cj2);
IkReal x5830=(gconst119*r10);
IkReal x5831=(gconst119*r00);
IkReal x5832=(gconst118*r21);
IkReal x5833=((1.0)*sj0);
IkReal x5834=(gconst118*r11);
IkReal x5835=(cj1*sj2);
IkReal x5836=((1.0)*x5826);
IkReal x5837=((1.0)*x5825);
evalcond[0]=((((-1.0)*r22*x5836))+((x5825*x5832))+(((-1.0)*x5828*x5837)));
evalcond[1]=(cj0+(((-1.0)*x5830*x5837))+((x5825*x5834))+(((-1.0)*r12*x5836)));
evalcond[2]=((((-1.0)*x5833))+(((-1.0)*r02*x5836))+(((-1.0)*x5831*x5837))+((x5825*x5827)));
evalcond[3]=((((-1.0)*cj1*x5829))+((sj1*sj2))+(((-1.0)*x5828*x5836))+((x5826*x5832))+((r22*x5825)));
evalcond[4]=(((r02*x5825))+(((-1.0)*cj0*sj1*x5829))+(((-1.0)*x5831*x5836))+(((-1.0)*cj0*x5835))+((x5826*x5827)));
evalcond[5]=((((-1.0)*x5833*x5835))+(((-1.0)*x5830*x5836))+((r12*x5825))+(((-1.0)*sj0*sj1*x5829))+((x5826*x5834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5838=((-1.0)*r10);
IkReal x5840 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5840)==0){
continue;
}
IkReal x5839=pow(x5840,-0.5);
CheckValue<IkReal> x5841 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5838),IKFAST_ATAN2_MAGTHRESH);
if(!x5841.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5841.value));
IkReal gconst121=(r11*x5839);
IkReal gconst122=(x5838*x5839);
CheckValue<IkReal> x5842 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5842.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5842.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5843=((-1.0)*r10);
IkReal x5844=x5839;
CheckValue<IkReal> x5846 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5843),IKFAST_ATAN2_MAGTHRESH);
if(!x5846.valid){
continue;
}
IkReal x5845=((-1.0)*(x5846.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5845;
IkReal gconst120=x5845;
IkReal gconst121=(r11*x5844);
IkReal gconst122=(x5843*x5844);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5847=((1.0)*sj0);
IkReal x5848=((1.0)*gconst121);
CheckValue<IkReal> x5849 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5847)))),IkReal(((((-1.0)*gconst121*r11*x5847))+((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x5848))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5849.valid){
continue;
}
CheckValue<IkReal> x5850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5848))+(((-1.0)*gconst122*r21)))),-1);
if(!x5850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5849.value)+(((1.5707963267949)*(x5850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5851=IKsin(j4);
IkReal x5852=IKcos(j4);
IkReal x5853=(gconst121*r11);
IkReal x5854=(gconst122*r00);
IkReal x5855=((1.0)*cj2);
IkReal x5856=((1.0)*sj0);
IkReal x5857=(gconst122*r10);
IkReal x5858=(gconst122*r20);
IkReal x5859=(cj1*sj2);
IkReal x5860=((1.0)*x5852);
IkReal x5861=(gconst121*x5851);
IkReal x5862=((1.0)*x5851);
IkReal x5863=(gconst121*x5852);
evalcond[0]=((((-1.0)*r22*x5860))+((r21*x5861))+(((-1.0)*x5858*x5862)));
evalcond[1]=(cj0+((x5851*x5853))+(((-1.0)*x5857*x5862))+(((-1.0)*r12*x5860)));
evalcond[2]=((((-1.0)*x5854*x5862))+(((-1.0)*x5856))+(((-1.0)*r02*x5860))+((r01*x5861)));
evalcond[3]=(((r21*x5863))+(((-1.0)*cj1*x5855))+(((-1.0)*x5858*x5860))+((sj1*sj2))+((r22*x5851)));
evalcond[4]=((((-1.0)*x5854*x5860))+(((-1.0)*cj0*x5859))+((r02*x5851))+(((-1.0)*cj0*sj1*x5855))+((r01*x5863)));
evalcond[5]=(((r12*x5851))+((x5852*x5853))+(((-1.0)*x5856*x5859))+(((-1.0)*x5857*x5860))+(((-1.0)*sj0*sj1*x5855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5864=((1.0)*gconst122);
CheckValue<IkReal> x5865=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5864)))),-1);
if(!x5865.valid){
continue;
}
CheckValue<IkReal> x5866 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5864))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5865.value)))+(x5866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5867=IKsin(j4);
IkReal x5868=IKcos(j4);
IkReal x5869=(gconst121*r11);
IkReal x5870=(gconst122*r00);
IkReal x5871=((1.0)*cj2);
IkReal x5872=((1.0)*sj0);
IkReal x5873=(gconst122*r10);
IkReal x5874=(gconst122*r20);
IkReal x5875=(cj1*sj2);
IkReal x5876=((1.0)*x5868);
IkReal x5877=(gconst121*x5867);
IkReal x5878=((1.0)*x5867);
IkReal x5879=(gconst121*x5868);
evalcond[0]=((((-1.0)*r22*x5876))+(((-1.0)*x5874*x5878))+((r21*x5877)));
evalcond[1]=((((-1.0)*r12*x5876))+cj0+((x5867*x5869))+(((-1.0)*x5873*x5878)));
evalcond[2]=((((-1.0)*r02*x5876))+(((-1.0)*x5872))+(((-1.0)*x5870*x5878))+((r01*x5877)));
evalcond[3]=(((r22*x5867))+(((-1.0)*x5874*x5876))+((sj1*sj2))+(((-1.0)*cj1*x5871))+((r21*x5879)));
evalcond[4]=(((r02*x5867))+(((-1.0)*x5870*x5876))+(((-1.0)*cj0*sj1*x5871))+((r01*x5879))+(((-1.0)*cj0*x5875)));
evalcond[5]=((((-1.0)*x5872*x5875))+(((-1.0)*x5873*x5876))+((r12*x5867))+((x5868*x5869))+(((-1.0)*sj0*sj1*x5871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5880=((-1.0)*r11);
IkReal x5882 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5882)==0){
continue;
}
IkReal x5881=pow(x5882,-0.5);
CheckValue<IkReal> x5883 = IKatan2WithCheck(IkReal(x5880),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5883.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5883.value))));
IkReal gconst124=(x5880*x5881);
IkReal gconst125=((1.0)*r10*x5881);
CheckValue<IkReal> x5884 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5884.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5884.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5885=((-1.0)*r11);
CheckValue<IkReal> x5888 = IKatan2WithCheck(IkReal(x5885),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5888.valid){
continue;
}
IkReal x5886=((1.0)*(x5888.value));
IkReal x5887=x5881;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5886)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5886)));
IkReal gconst124=(x5885*x5887);
IkReal gconst125=((1.0)*r10*x5887);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5889=((-1.0)*r11);
CheckValue<IkReal> x5892 = IKatan2WithCheck(IkReal(x5889),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5892.valid){
continue;
}
IkReal x5890=((1.0)*(x5892.value));
IkReal x5891=x5881;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5890)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5890)));
IkReal gconst124=(x5889*x5891);
IkReal gconst125=((1.0)*r10*x5891);
IkReal x5893=r12*r12;
IkReal x5894=((1.0)*sj0);
IkReal x5895=(cj0*r02);
IkReal x5896=x5881;
j4eval[0]=((IKabs(((((-1.0)*r12*x5894))+(((-1.0)*x5895)))))+(IKabs((((r12*x5895*x5896))+((sj0*x5893*x5896))+(((-1.0)*x5894*x5896))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5897=((-1.0)*r11);
CheckValue<IkReal> x5900 = IKatan2WithCheck(IkReal(x5897),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5900.valid){
continue;
}
IkReal x5898=((1.0)*(x5900.value));
IkReal x5899=x5881;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5898)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5898)));
IkReal gconst124=(x5897*x5899);
IkReal gconst125=((1.0)*r10*x5899);
IkReal x5901=r12*r12;
IkReal x5902=((1.0)+(((-1.0)*x5901)));
IkReal x5903=(r22*sj1*sj2);
IkReal x5904=(cj1*cj2*r22);
CheckValue<IkReal> x5911=IKPowWithIntegerCheck(x5902,-1);
if(!x5911.valid){
continue;
}
IkReal x5905=x5911.value;
CheckValue<IkReal> x5912=IKPowWithIntegerCheck(((-1.0)+x5901),-1);
if(!x5912.valid){
continue;
}
IkReal x5906=x5912.value;
IkReal x5907=((1.0)*x5905);
if((x5902) < -0.00001)
continue;
IkReal x5908=IKsqrt(x5902);
IkReal x5909=(r12*x5906*x5908);
IkReal x5910=((((-2.0)*r10*r11*r20*r21*x5905))+(((-1.0)*(r22*r22)))+(((-1.0)*x5907*(r11*r11)*(r21*r21)))+(((-1.0)*x5907*(r10*r10)*(r20*r20))));
j4eval[0]=x5910;
j4eval[1]=IKsign(x5910);
j4eval[2]=((IKabs(((((-1.0)*x5903*x5909))+((x5904*x5909)))))+(IKabs((x5903+(((-1.0)*x5904))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5913=(sj1*sj2);
IkReal x5914=(gconst125*r20);
IkReal x5915=(gconst124*r21);
IkReal x5916=(cj1*cj2);
CheckValue<IkReal> x5917=IKPowWithIntegerCheck(IKsign(((((2.0)*x5914*x5915))+(((-1.0)*(x5915*x5915)))+(((-1.0)*(x5914*x5914)))+(((-1.0)*(r22*r22))))),-1);
if(!x5917.valid){
continue;
}
CheckValue<IkReal> x5918 = IKatan2WithCheck(IkReal((((r22*x5913))+(((-1.0)*r22*x5916)))),IkReal(((((-1.0)*x5913*x5914))+(((-1.0)*x5915*x5916))+((x5914*x5916))+((x5913*x5915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5917.value)))+(x5918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5919=IKsin(j4);
IkReal x5920=IKcos(j4);
IkReal x5921=(gconst125*r20);
IkReal x5922=(gconst124*r01);
IkReal x5923=((1.0)*cj2);
IkReal x5924=((1.0)*sj0);
IkReal x5925=(gconst125*r00);
IkReal x5926=(gconst125*r10);
IkReal x5927=(cj1*sj2);
IkReal x5928=((1.0)*x5920);
IkReal x5929=((1.0)*x5919);
IkReal x5930=(gconst124*x5919);
IkReal x5931=(gconst124*x5920);
evalcond[0]=((((-1.0)*r22*x5928))+((r21*x5930))+(((-1.0)*x5921*x5929)));
evalcond[1]=(cj0+((r11*x5930))+(((-1.0)*r12*x5928))+(((-1.0)*x5926*x5929)));
evalcond[2]=((((-1.0)*x5925*x5929))+((x5919*x5922))+(((-1.0)*r02*x5928))+(((-1.0)*x5924)));
evalcond[3]=(((r22*x5919))+(((-1.0)*cj1*x5923))+((sj1*sj2))+((r21*x5931))+(((-1.0)*x5921*x5928)));
evalcond[4]=((((-1.0)*cj0*x5927))+(((-1.0)*x5925*x5928))+(((-1.0)*cj0*sj1*x5923))+((x5920*x5922))+((r02*x5919)));
evalcond[5]=(((r12*x5919))+((r11*x5931))+(((-1.0)*sj0*sj1*x5923))+(((-1.0)*x5924*x5927))+(((-1.0)*x5926*x5928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5932=((1.0)*sj0);
IkReal x5933=((1.0)*cj0);
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5933))+(((-1.0)*r12*x5932)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5933))+(((-1.0)*gconst124*r11*x5932))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
CheckValue<IkReal> x5935=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5934.value)+(((1.5707963267949)*(x5935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5936=IKsin(j4);
IkReal x5937=IKcos(j4);
IkReal x5938=(gconst125*r20);
IkReal x5939=(gconst124*r01);
IkReal x5940=((1.0)*cj2);
IkReal x5941=((1.0)*sj0);
IkReal x5942=(gconst125*r00);
IkReal x5943=(gconst125*r10);
IkReal x5944=(cj1*sj2);
IkReal x5945=((1.0)*x5937);
IkReal x5946=((1.0)*x5936);
IkReal x5947=(gconst124*x5936);
IkReal x5948=(gconst124*x5937);
evalcond[0]=((((-1.0)*r22*x5945))+((r21*x5947))+(((-1.0)*x5938*x5946)));
evalcond[1]=(cj0+(((-1.0)*r12*x5945))+((r11*x5947))+(((-1.0)*x5943*x5946)));
evalcond[2]=((((-1.0)*x5942*x5946))+(((-1.0)*x5941))+((x5936*x5939))+(((-1.0)*r02*x5945)));
evalcond[3]=(((sj1*sj2))+((r22*x5936))+((r21*x5948))+(((-1.0)*x5938*x5945))+(((-1.0)*cj1*x5940)));
evalcond[4]=((((-1.0)*x5942*x5945))+(((-1.0)*cj0*sj1*x5940))+((x5937*x5939))+(((-1.0)*cj0*x5944))+((r02*x5936)));
evalcond[5]=((((-1.0)*sj0*sj1*x5940))+(((-1.0)*x5941*x5944))+((r12*x5936))+((r11*x5948))+(((-1.0)*x5943*x5945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5949=((1.0)*gconst125);
CheckValue<IkReal> x5950=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5949)))),-1);
if(!x5950.valid){
continue;
}
CheckValue<IkReal> x5951 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5949))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5950.value)))+(x5951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5952=IKsin(j4);
IkReal x5953=IKcos(j4);
IkReal x5954=(gconst125*r20);
IkReal x5955=(gconst124*r01);
IkReal x5956=((1.0)*cj2);
IkReal x5957=((1.0)*sj0);
IkReal x5958=(gconst125*r00);
IkReal x5959=(gconst125*r10);
IkReal x5960=(cj1*sj2);
IkReal x5961=((1.0)*x5953);
IkReal x5962=((1.0)*x5952);
IkReal x5963=(gconst124*x5952);
IkReal x5964=(gconst124*x5953);
evalcond[0]=((((-1.0)*x5954*x5962))+(((-1.0)*r22*x5961))+((r21*x5963)));
evalcond[1]=(cj0+(((-1.0)*r12*x5961))+((r11*x5963))+(((-1.0)*x5959*x5962)));
evalcond[2]=(((x5952*x5955))+(((-1.0)*x5958*x5962))+(((-1.0)*x5957))+(((-1.0)*r02*x5961)));
evalcond[3]=((((-1.0)*x5954*x5961))+((sj1*sj2))+(((-1.0)*cj1*x5956))+((r21*x5964))+((r22*x5952)));
evalcond[4]=(((x5953*x5955))+((r02*x5952))+(((-1.0)*cj0*x5960))+(((-1.0)*cj0*sj1*x5956))+(((-1.0)*x5958*x5961)));
evalcond[5]=((((-1.0)*x5957*x5960))+((r12*x5952))+(((-1.0)*sj0*sj1*x5956))+((r11*x5964))+(((-1.0)*x5959*x5961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5965=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5965;
j4eval[1]=IKsign(x5965);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5966=((1.0)*cj5);
IkReal x5967=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5966)));
j4eval[0]=x5967;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5966)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5968=(sj1*sj2);
IkReal x5969=(cj5*r10);
IkReal x5970=(r11*sj5);
IkReal x5971=(cj1*cj2);
IkReal x5972=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x5972;
j4eval[1]=((IKabs(((((-1.0)*r12*x5968))+((r12*x5971)))))+(IKabs((((x5969*x5971))+(((-1.0)*x5968*x5969))+((x5968*x5970))+(((-1.0)*x5970*x5971))))));
j4eval[2]=IKsign(x5972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5973=(sj1*sj2);
IkReal x5974=(cj5*r10);
IkReal x5975=(r11*sj5);
IkReal x5976=(cj1*cj2);
CheckValue<IkReal> x5977=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x5977.valid){
continue;
}
CheckValue<IkReal> x5978 = IKatan2WithCheck(IkReal(((((-1.0)*x5975*x5976))+((x5973*x5975))+((x5974*x5976))+(((-1.0)*x5973*x5974)))),IkReal(((((-1.0)*r12*x5973))+((r12*x5976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5977.value)))+(x5978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5979=IKcos(j4);
IkReal x5980=IKsin(j4);
IkReal x5981=(cj5*r00);
IkReal x5982=(cj5*r10);
IkReal x5983=(r21*sj5);
IkReal x5984=((1.0)*cj2);
IkReal x5985=(cj5*r20);
IkReal x5986=((1.0)*x5979);
IkReal x5987=((1.0)*x5980);
IkReal x5988=(sj5*x5980);
IkReal x5989=(sj5*x5979);
evalcond[0]=(((r12*x5980))+((r11*x5989))+(((-1.0)*x5982*x5986)));
evalcond[1]=((((-1.0)*x5985*x5987))+((x5980*x5983))+(((-1.0)*r22*x5986)));
evalcond[2]=((((-1.0)*r02*x5986))+(((-1.0)*x5981*x5987))+((r01*x5988)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5986))+((r11*x5988))+(((-1.0)*x5982*x5987)));
evalcond[4]=(((x5979*x5983))+(((-1.0)*x5985*x5986))+((sj1*sj2))+(((-1.0)*cj1*x5984))+((r22*x5980)));
evalcond[5]=((((-1.0)*sj1*x5984))+((r02*x5980))+(((-1.0)*cj1*sj2))+(((-1.0)*x5981*x5986))+((r01*x5989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5990=((1.0)*cj5);
CheckValue<IkReal> x5991 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5990))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5991.valid){
continue;
}
CheckValue<IkReal> x5992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5990)))),-1);
if(!x5992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5991.value)+(((1.5707963267949)*(x5992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5993=IKcos(j4);
IkReal x5994=IKsin(j4);
IkReal x5995=(cj5*r00);
IkReal x5996=(cj5*r10);
IkReal x5997=(r21*sj5);
IkReal x5998=((1.0)*cj2);
IkReal x5999=(cj5*r20);
IkReal x6000=((1.0)*x5993);
IkReal x6001=((1.0)*x5994);
IkReal x6002=(sj5*x5994);
IkReal x6003=(sj5*x5993);
evalcond[0]=(((r12*x5994))+((r11*x6003))+(((-1.0)*x5996*x6000)));
evalcond[1]=(((x5994*x5997))+(((-1.0)*r22*x6000))+(((-1.0)*x5999*x6001)));
evalcond[2]=(((r01*x6002))+(((-1.0)*r02*x6000))+(((-1.0)*x5995*x6001)));
evalcond[3]=((1.0)+((r11*x6002))+(((-1.0)*x5996*x6001))+(((-1.0)*r12*x6000)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x5998))+((x5993*x5997))+(((-1.0)*x5999*x6000))+((r22*x5994)));
evalcond[5]=((((-1.0)*sj1*x5998))+((r02*x5994))+(((-1.0)*cj1*sj2))+((r01*x6003))+(((-1.0)*x5995*x6000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6004=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6004.valid){
continue;
}
CheckValue<IkReal> x6005 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6004.value)))+(x6005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6006=IKcos(j4);
IkReal x6007=IKsin(j4);
IkReal x6008=(cj5*r00);
IkReal x6009=(cj5*r10);
IkReal x6010=(r21*sj5);
IkReal x6011=((1.0)*cj2);
IkReal x6012=(cj5*r20);
IkReal x6013=((1.0)*x6006);
IkReal x6014=((1.0)*x6007);
IkReal x6015=(sj5*x6007);
IkReal x6016=(sj5*x6006);
evalcond[0]=(((r12*x6007))+((r11*x6016))+(((-1.0)*x6009*x6013)));
evalcond[1]=((((-1.0)*r22*x6013))+(((-1.0)*x6012*x6014))+((x6007*x6010)));
evalcond[2]=(((r01*x6015))+(((-1.0)*r02*x6013))+(((-1.0)*x6008*x6014)));
evalcond[3]=((1.0)+((r11*x6015))+(((-1.0)*r12*x6013))+(((-1.0)*x6009*x6014)));
evalcond[4]=(((r22*x6007))+((x6006*x6010))+(((-1.0)*cj1*x6011))+((sj1*sj2))+(((-1.0)*x6012*x6013)));
evalcond[5]=(((r01*x6016))+(((-1.0)*x6008*x6013))+(((-1.0)*cj1*sj2))+((r02*x6007))+(((-1.0)*sj1*x6011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6017=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6017;
j4eval[1]=IKsign(x6017);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6018=((1.0)*cj5);
IkReal x6019=((((-1.0)*r21*x6018))+(((-1.0)*r20*sj5)));
j4eval[0]=x6019;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6018))))));
j4eval[2]=IKsign(x6019);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6020=cj5*cj5;
IkReal x6021=r11*r11;
IkReal x6022=(r11*sj5);
IkReal x6023=(cj5*r10);
IkReal x6024=((r12*r12)+x6021+((x6020*(r10*r10)))+(((-1.0)*x6020*x6021))+(((-2.0)*x6022*x6023)));
j4eval[0]=x6024;
j4eval[1]=IKsign(x6024);
j4eval[2]=((IKabs((x6022+(((-1.0)*x6023)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6025=cj5*cj5;
IkReal x6026=r11*r11;
IkReal x6027=(cj5*r10);
IkReal x6028=(r11*sj5);
CheckValue<IkReal> x6029 = IKatan2WithCheck(IkReal((x6028+(((-1.0)*x6027)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6029.valid){
continue;
}
CheckValue<IkReal> x6030=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6025*x6026))+(r12*r12)+x6026+((x6025*(r10*r10)))+(((-2.0)*x6027*x6028)))),-1);
if(!x6030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6029.value)+(((1.5707963267949)*(x6030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6031=IKcos(j4);
IkReal x6032=IKsin(j4);
IkReal x6033=(cj5*r00);
IkReal x6034=(cj5*r10);
IkReal x6035=(r21*sj5);
IkReal x6036=(cj5*r20);
IkReal x6037=((1.0)*x6031);
IkReal x6038=((1.0)*x6032);
IkReal x6039=(sj5*x6032);
IkReal x6040=(sj5*x6031);
evalcond[0]=(((r11*x6040))+((r12*x6032))+(((-1.0)*x6034*x6037)));
evalcond[1]=((((-1.0)*x6036*x6038))+((x6032*x6035))+(((-1.0)*r22*x6037)));
evalcond[2]=((((-1.0)*x6033*x6038))+((r01*x6039))+(((-1.0)*r02*x6037)));
evalcond[3]=((-1.0)+((r11*x6039))+(((-1.0)*r12*x6037))+(((-1.0)*x6034*x6038)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x6032))+(((-1.0)*x6033*x6037))+((r01*x6040)));
evalcond[5]=(((r22*x6032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6036*x6037))+((x6031*x6035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6041=((1.0)*cj5);
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
CheckValue<IkReal> x6043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6041))+(((-1.0)*r20*sj5)))),-1);
if(!x6043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6042.value)+(((1.5707963267949)*(x6043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6044=IKcos(j4);
IkReal x6045=IKsin(j4);
IkReal x6046=(cj5*r00);
IkReal x6047=(cj5*r10);
IkReal x6048=(r21*sj5);
IkReal x6049=(cj5*r20);
IkReal x6050=((1.0)*x6044);
IkReal x6051=((1.0)*x6045);
IkReal x6052=(sj5*x6045);
IkReal x6053=(sj5*x6044);
evalcond[0]=((((-1.0)*x6047*x6050))+((r12*x6045))+((r11*x6053)));
evalcond[1]=((((-1.0)*r22*x6050))+(((-1.0)*x6049*x6051))+((x6045*x6048)));
evalcond[2]=(((r01*x6052))+(((-1.0)*x6046*x6051))+(((-1.0)*r02*x6050)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6050))+(((-1.0)*x6047*x6051))+((r11*x6052)));
evalcond[4]=(((cj2*sj1))+((r01*x6053))+((cj1*sj2))+(((-1.0)*x6046*x6050))+((r02*x6045)));
evalcond[5]=(((r22*x6045))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6049*x6050))+((x6044*x6048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6054 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6054.valid){
continue;
}
CheckValue<IkReal> x6055=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6054.value)+(((1.5707963267949)*(x6055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6056=IKcos(j4);
IkReal x6057=IKsin(j4);
IkReal x6058=(cj5*r00);
IkReal x6059=(cj5*r10);
IkReal x6060=(r21*sj5);
IkReal x6061=(cj5*r20);
IkReal x6062=((1.0)*x6056);
IkReal x6063=((1.0)*x6057);
IkReal x6064=(sj5*x6057);
IkReal x6065=(sj5*x6056);
evalcond[0]=(((r12*x6057))+(((-1.0)*x6059*x6062))+((r11*x6065)));
evalcond[1]=((((-1.0)*r22*x6062))+((x6057*x6060))+(((-1.0)*x6061*x6063)));
evalcond[2]=(((r01*x6064))+(((-1.0)*r02*x6062))+(((-1.0)*x6058*x6063)));
evalcond[3]=((-1.0)+(((-1.0)*x6059*x6063))+((r11*x6064))+(((-1.0)*r12*x6062)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x6065))+((r02*x6057))+(((-1.0)*x6058*x6062)));
evalcond[5]=(((r22*x6057))+((x6056*x6060))+(((-1.0)*x6061*x6062))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6066=((-1.0)*r00);
IkReal x6068 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6068)==0){
continue;
}
IkReal x6067=pow(x6068,-0.5);
CheckValue<IkReal> x6069 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6066),IKFAST_ATAN2_MAGTHRESH);
if(!x6069.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6069.value));
IkReal gconst127=(r01*x6067);
IkReal gconst128=(x6066*x6067);
CheckValue<IkReal> x6070 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6070.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6070.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6071=((-1.0)*r00);
IkReal x6072=x6067;
CheckValue<IkReal> x6074 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6071),IKFAST_ATAN2_MAGTHRESH);
if(!x6074.valid){
continue;
}
IkReal x6073=((-1.0)*(x6074.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x6073;
IkReal gconst126=x6073;
IkReal gconst127=(r01*x6072);
IkReal gconst128=(x6071*x6072);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6075=((1.0)*sj0);
IkReal x6076=((1.0)*gconst127);
CheckValue<IkReal> x6077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6076))+(((-1.0)*gconst128*r21)))),-1);
if(!x6077.valid){
continue;
}
CheckValue<IkReal> x6078 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6075)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x6076))+(((-1.0)*gconst127*r11*x6075))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6077.value)))+(x6078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6079=IKsin(j4);
IkReal x6080=IKcos(j4);
IkReal x6081=(gconst127*r01);
IkReal x6082=(gconst128*r10);
IkReal x6083=((1.0)*cj2);
IkReal x6084=(gconst128*r00);
IkReal x6085=((1.0)*sj0);
IkReal x6086=(gconst128*r20);
IkReal x6087=(cj1*sj2);
IkReal x6088=((1.0)*x6080);
IkReal x6089=((1.0)*x6079);
IkReal x6090=(gconst127*x6080);
IkReal x6091=(gconst127*x6079);
evalcond[0]=((((-1.0)*r22*x6088))+((r21*x6091))+(((-1.0)*x6086*x6089)));
evalcond[1]=((((-1.0)*r12*x6088))+cj0+(((-1.0)*x6082*x6089))+((r11*x6091)));
evalcond[2]=(((x6079*x6081))+(((-1.0)*x6085))+(((-1.0)*r02*x6088))+(((-1.0)*x6084*x6089)));
evalcond[3]=(((r22*x6079))+((sj1*sj2))+(((-1.0)*cj1*x6083))+((r21*x6090))+(((-1.0)*x6086*x6088)));
evalcond[4]=((((-1.0)*cj0*sj1*x6083))+(((-1.0)*cj0*x6087))+(((-1.0)*x6084*x6088))+((r02*x6079))+((x6080*x6081)));
evalcond[5]=((((-1.0)*x6085*x6087))+(((-1.0)*x6082*x6088))+((r11*x6090))+((r12*x6079))+(((-1.0)*sj0*sj1*x6083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6092=((1.0)*gconst128);
CheckValue<IkReal> x6093=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6092))+(((-1.0)*gconst127*r10)))),-1);
if(!x6093.valid){
continue;
}
CheckValue<IkReal> x6094 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6093.value)))+(x6094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6095=IKsin(j4);
IkReal x6096=IKcos(j4);
IkReal x6097=(gconst127*r01);
IkReal x6098=(gconst128*r10);
IkReal x6099=((1.0)*cj2);
IkReal x6100=(gconst128*r00);
IkReal x6101=((1.0)*sj0);
IkReal x6102=(gconst128*r20);
IkReal x6103=(cj1*sj2);
IkReal x6104=((1.0)*x6096);
IkReal x6105=((1.0)*x6095);
IkReal x6106=(gconst127*x6096);
IkReal x6107=(gconst127*x6095);
evalcond[0]=(((r21*x6107))+(((-1.0)*x6102*x6105))+(((-1.0)*r22*x6104)));
evalcond[1]=(((r11*x6107))+cj0+(((-1.0)*x6098*x6105))+(((-1.0)*r12*x6104)));
evalcond[2]=((((-1.0)*r02*x6104))+((x6095*x6097))+(((-1.0)*x6101))+(((-1.0)*x6100*x6105)));
evalcond[3]=(((r21*x6106))+(((-1.0)*x6102*x6104))+((sj1*sj2))+((r22*x6095))+(((-1.0)*cj1*x6099)));
evalcond[4]=(((x6096*x6097))+(((-1.0)*cj0*x6103))+(((-1.0)*x6100*x6104))+((r02*x6095))+(((-1.0)*cj0*sj1*x6099)));
evalcond[5]=(((r11*x6106))+(((-1.0)*x6098*x6104))+(((-1.0)*x6101*x6103))+((r12*x6095))+(((-1.0)*sj0*sj1*x6099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6108=((-1.0)*r01);
IkReal x6110 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6110)==0){
continue;
}
IkReal x6109=pow(x6110,-0.5);
CheckValue<IkReal> x6111 = IKatan2WithCheck(IkReal(x6108),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6111.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6111.value))));
IkReal gconst130=(x6108*x6109);
IkReal gconst131=((1.0)*r00*x6109);
CheckValue<IkReal> x6112 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6112.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6112.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6113=((-1.0)*r01);
CheckValue<IkReal> x6116 = IKatan2WithCheck(IkReal(x6113),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6116.valid){
continue;
}
IkReal x6114=((1.0)*(x6116.value));
IkReal x6115=x6109;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6114)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6114)));
IkReal gconst130=(x6113*x6115);
IkReal gconst131=((1.0)*r00*x6115);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6117=((-1.0)*r01);
CheckValue<IkReal> x6120 = IKatan2WithCheck(IkReal(x6117),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6120.valid){
continue;
}
IkReal x6118=((1.0)*(x6120.value));
IkReal x6119=x6109;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6118)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6118)));
IkReal gconst130=(x6117*x6119);
IkReal gconst131=((1.0)*r00*x6119);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6121=((-1.0)*r01);
CheckValue<IkReal> x6124 = IKatan2WithCheck(IkReal(x6121),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6124.valid){
continue;
}
IkReal x6122=((1.0)*(x6124.value));
IkReal x6123=x6109;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6122)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6122)));
IkReal gconst130=(x6121*x6123);
IkReal gconst131=((1.0)*r00*x6123);
IkReal x6125=r02*r02;
IkReal x6126=(r12*sj0);
IkReal x6127=((1.0)*cj0);
IkReal x6128=x6109;
j4eval[0]=((IKabs((((cj0*x6125*x6128))+(((-1.0)*x6127*x6128))+((r02*x6126*x6128)))))+(IKabs(((((-1.0)*r02*x6127))+(((-1.0)*x6126))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6129=((1.0)*sj0);
IkReal x6130=((1.0)*gconst130);
CheckValue<IkReal> x6131 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6129))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6130))+(((-1.0)*gconst130*r11*x6129))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6131.valid){
continue;
}
CheckValue<IkReal> x6132=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6130)))),-1);
if(!x6132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6131.value)+(((1.5707963267949)*(x6132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6133=IKsin(j4);
IkReal x6134=IKcos(j4);
IkReal x6135=(gconst131*r10);
IkReal x6136=(gconst130*r11);
IkReal x6137=((1.0)*cj2);
IkReal x6138=(gconst131*r20);
IkReal x6139=((1.0)*sj0);
IkReal x6140=(gconst131*r00);
IkReal x6141=(cj1*sj2);
IkReal x6142=((1.0)*x6134);
IkReal x6143=((1.0)*x6133);
IkReal x6144=(gconst130*x6134);
IkReal x6145=(gconst130*x6133);
evalcond[0]=((((-1.0)*x6138*x6143))+((r21*x6145))+(((-1.0)*r22*x6142)));
evalcond[1]=(cj0+((x6133*x6136))+(((-1.0)*x6135*x6143))+(((-1.0)*r12*x6142)));
evalcond[2]=((((-1.0)*r02*x6142))+((r01*x6145))+(((-1.0)*x6139))+(((-1.0)*x6140*x6143)));
evalcond[3]=(((r22*x6133))+((sj1*sj2))+(((-1.0)*x6138*x6142))+((r21*x6144))+(((-1.0)*cj1*x6137)));
evalcond[4]=((((-1.0)*cj0*x6141))+((r01*x6144))+((r02*x6133))+(((-1.0)*x6140*x6142))+(((-1.0)*cj0*sj1*x6137)));
evalcond[5]=((((-1.0)*x6139*x6141))+(((-1.0)*sj0*sj1*x6137))+((x6134*x6136))+(((-1.0)*x6135*x6142))+((r12*x6133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6146=((1.0)*gconst131);
CheckValue<IkReal> x6147 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6146))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6147.valid){
continue;
}
CheckValue<IkReal> x6148=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6146)))),-1);
if(!x6148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6147.value)+(((1.5707963267949)*(x6148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6149=IKsin(j4);
IkReal x6150=IKcos(j4);
IkReal x6151=(gconst131*r10);
IkReal x6152=(gconst130*r11);
IkReal x6153=((1.0)*cj2);
IkReal x6154=(gconst131*r20);
IkReal x6155=((1.0)*sj0);
IkReal x6156=(gconst131*r00);
IkReal x6157=(cj1*sj2);
IkReal x6158=((1.0)*x6150);
IkReal x6159=((1.0)*x6149);
IkReal x6160=(gconst130*x6150);
IkReal x6161=(gconst130*x6149);
evalcond[0]=((((-1.0)*r22*x6158))+((r21*x6161))+(((-1.0)*x6154*x6159)));
evalcond[1]=(((x6149*x6152))+cj0+(((-1.0)*x6151*x6159))+(((-1.0)*r12*x6158)));
evalcond[2]=((((-1.0)*r02*x6158))+(((-1.0)*x6155))+((r01*x6161))+(((-1.0)*x6156*x6159)));
evalcond[3]=((((-1.0)*cj1*x6153))+((r21*x6160))+((sj1*sj2))+((r22*x6149))+(((-1.0)*x6154*x6158)));
evalcond[4]=(((r01*x6160))+(((-1.0)*cj0*sj1*x6153))+(((-1.0)*x6156*x6158))+(((-1.0)*cj0*x6157))+((r02*x6149)));
evalcond[5]=((((-1.0)*x6151*x6158))+(((-1.0)*sj0*sj1*x6153))+(((-1.0)*x6155*x6157))+((r12*x6149))+((x6150*x6152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6162=((1.0)*gconst131);
CheckValue<IkReal> x6163=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x6162)))),-1);
if(!x6163.valid){
continue;
}
CheckValue<IkReal> x6164 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6163.value)))+(x6164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6165=IKsin(j4);
IkReal x6166=IKcos(j4);
IkReal x6167=(gconst131*r10);
IkReal x6168=(gconst130*r11);
IkReal x6169=((1.0)*cj2);
IkReal x6170=(gconst131*r20);
IkReal x6171=((1.0)*sj0);
IkReal x6172=(gconst131*r00);
IkReal x6173=(cj1*sj2);
IkReal x6174=((1.0)*x6166);
IkReal x6175=((1.0)*x6165);
IkReal x6176=(gconst130*x6166);
IkReal x6177=(gconst130*x6165);
evalcond[0]=(((r21*x6177))+(((-1.0)*x6170*x6175))+(((-1.0)*r22*x6174)));
evalcond[1]=(cj0+(((-1.0)*x6167*x6175))+(((-1.0)*r12*x6174))+((x6165*x6168)));
evalcond[2]=((((-1.0)*x6171))+(((-1.0)*x6172*x6175))+((r01*x6177))+(((-1.0)*r02*x6174)));
evalcond[3]=(((r21*x6176))+((sj1*sj2))+(((-1.0)*x6170*x6174))+(((-1.0)*cj1*x6169))+((r22*x6165)));
evalcond[4]=(((r02*x6165))+(((-1.0)*cj0*sj1*x6169))+(((-1.0)*cj0*x6173))+(((-1.0)*x6172*x6174))+((r01*x6176)));
evalcond[5]=(((x6166*x6168))+((r12*x6165))+(((-1.0)*sj0*sj1*x6169))+(((-1.0)*x6167*x6174))+(((-1.0)*x6171*x6173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6178=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6178;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6178);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6179=((1.0)*cj5);
IkReal x6180=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6179)));
j4eval[0]=x6180;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6179))))));
j4eval[2]=IKsign(x6180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6181=cj5*cj5;
IkReal x6182=r01*r01;
IkReal x6183=(cj5*r00);
IkReal x6184=(r01*sj5);
IkReal x6185=(x6182+((x6181*(r00*r00)))+(((-1.0)*x6181*x6182))+(r02*r02)+(((-2.0)*x6183*x6184)));
j4eval[0]=x6185;
j4eval[1]=IKsign(x6185);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6183))+x6184))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6186=cj5*cj5;
IkReal x6187=r01*r01;
IkReal x6188=(r01*sj5);
IkReal x6189=(cj5*r00);
CheckValue<IkReal> x6190 = IKatan2WithCheck(IkReal(((((-1.0)*x6189))+x6188)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6190.valid){
continue;
}
CheckValue<IkReal> x6191=IKPowWithIntegerCheck(IKsign((((x6186*(r00*r00)))+(((-1.0)*x6186*x6187))+x6187+(r02*r02)+(((-2.0)*x6188*x6189)))),-1);
if(!x6191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6190.value)+(((1.5707963267949)*(x6191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6192=IKcos(j4);
IkReal x6193=IKsin(j4);
IkReal x6194=(cj5*r00);
IkReal x6195=(cj5*r10);
IkReal x6196=(r21*sj5);
IkReal x6197=((1.0)*cj2);
IkReal x6198=(cj5*r20);
IkReal x6199=((1.0)*x6192);
IkReal x6200=((1.0)*x6193);
IkReal x6201=(sj5*x6193);
IkReal x6202=(sj5*x6192);
evalcond[0]=(((r01*x6202))+((r02*x6193))+(((-1.0)*x6194*x6199)));
evalcond[1]=((((-1.0)*x6198*x6200))+(((-1.0)*r22*x6199))+((x6193*x6196)));
evalcond[2]=((((-1.0)*r12*x6199))+(((-1.0)*x6195*x6200))+((r11*x6201)));
evalcond[3]=((-1.0)+((r01*x6201))+(((-1.0)*x6194*x6200))+(((-1.0)*r02*x6199)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x6198*x6199))+(((-1.0)*cj1*x6197))+((r22*x6193))+((x6192*x6196)));
evalcond[5]=(((r12*x6193))+(((-1.0)*cj1*sj2))+(((-1.0)*x6195*x6199))+((r11*x6202))+(((-1.0)*sj1*x6197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6203=((1.0)*cj5);
CheckValue<IkReal> x6204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6203)))),-1);
if(!x6204.valid){
continue;
}
CheckValue<IkReal> x6205 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6203))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6204.value)))+(x6205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6206=IKcos(j4);
IkReal x6207=IKsin(j4);
IkReal x6208=(cj5*r00);
IkReal x6209=(cj5*r10);
IkReal x6210=(r21*sj5);
IkReal x6211=((1.0)*cj2);
IkReal x6212=(cj5*r20);
IkReal x6213=((1.0)*x6206);
IkReal x6214=((1.0)*x6207);
IkReal x6215=(sj5*x6207);
IkReal x6216=(sj5*x6206);
evalcond[0]=((((-1.0)*x6208*x6213))+((r02*x6207))+((r01*x6216)));
evalcond[1]=(((x6207*x6210))+(((-1.0)*x6212*x6214))+(((-1.0)*r22*x6213)));
evalcond[2]=(((r11*x6215))+(((-1.0)*r12*x6213))+(((-1.0)*x6209*x6214)));
evalcond[3]=((-1.0)+(((-1.0)*x6208*x6214))+((r01*x6215))+(((-1.0)*r02*x6213)));
evalcond[4]=(((r22*x6207))+((sj1*sj2))+(((-1.0)*cj1*x6211))+(((-1.0)*x6212*x6213))+((x6206*x6210)));
evalcond[5]=(((r11*x6216))+(((-1.0)*sj1*x6211))+(((-1.0)*x6209*x6213))+(((-1.0)*cj1*sj2))+((r12*x6207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6217=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6217.valid){
continue;
}
CheckValue<IkReal> x6218 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6217.value)))+(x6218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6219=IKcos(j4);
IkReal x6220=IKsin(j4);
IkReal x6221=(cj5*r00);
IkReal x6222=(cj5*r10);
IkReal x6223=(r21*sj5);
IkReal x6224=((1.0)*cj2);
IkReal x6225=(cj5*r20);
IkReal x6226=((1.0)*x6219);
IkReal x6227=((1.0)*x6220);
IkReal x6228=(sj5*x6220);
IkReal x6229=(sj5*x6219);
evalcond[0]=(((r02*x6220))+((r01*x6229))+(((-1.0)*x6221*x6226)));
evalcond[1]=((((-1.0)*r22*x6226))+((x6220*x6223))+(((-1.0)*x6225*x6227)));
evalcond[2]=((((-1.0)*x6222*x6227))+((r11*x6228))+(((-1.0)*r12*x6226)));
evalcond[3]=((-1.0)+((r01*x6228))+(((-1.0)*r02*x6226))+(((-1.0)*x6221*x6227)));
evalcond[4]=(((x6219*x6223))+((sj1*sj2))+(((-1.0)*cj1*x6224))+((r22*x6220))+(((-1.0)*x6225*x6226)));
evalcond[5]=((((-1.0)*sj1*x6224))+(((-1.0)*x6222*x6226))+((r11*x6229))+(((-1.0)*cj1*sj2))+((r12*x6220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6230=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6230;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6231=((1.0)*cj5);
IkReal x6232=((((-1.0)*r21*x6231))+(((-1.0)*r20*sj5)));
j4eval[0]=x6232;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6231))+((r11*sj5))))));
j4eval[2]=IKsign(x6232);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6233=cj5*cj5;
IkReal x6234=r01*r01;
IkReal x6235=(r01*sj5);
IkReal x6236=(cj5*r00);
IkReal x6237=(((x6233*x6234))+(((2.0)*x6235*x6236))+(((-1.0)*(r02*r02)))+(((-1.0)*x6233*(r00*r00)))+(((-1.0)*x6234)));
j4eval[0]=x6237;
j4eval[1]=IKsign(x6237);
j4eval[2]=((IKabs(r02))+(IKabs((x6235+(((-1.0)*x6236))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6238=cj5*cj5;
IkReal x6239=r01*r01;
IkReal x6240=(r01*sj5);
IkReal x6241=(cj5*r00);
CheckValue<IkReal> x6242=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6238*(r00*r00)))+(((2.0)*x6240*x6241))+(((-1.0)*(r02*r02)))+(((-1.0)*x6239))+((x6238*x6239)))),-1);
if(!x6242.valid){
continue;
}
CheckValue<IkReal> x6243 = IKatan2WithCheck(IkReal((x6240+(((-1.0)*x6241)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6242.value)))+(x6243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6244=IKcos(j4);
IkReal x6245=IKsin(j4);
IkReal x6246=(cj5*r00);
IkReal x6247=(cj5*r10);
IkReal x6248=(r21*sj5);
IkReal x6249=(cj5*r20);
IkReal x6250=((1.0)*x6244);
IkReal x6251=((1.0)*x6245);
IkReal x6252=(sj5*x6245);
IkReal x6253=(sj5*x6244);
evalcond[0]=((((-1.0)*x6246*x6250))+((r01*x6253))+((r02*x6245)));
evalcond[1]=(((x6245*x6248))+(((-1.0)*x6249*x6251))+(((-1.0)*r22*x6250)));
evalcond[2]=((((-1.0)*x6247*x6251))+(((-1.0)*r12*x6250))+((r11*x6252)));
evalcond[3]=((1.0)+(((-1.0)*x6246*x6251))+((r01*x6252))+(((-1.0)*r02*x6250)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6247*x6250))+((r12*x6245))+((cj1*sj2))+((r11*x6253)));
evalcond[5]=(((x6244*x6248))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6249*x6250))+((r22*x6245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6254=((1.0)*cj5);
CheckValue<IkReal> x6255=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6254))+(((-1.0)*r20*sj5)))),-1);
if(!x6255.valid){
continue;
}
CheckValue<IkReal> x6256 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6255.value)))+(x6256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6257=IKcos(j4);
IkReal x6258=IKsin(j4);
IkReal x6259=(cj5*r00);
IkReal x6260=(cj5*r10);
IkReal x6261=(r21*sj5);
IkReal x6262=(cj5*r20);
IkReal x6263=((1.0)*x6257);
IkReal x6264=((1.0)*x6258);
IkReal x6265=(sj5*x6258);
IkReal x6266=(sj5*x6257);
evalcond[0]=(((r01*x6266))+(((-1.0)*x6259*x6263))+((r02*x6258)));
evalcond[1]=(((x6258*x6261))+(((-1.0)*x6262*x6264))+(((-1.0)*r22*x6263)));
evalcond[2]=((((-1.0)*x6260*x6264))+(((-1.0)*r12*x6263))+((r11*x6265)));
evalcond[3]=((1.0)+((r01*x6265))+(((-1.0)*r02*x6263))+(((-1.0)*x6259*x6264)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6260*x6263))+((r12*x6258))+((r11*x6266)));
evalcond[5]=(((r22*x6258))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6262*x6263))+((x6257*x6261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
CheckValue<IkReal> x6268=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6267.value)+(((1.5707963267949)*(x6268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6269=IKcos(j4);
IkReal x6270=IKsin(j4);
IkReal x6271=(cj5*r00);
IkReal x6272=(cj5*r10);
IkReal x6273=(r21*sj5);
IkReal x6274=(cj5*r20);
IkReal x6275=((1.0)*x6269);
IkReal x6276=((1.0)*x6270);
IkReal x6277=(sj5*x6270);
IkReal x6278=(sj5*x6269);
evalcond[0]=(((r01*x6278))+(((-1.0)*x6271*x6275))+((r02*x6270)));
evalcond[1]=((((-1.0)*x6274*x6276))+(((-1.0)*r22*x6275))+((x6270*x6273)));
evalcond[2]=((((-1.0)*x6272*x6276))+(((-1.0)*r12*x6275))+((r11*x6277)));
evalcond[3]=((1.0)+((r01*x6277))+(((-1.0)*r02*x6275))+(((-1.0)*x6271*x6276)));
evalcond[4]=(((r12*x6270))+((cj2*sj1))+(((-1.0)*x6272*x6275))+((cj1*sj2))+((r11*x6278)));
evalcond[5]=(((r22*x6270))+(((-1.0)*x6274*x6275))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6269*x6273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6279=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6279);
rxp1_1=(px*r21);
rxp1_2=(r11*x6279);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6280=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6280);
rxp1_1=(px*r21);
rxp1_2=(r11*x6280);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6281=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6281);
rxp1_1=(px*r21);
rxp1_2=(r11*x6281);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6284=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6284.valid){
continue;
}
IkReal x6282=x6284.value;
IkReal x6283=(sj0*x6282);
cj4array[0]=(((cj2*sj1*x6283))+((cj1*sj2*x6283)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6285=IKsin(j4);
IkReal x6286=IKcos(j4);
IkReal x6287=(r21*sj5);
IkReal x6288=((1.0)*cj5*r20);
evalcond[0]=(r02*x6285);
evalcond[1]=((((-1.0)*r02*x6286))+(((-1.0)*sj0)));
evalcond[2]=(((x6285*x6287))+(((-1.0)*x6285*x6288)));
evalcond[3]=(((r11*sj5*x6285))+(((-1.0)*cj5*r10*x6285)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x6286*x6287))+(((-1.0)*x6286*x6288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6290=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6290.valid){
continue;
}
IkReal x6289=x6290.value;
cj4array[0]=((((-1.0)*sj1*sj2*x6289))+((cj1*cj2*x6289)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6291=IKsin(j4);
IkReal x6292=IKcos(j4);
IkReal x6293=((1.0)*sj0);
IkReal x6294=((1.0)*cj5);
IkReal x6295=(sj5*x6291);
evalcond[0]=(r02*x6291);
evalcond[1]=((((-1.0)*x6293))+(((-1.0)*r02*x6292)));
evalcond[2]=((((-1.0)*r20*x6291*x6294))+((r21*x6295)));
evalcond[3]=((((-1.0)*r10*x6291*x6294))+((r11*x6295)));
evalcond[4]=((((-1.0)*cj1*sj2*x6293))+((r11*sj5*x6292))+(((-1.0)*cj2*sj1*x6293))+(((-1.0)*r10*x6292*x6294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6296=IKPowWithIntegerCheck(r02,-1);
if(!x6296.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6296.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6297=IKsin(j4);
IkReal x6298=IKcos(j4);
IkReal x6299=((1.0)*cj1);
IkReal x6300=(r21*sj5);
IkReal x6301=((1.0)*cj5);
IkReal x6302=(r11*sj5);
evalcond[0]=(r02*x6297);
evalcond[1]=((((-1.0)*r20*x6297*x6301))+((x6297*x6300)));
evalcond[2]=((((-1.0)*r10*x6297*x6301))+((x6297*x6302)));
evalcond[3]=((((-1.0)*r20*x6298*x6301))+((sj1*sj2))+((x6298*x6300))+(((-1.0)*cj2*x6299)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x6299))+(((-1.0)*r10*x6298*x6301))+((x6298*x6302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6303=((1.0)*sj0);
IkReal x6304=((1.0)*cj0);
CheckValue<IkReal> x6305 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6304))+(((-1.0)*r12*x6303)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x6304))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6305.valid){
continue;
}
CheckValue<IkReal> x6306=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6305.value)+(((1.5707963267949)*(x6306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6307=IKsin(j4);
IkReal x6308=IKcos(j4);
IkReal x6309=(cj5*r00);
IkReal x6310=(cj5*r10);
IkReal x6311=(r21*sj5);
IkReal x6312=((1.0)*cj2);
IkReal x6313=((1.0)*sj0);
IkReal x6314=(cj1*sj2);
IkReal x6315=(cj5*r20);
IkReal x6316=((1.0)*x6308);
IkReal x6317=((1.0)*x6307);
IkReal x6318=(sj5*x6307);
IkReal x6319=(sj5*x6308);
evalcond[0]=((((-1.0)*r22*x6316))+((x6307*x6311))+(((-1.0)*x6315*x6317)));
evalcond[1]=(cj0+(((-1.0)*r12*x6316))+(((-1.0)*x6310*x6317))+((r11*x6318)));
evalcond[2]=((((-1.0)*r02*x6316))+((r01*x6318))+(((-1.0)*x6313))+(((-1.0)*x6309*x6317)));
evalcond[3]=(((x6308*x6311))+((r22*x6307))+((sj1*sj2))+(((-1.0)*cj1*x6312))+(((-1.0)*x6315*x6316)));
evalcond[4]=((((-1.0)*cj0*sj1*x6312))+((r01*x6319))+((r02*x6307))+(((-1.0)*cj0*x6314))+(((-1.0)*x6309*x6316)));
evalcond[5]=((((-1.0)*sj0*sj1*x6312))+(((-1.0)*x6310*x6316))+((r11*x6319))+((r12*x6307))+(((-1.0)*x6313*x6314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6320=((1.0)*cj5);
CheckValue<IkReal> x6321=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6320)))),-1);
if(!x6321.valid){
continue;
}
CheckValue<IkReal> x6322 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6320))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6321.value)))+(x6322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6323=IKsin(j4);
IkReal x6324=IKcos(j4);
IkReal x6325=(cj5*r00);
IkReal x6326=(cj5*r10);
IkReal x6327=(r21*sj5);
IkReal x6328=((1.0)*cj2);
IkReal x6329=((1.0)*sj0);
IkReal x6330=(cj1*sj2);
IkReal x6331=(cj5*r20);
IkReal x6332=((1.0)*x6324);
IkReal x6333=((1.0)*x6323);
IkReal x6334=(sj5*x6323);
IkReal x6335=(sj5*x6324);
evalcond[0]=(((x6323*x6327))+(((-1.0)*x6331*x6333))+(((-1.0)*r22*x6332)));
evalcond[1]=((((-1.0)*r12*x6332))+(((-1.0)*x6326*x6333))+cj0+((r11*x6334)));
evalcond[2]=((((-1.0)*x6325*x6333))+((r01*x6334))+(((-1.0)*r02*x6332))+(((-1.0)*x6329)));
evalcond[3]=(((x6324*x6327))+((sj1*sj2))+(((-1.0)*x6331*x6332))+(((-1.0)*cj1*x6328))+((r22*x6323)));
evalcond[4]=(((r02*x6323))+(((-1.0)*x6325*x6332))+((r01*x6335))+(((-1.0)*cj0*x6330))+(((-1.0)*cj0*sj1*x6328)));
evalcond[5]=((((-1.0)*x6326*x6332))+((r12*x6323))+((r11*x6335))+(((-1.0)*sj0*sj1*x6328))+(((-1.0)*x6329*x6330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6336=((1.0)*cj5);
CheckValue<IkReal> x6337 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6337.valid){
continue;
}
CheckValue<IkReal> x6338=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6336)))),-1);
if(!x6338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6337.value)+(((1.5707963267949)*(x6338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6339=IKsin(j4);
IkReal x6340=IKcos(j4);
IkReal x6341=(cj5*r00);
IkReal x6342=(cj5*r10);
IkReal x6343=(r21*sj5);
IkReal x6344=((1.0)*cj2);
IkReal x6345=((1.0)*sj0);
IkReal x6346=(cj1*sj2);
IkReal x6347=(cj5*r20);
IkReal x6348=((1.0)*x6340);
IkReal x6349=((1.0)*x6339);
IkReal x6350=(sj5*x6339);
IkReal x6351=(sj5*x6340);
evalcond[0]=((((-1.0)*r22*x6348))+(((-1.0)*x6347*x6349))+((x6339*x6343)));
evalcond[1]=(cj0+((r11*x6350))+(((-1.0)*x6342*x6349))+(((-1.0)*r12*x6348)));
evalcond[2]=((((-1.0)*x6341*x6349))+((r01*x6350))+(((-1.0)*r02*x6348))+(((-1.0)*x6345)));
evalcond[3]=(((r22*x6339))+(((-1.0)*x6347*x6348))+((sj1*sj2))+(((-1.0)*cj1*x6344))+((x6340*x6343)));
evalcond[4]=((((-1.0)*x6341*x6348))+((r02*x6339))+((r01*x6351))+(((-1.0)*cj0*sj1*x6344))+(((-1.0)*cj0*x6346)));
evalcond[5]=(((r12*x6339))+(((-1.0)*x6345*x6346))+((r11*x6351))+(((-1.0)*x6342*x6348))+(((-1.0)*sj0*sj1*x6344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6352=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6352;
j0eval[1]=IKsign(x6352);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6353=cj5*cj5;
IkReal x6354=r21*r21;
IkReal x6355=(sj1*sj2);
IkReal x6356=(r21*sj5);
IkReal x6357=(cj5*r20);
IkReal x6358=(cj1*cj2);
IkReal x6359=(x6354+(r22*r22)+(((-2.0)*x6356*x6357))+((x6353*(r20*r20)))+(((-1.0)*x6353*x6354)));
j4eval[0]=x6359;
j4eval[1]=IKsign(x6359);
j4eval[2]=((IKabs(((((-1.0)*r22*x6358))+((r22*x6355)))))+(IKabs(((((-1.0)*x6355*x6357))+((x6355*x6356))+(((-1.0)*x6356*x6358))+((x6357*x6358))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6360=IKsin(j0);
IkReal x6361=IKcos(j0);
evalcond[0]=((((0.39225)*x6361))+(((-1.0)*px))+(((-0.10915)*x6360)));
evalcond[1]=((((0.10915)*x6361))+(((0.39225)*x6360))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6362=((1.0)*cj5);
IkReal x6363=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6362)));
j4eval[0]=x6363;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6362))))));
j4eval[2]=IKsign(x6363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6364=((1.0)*cj5);
IkReal x6365=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6364)));
j4eval[0]=x6365;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6364))))));
j4eval[2]=IKsign(x6365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6366=cj5*cj5;
IkReal x6367=((1.0)*sj5);
IkReal x6368=(cj5*r20);
IkReal x6369=(r11*r21);
IkReal x6370=(x6369+(((-1.0)*x6366*x6369))+((r12*r22))+(((-1.0)*cj5*r10*r21*x6367))+((r10*r20*x6366))+(((-1.0)*r11*x6367*x6368)));
j4eval[0]=x6370;
j4eval[1]=IKsign(x6370);
j4eval[2]=((IKabs((((cj0*x6368))+(((-1.0)*cj0*r21*x6367)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6371=cj5*cj5;
IkReal x6372=((1.0)*sj5);
IkReal x6373=(cj5*r20);
IkReal x6374=(r11*r21);
CheckValue<IkReal> x6375 = IKatan2WithCheck(IkReal((((cj0*x6373))+(((-1.0)*cj0*r21*x6372)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6375.valid){
continue;
}
CheckValue<IkReal> x6376=IKPowWithIntegerCheck(IKsign((x6374+(((-1.0)*x6371*x6374))+((r12*r22))+(((-1.0)*r11*x6372*x6373))+(((-1.0)*cj5*r10*r21*x6372))+((r10*r20*x6371)))),-1);
if(!x6376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6375.value)+(((1.5707963267949)*(x6376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6377=IKsin(j4);
IkReal x6378=IKcos(j4);
IkReal x6379=((1.0)*sj0);
IkReal x6380=(cj5*r00);
IkReal x6381=(r11*sj5);
IkReal x6382=(cj5*r10);
IkReal x6383=(r21*sj5);
IkReal x6384=(cj5*r20);
IkReal x6385=(r01*sj5);
IkReal x6386=((1.0)*x6378);
IkReal x6387=((1.0)*x6377);
evalcond[0]=((((-1.0)*x6384*x6387))+(((-1.0)*r22*x6386))+((x6377*x6383)));
evalcond[1]=((((-1.0)*x6383*x6386))+(((-1.0)*r22*x6387))+((x6378*x6384)));
evalcond[2]=(cj0+(((-1.0)*r12*x6386))+(((-1.0)*x6382*x6387))+((x6377*x6381)));
evalcond[3]=((((-1.0)*x6380*x6387))+((x6377*x6385))+(((-1.0)*x6379))+(((-1.0)*r02*x6386)));
evalcond[4]=(((x6378*x6380))+(((-1.0)*x6385*x6386))+(((-1.0)*r02*x6387))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6381*x6386))+(((-1.0)*r12*x6387))+((x6378*x6382))+(((-1.0)*x6379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6388=((1.0)*cj5);
CheckValue<IkReal> x6389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6388)))),-1);
if(!x6389.valid){
continue;
}
CheckValue<IkReal> x6390 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6388))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6389.value)))+(x6390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6391=IKsin(j4);
IkReal x6392=IKcos(j4);
IkReal x6393=((1.0)*sj0);
IkReal x6394=(cj5*r00);
IkReal x6395=(r11*sj5);
IkReal x6396=(cj5*r10);
IkReal x6397=(r21*sj5);
IkReal x6398=(cj5*r20);
IkReal x6399=(r01*sj5);
IkReal x6400=((1.0)*x6392);
IkReal x6401=((1.0)*x6391);
evalcond[0]=(((x6391*x6397))+(((-1.0)*r22*x6400))+(((-1.0)*x6398*x6401)));
evalcond[1]=(((x6392*x6398))+(((-1.0)*r22*x6401))+(((-1.0)*x6397*x6400)));
evalcond[2]=(((x6391*x6395))+cj0+(((-1.0)*x6396*x6401))+(((-1.0)*r12*x6400)));
evalcond[3]=(((x6391*x6399))+(((-1.0)*r02*x6400))+(((-1.0)*x6393))+(((-1.0)*x6394*x6401)));
evalcond[4]=(((x6392*x6394))+(((-1.0)*r02*x6401))+(((-1.0)*x6399*x6400))+(((-1.0)*cj0)));
evalcond[5]=(((x6392*x6396))+(((-1.0)*x6393))+(((-1.0)*r12*x6401))+(((-1.0)*x6395*x6400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6402=((1.0)*cj5);
CheckValue<IkReal> x6403 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6403.valid){
continue;
}
CheckValue<IkReal> x6404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6402)))),-1);
if(!x6404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6403.value)+(((1.5707963267949)*(x6404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6405=IKsin(j4);
IkReal x6406=IKcos(j4);
IkReal x6407=((1.0)*sj0);
IkReal x6408=(cj5*r00);
IkReal x6409=(r11*sj5);
IkReal x6410=(cj5*r10);
IkReal x6411=(r21*sj5);
IkReal x6412=(cj5*r20);
IkReal x6413=(r01*sj5);
IkReal x6414=((1.0)*x6406);
IkReal x6415=((1.0)*x6405);
evalcond[0]=((((-1.0)*x6412*x6415))+((x6405*x6411))+(((-1.0)*r22*x6414)));
evalcond[1]=(((x6406*x6412))+(((-1.0)*r22*x6415))+(((-1.0)*x6411*x6414)));
evalcond[2]=(cj0+((x6405*x6409))+(((-1.0)*x6410*x6415))+(((-1.0)*r12*x6414)));
evalcond[3]=((((-1.0)*x6408*x6415))+(((-1.0)*r02*x6414))+((x6405*x6413))+(((-1.0)*x6407)));
evalcond[4]=((((-1.0)*r02*x6415))+((x6406*x6408))+(((-1.0)*x6413*x6414))+(((-1.0)*cj0)));
evalcond[5]=(((x6406*x6410))+(((-1.0)*x6407))+(((-1.0)*x6409*x6414))+(((-1.0)*r12*x6415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6416=IKcos(j0);
IkReal x6417=IKsin(j0);
evalcond[0]=((((-0.10915)*x6417))+(((-0.39225)*x6416))+(((-1.0)*px)));
evalcond[1]=((((-0.39225)*x6417))+(((-1.0)*py))+(((0.10915)*x6416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6418=((1.0)*cj5);
IkReal x6419=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6418)));
j4eval[0]=x6419;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6418)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6419);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6420=cj5*cj5;
IkReal x6421=((1.0)*r21);
IkReal x6422=(cj5*sj5);
IkReal x6423=((1.0)*r20);
IkReal x6424=(((r00*r20*x6420))+((r01*r21))+(((-1.0)*r01*x6420*x6421))+(((-1.0)*r01*x6422*x6423))+((r02*r22))+(((-1.0)*r00*x6421*x6422)));
j4eval[0]=x6424;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6423))))));
j4eval[2]=IKsign(x6424);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6425=cj5*cj5;
IkReal x6426=(r21*sj5);
IkReal x6427=(r11*r21);
IkReal x6428=((1.0)*cj5*r20);
IkReal x6429=(((r10*r20*x6425))+(((-1.0)*r11*sj5*x6428))+x6427+((r12*r22))+(((-1.0)*cj5*r10*x6426))+(((-1.0)*x6425*x6427)));
j4eval[0]=x6429;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6428))+((sj0*x6426))))));
j4eval[2]=IKsign(x6429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6430=cj5*cj5;
IkReal x6431=(r21*sj5);
IkReal x6432=(r11*r21);
IkReal x6433=((1.0)*cj5*r20);
CheckValue<IkReal> x6434=IKPowWithIntegerCheck(IKsign((x6432+((r12*r22))+(((-1.0)*x6430*x6432))+((r10*r20*x6430))+(((-1.0)*r11*sj5*x6433))+(((-1.0)*cj5*r10*x6431)))),-1);
if(!x6434.valid){
continue;
}
CheckValue<IkReal> x6435 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6433))+((sj0*x6431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6434.value)))+(x6435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6436=IKsin(j4);
IkReal x6437=IKcos(j4);
IkReal x6438=(r11*sj5);
IkReal x6439=(cj5*r00);
IkReal x6440=(cj5*r10);
IkReal x6441=(r21*sj5);
IkReal x6442=(cj5*r20);
IkReal x6443=(r01*sj5);
IkReal x6444=((1.0)*x6437);
IkReal x6445=((1.0)*x6436);
evalcond[0]=((((-1.0)*x6442*x6445))+((x6436*x6441))+(((-1.0)*r22*x6444)));
evalcond[1]=(((x6437*x6442))+(((-1.0)*r22*x6445))+(((-1.0)*x6441*x6444)));
evalcond[2]=(cj0+(((-1.0)*r12*x6444))+((x6436*x6438))+(((-1.0)*x6440*x6445)));
evalcond[3]=(cj0+(((-1.0)*r02*x6445))+((x6437*x6439))+(((-1.0)*x6443*x6444)));
evalcond[4]=(sj0+(((-1.0)*x6438*x6444))+(((-1.0)*r12*x6445))+((x6437*x6440)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6439*x6445))+(((-1.0)*r02*x6444))+((x6436*x6443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6446=cj5*cj5;
IkReal x6447=((1.0)*r21);
IkReal x6448=(cj5*sj5);
IkReal x6449=((1.0)*r20);
CheckValue<IkReal> x6450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6446*x6447))+((r01*r21))+(((-1.0)*r00*x6447*x6448))+((r02*r22))+(((-1.0)*r01*x6448*x6449))+((r00*r20*x6446)))),-1);
if(!x6450.valid){
continue;
}
CheckValue<IkReal> x6451 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6450.value)))+(x6451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6452=IKsin(j4);
IkReal x6453=IKcos(j4);
IkReal x6454=(r11*sj5);
IkReal x6455=(cj5*r00);
IkReal x6456=(cj5*r10);
IkReal x6457=(r21*sj5);
IkReal x6458=(cj5*r20);
IkReal x6459=(r01*sj5);
IkReal x6460=((1.0)*x6453);
IkReal x6461=((1.0)*x6452);
evalcond[0]=((((-1.0)*x6458*x6461))+((x6452*x6457))+(((-1.0)*r22*x6460)));
evalcond[1]=(((x6453*x6458))+(((-1.0)*x6457*x6460))+(((-1.0)*r22*x6461)));
evalcond[2]=(cj0+((x6452*x6454))+(((-1.0)*r12*x6460))+(((-1.0)*x6456*x6461)));
evalcond[3]=(cj0+((x6453*x6455))+(((-1.0)*r02*x6461))+(((-1.0)*x6459*x6460)));
evalcond[4]=(sj0+((x6453*x6456))+(((-1.0)*x6454*x6460))+(((-1.0)*r12*x6461)));
evalcond[5]=((((-1.0)*sj0))+((x6452*x6459))+(((-1.0)*x6455*x6461))+(((-1.0)*r02*x6460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6462=((1.0)*cj5);
CheckValue<IkReal> x6463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6462))+(((-1.0)*r00*sj5)))),-1);
if(!x6463.valid){
continue;
}
CheckValue<IkReal> x6464 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6463.value)))+(x6464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6465=IKsin(j4);
IkReal x6466=IKcos(j4);
IkReal x6467=(r11*sj5);
IkReal x6468=(cj5*r00);
IkReal x6469=(cj5*r10);
IkReal x6470=(r21*sj5);
IkReal x6471=(cj5*r20);
IkReal x6472=(r01*sj5);
IkReal x6473=((1.0)*x6466);
IkReal x6474=((1.0)*x6465);
evalcond[0]=(((x6465*x6470))+(((-1.0)*r22*x6473))+(((-1.0)*x6471*x6474)));
evalcond[1]=(((x6466*x6471))+(((-1.0)*r22*x6474))+(((-1.0)*x6470*x6473)));
evalcond[2]=((((-1.0)*r12*x6473))+cj0+((x6465*x6467))+(((-1.0)*x6469*x6474)));
evalcond[3]=(cj0+((x6466*x6468))+(((-1.0)*x6472*x6473))+(((-1.0)*r02*x6474)));
evalcond[4]=((((-1.0)*x6467*x6473))+(((-1.0)*r12*x6474))+sj0+((x6466*x6469)));
evalcond[5]=((((-1.0)*sj0))+((x6465*x6472))+(((-1.0)*x6468*x6474))+(((-1.0)*r02*x6473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6475=IKsin(j0);
IkReal x6476=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.81725)*x6476))+(((-0.10915)*x6475)));
evalcond[1]=((((-1.0)*py))+(((0.81725)*x6475))+(((0.10915)*x6476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6477=((1.0)*cj5);
IkReal x6478=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6477)));
j4eval[0]=x6478;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6477))))));
j4eval[2]=IKsign(x6478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6479=((1.0)*cj5);
IkReal x6480=((((-1.0)*r11*x6479))+(((-1.0)*r10*sj5)));
j4eval[0]=x6480;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x6479))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6481=cj5*cj5;
IkReal x6482=((1.0)*sj5);
IkReal x6483=(cj5*r20);
IkReal x6484=(r11*r21);
IkReal x6485=((((-1.0)*cj5*r10*r21*x6482))+(((-1.0)*r11*x6482*x6483))+x6484+((r12*r22))+((r10*r20*x6481))+(((-1.0)*x6481*x6484)));
j4eval[0]=x6485;
j4eval[1]=IKsign(x6485);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6482))+((cj0*x6483)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6486=cj5*cj5;
IkReal x6487=((1.0)*sj5);
IkReal x6488=(cj5*r20);
IkReal x6489=(r11*r21);
CheckValue<IkReal> x6490 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6487))+((cj0*x6488)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6490.valid){
continue;
}
CheckValue<IkReal> x6491=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6487))+x6489+((r12*r22))+((r10*r20*x6486))+(((-1.0)*x6486*x6489))+(((-1.0)*r11*x6487*x6488)))),-1);
if(!x6491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6490.value)+(((1.5707963267949)*(x6491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6492=IKsin(j4);
IkReal x6493=IKcos(j4);
IkReal x6494=((1.0)*sj0);
IkReal x6495=(cj5*r00);
IkReal x6496=(r11*sj5);
IkReal x6497=(cj5*r10);
IkReal x6498=(r21*sj5);
IkReal x6499=(cj5*r20);
IkReal x6500=(r01*sj5);
IkReal x6501=((1.0)*x6493);
IkReal x6502=((1.0)*x6492);
evalcond[0]=(((x6492*x6498))+(((-1.0)*r22*x6501))+(((-1.0)*x6499*x6502)));
evalcond[1]=((((-1.0)*x6498*x6501))+(((-1.0)*r22*x6502))+((x6493*x6499)));
evalcond[2]=(((x6492*x6496))+(((-1.0)*r12*x6501))+cj0+(((-1.0)*x6497*x6502)));
evalcond[3]=(((x6492*x6500))+(((-1.0)*x6494))+(((-1.0)*r02*x6501))+(((-1.0)*x6495*x6502)));
evalcond[4]=((((-1.0)*x6500*x6501))+(((-1.0)*r02*x6502))+((x6493*x6495))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6502))+(((-1.0)*x6494))+(((-1.0)*x6496*x6501))+((x6493*x6497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6503=((1.0)*cj5);
CheckValue<IkReal> x6504=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6503))+(((-1.0)*r10*sj5)))),-1);
if(!x6504.valid){
continue;
}
CheckValue<IkReal> x6505 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6504.value)))+(x6505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6506=IKsin(j4);
IkReal x6507=IKcos(j4);
IkReal x6508=((1.0)*sj0);
IkReal x6509=(cj5*r00);
IkReal x6510=(r11*sj5);
IkReal x6511=(cj5*r10);
IkReal x6512=(r21*sj5);
IkReal x6513=(cj5*r20);
IkReal x6514=(r01*sj5);
IkReal x6515=((1.0)*x6507);
IkReal x6516=((1.0)*x6506);
evalcond[0]=((((-1.0)*r22*x6515))+((x6506*x6512))+(((-1.0)*x6513*x6516)));
evalcond[1]=((((-1.0)*x6512*x6515))+(((-1.0)*r22*x6516))+((x6507*x6513)));
evalcond[2]=(cj0+((x6506*x6510))+(((-1.0)*r12*x6515))+(((-1.0)*x6511*x6516)));
evalcond[3]=((((-1.0)*r02*x6515))+(((-1.0)*x6508))+((x6506*x6514))+(((-1.0)*x6509*x6516)));
evalcond[4]=((((-1.0)*r02*x6516))+((x6507*x6509))+(((-1.0)*x6514*x6515))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6508))+((x6507*x6511))+(((-1.0)*r12*x6516))+(((-1.0)*x6510*x6515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6517=((1.0)*cj5);
CheckValue<IkReal> x6518 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6518.valid){
continue;
}
CheckValue<IkReal> x6519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6517)))),-1);
if(!x6519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6518.value)+(((1.5707963267949)*(x6519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6520=IKsin(j4);
IkReal x6521=IKcos(j4);
IkReal x6522=((1.0)*sj0);
IkReal x6523=(cj5*r00);
IkReal x6524=(r11*sj5);
IkReal x6525=(cj5*r10);
IkReal x6526=(r21*sj5);
IkReal x6527=(cj5*r20);
IkReal x6528=(r01*sj5);
IkReal x6529=((1.0)*x6521);
IkReal x6530=((1.0)*x6520);
evalcond[0]=(((x6520*x6526))+(((-1.0)*r22*x6529))+(((-1.0)*x6527*x6530)));
evalcond[1]=(((x6521*x6527))+(((-1.0)*x6526*x6529))+(((-1.0)*r22*x6530)));
evalcond[2]=(cj0+((x6520*x6524))+(((-1.0)*r12*x6529))+(((-1.0)*x6525*x6530)));
evalcond[3]=((((-1.0)*x6523*x6530))+((x6520*x6528))+(((-1.0)*x6522))+(((-1.0)*r02*x6529)));
evalcond[4]=(((x6521*x6523))+(((-1.0)*r02*x6530))+(((-1.0)*x6528*x6529))+(((-1.0)*cj0)));
evalcond[5]=(((x6521*x6525))+(((-1.0)*r12*x6530))+(((-1.0)*x6522))+(((-1.0)*x6524*x6529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6531=IKsin(j0);
IkReal x6532=IKcos(j0);
evalcond[0]=((((0.03275)*x6532))+(((-0.10915)*x6531))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x6532))+(((0.03275)*x6531))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6533=((1.0)*cj5);
IkReal x6534=((((-1.0)*r01*x6533))+(((-1.0)*r00*sj5)));
j4eval[0]=x6534;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6533)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6535=cj5*cj5;
IkReal x6536=((1.0)*r21);
IkReal x6537=(cj5*sj5);
IkReal x6538=((1.0)*r20);
IkReal x6539=((((-1.0)*r00*x6536*x6537))+((r01*r21))+(((-1.0)*r01*x6535*x6536))+(((-1.0)*r01*x6537*x6538))+((r02*r22))+((r00*r20*x6535)));
j4eval[0]=x6539;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6538)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6540=cj5*cj5;
IkReal x6541=(r21*sj5);
IkReal x6542=(r11*r21);
IkReal x6543=((1.0)*cj5*r20);
IkReal x6544=(((r12*r22))+x6542+((r10*r20*x6540))+(((-1.0)*r11*sj5*x6543))+(((-1.0)*x6540*x6542))+(((-1.0)*cj5*r10*x6541)));
j4eval[0]=x6544;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6543))+((sj0*x6541))))));
j4eval[2]=IKsign(x6544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6545=cj5*cj5;
IkReal x6546=(r21*sj5);
IkReal x6547=(r11*r21);
IkReal x6548=((1.0)*cj5*r20);
CheckValue<IkReal> x6549=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6545*x6547))+((r12*r22))+x6547+((r10*r20*x6545))+(((-1.0)*r11*sj5*x6548))+(((-1.0)*cj5*r10*x6546)))),-1);
if(!x6549.valid){
continue;
}
CheckValue<IkReal> x6550 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6548))+((sj0*x6546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6549.value)))+(x6550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6551=IKsin(j4);
IkReal x6552=IKcos(j4);
IkReal x6553=(r11*sj5);
IkReal x6554=(cj5*r00);
IkReal x6555=(cj5*r10);
IkReal x6556=(r21*sj5);
IkReal x6557=(cj5*r20);
IkReal x6558=(r01*sj5);
IkReal x6559=((1.0)*x6552);
IkReal x6560=((1.0)*x6551);
evalcond[0]=(((x6551*x6556))+(((-1.0)*r22*x6559))+(((-1.0)*x6557*x6560)));
evalcond[1]=(((x6552*x6557))+(((-1.0)*r22*x6560))+(((-1.0)*x6556*x6559)));
evalcond[2]=(((x6551*x6553))+cj0+(((-1.0)*x6555*x6560))+(((-1.0)*r12*x6559)));
evalcond[3]=(((x6552*x6554))+cj0+(((-1.0)*x6558*x6559))+(((-1.0)*r02*x6560)));
evalcond[4]=((((-1.0)*x6553*x6559))+((x6552*x6555))+sj0+(((-1.0)*r12*x6560)));
evalcond[5]=((((-1.0)*sj0))+((x6551*x6558))+(((-1.0)*x6554*x6560))+(((-1.0)*r02*x6559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6561=cj5*cj5;
IkReal x6562=((1.0)*r21);
IkReal x6563=(cj5*sj5);
IkReal x6564=((1.0)*r20);
CheckValue<IkReal> x6565 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6565.valid){
continue;
}
CheckValue<IkReal> x6566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6562*x6563))+(((-1.0)*r01*x6561*x6562))+(((-1.0)*r01*x6563*x6564))+((r01*r21))+((r00*r20*x6561))+((r02*r22)))),-1);
if(!x6566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6565.value)+(((1.5707963267949)*(x6566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6567=IKsin(j4);
IkReal x6568=IKcos(j4);
IkReal x6569=(r11*sj5);
IkReal x6570=(cj5*r00);
IkReal x6571=(cj5*r10);
IkReal x6572=(r21*sj5);
IkReal x6573=(cj5*r20);
IkReal x6574=(r01*sj5);
IkReal x6575=((1.0)*x6568);
IkReal x6576=((1.0)*x6567);
evalcond[0]=((((-1.0)*x6573*x6576))+((x6567*x6572))+(((-1.0)*r22*x6575)));
evalcond[1]=((((-1.0)*x6572*x6575))+((x6568*x6573))+(((-1.0)*r22*x6576)));
evalcond[2]=((((-1.0)*x6571*x6576))+cj0+((x6567*x6569))+(((-1.0)*r12*x6575)));
evalcond[3]=(cj0+((x6568*x6570))+(((-1.0)*x6574*x6575))+(((-1.0)*r02*x6576)));
evalcond[4]=(sj0+((x6568*x6571))+(((-1.0)*x6569*x6575))+(((-1.0)*r12*x6576)));
evalcond[5]=((((-1.0)*sj0))+((x6567*x6574))+(((-1.0)*r02*x6575))+(((-1.0)*x6570*x6576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6577=((1.0)*cj5);
CheckValue<IkReal> x6578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6577)))),-1);
if(!x6578.valid){
continue;
}
CheckValue<IkReal> x6579 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6578.value)))+(x6579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6580=IKsin(j4);
IkReal x6581=IKcos(j4);
IkReal x6582=(r11*sj5);
IkReal x6583=(cj5*r00);
IkReal x6584=(cj5*r10);
IkReal x6585=(r21*sj5);
IkReal x6586=(cj5*r20);
IkReal x6587=(r01*sj5);
IkReal x6588=((1.0)*x6581);
IkReal x6589=((1.0)*x6580);
evalcond[0]=(((x6580*x6585))+(((-1.0)*r22*x6588))+(((-1.0)*x6586*x6589)));
evalcond[1]=(((x6581*x6586))+(((-1.0)*r22*x6589))+(((-1.0)*x6585*x6588)));
evalcond[2]=((((-1.0)*x6584*x6589))+cj0+(((-1.0)*r12*x6588))+((x6580*x6582)));
evalcond[3]=(cj0+(((-1.0)*r02*x6589))+((x6581*x6583))+(((-1.0)*x6587*x6588)));
evalcond[4]=(sj0+(((-1.0)*r12*x6589))+(((-1.0)*x6582*x6588))+((x6581*x6584)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6588))+((x6580*x6587))+(((-1.0)*x6583*x6589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6590=IKcos(j0);
IkReal x6591=IKsin(j0);
evalcond[0]=((((-0.10915)*x6591))+(((-1.0)*px))+(((-0.39225)*x6590)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x6590))+(((-0.39225)*x6591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6592=((1.0)*cj5);
IkReal x6593=((((-1.0)*r01*x6592))+(((-1.0)*r00*sj5)));
j4eval[0]=x6593;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6592))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6594=cj5*cj5;
IkReal x6595=((1.0)*r21);
IkReal x6596=(cj5*sj5);
IkReal x6597=((1.0)*r20);
IkReal x6598=((((-1.0)*r01*x6596*x6597))+(((-1.0)*r00*x6595*x6596))+((r01*r21))+(((-1.0)*r01*x6594*x6595))+((r00*r20*x6594))+((r02*r22)));
j4eval[0]=x6598;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x6597))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6599=cj5*cj5;
IkReal x6600=(r21*sj5);
IkReal x6601=(r11*r21);
IkReal x6602=((1.0)*cj5*r20);
IkReal x6603=(x6601+((r12*r22))+(((-1.0)*cj5*r10*x6600))+(((-1.0)*r11*sj5*x6602))+(((-1.0)*x6599*x6601))+((r10*r20*x6599)));
j4eval[0]=x6603;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6600))+(((-1.0)*sj0*x6602))))));
j4eval[2]=IKsign(x6603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6604=cj5*cj5;
IkReal x6605=(r21*sj5);
IkReal x6606=(r11*r21);
IkReal x6607=((1.0)*cj5*r20);
CheckValue<IkReal> x6608=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6604*x6606))+((r10*r20*x6604))+x6606+((r12*r22))+(((-1.0)*cj5*r10*x6605))+(((-1.0)*r11*sj5*x6607)))),-1);
if(!x6608.valid){
continue;
}
CheckValue<IkReal> x6609 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6605))+(((-1.0)*sj0*x6607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6608.value)))+(x6609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6610=IKsin(j4);
IkReal x6611=IKcos(j4);
IkReal x6612=(r11*sj5);
IkReal x6613=(cj5*r00);
IkReal x6614=(cj5*r10);
IkReal x6615=(r21*sj5);
IkReal x6616=(cj5*r20);
IkReal x6617=(r01*sj5);
IkReal x6618=((1.0)*x6611);
IkReal x6619=((1.0)*x6610);
evalcond[0]=((((-1.0)*r22*x6618))+(((-1.0)*x6616*x6619))+((x6610*x6615)));
evalcond[1]=(((x6611*x6616))+(((-1.0)*r22*x6619))+(((-1.0)*x6615*x6618)));
evalcond[2]=((((-1.0)*r12*x6618))+cj0+(((-1.0)*x6614*x6619))+((x6610*x6612)));
evalcond[3]=(cj0+((x6611*x6613))+(((-1.0)*r02*x6619))+(((-1.0)*x6617*x6618)));
evalcond[4]=((((-1.0)*r12*x6619))+(((-1.0)*x6612*x6618))+sj0+((x6611*x6614)));
evalcond[5]=((((-1.0)*x6613*x6619))+(((-1.0)*sj0))+(((-1.0)*r02*x6618))+((x6610*x6617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6620=cj5*cj5;
IkReal x6621=((1.0)*r21);
IkReal x6622=(cj5*sj5);
IkReal x6623=((1.0)*r20);
CheckValue<IkReal> x6624 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6624.valid){
continue;
}
CheckValue<IkReal> x6625=IKPowWithIntegerCheck(IKsign((((r00*r20*x6620))+((r01*r21))+(((-1.0)*r00*x6621*x6622))+(((-1.0)*r01*x6620*x6621))+((r02*r22))+(((-1.0)*r01*x6622*x6623)))),-1);
if(!x6625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6624.value)+(((1.5707963267949)*(x6625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6626=IKsin(j4);
IkReal x6627=IKcos(j4);
IkReal x6628=(r11*sj5);
IkReal x6629=(cj5*r00);
IkReal x6630=(cj5*r10);
IkReal x6631=(r21*sj5);
IkReal x6632=(cj5*r20);
IkReal x6633=(r01*sj5);
IkReal x6634=((1.0)*x6627);
IkReal x6635=((1.0)*x6626);
evalcond[0]=((((-1.0)*r22*x6634))+((x6626*x6631))+(((-1.0)*x6632*x6635)));
evalcond[1]=((((-1.0)*r22*x6635))+((x6627*x6632))+(((-1.0)*x6631*x6634)));
evalcond[2]=(((x6626*x6628))+cj0+(((-1.0)*x6630*x6635))+(((-1.0)*r12*x6634)));
evalcond[3]=(((x6627*x6629))+cj0+(((-1.0)*r02*x6635))+(((-1.0)*x6633*x6634)));
evalcond[4]=((((-1.0)*x6628*x6634))+sj0+((x6627*x6630))+(((-1.0)*r12*x6635)));
evalcond[5]=((((-1.0)*sj0))+((x6626*x6633))+(((-1.0)*x6629*x6635))+(((-1.0)*r02*x6634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6636=((1.0)*cj5);
CheckValue<IkReal> x6637 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6637.valid){
continue;
}
CheckValue<IkReal> x6638=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6636)))),-1);
if(!x6638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6637.value)+(((1.5707963267949)*(x6638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6639=IKsin(j4);
IkReal x6640=IKcos(j4);
IkReal x6641=(r11*sj5);
IkReal x6642=(cj5*r00);
IkReal x6643=(cj5*r10);
IkReal x6644=(r21*sj5);
IkReal x6645=(cj5*r20);
IkReal x6646=(r01*sj5);
IkReal x6647=((1.0)*x6640);
IkReal x6648=((1.0)*x6639);
evalcond[0]=((((-1.0)*r22*x6647))+((x6639*x6644))+(((-1.0)*x6645*x6648)));
evalcond[1]=((((-1.0)*r22*x6648))+((x6640*x6645))+(((-1.0)*x6644*x6647)));
evalcond[2]=(cj0+((x6639*x6641))+(((-1.0)*x6643*x6648))+(((-1.0)*r12*x6647)));
evalcond[3]=(cj0+(((-1.0)*x6646*x6647))+((x6640*x6642))+(((-1.0)*r02*x6648)));
evalcond[4]=(sj0+(((-1.0)*x6641*x6647))+((x6640*x6643))+(((-1.0)*r12*x6648)));
evalcond[5]=((((-1.0)*sj0))+((x6639*x6646))+(((-1.0)*x6642*x6648))+(((-1.0)*r02*x6647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6649=IKsin(j0);
IkReal x6650=IKcos(j0);
evalcond[0]=((((0.39225)*x6650))+(((-1.0)*px))+(((-0.10915)*x6649)));
evalcond[1]=((((0.39225)*x6649))+(((-1.0)*py))+(((0.10915)*x6650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6651=((1.0)*cj5);
IkReal x6652=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6651)));
j4eval[0]=x6652;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6651)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6653=((1.0)*cj5);
IkReal x6654=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6653)));
j4eval[0]=x6654;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x6653))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6654);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6655=cj5*cj5;
IkReal x6656=((1.0)*sj5);
IkReal x6657=(cj5*r20);
IkReal x6658=(r11*r21);
IkReal x6659=((((-1.0)*x6655*x6658))+(((-1.0)*cj5*r10*r21*x6656))+x6658+((r12*r22))+(((-1.0)*r11*x6656*x6657))+((r10*r20*x6655)));
j4eval[0]=x6659;
j4eval[1]=IKsign(x6659);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6656))+((cj0*x6657)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6660=cj5*cj5;
IkReal x6661=((1.0)*sj5);
IkReal x6662=(cj5*r20);
IkReal x6663=(r11*r21);
CheckValue<IkReal> x6664 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6661))+((cj0*x6662)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6664.valid){
continue;
}
CheckValue<IkReal> x6665=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6661*x6662))+(((-1.0)*cj5*r10*r21*x6661))+x6663+((r12*r22))+((r10*r20*x6660))+(((-1.0)*x6660*x6663)))),-1);
if(!x6665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6664.value)+(((1.5707963267949)*(x6665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6666=IKsin(j4);
IkReal x6667=IKcos(j4);
IkReal x6668=((1.0)*sj0);
IkReal x6669=(cj5*r00);
IkReal x6670=(r11*sj5);
IkReal x6671=(cj5*r10);
IkReal x6672=(r21*sj5);
IkReal x6673=(cj5*r20);
IkReal x6674=(r01*sj5);
IkReal x6675=((1.0)*x6667);
IkReal x6676=((1.0)*x6666);
evalcond[0]=((((-1.0)*x6673*x6676))+((x6666*x6672))+(((-1.0)*r22*x6675)));
evalcond[1]=((((-1.0)*x6672*x6675))+((x6667*x6673))+(((-1.0)*r22*x6676)));
evalcond[2]=(cj0+(((-1.0)*x6671*x6676))+(((-1.0)*r12*x6675))+((x6666*x6670)));
evalcond[3]=((((-1.0)*r02*x6675))+(((-1.0)*x6669*x6676))+(((-1.0)*x6668))+((x6666*x6674)));
evalcond[4]=((((-1.0)*r02*x6676))+((x6667*x6669))+(((-1.0)*x6674*x6675))+(((-1.0)*cj0)));
evalcond[5]=(((x6667*x6671))+(((-1.0)*x6670*x6675))+(((-1.0)*r12*x6676))+(((-1.0)*x6668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6677=((1.0)*cj5);
CheckValue<IkReal> x6678 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6677))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6678.valid){
continue;
}
CheckValue<IkReal> x6679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6677)))),-1);
if(!x6679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6678.value)+(((1.5707963267949)*(x6679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6680=IKsin(j4);
IkReal x6681=IKcos(j4);
IkReal x6682=((1.0)*sj0);
IkReal x6683=(cj5*r00);
IkReal x6684=(r11*sj5);
IkReal x6685=(cj5*r10);
IkReal x6686=(r21*sj5);
IkReal x6687=(cj5*r20);
IkReal x6688=(r01*sj5);
IkReal x6689=((1.0)*x6681);
IkReal x6690=((1.0)*x6680);
evalcond[0]=((((-1.0)*x6687*x6690))+(((-1.0)*r22*x6689))+((x6680*x6686)));
evalcond[1]=(((x6681*x6687))+(((-1.0)*r22*x6690))+(((-1.0)*x6686*x6689)));
evalcond[2]=((((-1.0)*x6685*x6690))+cj0+(((-1.0)*r12*x6689))+((x6680*x6684)));
evalcond[3]=((((-1.0)*r02*x6689))+(((-1.0)*x6683*x6690))+(((-1.0)*x6682))+((x6680*x6688)));
evalcond[4]=((((-1.0)*r02*x6690))+(((-1.0)*x6688*x6689))+((x6681*x6683))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6684*x6689))+(((-1.0)*x6682))+((x6681*x6685))+(((-1.0)*r12*x6690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6691=((1.0)*cj5);
CheckValue<IkReal> x6692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6691))+(((-1.0)*r00*sj5)))),-1);
if(!x6692.valid){
continue;
}
CheckValue<IkReal> x6693 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6692.value)))+(x6693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6694=IKsin(j4);
IkReal x6695=IKcos(j4);
IkReal x6696=((1.0)*sj0);
IkReal x6697=(cj5*r00);
IkReal x6698=(r11*sj5);
IkReal x6699=(cj5*r10);
IkReal x6700=(r21*sj5);
IkReal x6701=(cj5*r20);
IkReal x6702=(r01*sj5);
IkReal x6703=((1.0)*x6695);
IkReal x6704=((1.0)*x6694);
evalcond[0]=((((-1.0)*r22*x6703))+((x6694*x6700))+(((-1.0)*x6701*x6704)));
evalcond[1]=((((-1.0)*r22*x6704))+((x6695*x6701))+(((-1.0)*x6700*x6703)));
evalcond[2]=(cj0+(((-1.0)*x6699*x6704))+(((-1.0)*r12*x6703))+((x6694*x6698)));
evalcond[3]=((((-1.0)*r02*x6703))+(((-1.0)*x6697*x6704))+((x6694*x6702))+(((-1.0)*x6696)));
evalcond[4]=((((-1.0)*r02*x6704))+(((-1.0)*x6702*x6703))+((x6695*x6697))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6698*x6703))+(((-1.0)*x6696))+(((-1.0)*r12*x6704))+((x6695*x6699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6705=IKcos(j0);
IkReal x6706=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x6706))+(((-0.81725)*x6705)));
evalcond[1]=((((-1.0)*py))+(((-0.81725)*x6706))+(((0.10915)*x6705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6707=((1.0)*cj5);
IkReal x6708=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6707)));
j4eval[0]=x6708;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6707)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6708);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6709=cj5*cj5;
IkReal x6710=((1.0)*r21);
IkReal x6711=(cj5*sj5);
IkReal x6712=((1.0)*r20);
IkReal x6713=((((-1.0)*r00*x6710*x6711))+((r00*r20*x6709))+((r01*r21))+(((-1.0)*r01*x6711*x6712))+(((-1.0)*r01*x6709*x6710))+((r02*r22)));
j4eval[0]=x6713;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6712))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6713);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6714=cj5*cj5;
IkReal x6715=(r21*sj5);
IkReal x6716=(r11*r21);
IkReal x6717=((1.0)*cj5*r20);
IkReal x6718=((((-1.0)*r11*sj5*x6717))+x6716+(((-1.0)*cj5*r10*x6715))+((r12*r22))+((r10*r20*x6714))+(((-1.0)*x6714*x6716)));
j4eval[0]=x6718;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6717))+((sj0*x6715))))));
j4eval[2]=IKsign(x6718);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6719=cj5*cj5;
IkReal x6720=(r21*sj5);
IkReal x6721=(r11*r21);
IkReal x6722=((1.0)*cj5*r20);
CheckValue<IkReal> x6723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x6722))+x6721+(((-1.0)*cj5*r10*x6720))+((r12*r22))+((r10*r20*x6719))+(((-1.0)*x6719*x6721)))),-1);
if(!x6723.valid){
continue;
}
CheckValue<IkReal> x6724 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6722))+((sj0*x6720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6723.value)))+(x6724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6725=IKsin(j4);
IkReal x6726=IKcos(j4);
IkReal x6727=(r11*sj5);
IkReal x6728=(cj5*r00);
IkReal x6729=(cj5*r10);
IkReal x6730=(r21*sj5);
IkReal x6731=(cj5*r20);
IkReal x6732=(r01*sj5);
IkReal x6733=((1.0)*x6726);
IkReal x6734=((1.0)*x6725);
evalcond[0]=((((-1.0)*r22*x6733))+((x6725*x6730))+(((-1.0)*x6731*x6734)));
evalcond[1]=((((-1.0)*x6730*x6733))+(((-1.0)*r22*x6734))+((x6726*x6731)));
evalcond[2]=(cj0+(((-1.0)*r12*x6733))+(((-1.0)*x6729*x6734))+((x6725*x6727)));
evalcond[3]=(cj0+(((-1.0)*r02*x6734))+((x6726*x6728))+(((-1.0)*x6732*x6733)));
evalcond[4]=(sj0+(((-1.0)*r12*x6734))+(((-1.0)*x6727*x6733))+((x6726*x6729)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6728*x6734))+(((-1.0)*r02*x6733))+((x6725*x6732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6735=cj5*cj5;
IkReal x6736=((1.0)*r21);
IkReal x6737=(cj5*sj5);
IkReal x6738=((1.0)*r20);
CheckValue<IkReal> x6739=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6735*x6736))+((r01*r21))+((r00*r20*x6735))+((r02*r22))+(((-1.0)*r00*x6736*x6737))+(((-1.0)*r01*x6737*x6738)))),-1);
if(!x6739.valid){
continue;
}
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6739.value)))+(x6740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6741=IKsin(j4);
IkReal x6742=IKcos(j4);
IkReal x6743=(r11*sj5);
IkReal x6744=(cj5*r00);
IkReal x6745=(cj5*r10);
IkReal x6746=(r21*sj5);
IkReal x6747=(cj5*r20);
IkReal x6748=(r01*sj5);
IkReal x6749=((1.0)*x6742);
IkReal x6750=((1.0)*x6741);
evalcond[0]=((((-1.0)*r22*x6749))+((x6741*x6746))+(((-1.0)*x6747*x6750)));
evalcond[1]=(((x6742*x6747))+(((-1.0)*x6746*x6749))+(((-1.0)*r22*x6750)));
evalcond[2]=((((-1.0)*r12*x6749))+cj0+((x6741*x6743))+(((-1.0)*x6745*x6750)));
evalcond[3]=(cj0+((x6742*x6744))+(((-1.0)*r02*x6750))+(((-1.0)*x6748*x6749)));
evalcond[4]=(sj0+((x6742*x6745))+(((-1.0)*x6743*x6749))+(((-1.0)*r12*x6750)));
evalcond[5]=((((-1.0)*sj0))+((x6741*x6748))+(((-1.0)*r02*x6749))+(((-1.0)*x6744*x6750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6751=((1.0)*cj5);
CheckValue<IkReal> x6752 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6751)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6752.valid){
continue;
}
CheckValue<IkReal> x6753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6751)))),-1);
if(!x6753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6752.value)+(((1.5707963267949)*(x6753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6754=IKsin(j4);
IkReal x6755=IKcos(j4);
IkReal x6756=(r11*sj5);
IkReal x6757=(cj5*r00);
IkReal x6758=(cj5*r10);
IkReal x6759=(r21*sj5);
IkReal x6760=(cj5*r20);
IkReal x6761=(r01*sj5);
IkReal x6762=((1.0)*x6755);
IkReal x6763=((1.0)*x6754);
evalcond[0]=((((-1.0)*x6760*x6763))+(((-1.0)*r22*x6762))+((x6754*x6759)));
evalcond[1]=((((-1.0)*x6759*x6762))+(((-1.0)*r22*x6763))+((x6755*x6760)));
evalcond[2]=(cj0+(((-1.0)*x6758*x6763))+((x6754*x6756))+(((-1.0)*r12*x6762)));
evalcond[3]=(cj0+(((-1.0)*r02*x6763))+(((-1.0)*x6761*x6762))+((x6755*x6757)));
evalcond[4]=(sj0+(((-1.0)*x6756*x6762))+(((-1.0)*r12*x6763))+((x6755*x6758)));
evalcond[5]=((((-1.0)*sj0))+((x6754*x6761))+(((-1.0)*r02*x6762))+(((-1.0)*x6757*x6763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6764=IKcos(j0);
IkReal x6765=IKsin(j0);
evalcond[0]=((((-0.10915)*x6765))+(((-1.0)*px))+(((-0.03275)*x6764)));
evalcond[1]=((((0.10915)*x6764))+(((-1.0)*py))+(((-0.03275)*x6765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6766=((1.0)*cj5);
IkReal x6767=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6766)));
j4eval[0]=x6767;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6766))))));
j4eval[2]=IKsign(x6767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6768=((1.0)*cj5);
IkReal x6769=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6768)));
j4eval[0]=x6769;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6768))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6769);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6770=cj5*cj5;
IkReal x6771=((1.0)*sj5);
IkReal x6772=(cj5*r20);
IkReal x6773=(r11*r21);
IkReal x6774=((((-1.0)*r11*x6771*x6772))+(((-1.0)*x6770*x6773))+x6773+((r12*r22))+(((-1.0)*cj5*r10*r21*x6771))+((r10*r20*x6770)));
j4eval[0]=x6774;
j4eval[1]=IKsign(x6774);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6772))+(((-1.0)*cj0*r21*x6771))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6775=cj5*cj5;
IkReal x6776=((1.0)*sj5);
IkReal x6777=(cj5*r20);
IkReal x6778=(r11*r21);
CheckValue<IkReal> x6779=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6775*x6778))+x6778+((r12*r22))+(((-1.0)*cj5*r10*r21*x6776))+(((-1.0)*r11*x6776*x6777))+((r10*r20*x6775)))),-1);
if(!x6779.valid){
continue;
}
CheckValue<IkReal> x6780 = IKatan2WithCheck(IkReal((((cj0*x6777))+(((-1.0)*cj0*r21*x6776)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6779.value)))+(x6780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6781=IKsin(j4);
IkReal x6782=IKcos(j4);
IkReal x6783=((1.0)*sj0);
IkReal x6784=(cj5*r00);
IkReal x6785=(r11*sj5);
IkReal x6786=(cj5*r10);
IkReal x6787=(r21*sj5);
IkReal x6788=(cj5*r20);
IkReal x6789=(r01*sj5);
IkReal x6790=((1.0)*x6782);
IkReal x6791=((1.0)*x6781);
evalcond[0]=(((x6781*x6787))+(((-1.0)*x6788*x6791))+(((-1.0)*r22*x6790)));
evalcond[1]=((((-1.0)*r22*x6791))+(((-1.0)*x6787*x6790))+((x6782*x6788)));
evalcond[2]=(cj0+((x6781*x6785))+(((-1.0)*x6786*x6791))+(((-1.0)*r12*x6790)));
evalcond[3]=((((-1.0)*x6783))+((x6781*x6789))+(((-1.0)*x6784*x6791))+(((-1.0)*r02*x6790)));
evalcond[4]=((((-1.0)*x6789*x6790))+(((-1.0)*cj0))+((x6782*x6784))+(((-1.0)*r02*x6791)));
evalcond[5]=((((-1.0)*x6783))+(((-1.0)*x6785*x6790))+(((-1.0)*r12*x6791))+((x6782*x6786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6792=((1.0)*cj5);
CheckValue<IkReal> x6793=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6792))+(((-1.0)*r10*sj5)))),-1);
if(!x6793.valid){
continue;
}
CheckValue<IkReal> x6794 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6793.value)))+(x6794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6795=IKsin(j4);
IkReal x6796=IKcos(j4);
IkReal x6797=((1.0)*sj0);
IkReal x6798=(cj5*r00);
IkReal x6799=(r11*sj5);
IkReal x6800=(cj5*r10);
IkReal x6801=(r21*sj5);
IkReal x6802=(cj5*r20);
IkReal x6803=(r01*sj5);
IkReal x6804=((1.0)*x6796);
IkReal x6805=((1.0)*x6795);
evalcond[0]=(((x6795*x6801))+(((-1.0)*r22*x6804))+(((-1.0)*x6802*x6805)));
evalcond[1]=(((x6796*x6802))+(((-1.0)*r22*x6805))+(((-1.0)*x6801*x6804)));
evalcond[2]=(cj0+(((-1.0)*r12*x6804))+((x6795*x6799))+(((-1.0)*x6800*x6805)));
evalcond[3]=((((-1.0)*r02*x6804))+((x6795*x6803))+(((-1.0)*x6798*x6805))+(((-1.0)*x6797)));
evalcond[4]=((((-1.0)*x6803*x6804))+(((-1.0)*r02*x6805))+((x6796*x6798))+(((-1.0)*cj0)));
evalcond[5]=(((x6796*x6800))+(((-1.0)*r12*x6805))+(((-1.0)*x6797))+(((-1.0)*x6799*x6804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6806=((1.0)*cj5);
CheckValue<IkReal> x6807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6806)))),-1);
if(!x6807.valid){
continue;
}
CheckValue<IkReal> x6808 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6807.value)))+(x6808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6809=IKsin(j4);
IkReal x6810=IKcos(j4);
IkReal x6811=((1.0)*sj0);
IkReal x6812=(cj5*r00);
IkReal x6813=(r11*sj5);
IkReal x6814=(cj5*r10);
IkReal x6815=(r21*sj5);
IkReal x6816=(cj5*r20);
IkReal x6817=(r01*sj5);
IkReal x6818=((1.0)*x6810);
IkReal x6819=((1.0)*x6809);
evalcond[0]=((((-1.0)*x6816*x6819))+((x6809*x6815))+(((-1.0)*r22*x6818)));
evalcond[1]=(((x6810*x6816))+(((-1.0)*x6815*x6818))+(((-1.0)*r22*x6819)));
evalcond[2]=(cj0+((x6809*x6813))+(((-1.0)*r12*x6818))+(((-1.0)*x6814*x6819)));
evalcond[3]=((((-1.0)*x6811))+((x6809*x6817))+(((-1.0)*x6812*x6819))+(((-1.0)*r02*x6818)));
evalcond[4]=(((x6810*x6812))+(((-1.0)*x6817*x6818))+(((-1.0)*r02*x6819))+(((-1.0)*cj0)));
evalcond[5]=(((x6810*x6814))+(((-1.0)*x6811))+(((-1.0)*r12*x6819))+(((-1.0)*x6813*x6818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6820=((8500.0)*sj1);
IkReal x6821=(cj5*r01);
IkReal x6822=(r00*sj5);
IkReal x6823=(sj1*sj2);
IkReal x6824=(cj1*cj2);
IkReal x6825=((20000.0)*px);
IkReal x6826=((7845.0)*cj2*sj1);
IkReal x6827=((7845.0)*cj1*sj2);
CheckValue<IkReal> x6828=IKPowWithIntegerCheck(((((2183.0)*x6824))+(((-2183.0)*x6823))),-1);
if(!x6828.valid){
continue;
}
CheckValue<IkReal> x6829=IKPowWithIntegerCheck(((((-1.0)*x6823))+x6824),-1);
if(!x6829.valid){
continue;
}
if( IKabs(((x6828.value)*(((((1893.0)*x6822*x6823))+((x6820*x6822))+((x6820*x6821))+(((-1.0)*x6824*x6825))+(((1893.0)*x6821*x6823))+((x6823*x6825))+(((-1893.0)*x6821*x6824))+(((-1893.0)*x6822*x6824))+((x6821*x6826))+((x6821*x6827))+((x6822*x6827))+((x6822*x6826)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6829.value)*((x6821+x6822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6828.value)*(((((1893.0)*x6822*x6823))+((x6820*x6822))+((x6820*x6821))+(((-1.0)*x6824*x6825))+(((1893.0)*x6821*x6823))+((x6823*x6825))+(((-1893.0)*x6821*x6824))+(((-1893.0)*x6822*x6824))+((x6821*x6826))+((x6821*x6827))+((x6822*x6827))+((x6822*x6826))))))+IKsqr(((x6829.value)*((x6821+x6822))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6828.value)*(((((1893.0)*x6822*x6823))+((x6820*x6822))+((x6820*x6821))+(((-1.0)*x6824*x6825))+(((1893.0)*x6821*x6823))+((x6823*x6825))+(((-1893.0)*x6821*x6824))+(((-1893.0)*x6822*x6824))+((x6821*x6826))+((x6821*x6827))+((x6822*x6827))+((x6822*x6826))))), ((x6829.value)*((x6821+x6822))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6830=IKcos(j0);
IkReal x6831=IKsin(j0);
IkReal x6832=((0.39225)*cj1);
IkReal x6833=((1.0)*sj1);
IkReal x6834=(cj1*cj2);
IkReal x6835=(cj5*r11);
IkReal x6836=((1.0)*sj5);
IkReal x6837=((0.09465)*sj5);
IkReal x6838=(cj5*r01);
IkReal x6839=((0.39225)*cj2);
IkReal x6840=(sj2*x6831);
IkReal x6841=(sj1*x6830);
IkReal x6842=(sj2*x6830);
IkReal x6843=(sj1*x6831);
evalcond[0]=(((x6830*x6834))+(((-1.0)*x6838))+(((-1.0)*r00*x6836))+(((-1.0)*x6833*x6842)));
evalcond[1]=(((x6831*x6834))+(((-1.0)*x6835))+(((-1.0)*r10*x6836))+(((-1.0)*x6833*x6840)));
evalcond[2]=((((0.425)*x6841))+(((-0.09465)*x6838))+(((-0.10915)*x6831))+((x6839*x6841))+(((-1.0)*px))+(((-1.0)*r00*x6837))+((x6832*x6842)));
evalcond[3]=((((0.425)*x6843))+(((-0.09465)*x6835))+(((0.10915)*x6830))+((x6839*x6843))+(((-1.0)*py))+(((-1.0)*r10*x6837))+((x6832*x6840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6844=((1.0)*cj5);
IkReal x6845=((((-1.0)*r01*x6844))+(((-1.0)*r00*sj5)));
j4eval[0]=x6845;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6844))))));
j4eval[2]=IKsign(x6845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6846=((1.0)*cj5);
IkReal x6847=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6846)));
j4eval[0]=x6847;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6846))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6848=((1.0)*sj0);
IkReal x6849=((1.0)*cj0);
IkReal x6850=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6850;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6849))+(((-1.0)*r11*sj5*x6848)))))+(IKabs(((((-1.0)*r12*x6848))+(((-1.0)*r02*x6849))))));
j4eval[2]=IKsign(x6850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6851=((-1.0)*r20);
IkReal x6853 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6853)==0){
continue;
}
IkReal x6852=pow(x6853,-0.5);
CheckValue<IkReal> x6854 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6851),IKFAST_ATAN2_MAGTHRESH);
if(!x6854.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6854.value));
IkReal gconst133=(r21*x6852);
IkReal gconst134=(x6851*x6852);
CheckValue<IkReal> x6855 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6855.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6855.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6856=((-1.0)*r20);
IkReal x6857=x6852;
CheckValue<IkReal> x6859 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6856),IKFAST_ATAN2_MAGTHRESH);
if(!x6859.valid){
continue;
}
IkReal x6858=((-1.0)*(x6859.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6858;
IkReal gconst132=x6858;
IkReal gconst133=(r21*x6857);
IkReal gconst134=(x6856*x6857);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6860=((-1.0)*r20);
IkReal x6861=x6852;
CheckValue<IkReal> x6863 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6860),IKFAST_ATAN2_MAGTHRESH);
if(!x6863.valid){
continue;
}
IkReal x6862=((-1.0)*(x6863.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6862;
IkReal gconst132=x6862;
IkReal gconst133=(r21*x6861);
IkReal gconst134=(x6860*x6861);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6864=((-1.0)*r20);
IkReal x6865=x6852;
CheckValue<IkReal> x6867 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6864),IKFAST_ATAN2_MAGTHRESH);
if(!x6867.valid){
continue;
}
IkReal x6866=((-1.0)*(x6867.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6866;
IkReal gconst132=x6866;
IkReal gconst133=(r21*x6865);
IkReal gconst134=(x6864*x6865);
IkReal x6868=r22*r22;
CheckValue<IkReal> x6871=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6868))),-1);
if(!x6871.valid){
continue;
}
IkReal x6869=x6871.value;
IkReal x6870=(((x6869*(r21*r21*r21*r21)))+(((2.0)*x6869*(r20*r20)*(r21*r21)))+x6868+((x6869*(r20*r20*r20*r20))));
j4eval[0]=x6870;
j4eval[1]=IKsign(x6870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6872=(gconst133*r21);
IkReal x6873=(sj1*sj2);
IkReal x6874=(gconst134*r20);
IkReal x6875=(cj1*cj2);
CheckValue<IkReal> x6876=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6872*x6874))+(x6872*x6872)+(r22*r22)+(x6874*x6874))),-1);
if(!x6876.valid){
continue;
}
CheckValue<IkReal> x6877 = IKatan2WithCheck(IkReal((((r22*x6873))+(((-1.0)*r22*x6875)))),IkReal(((((-1.0)*x6872*x6875))+(((-1.0)*x6873*x6874))+((x6872*x6873))+((x6874*x6875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6876.value)))+(x6877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6878=IKsin(j4);
IkReal x6879=IKcos(j4);
IkReal x6880=((1.0)*cj2);
IkReal x6881=(gconst133*r11);
IkReal x6882=(gconst133*r21);
IkReal x6883=((1.0)*sj0);
IkReal x6884=(gconst133*r01);
IkReal x6885=(cj1*sj2);
IkReal x6886=((1.0)*x6879);
IkReal x6887=(gconst134*x6879);
IkReal x6888=((1.0)*x6878);
evalcond[0]=(((x6878*x6882))+(((-1.0)*gconst134*r20*x6888))+(((-1.0)*r22*x6886)));
evalcond[1]=(cj0+((x6878*x6881))+(((-1.0)*gconst134*r10*x6888))+(((-1.0)*r12*x6886)));
evalcond[2]=(((x6878*x6884))+(((-1.0)*r02*x6886))+(((-1.0)*x6883))+(((-1.0)*gconst134*r00*x6888)));
evalcond[3]=(((r20*x6887))+((sj1*sj2))+(((-1.0)*cj1*x6880))+(((-1.0)*x6882*x6886))+(((-1.0)*r22*x6888)));
evalcond[4]=((((-1.0)*x6884*x6886))+(((-1.0)*cj0*x6885))+(((-1.0)*r02*x6888))+((r00*x6887))+(((-1.0)*cj0*sj1*x6880)));
evalcond[5]=((((-1.0)*x6881*x6886))+(((-1.0)*sj0*sj1*x6880))+(((-1.0)*x6883*x6885))+(((-1.0)*r12*x6888))+((r10*x6887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6889=((1.0)*gconst134);
CheckValue<IkReal> x6890=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x6889)))),-1);
if(!x6890.valid){
continue;
}
CheckValue<IkReal> x6891 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6889))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6890.value)))+(x6891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6892=IKsin(j4);
IkReal x6893=IKcos(j4);
IkReal x6894=((1.0)*cj2);
IkReal x6895=(gconst133*r11);
IkReal x6896=(gconst133*r21);
IkReal x6897=((1.0)*sj0);
IkReal x6898=(gconst133*r01);
IkReal x6899=(cj1*sj2);
IkReal x6900=((1.0)*x6893);
IkReal x6901=(gconst134*x6893);
IkReal x6902=((1.0)*x6892);
evalcond[0]=((((-1.0)*gconst134*r20*x6902))+(((-1.0)*r22*x6900))+((x6892*x6896)));
evalcond[1]=(cj0+((x6892*x6895))+(((-1.0)*r12*x6900))+(((-1.0)*gconst134*r10*x6902)));
evalcond[2]=((((-1.0)*r02*x6900))+((x6892*x6898))+(((-1.0)*gconst134*r00*x6902))+(((-1.0)*x6897)));
evalcond[3]=((((-1.0)*r22*x6902))+((sj1*sj2))+(((-1.0)*cj1*x6894))+((r20*x6901))+(((-1.0)*x6896*x6900)));
evalcond[4]=((((-1.0)*r02*x6902))+((r00*x6901))+(((-1.0)*x6898*x6900))+(((-1.0)*cj0*x6899))+(((-1.0)*cj0*sj1*x6894)));
evalcond[5]=((((-1.0)*x6897*x6899))+(((-1.0)*sj0*sj1*x6894))+(((-1.0)*r12*x6902))+((r10*x6901))+(((-1.0)*x6895*x6900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6903=((1.0)*gconst134);
CheckValue<IkReal> x6904=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x6903)))),-1);
if(!x6904.valid){
continue;
}
CheckValue<IkReal> x6905 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x6903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6904.value)))+(x6905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6906=IKsin(j4);
IkReal x6907=IKcos(j4);
IkReal x6908=((1.0)*cj2);
IkReal x6909=(gconst133*r11);
IkReal x6910=(gconst133*r21);
IkReal x6911=((1.0)*sj0);
IkReal x6912=(gconst133*r01);
IkReal x6913=(cj1*sj2);
IkReal x6914=((1.0)*x6907);
IkReal x6915=(gconst134*x6907);
IkReal x6916=((1.0)*x6906);
evalcond[0]=((((-1.0)*r22*x6914))+(((-1.0)*gconst134*r20*x6916))+((x6906*x6910)));
evalcond[1]=((((-1.0)*gconst134*r10*x6916))+cj0+(((-1.0)*r12*x6914))+((x6906*x6909)));
evalcond[2]=((((-1.0)*gconst134*r00*x6916))+(((-1.0)*x6911))+(((-1.0)*r02*x6914))+((x6906*x6912)));
evalcond[3]=((((-1.0)*cj1*x6908))+(((-1.0)*x6910*x6914))+(((-1.0)*r22*x6916))+((sj1*sj2))+((r20*x6915)));
evalcond[4]=((((-1.0)*x6912*x6914))+((r00*x6915))+(((-1.0)*cj0*sj1*x6908))+(((-1.0)*cj0*x6913))+(((-1.0)*r02*x6916)));
evalcond[5]=((((-1.0)*x6911*x6913))+(((-1.0)*sj0*sj1*x6908))+((r10*x6915))+(((-1.0)*r12*x6916))+(((-1.0)*x6909*x6914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6917=((-1.0)*r21);
IkReal x6919 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6919)==0){
continue;
}
IkReal x6918=pow(x6919,-0.5);
CheckValue<IkReal> x6920 = IKatan2WithCheck(IkReal(x6917),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6920.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6920.value))));
IkReal gconst136=(x6917*x6918);
IkReal gconst137=((1.0)*r20*x6918);
CheckValue<IkReal> x6921 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6921.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6921.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6922=((-1.0)*r21);
CheckValue<IkReal> x6925 = IKatan2WithCheck(IkReal(x6922),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6925.valid){
continue;
}
IkReal x6923=((1.0)*(x6925.value));
IkReal x6924=x6918;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6923)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6923)));
IkReal gconst136=(x6922*x6924);
IkReal gconst137=((1.0)*r20*x6924);
IkReal x6926=r22*r22;
IkReal x6927=((1.0)*x6926);
CheckValue<IkReal> x6931=IKPowWithIntegerCheck(((-1.0)+x6926),-1);
if(!x6931.valid){
continue;
}
IkReal x6928=x6931.value;
if((((1.0)+(((-1.0)*x6927)))) < -0.00001)
continue;
IkReal x6929=IKsqrt(((1.0)+(((-1.0)*x6927))));
IkReal x6930=(cj0*x6928*x6929);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6930+(((-1.0)*x6927*x6930))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6932=((-1.0)*r21);
CheckValue<IkReal> x6935 = IKatan2WithCheck(IkReal(x6932),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6935.valid){
continue;
}
IkReal x6933=((1.0)*(x6935.value));
IkReal x6934=x6918;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6933)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6933)));
IkReal gconst136=(x6932*x6934);
IkReal gconst137=((1.0)*r20*x6934);
IkReal x6936=r22*r22;
IkReal x6937=((1.0)*x6936);
CheckValue<IkReal> x6941=IKPowWithIntegerCheck(((-1.0)+x6936),-1);
if(!x6941.valid){
continue;
}
IkReal x6938=x6941.value;
if((((1.0)+(((-1.0)*x6937)))) < -0.00001)
continue;
IkReal x6939=IKsqrt(((1.0)+(((-1.0)*x6937))));
IkReal x6940=(sj0*x6938*x6939);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6940+(((-1.0)*x6937*x6940))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6942=((-1.0)*r21);
CheckValue<IkReal> x6945 = IKatan2WithCheck(IkReal(x6942),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6945.valid){
continue;
}
IkReal x6943=((1.0)*(x6945.value));
IkReal x6944=x6918;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6943)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6943)));
IkReal gconst136=(x6942*x6944);
IkReal gconst137=((1.0)*r20*x6944);
IkReal x6946=r22*r22;
IkReal x6947=(r12*sj0);
IkReal x6948=(cj0*r02);
CheckValue<IkReal> x6952=IKPowWithIntegerCheck(((-1.0)+x6946),-1);
if(!x6952.valid){
continue;
}
IkReal x6949=x6952.value;
if((((1.0)+(((-1.0)*x6946)))) < -0.00001)
continue;
IkReal x6950=IKsqrt(((1.0)+(((-1.0)*x6946))));
IkReal x6951=(r22*x6949*x6950);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6947))+(((-1.0)*x6948)))))+(IKabs((((x6947*x6951))+((x6948*x6951))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6953=((1.0)*sj0);
IkReal x6954=((1.0)*cj0);
CheckValue<IkReal> x6955 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6953))+(((-1.0)*r02*x6954)))),IkReal(((((-1.0)*gconst136*r11*x6953))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x6954))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6955.valid){
continue;
}
CheckValue<IkReal> x6956=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x6956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6955.value)+(((1.5707963267949)*(x6956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6957=IKsin(j4);
IkReal x6958=IKcos(j4);
IkReal x6959=(gconst136*r01);
IkReal x6960=(gconst137*r10);
IkReal x6961=(gconst137*r20);
IkReal x6962=((1.0)*cj2);
IkReal x6963=(gconst136*r11);
IkReal x6964=(gconst136*r21);
IkReal x6965=(gconst137*r00);
IkReal x6966=((1.0)*sj0);
IkReal x6967=(cj1*sj2);
IkReal x6968=((1.0)*x6958);
IkReal x6969=((1.0)*x6957);
evalcond[0]=((((-1.0)*x6961*x6969))+(((-1.0)*r22*x6968))+((x6957*x6964)));
evalcond[1]=(cj0+(((-1.0)*r12*x6968))+(((-1.0)*x6960*x6969))+((x6957*x6963)));
evalcond[2]=((((-1.0)*x6965*x6969))+(((-1.0)*r02*x6968))+((x6957*x6959))+(((-1.0)*x6966)));
evalcond[3]=((((-1.0)*x6964*x6968))+((sj1*sj2))+((x6958*x6961))+(((-1.0)*r22*x6969))+(((-1.0)*cj1*x6962)));
evalcond[4]=((((-1.0)*r02*x6969))+(((-1.0)*x6959*x6968))+(((-1.0)*cj0*sj1*x6962))+(((-1.0)*cj0*x6967))+((x6958*x6965)));
evalcond[5]=((((-1.0)*sj0*sj1*x6962))+(((-1.0)*r12*x6969))+(((-1.0)*x6966*x6967))+((x6958*x6960))+(((-1.0)*x6963*x6968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6970=((1.0)*gconst137);
CheckValue<IkReal> x6971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6970))+(((-1.0)*gconst136*r10)))),-1);
if(!x6971.valid){
continue;
}
CheckValue<IkReal> x6972 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6970))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6971.value)))+(x6972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6973=IKsin(j4);
IkReal x6974=IKcos(j4);
IkReal x6975=(gconst136*r01);
IkReal x6976=(gconst137*r10);
IkReal x6977=(gconst137*r20);
IkReal x6978=((1.0)*cj2);
IkReal x6979=(gconst136*r11);
IkReal x6980=(gconst136*r21);
IkReal x6981=(gconst137*r00);
IkReal x6982=((1.0)*sj0);
IkReal x6983=(cj1*sj2);
IkReal x6984=((1.0)*x6974);
IkReal x6985=((1.0)*x6973);
evalcond[0]=((((-1.0)*r22*x6984))+((x6973*x6980))+(((-1.0)*x6977*x6985)));
evalcond[1]=(cj0+(((-1.0)*r12*x6984))+(((-1.0)*x6976*x6985))+((x6973*x6979)));
evalcond[2]=((((-1.0)*x6982))+(((-1.0)*x6981*x6985))+(((-1.0)*r02*x6984))+((x6973*x6975)));
evalcond[3]=(((x6974*x6977))+((sj1*sj2))+(((-1.0)*r22*x6985))+(((-1.0)*cj1*x6978))+(((-1.0)*x6980*x6984)));
evalcond[4]=((((-1.0)*cj0*sj1*x6978))+(((-1.0)*x6975*x6984))+((x6974*x6981))+(((-1.0)*cj0*x6983))+(((-1.0)*r02*x6985)));
evalcond[5]=(((x6974*x6976))+(((-1.0)*sj0*sj1*x6978))+(((-1.0)*r12*x6985))+(((-1.0)*x6979*x6984))+(((-1.0)*x6982*x6983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6986=((1.0)*gconst137);
CheckValue<IkReal> x6987=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x6986)))),-1);
if(!x6987.valid){
continue;
}
CheckValue<IkReal> x6988 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6986))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6987.value)))+(x6988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6989=IKsin(j4);
IkReal x6990=IKcos(j4);
IkReal x6991=(gconst136*r01);
IkReal x6992=(gconst137*r10);
IkReal x6993=(gconst137*r20);
IkReal x6994=((1.0)*cj2);
IkReal x6995=(gconst136*r11);
IkReal x6996=(gconst136*r21);
IkReal x6997=(gconst137*r00);
IkReal x6998=((1.0)*sj0);
IkReal x6999=(cj1*sj2);
IkReal x7000=((1.0)*x6990);
IkReal x7001=((1.0)*x6989);
evalcond[0]=((((-1.0)*r22*x7000))+(((-1.0)*x6993*x7001))+((x6989*x6996)));
evalcond[1]=((((-1.0)*r12*x7000))+cj0+((x6989*x6995))+(((-1.0)*x6992*x7001)));
evalcond[2]=((((-1.0)*r02*x7000))+((x6989*x6991))+(((-1.0)*x6998))+(((-1.0)*x6997*x7001)));
evalcond[3]=((((-1.0)*r22*x7001))+((sj1*sj2))+((x6990*x6993))+(((-1.0)*x6996*x7000))+(((-1.0)*cj1*x6994)));
evalcond[4]=((((-1.0)*r02*x7001))+(((-1.0)*cj0*sj1*x6994))+((x6990*x6997))+(((-1.0)*x6991*x7000))+(((-1.0)*cj0*x6999)));
evalcond[5]=((((-1.0)*r12*x7001))+(((-1.0)*x6998*x6999))+(((-1.0)*sj0*sj1*x6994))+((x6990*x6992))+(((-1.0)*x6995*x7000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7002=((-1.0)*r10);
IkReal x7004 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7004)==0){
continue;
}
IkReal x7003=pow(x7004,-0.5);
CheckValue<IkReal> x7005 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7002),IKFAST_ATAN2_MAGTHRESH);
if(!x7005.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7005.value));
IkReal gconst139=(r11*x7003);
IkReal gconst140=(x7002*x7003);
CheckValue<IkReal> x7006 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7006.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7006.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7007=((-1.0)*r10);
IkReal x7008=x7003;
CheckValue<IkReal> x7010 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7007),IKFAST_ATAN2_MAGTHRESH);
if(!x7010.valid){
continue;
}
IkReal x7009=((-1.0)*(x7010.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7009;
IkReal gconst138=x7009;
IkReal gconst139=(r11*x7008);
IkReal gconst140=(x7007*x7008);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7011=((1.0)*sj0);
IkReal x7012=((1.0)*gconst139);
CheckValue<IkReal> x7013 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7011)))),IkReal(((((-1.0)*cj0*r01*x7012))+((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7011))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7013.valid){
continue;
}
CheckValue<IkReal> x7014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7012))+(((-1.0)*gconst140*r21)))),-1);
if(!x7014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7013.value)+(((1.5707963267949)*(x7014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7015=IKsin(j4);
IkReal x7016=IKcos(j4);
IkReal x7017=(gconst140*r00);
IkReal x7018=(gconst139*r11);
IkReal x7019=((1.0)*cj2);
IkReal x7020=(gconst139*r01);
IkReal x7021=(gconst139*r21);
IkReal x7022=((1.0)*sj0);
IkReal x7023=(cj1*sj2);
IkReal x7024=((1.0)*x7016);
IkReal x7025=((1.0)*x7015);
IkReal x7026=(gconst140*x7016);
evalcond[0]=((((-1.0)*r22*x7024))+(((-1.0)*gconst140*r20*x7025))+((x7015*x7021)));
evalcond[1]=((((-1.0)*r12*x7024))+cj0+((x7015*x7018))+(((-1.0)*gconst140*r10*x7025)));
evalcond[2]=((((-1.0)*r02*x7024))+(((-1.0)*x7017*x7025))+(((-1.0)*x7022))+((x7015*x7020)));
evalcond[3]=((((-1.0)*r22*x7025))+(((-1.0)*x7021*x7024))+(((-1.0)*cj1*x7019))+((sj1*sj2))+((r20*x7026)));
evalcond[4]=((((-1.0)*cj0*sj1*x7019))+(((-1.0)*r02*x7025))+((x7016*x7017))+(((-1.0)*x7020*x7024))+(((-1.0)*cj0*x7023)));
evalcond[5]=((((-1.0)*r12*x7025))+(((-1.0)*x7018*x7024))+((r10*x7026))+(((-1.0)*x7022*x7023))+(((-1.0)*sj0*sj1*x7019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7027=((1.0)*gconst140);
CheckValue<IkReal> x7028 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7028.valid){
continue;
}
CheckValue<IkReal> x7029=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7027)))),-1);
if(!x7029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7028.value)+(((1.5707963267949)*(x7029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7030=IKsin(j4);
IkReal x7031=IKcos(j4);
IkReal x7032=(gconst140*r00);
IkReal x7033=(gconst139*r11);
IkReal x7034=((1.0)*cj2);
IkReal x7035=(gconst139*r01);
IkReal x7036=(gconst139*r21);
IkReal x7037=((1.0)*sj0);
IkReal x7038=(cj1*sj2);
IkReal x7039=((1.0)*x7031);
IkReal x7040=((1.0)*x7030);
IkReal x7041=(gconst140*x7031);
evalcond[0]=(((x7030*x7036))+(((-1.0)*r22*x7039))+(((-1.0)*gconst140*r20*x7040)));
evalcond[1]=(((x7030*x7033))+cj0+(((-1.0)*r12*x7039))+(((-1.0)*gconst140*r10*x7040)));
evalcond[2]=(((x7030*x7035))+(((-1.0)*r02*x7039))+(((-1.0)*x7032*x7040))+(((-1.0)*x7037)));
evalcond[3]=((((-1.0)*r22*x7040))+(((-1.0)*x7036*x7039))+((sj1*sj2))+(((-1.0)*cj1*x7034))+((r20*x7041)));
evalcond[4]=((((-1.0)*r02*x7040))+(((-1.0)*x7035*x7039))+(((-1.0)*cj0*x7038))+((x7031*x7032))+(((-1.0)*cj0*sj1*x7034)));
evalcond[5]=((((-1.0)*r12*x7040))+((r10*x7041))+(((-1.0)*sj0*sj1*x7034))+(((-1.0)*x7037*x7038))+(((-1.0)*x7033*x7039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7042=((-1.0)*r11);
IkReal x7044 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7044)==0){
continue;
}
IkReal x7043=pow(x7044,-0.5);
CheckValue<IkReal> x7045 = IKatan2WithCheck(IkReal(x7042),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7045.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7045.value))));
IkReal gconst142=(x7042*x7043);
IkReal gconst143=((1.0)*r10*x7043);
CheckValue<IkReal> x7046 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7046.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7046.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7047=((-1.0)*r11);
CheckValue<IkReal> x7050 = IKatan2WithCheck(IkReal(x7047),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7050.valid){
continue;
}
IkReal x7048=((1.0)*(x7050.value));
IkReal x7049=x7043;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7048)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7048)));
IkReal gconst142=(x7047*x7049);
IkReal gconst143=((1.0)*r10*x7049);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7051=((-1.0)*r11);
CheckValue<IkReal> x7054 = IKatan2WithCheck(IkReal(x7051),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7054.valid){
continue;
}
IkReal x7052=((1.0)*(x7054.value));
IkReal x7053=x7043;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7052)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7052)));
IkReal gconst142=(x7051*x7053);
IkReal gconst143=((1.0)*r10*x7053);
IkReal x7055=r12*r12;
IkReal x7056=((1.0)*sj0);
IkReal x7057=(cj0*r02);
IkReal x7058=x7043;
j4eval[0]=((IKabs(((((-1.0)*x7057))+(((-1.0)*r12*x7056)))))+(IKabs((((sj0*x7055*x7058))+((r12*x7057*x7058))+(((-1.0)*x7056*x7058))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7059=((-1.0)*r11);
CheckValue<IkReal> x7062 = IKatan2WithCheck(IkReal(x7059),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7062.valid){
continue;
}
IkReal x7060=((1.0)*(x7062.value));
IkReal x7061=x7043;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7060)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7060)));
IkReal gconst142=(x7059*x7061);
IkReal gconst143=((1.0)*r10*x7061);
IkReal x7063=r12*r12;
IkReal x7064=(cj1*cj2*r22);
IkReal x7065=(r22*sj1*sj2);
CheckValue<IkReal> x7069=IKPowWithIntegerCheck(((-1.0)+x7063),-1);
if(!x7069.valid){
continue;
}
IkReal x7066=x7069.value;
if((((1.0)+(((-1.0)*x7063)))) < -0.00001)
continue;
IkReal x7067=IKsqrt(((1.0)+(((-1.0)*x7063))));
IkReal x7068=(r12*x7066*x7067);
j4eval[0]=((IKabs((x7065+(((-1.0)*x7064)))))+(IKabs((((x7064*x7068))+(((-1.0)*x7065*x7068))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7070=(sj1*sj2);
IkReal x7071=(gconst143*r20);
IkReal x7072=(gconst142*r21);
IkReal x7073=(cj1*cj2);
CheckValue<IkReal> x7074=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7071*x7072))+(x7072*x7072)+(x7071*x7071))),-1);
if(!x7074.valid){
continue;
}
CheckValue<IkReal> x7075 = IKatan2WithCheck(IkReal((((r22*x7070))+(((-1.0)*r22*x7073)))),IkReal(((((-1.0)*x7070*x7071))+(((-1.0)*x7072*x7073))+((x7070*x7072))+((x7071*x7073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7074.value)))+(x7075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7076=IKsin(j4);
IkReal x7077=IKcos(j4);
IkReal x7078=(gconst143*r20);
IkReal x7079=((1.0)*cj2);
IkReal x7080=((1.0)*sj0);
IkReal x7081=(cj1*sj2);
IkReal x7082=((1.0)*x7077);
IkReal x7083=((1.0)*x7076);
IkReal x7084=(gconst142*x7076);
IkReal x7085=(gconst143*x7077);
evalcond[0]=(((r21*x7084))+(((-1.0)*r22*x7082))+(((-1.0)*x7078*x7083)));
evalcond[1]=((((-1.0)*gconst143*r10*x7083))+((r11*x7084))+cj0+(((-1.0)*r12*x7082)));
evalcond[2]=(((r01*x7084))+(((-1.0)*gconst143*r00*x7083))+(((-1.0)*r02*x7082))+(((-1.0)*x7080)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x7083))+(((-1.0)*cj1*x7079))+(((-1.0)*gconst142*r21*x7082))+((x7077*x7078)));
evalcond[4]=((((-1.0)*cj0*x7081))+(((-1.0)*cj0*sj1*x7079))+((r00*x7085))+(((-1.0)*r02*x7083))+(((-1.0)*gconst142*r01*x7082)));
evalcond[5]=((((-1.0)*r12*x7083))+(((-1.0)*sj0*sj1*x7079))+(((-1.0)*x7080*x7081))+((r10*x7085))+(((-1.0)*gconst142*r11*x7082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7086=((1.0)*sj0);
IkReal x7087=((1.0)*gconst142);
CheckValue<IkReal> x7088 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7086)))),IkReal(((((-1.0)*cj0*r01*x7087))+((cj0*gconst143*r00))+((gconst143*r10*sj0))+(((-1.0)*gconst142*r11*x7086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7088.valid){
continue;
}
CheckValue<IkReal> x7089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7087))+(((-1.0)*gconst143*r21)))),-1);
if(!x7089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7088.value)+(((1.5707963267949)*(x7089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7090=IKsin(j4);
IkReal x7091=IKcos(j4);
IkReal x7092=(gconst143*r20);
IkReal x7093=((1.0)*cj2);
IkReal x7094=((1.0)*sj0);
IkReal x7095=(cj1*sj2);
IkReal x7096=((1.0)*x7091);
IkReal x7097=((1.0)*x7090);
IkReal x7098=(gconst142*x7090);
IkReal x7099=(gconst143*x7091);
evalcond[0]=(((r21*x7098))+(((-1.0)*x7092*x7097))+(((-1.0)*r22*x7096)));
evalcond[1]=(((r11*x7098))+cj0+(((-1.0)*gconst143*r10*x7097))+(((-1.0)*r12*x7096)));
evalcond[2]=((((-1.0)*x7094))+((r01*x7098))+(((-1.0)*gconst143*r00*x7097))+(((-1.0)*r02*x7096)));
evalcond[3]=((((-1.0)*cj1*x7093))+((sj1*sj2))+(((-1.0)*r22*x7097))+((x7091*x7092))+(((-1.0)*gconst142*r21*x7096)));
evalcond[4]=((((-1.0)*cj0*x7095))+((r00*x7099))+(((-1.0)*cj0*sj1*x7093))+(((-1.0)*r02*x7097))+(((-1.0)*gconst142*r01*x7096)));
evalcond[5]=((((-1.0)*x7094*x7095))+(((-1.0)*gconst142*r11*x7096))+(((-1.0)*sj0*sj1*x7093))+(((-1.0)*r12*x7097))+((r10*x7099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7100=((1.0)*gconst143);
CheckValue<IkReal> x7101=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7100)))),-1);
if(!x7101.valid){
continue;
}
CheckValue<IkReal> x7102 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7101.value)))+(x7102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7103=IKsin(j4);
IkReal x7104=IKcos(j4);
IkReal x7105=(gconst143*r20);
IkReal x7106=((1.0)*cj2);
IkReal x7107=((1.0)*sj0);
IkReal x7108=(cj1*sj2);
IkReal x7109=((1.0)*x7104);
IkReal x7110=((1.0)*x7103);
IkReal x7111=(gconst142*x7103);
IkReal x7112=(gconst143*x7104);
evalcond[0]=(((r21*x7111))+(((-1.0)*r22*x7109))+(((-1.0)*x7105*x7110)));
evalcond[1]=(((r11*x7111))+cj0+(((-1.0)*r12*x7109))+(((-1.0)*gconst143*r10*x7110)));
evalcond[2]=((((-1.0)*x7107))+(((-1.0)*r02*x7109))+(((-1.0)*gconst143*r00*x7110))+((r01*x7111)));
evalcond[3]=((((-1.0)*gconst142*r21*x7109))+((sj1*sj2))+(((-1.0)*r22*x7110))+(((-1.0)*cj1*x7106))+((x7104*x7105)));
evalcond[4]=((((-1.0)*cj0*x7108))+(((-1.0)*gconst142*r01*x7109))+(((-1.0)*r02*x7110))+(((-1.0)*cj0*sj1*x7106))+((r00*x7112)));
evalcond[5]=((((-1.0)*gconst142*r11*x7109))+(((-1.0)*r12*x7110))+((r10*x7112))+(((-1.0)*sj0*sj1*x7106))+(((-1.0)*x7107*x7108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7113=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7113;
j4eval[1]=IKsign(x7113);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7114=((1.0)*cj5);
IkReal x7115=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7114)));
j4eval[0]=x7115;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7114))))));
j4eval[2]=IKsign(x7115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7116=cj5*cj5;
IkReal x7117=r11*r11;
IkReal x7118=(r11*sj5);
IkReal x7119=(cj5*r10);
IkReal x7120=(x7117+(r12*r12)+(((-1.0)*x7116*x7117))+(((-2.0)*x7118*x7119))+((x7116*(r10*r10))));
j4eval[0]=x7120;
j4eval[1]=IKsign(x7120);
j4eval[2]=((IKabs(r12))+(IKabs((x7119+(((-1.0)*x7118))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7121=cj5*cj5;
IkReal x7122=r11*r11;
IkReal x7123=(cj5*r10);
IkReal x7124=(r11*sj5);
CheckValue<IkReal> x7125 = IKatan2WithCheck(IkReal((x7123+(((-1.0)*x7124)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7125.valid){
continue;
}
CheckValue<IkReal> x7126=IKPowWithIntegerCheck(IKsign((x7122+(r12*r12)+(((-2.0)*x7123*x7124))+(((-1.0)*x7121*x7122))+((x7121*(r10*r10))))),-1);
if(!x7126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7125.value)+(((1.5707963267949)*(x7126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7127=IKsin(j4);
IkReal x7128=IKcos(j4);
IkReal x7129=(cj5*r10);
IkReal x7130=(r01*sj5);
IkReal x7131=((1.0)*cj2);
IkReal x7132=(cj5*r00);
IkReal x7133=(cj5*r20);
IkReal x7134=((1.0)*x7128);
IkReal x7135=((1.0)*x7127);
IkReal x7136=(sj5*x7127);
evalcond[0]=(((r21*x7136))+(((-1.0)*r22*x7134))+(((-1.0)*x7133*x7135)));
evalcond[1]=((((-1.0)*x7132*x7135))+((x7127*x7130))+(((-1.0)*r02*x7134)));
evalcond[2]=((((-1.0)*r12*x7135))+((x7128*x7129))+(((-1.0)*r11*sj5*x7134)));
evalcond[3]=((1.0)+((r11*x7136))+(((-1.0)*r12*x7134))+(((-1.0)*x7129*x7135)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x7135))+(((-1.0)*cj1*x7131))+(((-1.0)*r21*sj5*x7134))+((x7128*x7133)));
evalcond[5]=((((-1.0)*x7130*x7134))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7131))+((x7128*x7132))+(((-1.0)*r02*x7135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7137=((1.0)*cj5);
CheckValue<IkReal> x7138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7137))+(((-1.0)*r00*sj5)))),-1);
if(!x7138.valid){
continue;
}
CheckValue<IkReal> x7139 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7138.value)))+(x7139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7140=IKsin(j4);
IkReal x7141=IKcos(j4);
IkReal x7142=(cj5*r10);
IkReal x7143=(r01*sj5);
IkReal x7144=((1.0)*cj2);
IkReal x7145=(cj5*r00);
IkReal x7146=(cj5*r20);
IkReal x7147=((1.0)*x7141);
IkReal x7148=((1.0)*x7140);
IkReal x7149=(sj5*x7140);
evalcond[0]=((((-1.0)*r22*x7147))+(((-1.0)*x7146*x7148))+((r21*x7149)));
evalcond[1]=(((x7140*x7143))+(((-1.0)*x7145*x7148))+(((-1.0)*r02*x7147)));
evalcond[2]=(((x7141*x7142))+(((-1.0)*r12*x7148))+(((-1.0)*r11*sj5*x7147)));
evalcond[3]=((1.0)+(((-1.0)*x7142*x7148))+(((-1.0)*r12*x7147))+((r11*x7149)));
evalcond[4]=(((x7141*x7146))+(((-1.0)*r22*x7148))+(((-1.0)*r21*sj5*x7147))+((sj1*sj2))+(((-1.0)*cj1*x7144)));
evalcond[5]=(((x7141*x7145))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7144))+(((-1.0)*r02*x7148))+(((-1.0)*x7143*x7147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7150=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7150.valid){
continue;
}
CheckValue<IkReal> x7151 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7150.value)))+(x7151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7152=IKsin(j4);
IkReal x7153=IKcos(j4);
IkReal x7154=(cj5*r10);
IkReal x7155=(r01*sj5);
IkReal x7156=((1.0)*cj2);
IkReal x7157=(cj5*r00);
IkReal x7158=(cj5*r20);
IkReal x7159=((1.0)*x7153);
IkReal x7160=((1.0)*x7152);
IkReal x7161=(sj5*x7152);
evalcond[0]=((((-1.0)*r22*x7159))+(((-1.0)*x7158*x7160))+((r21*x7161)));
evalcond[1]=((((-1.0)*x7157*x7160))+(((-1.0)*r02*x7159))+((x7152*x7155)));
evalcond[2]=((((-1.0)*r11*sj5*x7159))+((x7153*x7154))+(((-1.0)*r12*x7160)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7159))+((r11*x7161))+(((-1.0)*x7154*x7160)));
evalcond[4]=((((-1.0)*r22*x7160))+((sj1*sj2))+((x7153*x7158))+(((-1.0)*r21*sj5*x7159))+(((-1.0)*cj1*x7156)));
evalcond[5]=((((-1.0)*sj1*x7156))+(((-1.0)*r02*x7160))+(((-1.0)*x7155*x7159))+(((-1.0)*cj1*sj2))+((x7153*x7157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7162=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7162;
j4eval[1]=IKsign(x7162);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7163=((1.0)*cj5);
IkReal x7164=((((-1.0)*r20*sj5))+(((-1.0)*r21*x7163)));
j4eval[0]=x7164;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x7163)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7165=cj5*cj5;
IkReal x7166=r11*r11;
IkReal x7167=(cj5*r10);
IkReal x7168=(r11*sj5);
IkReal x7169=((((-1.0)*x7165*(r10*r10)))+((x7165*x7166))+(((2.0)*x7167*x7168))+(((-1.0)*(r12*r12)))+(((-1.0)*x7166)));
j4eval[0]=x7169;
j4eval[1]=((IKabs((x7167+(((-1.0)*x7168)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7170=cj5*cj5;
IkReal x7171=r11*r11;
IkReal x7172=(cj5*r10);
IkReal x7173=(r11*sj5);
CheckValue<IkReal> x7174=IKPowWithIntegerCheck(IKsign(((((2.0)*x7172*x7173))+(((-1.0)*x7171))+((x7170*x7171))+(((-1.0)*x7170*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x7174.valid){
continue;
}
CheckValue<IkReal> x7175 = IKatan2WithCheck(IkReal((x7172+(((-1.0)*x7173)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7174.value)))+(x7175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7176=IKsin(j4);
IkReal x7177=IKcos(j4);
IkReal x7178=(cj5*r10);
IkReal x7179=(r01*sj5);
IkReal x7180=(cj5*r00);
IkReal x7181=(cj5*r20);
IkReal x7182=((1.0)*x7177);
IkReal x7183=((1.0)*x7176);
IkReal x7184=(sj5*x7176);
evalcond[0]=(((r21*x7184))+(((-1.0)*x7181*x7183))+(((-1.0)*r22*x7182)));
evalcond[1]=(((x7176*x7179))+(((-1.0)*r02*x7182))+(((-1.0)*x7180*x7183)));
evalcond[2]=(((x7177*x7178))+(((-1.0)*r11*sj5*x7182))+(((-1.0)*r12*x7183)));
evalcond[3]=((-1.0)+(((-1.0)*x7178*x7183))+((r11*x7184))+(((-1.0)*r12*x7182)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7179*x7182))+(((-1.0)*r02*x7183))+((x7177*x7180)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7182))+(((-1.0)*r22*x7183))+((x7177*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7185=((1.0)*cj5);
CheckValue<IkReal> x7186 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7186.valid){
continue;
}
CheckValue<IkReal> x7187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7185))+(((-1.0)*r20*sj5)))),-1);
if(!x7187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7186.value)+(((1.5707963267949)*(x7187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7188=IKsin(j4);
IkReal x7189=IKcos(j4);
IkReal x7190=(cj5*r10);
IkReal x7191=(r01*sj5);
IkReal x7192=(cj5*r00);
IkReal x7193=(cj5*r20);
IkReal x7194=((1.0)*x7189);
IkReal x7195=((1.0)*x7188);
IkReal x7196=(sj5*x7188);
evalcond[0]=((((-1.0)*x7193*x7195))+((r21*x7196))+(((-1.0)*r22*x7194)));
evalcond[1]=(((x7188*x7191))+(((-1.0)*r02*x7194))+(((-1.0)*x7192*x7195)));
evalcond[2]=((((-1.0)*r11*sj5*x7194))+((x7189*x7190))+(((-1.0)*r12*x7195)));
evalcond[3]=((-1.0)+((r11*x7196))+(((-1.0)*x7190*x7195))+(((-1.0)*r12*x7194)));
evalcond[4]=(((cj2*sj1))+((x7189*x7192))+((cj1*sj2))+(((-1.0)*x7191*x7194))+(((-1.0)*r02*x7195)));
evalcond[5]=(((x7189*x7193))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7194))+(((-1.0)*r22*x7195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7197 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7197.valid){
continue;
}
CheckValue<IkReal> x7198=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7197.value)+(((1.5707963267949)*(x7198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7199=IKsin(j4);
IkReal x7200=IKcos(j4);
IkReal x7201=(cj5*r10);
IkReal x7202=(r01*sj5);
IkReal x7203=(cj5*r00);
IkReal x7204=(cj5*r20);
IkReal x7205=((1.0)*x7200);
IkReal x7206=((1.0)*x7199);
IkReal x7207=(sj5*x7199);
evalcond[0]=(((r21*x7207))+(((-1.0)*x7204*x7206))+(((-1.0)*r22*x7205)));
evalcond[1]=(((x7199*x7202))+(((-1.0)*x7203*x7206))+(((-1.0)*r02*x7205)));
evalcond[2]=(((x7200*x7201))+(((-1.0)*r12*x7206))+(((-1.0)*r11*sj5*x7205)));
evalcond[3]=((-1.0)+((r11*x7207))+(((-1.0)*x7201*x7206))+(((-1.0)*r12*x7205)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7200*x7203))+(((-1.0)*x7202*x7205))+(((-1.0)*r02*x7206)));
evalcond[5]=((((-1.0)*r21*sj5*x7205))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7200*x7204))+(((-1.0)*r22*x7206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7208=((-1.0)*r00);
IkReal x7210 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7210)==0){
continue;
}
IkReal x7209=pow(x7210,-0.5);
CheckValue<IkReal> x7211 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7208),IKFAST_ATAN2_MAGTHRESH);
if(!x7211.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7211.value));
IkReal gconst145=(r01*x7209);
IkReal gconst146=(x7208*x7209);
CheckValue<IkReal> x7212 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7212.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7212.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7213=((-1.0)*r00);
IkReal x7214=x7209;
CheckValue<IkReal> x7216 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7213),IKFAST_ATAN2_MAGTHRESH);
if(!x7216.valid){
continue;
}
IkReal x7215=((-1.0)*(x7216.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7215;
IkReal gconst144=x7215;
IkReal gconst145=(r01*x7214);
IkReal gconst146=(x7213*x7214);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7217=((1.0)*sj0);
IkReal x7218=((1.0)*gconst145);
CheckValue<IkReal> x7219=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7218)))),-1);
if(!x7219.valid){
continue;
}
CheckValue<IkReal> x7220 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7217)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7217))+(((-1.0)*cj0*r01*x7218))+((gconst146*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7219.value)))+(x7220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7221=IKsin(j4);
IkReal x7222=IKcos(j4);
IkReal x7223=(gconst146*r10);
IkReal x7224=((1.0)*cj2);
IkReal x7225=(gconst146*r20);
IkReal x7226=((1.0)*sj0);
IkReal x7227=(gconst146*r00);
IkReal x7228=(cj1*sj2);
IkReal x7229=((1.0)*x7222);
IkReal x7230=((1.0)*x7221);
IkReal x7231=(gconst145*x7221);
evalcond[0]=((((-1.0)*x7225*x7230))+(((-1.0)*r22*x7229))+((r21*x7231)));
evalcond[1]=(cj0+(((-1.0)*x7223*x7230))+(((-1.0)*r12*x7229))+((r11*x7231)));
evalcond[2]=((((-1.0)*r02*x7229))+((r01*x7231))+(((-1.0)*x7227*x7230))+(((-1.0)*x7226)));
evalcond[3]=((((-1.0)*cj1*x7224))+((sj1*sj2))+((x7222*x7225))+(((-1.0)*gconst145*r21*x7229))+(((-1.0)*r22*x7230)));
evalcond[4]=(((x7222*x7227))+(((-1.0)*cj0*x7228))+(((-1.0)*gconst145*r01*x7229))+(((-1.0)*cj0*sj1*x7224))+(((-1.0)*r02*x7230)));
evalcond[5]=((((-1.0)*gconst145*r11*x7229))+((x7222*x7223))+(((-1.0)*sj0*sj1*x7224))+(((-1.0)*r12*x7230))+(((-1.0)*x7226*x7228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7232=((1.0)*gconst146);
CheckValue<IkReal> x7233=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x7232)))),-1);
if(!x7233.valid){
continue;
}
CheckValue<IkReal> x7234 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7232))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7233.value)))+(x7234.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7235=IKsin(j4);
IkReal x7236=IKcos(j4);
IkReal x7237=(gconst146*r10);
IkReal x7238=((1.0)*cj2);
IkReal x7239=(gconst146*r20);
IkReal x7240=((1.0)*sj0);
IkReal x7241=(gconst146*r00);
IkReal x7242=(cj1*sj2);
IkReal x7243=((1.0)*x7236);
IkReal x7244=((1.0)*x7235);
IkReal x7245=(gconst145*x7235);
evalcond[0]=((((-1.0)*r22*x7243))+(((-1.0)*x7239*x7244))+((r21*x7245)));
evalcond[1]=((((-1.0)*r12*x7243))+cj0+((r11*x7245))+(((-1.0)*x7237*x7244)));
evalcond[2]=((((-1.0)*r02*x7243))+((r01*x7245))+(((-1.0)*x7241*x7244))+(((-1.0)*x7240)));
evalcond[3]=((((-1.0)*gconst145*r21*x7243))+((x7236*x7239))+(((-1.0)*cj1*x7238))+(((-1.0)*r22*x7244))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*x7238))+((x7236*x7241))+(((-1.0)*r02*x7244))+(((-1.0)*cj0*x7242))+(((-1.0)*gconst145*r01*x7243)));
evalcond[5]=((((-1.0)*gconst145*r11*x7243))+(((-1.0)*r12*x7244))+((x7236*x7237))+(((-1.0)*x7240*x7242))+(((-1.0)*sj0*sj1*x7238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7246=((-1.0)*r01);
IkReal x7248 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7248)==0){
continue;
}
IkReal x7247=pow(x7248,-0.5);
CheckValue<IkReal> x7249 = IKatan2WithCheck(IkReal(x7246),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7249.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7249.value))));
IkReal gconst148=(x7246*x7247);
IkReal gconst149=((1.0)*r00*x7247);
CheckValue<IkReal> x7250 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7250.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7250.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7251=((-1.0)*r01);
CheckValue<IkReal> x7254 = IKatan2WithCheck(IkReal(x7251),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7254.valid){
continue;
}
IkReal x7252=((1.0)*(x7254.value));
IkReal x7253=x7247;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7252)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7252)));
IkReal gconst148=(x7251*x7253);
IkReal gconst149=((1.0)*r00*x7253);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7255=((-1.0)*r01);
CheckValue<IkReal> x7258 = IKatan2WithCheck(IkReal(x7255),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7258.valid){
continue;
}
IkReal x7256=((1.0)*(x7258.value));
IkReal x7257=x7247;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7256)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7256)));
IkReal gconst148=(x7255*x7257);
IkReal gconst149=((1.0)*r00*x7257);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7259=((-1.0)*r01);
CheckValue<IkReal> x7262 = IKatan2WithCheck(IkReal(x7259),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7262.valid){
continue;
}
IkReal x7260=((1.0)*(x7262.value));
IkReal x7261=x7247;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7260)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7260)));
IkReal gconst148=(x7259*x7261);
IkReal gconst149=((1.0)*r00*x7261);
IkReal x7263=r02*r02;
IkReal x7264=(r12*sj0);
IkReal x7265=((1.0)*cj0);
IkReal x7266=x7247;
j4eval[0]=((IKabs(((((-1.0)*x7264))+(((-1.0)*r02*x7265)))))+(IKabs((((r02*x7264*x7266))+((cj0*x7263*x7266))+(((-1.0)*x7265*x7266))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7267=((1.0)*sj0);
IkReal x7268=((1.0)*gconst148);
CheckValue<IkReal> x7269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7268))+(((-1.0)*gconst149*r21)))),-1);
if(!x7269.valid){
continue;
}
CheckValue<IkReal> x7270 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7267)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x7268))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7269.value)))+(x7270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7271=IKsin(j4);
IkReal x7272=IKcos(j4);
IkReal x7273=(gconst148*r11);
IkReal x7274=((1.0)*cj2);
IkReal x7275=((1.0)*sj0);
IkReal x7276=(cj1*sj2);
IkReal x7277=((1.0)*x7272);
IkReal x7278=(gconst149*x7272);
IkReal x7279=(gconst148*x7271);
IkReal x7280=((1.0)*x7271);
evalcond[0]=((((-1.0)*gconst149*r20*x7280))+(((-1.0)*r22*x7277))+((r21*x7279)));
evalcond[1]=(((x7271*x7273))+(((-1.0)*gconst149*r10*x7280))+cj0+(((-1.0)*r12*x7277)));
evalcond[2]=((((-1.0)*r02*x7277))+((r01*x7279))+(((-1.0)*gconst149*r00*x7280))+(((-1.0)*x7275)));
evalcond[3]=(((r20*x7278))+((sj1*sj2))+(((-1.0)*cj1*x7274))+(((-1.0)*gconst148*r21*x7277))+(((-1.0)*r22*x7280)));
evalcond[4]=((((-1.0)*cj0*x7276))+(((-1.0)*cj0*sj1*x7274))+((r00*x7278))+(((-1.0)*r02*x7280))+(((-1.0)*gconst148*r01*x7277)));
evalcond[5]=((((-1.0)*x7273*x7277))+((r10*x7278))+(((-1.0)*r12*x7280))+(((-1.0)*sj0*sj1*x7274))+(((-1.0)*x7275*x7276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7281=((1.0)*gconst149);
CheckValue<IkReal> x7282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7281))+(((-1.0)*gconst148*r10)))),-1);
if(!x7282.valid){
continue;
}
CheckValue<IkReal> x7283 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7281))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7282.value)))+(x7283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7284=IKsin(j4);
IkReal x7285=IKcos(j4);
IkReal x7286=(gconst148*r11);
IkReal x7287=((1.0)*cj2);
IkReal x7288=((1.0)*sj0);
IkReal x7289=(cj1*sj2);
IkReal x7290=((1.0)*x7285);
IkReal x7291=(gconst149*x7285);
IkReal x7292=(gconst148*x7284);
IkReal x7293=((1.0)*x7284);
evalcond[0]=((((-1.0)*r22*x7290))+((r21*x7292))+(((-1.0)*gconst149*r20*x7293)));
evalcond[1]=(cj0+((x7284*x7286))+(((-1.0)*r12*x7290))+(((-1.0)*gconst149*r10*x7293)));
evalcond[2]=((((-1.0)*x7288))+(((-1.0)*r02*x7290))+(((-1.0)*gconst149*r00*x7293))+((r01*x7292)));
evalcond[3]=((((-1.0)*cj1*x7287))+(((-1.0)*r22*x7293))+((sj1*sj2))+(((-1.0)*gconst148*r21*x7290))+((r20*x7291)));
evalcond[4]=((((-1.0)*gconst148*r01*x7290))+(((-1.0)*r02*x7293))+((r00*x7291))+(((-1.0)*cj0*sj1*x7287))+(((-1.0)*cj0*x7289)));
evalcond[5]=((((-1.0)*x7286*x7290))+(((-1.0)*x7288*x7289))+((r10*x7291))+(((-1.0)*r12*x7293))+(((-1.0)*sj0*sj1*x7287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7294=((1.0)*gconst149);
CheckValue<IkReal> x7295=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7294))+(((-1.0)*gconst148*r00)))),-1);
if(!x7295.valid){
continue;
}
CheckValue<IkReal> x7296 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x7294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7295.value)))+(x7296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7297=IKsin(j4);
IkReal x7298=IKcos(j4);
IkReal x7299=(gconst148*r11);
IkReal x7300=((1.0)*cj2);
IkReal x7301=((1.0)*sj0);
IkReal x7302=(cj1*sj2);
IkReal x7303=((1.0)*x7298);
IkReal x7304=(gconst149*x7298);
IkReal x7305=(gconst148*x7297);
IkReal x7306=((1.0)*x7297);
evalcond[0]=((((-1.0)*gconst149*r20*x7306))+((r21*x7305))+(((-1.0)*r22*x7303)));
evalcond[1]=((((-1.0)*gconst149*r10*x7306))+((x7297*x7299))+cj0+(((-1.0)*r12*x7303)));
evalcond[2]=((((-1.0)*r02*x7303))+(((-1.0)*gconst149*r00*x7306))+(((-1.0)*x7301))+((r01*x7305)));
evalcond[3]=((((-1.0)*gconst148*r21*x7303))+((sj1*sj2))+((r20*x7304))+(((-1.0)*r22*x7306))+(((-1.0)*cj1*x7300)));
evalcond[4]=((((-1.0)*cj0*x7302))+(((-1.0)*r02*x7306))+(((-1.0)*gconst148*r01*x7303))+(((-1.0)*cj0*sj1*x7300))+((r00*x7304)));
evalcond[5]=((((-1.0)*sj0*sj1*x7300))+((r10*x7304))+(((-1.0)*x7301*x7302))+(((-1.0)*r12*x7306))+(((-1.0)*x7299*x7303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7307=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7307;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7308=((1.0)*cj5);
IkReal x7309=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7308)));
j4eval[0]=x7309;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7308))+((r21*sj5))))));
j4eval[2]=IKsign(x7309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7310=cj5*cj5;
IkReal x7311=r01*r01;
IkReal x7312=(r01*sj5);
IkReal x7313=(cj5*r00);
IkReal x7314=((((-1.0)*x7311))+(((2.0)*x7312*x7313))+(((-1.0)*(r02*r02)))+((x7310*x7311))+(((-1.0)*x7310*(r00*r00))));
j4eval[0]=x7314;
j4eval[1]=IKsign(x7314);
j4eval[2]=((IKabs(r02))+(IKabs((x7313+(((-1.0)*x7312))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7315=cj5*cj5;
IkReal x7316=r01*r01;
IkReal x7317=(r01*sj5);
IkReal x7318=(cj5*r00);
CheckValue<IkReal> x7319 = IKatan2WithCheck(IkReal((x7318+(((-1.0)*x7317)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7319.valid){
continue;
}
CheckValue<IkReal> x7320=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7316))+(((-1.0)*(r02*r02)))+(((2.0)*x7317*x7318))+((x7315*x7316))+(((-1.0)*x7315*(r00*r00))))),-1);
if(!x7320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7319.value)+(((1.5707963267949)*(x7320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7321=IKsin(j4);
IkReal x7322=IKcos(j4);
IkReal x7323=(cj5*r10);
IkReal x7324=(r01*sj5);
IkReal x7325=((1.0)*cj2);
IkReal x7326=(cj5*r00);
IkReal x7327=(cj5*r20);
IkReal x7328=((1.0)*x7322);
IkReal x7329=((1.0)*x7321);
IkReal x7330=(sj5*x7321);
evalcond[0]=((((-1.0)*r22*x7328))+((r21*x7330))+(((-1.0)*x7327*x7329)));
evalcond[1]=((((-1.0)*x7323*x7329))+(((-1.0)*r12*x7328))+((r11*x7330)));
evalcond[2]=((((-1.0)*x7324*x7328))+((x7322*x7326))+(((-1.0)*r02*x7329)));
evalcond[3]=((-1.0)+(((-1.0)*x7326*x7329))+((x7321*x7324))+(((-1.0)*r02*x7328)));
evalcond[4]=((((-1.0)*r22*x7329))+((sj1*sj2))+(((-1.0)*r21*sj5*x7328))+((x7322*x7327))+(((-1.0)*cj1*x7325)));
evalcond[5]=((((-1.0)*r11*sj5*x7328))+(((-1.0)*cj1*sj2))+((x7322*x7323))+(((-1.0)*r12*x7329))+(((-1.0)*sj1*x7325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7331=((1.0)*cj5);
CheckValue<IkReal> x7332 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7331))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7332.valid){
continue;
}
CheckValue<IkReal> x7333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7331)))),-1);
if(!x7333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7332.value)+(((1.5707963267949)*(x7333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7334=IKsin(j4);
IkReal x7335=IKcos(j4);
IkReal x7336=(cj5*r10);
IkReal x7337=(r01*sj5);
IkReal x7338=((1.0)*cj2);
IkReal x7339=(cj5*r00);
IkReal x7340=(cj5*r20);
IkReal x7341=((1.0)*x7335);
IkReal x7342=((1.0)*x7334);
IkReal x7343=(sj5*x7334);
evalcond[0]=((((-1.0)*r22*x7341))+(((-1.0)*x7340*x7342))+((r21*x7343)));
evalcond[1]=((((-1.0)*r12*x7341))+((r11*x7343))+(((-1.0)*x7336*x7342)));
evalcond[2]=((((-1.0)*x7337*x7341))+((x7335*x7339))+(((-1.0)*r02*x7342)));
evalcond[3]=((-1.0)+((x7334*x7337))+(((-1.0)*r02*x7341))+(((-1.0)*x7339*x7342)));
evalcond[4]=((((-1.0)*r22*x7342))+((sj1*sj2))+((x7335*x7340))+(((-1.0)*r21*sj5*x7341))+(((-1.0)*cj1*x7338)));
evalcond[5]=((((-1.0)*r11*sj5*x7341))+(((-1.0)*r12*x7342))+((x7335*x7336))+(((-1.0)*sj1*x7338))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7344=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7344.valid){
continue;
}
CheckValue<IkReal> x7345 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7344.value)))+(x7345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7346=IKsin(j4);
IkReal x7347=IKcos(j4);
IkReal x7348=(cj5*r10);
IkReal x7349=(r01*sj5);
IkReal x7350=((1.0)*cj2);
IkReal x7351=(cj5*r00);
IkReal x7352=(cj5*r20);
IkReal x7353=((1.0)*x7347);
IkReal x7354=((1.0)*x7346);
IkReal x7355=(sj5*x7346);
evalcond[0]=((((-1.0)*r22*x7353))+(((-1.0)*x7352*x7354))+((r21*x7355)));
evalcond[1]=((((-1.0)*r12*x7353))+((r11*x7355))+(((-1.0)*x7348*x7354)));
evalcond[2]=(((x7347*x7351))+(((-1.0)*x7349*x7353))+(((-1.0)*r02*x7354)));
evalcond[3]=((-1.0)+(((-1.0)*x7351*x7354))+((x7346*x7349))+(((-1.0)*r02*x7353)));
evalcond[4]=((((-1.0)*r22*x7354))+((x7347*x7352))+((sj1*sj2))+(((-1.0)*cj1*x7350))+(((-1.0)*r21*sj5*x7353)));
evalcond[5]=((((-1.0)*r11*sj5*x7353))+(((-1.0)*r12*x7354))+((x7347*x7348))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7356=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7356;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7357=((1.0)*cj5);
IkReal x7358=((((-1.0)*r21*x7357))+(((-1.0)*r20*sj5)));
j4eval[0]=x7358;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x7357))+((r11*sj5))))));
j4eval[2]=IKsign(x7358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7359=cj5*cj5;
IkReal x7360=r01*r01;
IkReal x7361=(cj5*r00);
IkReal x7362=(r01*sj5);
IkReal x7363=(x7360+(((-1.0)*x7359*x7360))+(((-2.0)*x7361*x7362))+((x7359*(r00*r00)))+(r02*r02));
j4eval[0]=x7363;
j4eval[1]=((IKabs(r02))+(IKabs((x7361+(((-1.0)*x7362))))));
j4eval[2]=IKsign(x7363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7364=cj5*cj5;
IkReal x7365=r01*r01;
IkReal x7366=(r01*sj5);
IkReal x7367=(cj5*r00);
CheckValue<IkReal> x7368 = IKatan2WithCheck(IkReal((x7367+(((-1.0)*x7366)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7368.valid){
continue;
}
CheckValue<IkReal> x7369=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7366*x7367))+x7365+((x7364*(r00*r00)))+(((-1.0)*x7364*x7365))+(r02*r02))),-1);
if(!x7369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7368.value)+(((1.5707963267949)*(x7369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7370=IKsin(j4);
IkReal x7371=IKcos(j4);
IkReal x7372=(cj5*r10);
IkReal x7373=(r01*sj5);
IkReal x7374=(cj5*r00);
IkReal x7375=(cj5*r20);
IkReal x7376=((1.0)*x7371);
IkReal x7377=((1.0)*x7370);
IkReal x7378=(sj5*x7370);
evalcond[0]=((((-1.0)*r22*x7376))+(((-1.0)*x7375*x7377))+((r21*x7378)));
evalcond[1]=(((r11*x7378))+(((-1.0)*r12*x7376))+(((-1.0)*x7372*x7377)));
evalcond[2]=((((-1.0)*r02*x7377))+(((-1.0)*x7373*x7376))+((x7371*x7374)));
evalcond[3]=((1.0)+(((-1.0)*x7374*x7377))+((x7370*x7373))+(((-1.0)*r02*x7376)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x7376))+((cj1*sj2))+(((-1.0)*r12*x7377))+((x7371*x7372)));
evalcond[5]=((((-1.0)*r22*x7377))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7371*x7375))+(((-1.0)*r21*sj5*x7376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7379=((1.0)*cj5);
CheckValue<IkReal> x7380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7379))+(((-1.0)*r20*sj5)))),-1);
if(!x7380.valid){
continue;
}
CheckValue<IkReal> x7381 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x7379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7380.value)))+(x7381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7382=IKsin(j4);
IkReal x7383=IKcos(j4);
IkReal x7384=(cj5*r10);
IkReal x7385=(r01*sj5);
IkReal x7386=(cj5*r00);
IkReal x7387=(cj5*r20);
IkReal x7388=((1.0)*x7383);
IkReal x7389=((1.0)*x7382);
IkReal x7390=(sj5*x7382);
evalcond[0]=((((-1.0)*r22*x7388))+((r21*x7390))+(((-1.0)*x7387*x7389)));
evalcond[1]=((((-1.0)*x7384*x7389))+((r11*x7390))+(((-1.0)*r12*x7388)));
evalcond[2]=((((-1.0)*r02*x7389))+(((-1.0)*x7385*x7388))+((x7383*x7386)));
evalcond[3]=((1.0)+(((-1.0)*x7386*x7389))+(((-1.0)*r02*x7388))+((x7382*x7385)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x7389))+((x7383*x7384))+(((-1.0)*r11*sj5*x7388)));
evalcond[5]=((((-1.0)*r22*x7389))+(((-1.0)*cj1*cj2))+(((-1.0)*r21*sj5*x7388))+((sj1*sj2))+((x7383*x7387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7391 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7391.valid){
continue;
}
CheckValue<IkReal> x7392=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7391.value)+(((1.5707963267949)*(x7392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7393=IKsin(j4);
IkReal x7394=IKcos(j4);
IkReal x7395=(cj5*r10);
IkReal x7396=(r01*sj5);
IkReal x7397=(cj5*r00);
IkReal x7398=(cj5*r20);
IkReal x7399=((1.0)*x7394);
IkReal x7400=((1.0)*x7393);
IkReal x7401=(sj5*x7393);
evalcond[0]=((((-1.0)*r22*x7399))+((r21*x7401))+(((-1.0)*x7398*x7400)));
evalcond[1]=(((r11*x7401))+(((-1.0)*r12*x7399))+(((-1.0)*x7395*x7400)));
evalcond[2]=((((-1.0)*x7396*x7399))+(((-1.0)*r02*x7400))+((x7394*x7397)));
evalcond[3]=((1.0)+(((-1.0)*x7397*x7400))+(((-1.0)*r02*x7399))+((x7393*x7396)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x7400))+((cj1*sj2))+(((-1.0)*r11*sj5*x7399))+((x7394*x7395)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7400))+(((-1.0)*r21*sj5*x7399))+((x7394*x7398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7402=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7402);
rxp1_1=(px*r21);
rxp1_2=(r11*x7402);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7403=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7403);
rxp1_1=(px*r21);
rxp1_2=(r11*x7403);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7404=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7404);
rxp1_1=(px*r21);
rxp1_2=(r11*x7404);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7407=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x7407.valid){
continue;
}
IkReal x7405=x7407.value;
IkReal x7406=(sj0*x7405);
cj4array[0]=(((cj2*sj1*x7406))+((cj1*sj2*x7406)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7408=IKsin(j4);
IkReal x7409=IKcos(j4);
IkReal x7410=(cj5*r20);
IkReal x7411=(r21*sj5);
IkReal x7412=((1.0)*x7408);
IkReal x7413=((1.0)*x7409);
evalcond[0]=((-1.0)*r02*x7408);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x7413)));
evalcond[2]=(((x7408*x7411))+(((-1.0)*x7410*x7412)));
evalcond[3]=((((-1.0)*cj5*r10*x7412))+((r11*sj5*x7408)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7411*x7413))+((x7409*x7410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7415=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7415.valid){
continue;
}
IkReal x7414=x7415.value;
cj4array[0]=(((cj1*cj2*x7414))+(((-1.0)*sj1*sj2*x7414)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7416=IKsin(j4);
IkReal x7417=IKcos(j4);
IkReal x7418=(r11*sj5);
IkReal x7419=((1.0)*sj0);
IkReal x7420=((1.0)*x7417);
IkReal x7421=((1.0)*cj5*x7416);
evalcond[0]=((-1.0)*r02*x7416);
evalcond[1]=((((-1.0)*r02*x7420))+(((-1.0)*x7419)));
evalcond[2]=(((r21*sj5*x7416))+(((-1.0)*r20*x7421)));
evalcond[3]=((((-1.0)*r10*x7421))+((x7416*x7418)));
evalcond[4]=((((-1.0)*x7418*x7420))+(((-1.0)*cj2*sj1*x7419))+((cj5*r10*x7417))+(((-1.0)*cj1*sj2*x7419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7422=IKPowWithIntegerCheck(r02,-1);
if(!x7422.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x7422.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7423=IKsin(j4);
IkReal x7424=IKcos(j4);
IkReal x7425=((1.0)*sj0);
IkReal x7426=(cj5*x7424);
IkReal x7427=(sj5*x7423);
IkReal x7428=((1.0)*sj5*x7424);
IkReal x7429=((1.0)*cj5*x7423);
evalcond[0]=((-1.0)*r02*x7423);
evalcond[1]=(((r21*x7427))+(((-1.0)*r20*x7429)));
evalcond[2]=((((-1.0)*r10*x7429))+((r11*x7427)));
evalcond[3]=(((r20*x7426))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x7428)));
evalcond[4]=((((-1.0)*r11*x7428))+((r10*x7426))+(((-1.0)*cj2*sj1*x7425))+(((-1.0)*cj1*sj2*x7425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7430=((1.0)*sj0);
IkReal x7431=((1.0)*cj0);
CheckValue<IkReal> x7432 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7431))+(((-1.0)*r12*x7430)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7430))+(((-1.0)*r01*sj5*x7431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7432.valid){
continue;
}
CheckValue<IkReal> x7433=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x7433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7432.value)+(((1.5707963267949)*(x7433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7434=IKsin(j4);
IkReal x7435=IKcos(j4);
IkReal x7436=(cj5*r10);
IkReal x7437=(r01*sj5);
IkReal x7438=((1.0)*cj2);
IkReal x7439=(cj5*r00);
IkReal x7440=((1.0)*sj0);
IkReal x7441=(cj5*r20);
IkReal x7442=(cj1*sj2);
IkReal x7443=((1.0)*x7435);
IkReal x7444=((1.0)*x7434);
IkReal x7445=(sj5*x7434);
evalcond[0]=(((r21*x7445))+(((-1.0)*r22*x7443))+(((-1.0)*x7441*x7444)));
evalcond[1]=((((-1.0)*x7436*x7444))+cj0+((r11*x7445))+(((-1.0)*r12*x7443)));
evalcond[2]=((((-1.0)*x7440))+(((-1.0)*r02*x7443))+(((-1.0)*x7439*x7444))+((x7434*x7437)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r21*sj5*x7443))+((x7435*x7441))+(((-1.0)*cj1*x7438))+(((-1.0)*r22*x7444)));
evalcond[4]=((((-1.0)*cj0*x7442))+(((-1.0)*x7437*x7443))+((x7435*x7439))+(((-1.0)*cj0*sj1*x7438))+(((-1.0)*r02*x7444)));
evalcond[5]=((((-1.0)*x7440*x7442))+(((-1.0)*r11*sj5*x7443))+((x7435*x7436))+(((-1.0)*sj0*sj1*x7438))+(((-1.0)*r12*x7444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7446=((1.0)*cj5);
CheckValue<IkReal> x7447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7446)))),-1);
if(!x7447.valid){
continue;
}
CheckValue<IkReal> x7448 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7447.value)))+(x7448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7449=IKsin(j4);
IkReal x7450=IKcos(j4);
IkReal x7451=(cj5*r10);
IkReal x7452=(r01*sj5);
IkReal x7453=((1.0)*cj2);
IkReal x7454=(cj5*r00);
IkReal x7455=((1.0)*sj0);
IkReal x7456=(cj5*r20);
IkReal x7457=(cj1*sj2);
IkReal x7458=((1.0)*x7450);
IkReal x7459=((1.0)*x7449);
IkReal x7460=(sj5*x7449);
evalcond[0]=((((-1.0)*x7456*x7459))+((r21*x7460))+(((-1.0)*r22*x7458)));
evalcond[1]=(cj0+(((-1.0)*x7451*x7459))+((r11*x7460))+(((-1.0)*r12*x7458)));
evalcond[2]=((((-1.0)*x7455))+((x7449*x7452))+(((-1.0)*x7454*x7459))+(((-1.0)*r02*x7458)));
evalcond[3]=((((-1.0)*cj1*x7453))+((x7450*x7456))+((sj1*sj2))+(((-1.0)*r21*sj5*x7458))+(((-1.0)*r22*x7459)));
evalcond[4]=((((-1.0)*cj0*x7457))+(((-1.0)*x7452*x7458))+((x7450*x7454))+(((-1.0)*r02*x7459))+(((-1.0)*cj0*sj1*x7453)));
evalcond[5]=((((-1.0)*r11*sj5*x7458))+(((-1.0)*x7455*x7457))+((x7450*x7451))+(((-1.0)*sj0*sj1*x7453))+(((-1.0)*r12*x7459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7461=((1.0)*cj5);
CheckValue<IkReal> x7462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7461)))),-1);
if(!x7462.valid){
continue;
}
CheckValue<IkReal> x7463 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7462.value)))+(x7463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7464=IKsin(j4);
IkReal x7465=IKcos(j4);
IkReal x7466=(cj5*r10);
IkReal x7467=(r01*sj5);
IkReal x7468=((1.0)*cj2);
IkReal x7469=(cj5*r00);
IkReal x7470=((1.0)*sj0);
IkReal x7471=(cj5*r20);
IkReal x7472=(cj1*sj2);
IkReal x7473=((1.0)*x7465);
IkReal x7474=((1.0)*x7464);
IkReal x7475=(sj5*x7464);
evalcond[0]=((((-1.0)*r22*x7473))+((r21*x7475))+(((-1.0)*x7471*x7474)));
evalcond[1]=((((-1.0)*x7466*x7474))+cj0+((r11*x7475))+(((-1.0)*r12*x7473)));
evalcond[2]=((((-1.0)*r02*x7473))+(((-1.0)*x7470))+((x7464*x7467))+(((-1.0)*x7469*x7474)));
evalcond[3]=(((x7465*x7471))+((sj1*sj2))+(((-1.0)*cj1*x7468))+(((-1.0)*r22*x7474))+(((-1.0)*r21*sj5*x7473)));
evalcond[4]=((((-1.0)*r02*x7474))+(((-1.0)*x7467*x7473))+(((-1.0)*cj0*x7472))+(((-1.0)*cj0*sj1*x7468))+((x7465*x7469)));
evalcond[5]=((((-1.0)*sj0*sj1*x7468))+(((-1.0)*r11*sj5*x7473))+((x7465*x7466))+(((-1.0)*x7470*x7472))+(((-1.0)*r12*x7474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7476=cj5*cj5;
IkReal x7477=r21*r21;
IkReal x7478=(sj1*sj2);
IkReal x7479=(r21*sj5);
IkReal x7480=(cj1*cj2);
IkReal x7481=(cj5*r20);
CheckValue<IkReal> x7482 = IKatan2WithCheck(IkReal((((r22*x7478))+(((-1.0)*r22*x7480)))),IkReal((((x7480*x7481))+(((-1.0)*x7479*x7480))+((x7478*x7479))+(((-1.0)*x7478*x7481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7482.valid){
continue;
}
CheckValue<IkReal> x7483=IKPowWithIntegerCheck(IKsign((((x7476*(r20*r20)))+(r22*r22)+(((-1.0)*x7476*x7477))+(((-2.0)*x7479*x7481))+x7477)),-1);
if(!x7483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7482.value)+(((1.5707963267949)*(x7483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7484=IKsin(j4);
IkReal x7485=IKcos(j4);
IkReal x7486=(r21*sj5);
IkReal x7487=(cj5*r20);
IkReal x7488=((1.0)*x7485);
IkReal x7489=((1.0)*x7484);
evalcond[0]=(((x7484*x7486))+(((-1.0)*x7487*x7489))+(((-1.0)*r22*x7488)));
evalcond[1]=((((-1.0)*x7486*x7488))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7489))+((x7485*x7487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7490=(cj5*sj4);
IkReal x7491=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x7491))+(((-1.0)*r00*x7490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x7491))+((r10*x7490))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x7491))+(((-1.0)*r00*x7490))))+IKsqr(((((-1.0)*r11*x7491))+((r10*x7490))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x7491))+(((-1.0)*r00*x7490))), ((((-1.0)*r11*x7491))+((r10*x7490))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7492=IKcos(j0);
IkReal x7493=IKsin(j0);
IkReal x7494=(cj4*cj5);
IkReal x7495=((0.39225)*cj1);
IkReal x7496=((1.0)*sj1);
IkReal x7497=(r11*sj5);
IkReal x7498=(cj5*r11);
IkReal x7499=((1.0)*sj5);
IkReal x7500=((1.0)*sj4);
IkReal x7501=((0.425)*sj1);
IkReal x7502=((0.09465)*sj5);
IkReal x7503=(cj5*r01);
IkReal x7504=((1.0)*cj4);
IkReal x7505=((0.39225)*sj1);
IkReal x7506=(sj2*x7493);
IkReal x7507=(cj1*x7492);
IkReal x7508=(cj2*x7493);
IkReal x7509=(cj2*x7492);
IkReal x7510=(sj2*x7492);
evalcond[0]=(((sj4*x7497))+(((-1.0)*cj5*r10*x7500))+x7492+(((-1.0)*r12*x7504)));
evalcond[1]=((((-1.0)*x7493))+(((-1.0)*r02*x7504))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x7500)));
evalcond[2]=(((cj2*x7507))+(((-1.0)*r00*x7499))+(((-1.0)*x7503))+(((-1.0)*x7496*x7510)));
evalcond[3]=((((-1.0)*x7496*x7506))+(((-1.0)*x7498))+(((-1.0)*r10*x7499))+((cj1*x7508)));
evalcond[4]=((((-1.0)*sj2*x7507))+(((-1.0)*x7496*x7509))+(((-1.0)*r02*x7500))+((r00*x7494))+(((-1.0)*cj4*r01*x7499)));
evalcond[5]=((((-1.0)*x7497*x7504))+(((-1.0)*x7496*x7508))+((r10*x7494))+(((-1.0)*cj1*x7506))+(((-1.0)*r12*x7500)));
evalcond[6]=(((x7505*x7509))+(((-0.09465)*x7503))+(((-1.0)*r00*x7502))+(((-1.0)*px))+((x7495*x7510))+(((-0.10915)*x7493))+((x7492*x7501)));
evalcond[7]=(((x7493*x7501))+(((0.10915)*x7492))+((x7505*x7508))+(((-0.09465)*x7498))+((x7495*x7506))+(((-1.0)*py))+(((-1.0)*r10*x7502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7511=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x7511.valid){
continue;
}
CheckValue<IkReal> x7512 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7512.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7511.value)))+(x7512.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7513=IKcos(j0);
IkReal x7514=IKsin(j0);
IkReal x7515=((0.39225)*cj1);
IkReal x7516=((1.0)*sj1);
IkReal x7517=(cj1*cj2);
IkReal x7518=(cj5*r11);
IkReal x7519=((1.0)*sj5);
IkReal x7520=((0.09465)*sj5);
IkReal x7521=(cj5*r01);
IkReal x7522=((0.39225)*cj2);
IkReal x7523=(sj2*x7514);
IkReal x7524=(sj1*x7513);
IkReal x7525=(sj2*x7513);
IkReal x7526=(sj1*x7514);
evalcond[0]=((((-1.0)*x7516*x7525))+(((-1.0)*r00*x7519))+((x7513*x7517))+(((-1.0)*x7521)));
evalcond[1]=((((-1.0)*r10*x7519))+(((-1.0)*x7516*x7523))+((x7514*x7517))+(((-1.0)*x7518)));
evalcond[2]=((((0.425)*x7524))+(((-0.10915)*x7514))+(((-0.09465)*x7521))+(((-1.0)*r00*x7520))+(((-1.0)*px))+((x7522*x7524))+((x7515*x7525)));
evalcond[3]=((((-1.0)*r10*x7520))+(((0.10915)*x7513))+(((-0.09465)*x7518))+(((0.425)*x7526))+(((-1.0)*py))+((x7522*x7526))+((x7515*x7523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7527=((1.0)*cj5);
IkReal x7528=((((-1.0)*r01*x7527))+(((-1.0)*r00*sj5)));
j4eval[0]=x7528;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7527)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7529=((1.0)*cj5);
IkReal x7530=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7529)));
j4eval[0]=x7530;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7529))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7530);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7531=((1.0)*sj0);
IkReal x7532=((1.0)*cj0);
IkReal x7533=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7533;
j4eval[1]=((IKabs(((((-1.0)*r12*x7531))+(((-1.0)*r02*x7532)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7532))+(((-1.0)*r11*sj5*x7531))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x7533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7534=((-1.0)*r20);
IkReal x7536 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7536)==0){
continue;
}
IkReal x7535=pow(x7536,-0.5);
CheckValue<IkReal> x7537 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7534),IKFAST_ATAN2_MAGTHRESH);
if(!x7537.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7537.value));
IkReal gconst133=(r21*x7535);
IkReal gconst134=(x7534*x7535);
CheckValue<IkReal> x7538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7538.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7538.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7539=((-1.0)*r20);
IkReal x7540=x7535;
CheckValue<IkReal> x7542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7539),IKFAST_ATAN2_MAGTHRESH);
if(!x7542.valid){
continue;
}
IkReal x7541=((-1.0)*(x7542.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7541;
IkReal gconst132=x7541;
IkReal gconst133=(r21*x7540);
IkReal gconst134=(x7539*x7540);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7543=((-1.0)*r20);
IkReal x7544=x7535;
CheckValue<IkReal> x7546 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7543),IKFAST_ATAN2_MAGTHRESH);
if(!x7546.valid){
continue;
}
IkReal x7545=((-1.0)*(x7546.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7545;
IkReal gconst132=x7545;
IkReal gconst133=(r21*x7544);
IkReal gconst134=(x7543*x7544);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7547=((-1.0)*r20);
IkReal x7548=x7535;
CheckValue<IkReal> x7550 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7547),IKFAST_ATAN2_MAGTHRESH);
if(!x7550.valid){
continue;
}
IkReal x7549=((-1.0)*(x7550.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7549;
IkReal gconst132=x7549;
IkReal gconst133=(r21*x7548);
IkReal gconst134=(x7547*x7548);
IkReal x7551=r22*r22;
CheckValue<IkReal> x7554=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7551))),-1);
if(!x7554.valid){
continue;
}
IkReal x7552=x7554.value;
IkReal x7553=((((2.0)*x7552*(r20*r20)*(r21*r21)))+((x7552*(r20*r20*r20*r20)))+((x7552*(r21*r21*r21*r21)))+x7551);
j4eval[0]=x7553;
j4eval[1]=IKsign(x7553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7555=(gconst133*r21);
IkReal x7556=(sj1*sj2);
IkReal x7557=(gconst134*r20);
IkReal x7558=(cj1*cj2);
CheckValue<IkReal> x7559 = IKatan2WithCheck(IkReal((((r22*x7556))+(((-1.0)*r22*x7558)))),IkReal(((((-1.0)*x7556*x7557))+((x7557*x7558))+(((-1.0)*x7555*x7558))+((x7555*x7556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7559.valid){
continue;
}
CheckValue<IkReal> x7560=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7557*x7557)+(x7555*x7555)+(((-2.0)*x7555*x7557)))),-1);
if(!x7560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7559.value)+(((1.5707963267949)*(x7560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7561=IKsin(j4);
IkReal x7562=IKcos(j4);
IkReal x7563=((1.0)*cj2);
IkReal x7564=(gconst133*r11);
IkReal x7565=(gconst133*r21);
IkReal x7566=((1.0)*sj0);
IkReal x7567=(gconst133*r01);
IkReal x7568=(cj1*sj2);
IkReal x7569=((1.0)*x7562);
IkReal x7570=(gconst134*x7562);
IkReal x7571=((1.0)*x7561);
evalcond[0]=((((-1.0)*r22*x7569))+((x7561*x7565))+(((-1.0)*gconst134*r20*x7571)));
evalcond[1]=(cj0+(((-1.0)*r12*x7569))+((x7561*x7564))+(((-1.0)*gconst134*r10*x7571)));
evalcond[2]=((((-1.0)*gconst134*r00*x7571))+(((-1.0)*r02*x7569))+(((-1.0)*x7566))+((x7561*x7567)));
evalcond[3]=((((-1.0)*x7565*x7569))+((sj1*sj2))+((r20*x7570))+(((-1.0)*r22*x7571))+(((-1.0)*cj1*x7563)));
evalcond[4]=(((r00*x7570))+(((-1.0)*x7567*x7569))+(((-1.0)*r02*x7571))+(((-1.0)*cj0*x7568))+(((-1.0)*cj0*sj1*x7563)));
evalcond[5]=((((-1.0)*x7564*x7569))+(((-1.0)*x7566*x7568))+(((-1.0)*sj0*sj1*x7563))+((r10*x7570))+(((-1.0)*r12*x7571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7572=((1.0)*gconst134);
CheckValue<IkReal> x7573=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7572)))),-1);
if(!x7573.valid){
continue;
}
CheckValue<IkReal> x7574 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7572))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7573.value)))+(x7574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7575=IKsin(j4);
IkReal x7576=IKcos(j4);
IkReal x7577=((1.0)*cj2);
IkReal x7578=(gconst133*r11);
IkReal x7579=(gconst133*r21);
IkReal x7580=((1.0)*sj0);
IkReal x7581=(gconst133*r01);
IkReal x7582=(cj1*sj2);
IkReal x7583=((1.0)*x7576);
IkReal x7584=(gconst134*x7576);
IkReal x7585=((1.0)*x7575);
evalcond[0]=((((-1.0)*gconst134*r20*x7585))+(((-1.0)*r22*x7583))+((x7575*x7579)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7585))+((x7575*x7578))+(((-1.0)*r12*x7583)));
evalcond[2]=((((-1.0)*gconst134*r00*x7585))+(((-1.0)*x7580))+(((-1.0)*r02*x7583))+((x7575*x7581)));
evalcond[3]=((((-1.0)*r22*x7585))+((sj1*sj2))+(((-1.0)*cj1*x7577))+(((-1.0)*x7579*x7583))+((r20*x7584)));
evalcond[4]=((((-1.0)*cj0*sj1*x7577))+(((-1.0)*x7581*x7583))+(((-1.0)*r02*x7585))+((r00*x7584))+(((-1.0)*cj0*x7582)));
evalcond[5]=(((r10*x7584))+(((-1.0)*x7580*x7582))+(((-1.0)*r12*x7585))+(((-1.0)*x7578*x7583))+(((-1.0)*sj0*sj1*x7577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7586=((1.0)*gconst134);
CheckValue<IkReal> x7587 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7586))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7587.valid){
continue;
}
CheckValue<IkReal> x7588=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7586))+(((-1.0)*gconst133*r00)))),-1);
if(!x7588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7587.value)+(((1.5707963267949)*(x7588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7589=IKsin(j4);
IkReal x7590=IKcos(j4);
IkReal x7591=((1.0)*cj2);
IkReal x7592=(gconst133*r11);
IkReal x7593=(gconst133*r21);
IkReal x7594=((1.0)*sj0);
IkReal x7595=(gconst133*r01);
IkReal x7596=(cj1*sj2);
IkReal x7597=((1.0)*x7590);
IkReal x7598=(gconst134*x7590);
IkReal x7599=((1.0)*x7589);
evalcond[0]=((((-1.0)*gconst134*r20*x7599))+((x7589*x7593))+(((-1.0)*r22*x7597)));
evalcond[1]=(cj0+(((-1.0)*r12*x7597))+((x7589*x7592))+(((-1.0)*gconst134*r10*x7599)));
evalcond[2]=(((x7589*x7595))+(((-1.0)*gconst134*r00*x7599))+(((-1.0)*r02*x7597))+(((-1.0)*x7594)));
evalcond[3]=((((-1.0)*cj1*x7591))+((r20*x7598))+(((-1.0)*r22*x7599))+((sj1*sj2))+(((-1.0)*x7593*x7597)));
evalcond[4]=((((-1.0)*cj0*sj1*x7591))+(((-1.0)*x7595*x7597))+(((-1.0)*r02*x7599))+((r00*x7598))+(((-1.0)*cj0*x7596)));
evalcond[5]=((((-1.0)*x7592*x7597))+(((-1.0)*r12*x7599))+(((-1.0)*x7594*x7596))+((r10*x7598))+(((-1.0)*sj0*sj1*x7591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7600=((-1.0)*r21);
IkReal x7602 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7602)==0){
continue;
}
IkReal x7601=pow(x7602,-0.5);
CheckValue<IkReal> x7603 = IKatan2WithCheck(IkReal(x7600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7603.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7603.value))));
IkReal gconst136=(x7600*x7601);
IkReal gconst137=((1.0)*r20*x7601);
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7604.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7605=((-1.0)*r21);
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal(x7605),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
IkReal x7606=((1.0)*(x7608.value));
IkReal x7607=x7601;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7606)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7606)));
IkReal gconst136=(x7605*x7607);
IkReal gconst137=((1.0)*r20*x7607);
IkReal x7609=r22*r22;
IkReal x7610=((1.0)*x7609);
CheckValue<IkReal> x7614=IKPowWithIntegerCheck(((-1.0)+x7609),-1);
if(!x7614.valid){
continue;
}
IkReal x7611=x7614.value;
if((((1.0)+(((-1.0)*x7610)))) < -0.00001)
continue;
IkReal x7612=IKsqrt(((1.0)+(((-1.0)*x7610))));
IkReal x7613=(cj0*x7611*x7612);
j4eval[0]=((IKabs(((((-1.0)*x7610*x7613))+x7613)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7615=((-1.0)*r21);
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal(x7615),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
IkReal x7616=((1.0)*(x7618.value));
IkReal x7617=x7601;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7616)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7616)));
IkReal gconst136=(x7615*x7617);
IkReal gconst137=((1.0)*r20*x7617);
IkReal x7619=r22*r22;
IkReal x7620=((1.0)*x7619);
CheckValue<IkReal> x7624=IKPowWithIntegerCheck(((-1.0)+x7619),-1);
if(!x7624.valid){
continue;
}
IkReal x7621=x7624.value;
if((((1.0)+(((-1.0)*x7620)))) < -0.00001)
continue;
IkReal x7622=IKsqrt(((1.0)+(((-1.0)*x7620))));
IkReal x7623=(sj0*x7621*x7622);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7620*x7623))+x7623))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7625=((-1.0)*r21);
CheckValue<IkReal> x7628 = IKatan2WithCheck(IkReal(x7625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7628.valid){
continue;
}
IkReal x7626=((1.0)*(x7628.value));
IkReal x7627=x7601;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7626)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7626)));
IkReal gconst136=(x7625*x7627);
IkReal gconst137=((1.0)*r20*x7627);
IkReal x7629=r22*r22;
IkReal x7630=(r12*sj0);
IkReal x7631=(cj0*r02);
CheckValue<IkReal> x7635=IKPowWithIntegerCheck(((-1.0)+x7629),-1);
if(!x7635.valid){
continue;
}
IkReal x7632=x7635.value;
if((((1.0)+(((-1.0)*x7629)))) < -0.00001)
continue;
IkReal x7633=IKsqrt(((1.0)+(((-1.0)*x7629))));
IkReal x7634=(r22*x7632*x7633);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7630*x7634))+((x7631*x7634)))))+(IKabs(((((-1.0)*x7630))+(((-1.0)*x7631))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7636=((1.0)*sj0);
IkReal x7637=((1.0)*cj0);
CheckValue<IkReal> x7638 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7637))+(((-1.0)*r12*x7636)))),IkReal(((((-1.0)*gconst136*r11*x7636))+(((-1.0)*gconst136*r01*x7637))+((gconst137*r10*sj0))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7638.valid){
continue;
}
CheckValue<IkReal> x7639=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7638.value)+(((1.5707963267949)*(x7639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7640=IKsin(j4);
IkReal x7641=IKcos(j4);
IkReal x7642=(gconst136*r01);
IkReal x7643=(gconst137*r10);
IkReal x7644=(gconst137*r20);
IkReal x7645=((1.0)*cj2);
IkReal x7646=(gconst136*r11);
IkReal x7647=(gconst136*r21);
IkReal x7648=(gconst137*r00);
IkReal x7649=((1.0)*sj0);
IkReal x7650=(cj1*sj2);
IkReal x7651=((1.0)*x7641);
IkReal x7652=((1.0)*x7640);
evalcond[0]=((((-1.0)*r22*x7651))+((x7640*x7647))+(((-1.0)*x7644*x7652)));
evalcond[1]=(cj0+((x7640*x7646))+(((-1.0)*r12*x7651))+(((-1.0)*x7643*x7652)));
evalcond[2]=((((-1.0)*r02*x7651))+((x7640*x7642))+(((-1.0)*x7648*x7652))+(((-1.0)*x7649)));
evalcond[3]=((((-1.0)*r22*x7652))+(((-1.0)*x7647*x7651))+((sj1*sj2))+((x7641*x7644))+(((-1.0)*cj1*x7645)));
evalcond[4]=((((-1.0)*cj0*sj1*x7645))+(((-1.0)*r02*x7652))+((x7641*x7648))+(((-1.0)*x7642*x7651))+(((-1.0)*cj0*x7650)));
evalcond[5]=((((-1.0)*x7649*x7650))+(((-1.0)*sj0*sj1*x7645))+((x7641*x7643))+(((-1.0)*x7646*x7651))+(((-1.0)*r12*x7652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7653=((1.0)*gconst137);
CheckValue<IkReal> x7654 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x7653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7654.valid){
continue;
}
CheckValue<IkReal> x7655=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7653)))),-1);
if(!x7655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7654.value)+(((1.5707963267949)*(x7655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7656=IKsin(j4);
IkReal x7657=IKcos(j4);
IkReal x7658=(gconst136*r01);
IkReal x7659=(gconst137*r10);
IkReal x7660=(gconst137*r20);
IkReal x7661=((1.0)*cj2);
IkReal x7662=(gconst136*r11);
IkReal x7663=(gconst136*r21);
IkReal x7664=(gconst137*r00);
IkReal x7665=((1.0)*sj0);
IkReal x7666=(cj1*sj2);
IkReal x7667=((1.0)*x7657);
IkReal x7668=((1.0)*x7656);
evalcond[0]=((((-1.0)*r22*x7667))+(((-1.0)*x7660*x7668))+((x7656*x7663)));
evalcond[1]=((((-1.0)*r12*x7667))+cj0+((x7656*x7662))+(((-1.0)*x7659*x7668)));
evalcond[2]=(((x7656*x7658))+(((-1.0)*x7665))+(((-1.0)*r02*x7667))+(((-1.0)*x7664*x7668)));
evalcond[3]=((((-1.0)*r22*x7668))+((sj1*sj2))+(((-1.0)*cj1*x7661))+(((-1.0)*x7663*x7667))+((x7657*x7660)));
evalcond[4]=((((-1.0)*cj0*sj1*x7661))+(((-1.0)*cj0*x7666))+(((-1.0)*r02*x7668))+(((-1.0)*x7658*x7667))+((x7657*x7664)));
evalcond[5]=(((x7657*x7659))+(((-1.0)*r12*x7668))+(((-1.0)*x7662*x7667))+(((-1.0)*x7665*x7666))+(((-1.0)*sj0*sj1*x7661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7669=((1.0)*gconst137);
CheckValue<IkReal> x7670 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7669))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7670.valid){
continue;
}
CheckValue<IkReal> x7671=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7669)))),-1);
if(!x7671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7670.value)+(((1.5707963267949)*(x7671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7672=IKsin(j4);
IkReal x7673=IKcos(j4);
IkReal x7674=(gconst136*r01);
IkReal x7675=(gconst137*r10);
IkReal x7676=(gconst137*r20);
IkReal x7677=((1.0)*cj2);
IkReal x7678=(gconst136*r11);
IkReal x7679=(gconst136*r21);
IkReal x7680=(gconst137*r00);
IkReal x7681=((1.0)*sj0);
IkReal x7682=(cj1*sj2);
IkReal x7683=((1.0)*x7673);
IkReal x7684=((1.0)*x7672);
evalcond[0]=(((x7672*x7679))+(((-1.0)*x7676*x7684))+(((-1.0)*r22*x7683)));
evalcond[1]=(((x7672*x7678))+cj0+(((-1.0)*r12*x7683))+(((-1.0)*x7675*x7684)));
evalcond[2]=(((x7672*x7674))+(((-1.0)*x7680*x7684))+(((-1.0)*x7681))+(((-1.0)*r02*x7683)));
evalcond[3]=((((-1.0)*cj1*x7677))+(((-1.0)*r22*x7684))+((sj1*sj2))+(((-1.0)*x7679*x7683))+((x7673*x7676)));
evalcond[4]=(((x7673*x7680))+(((-1.0)*cj0*sj1*x7677))+(((-1.0)*x7674*x7683))+(((-1.0)*cj0*x7682))+(((-1.0)*r02*x7684)));
evalcond[5]=((((-1.0)*sj0*sj1*x7677))+(((-1.0)*x7681*x7682))+(((-1.0)*r12*x7684))+(((-1.0)*x7678*x7683))+((x7673*x7675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7685=((-1.0)*r10);
IkReal x7687 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7687)==0){
continue;
}
IkReal x7686=pow(x7687,-0.5);
CheckValue<IkReal> x7688 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7685),IKFAST_ATAN2_MAGTHRESH);
if(!x7688.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7688.value));
IkReal gconst139=(r11*x7686);
IkReal gconst140=(x7685*x7686);
CheckValue<IkReal> x7689 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7689.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7689.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7690=((-1.0)*r10);
IkReal x7691=x7686;
CheckValue<IkReal> x7693 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7690),IKFAST_ATAN2_MAGTHRESH);
if(!x7693.valid){
continue;
}
IkReal x7692=((-1.0)*(x7693.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7692;
IkReal gconst138=x7692;
IkReal gconst139=(r11*x7691);
IkReal gconst140=(x7690*x7691);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7694=((1.0)*sj0);
IkReal x7695=((1.0)*gconst139);
CheckValue<IkReal> x7696 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7694))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7695))+(((-1.0)*gconst139*r11*x7694))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7696.valid){
continue;
}
CheckValue<IkReal> x7697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7695)))),-1);
if(!x7697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7696.value)+(((1.5707963267949)*(x7697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7698=IKsin(j4);
IkReal x7699=IKcos(j4);
IkReal x7700=(gconst140*r00);
IkReal x7701=(gconst139*r11);
IkReal x7702=((1.0)*cj2);
IkReal x7703=(gconst139*r01);
IkReal x7704=(gconst139*r21);
IkReal x7705=((1.0)*sj0);
IkReal x7706=(cj1*sj2);
IkReal x7707=((1.0)*x7699);
IkReal x7708=((1.0)*x7698);
IkReal x7709=(gconst140*x7699);
evalcond[0]=(((x7698*x7704))+(((-1.0)*r22*x7707))+(((-1.0)*gconst140*r20*x7708)));
evalcond[1]=(((x7698*x7701))+cj0+(((-1.0)*r12*x7707))+(((-1.0)*gconst140*r10*x7708)));
evalcond[2]=(((x7698*x7703))+(((-1.0)*x7705))+(((-1.0)*x7700*x7708))+(((-1.0)*r02*x7707)));
evalcond[3]=((((-1.0)*r22*x7708))+((sj1*sj2))+((r20*x7709))+(((-1.0)*cj1*x7702))+(((-1.0)*x7704*x7707)));
evalcond[4]=((((-1.0)*cj0*sj1*x7702))+(((-1.0)*x7703*x7707))+(((-1.0)*r02*x7708))+(((-1.0)*cj0*x7706))+((x7699*x7700)));
evalcond[5]=((((-1.0)*r12*x7708))+(((-1.0)*x7705*x7706))+(((-1.0)*x7701*x7707))+((r10*x7709))+(((-1.0)*sj0*sj1*x7702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7710=((1.0)*gconst140);
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
CheckValue<IkReal> x7712=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7710)))),-1);
if(!x7712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7711.value)+(((1.5707963267949)*(x7712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7713=IKsin(j4);
IkReal x7714=IKcos(j4);
IkReal x7715=(gconst140*r00);
IkReal x7716=(gconst139*r11);
IkReal x7717=((1.0)*cj2);
IkReal x7718=(gconst139*r01);
IkReal x7719=(gconst139*r21);
IkReal x7720=((1.0)*sj0);
IkReal x7721=(cj1*sj2);
IkReal x7722=((1.0)*x7714);
IkReal x7723=((1.0)*x7713);
IkReal x7724=(gconst140*x7714);
evalcond[0]=((((-1.0)*gconst140*r20*x7723))+((x7713*x7719))+(((-1.0)*r22*x7722)));
evalcond[1]=(cj0+((x7713*x7716))+(((-1.0)*gconst140*r10*x7723))+(((-1.0)*r12*x7722)));
evalcond[2]=((((-1.0)*x7715*x7723))+(((-1.0)*r02*x7722))+((x7713*x7718))+(((-1.0)*x7720)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x7719*x7722))+(((-1.0)*cj1*x7717))+(((-1.0)*r22*x7723))+((r20*x7724)));
evalcond[4]=((((-1.0)*cj0*x7721))+(((-1.0)*cj0*sj1*x7717))+(((-1.0)*r02*x7723))+(((-1.0)*x7718*x7722))+((x7714*x7715)));
evalcond[5]=(((r10*x7724))+(((-1.0)*x7716*x7722))+(((-1.0)*sj0*sj1*x7717))+(((-1.0)*x7720*x7721))+(((-1.0)*r12*x7723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7725=((-1.0)*r11);
IkReal x7727 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7727)==0){
continue;
}
IkReal x7726=pow(x7727,-0.5);
CheckValue<IkReal> x7728 = IKatan2WithCheck(IkReal(x7725),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7728.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7728.value))));
IkReal gconst142=(x7725*x7726);
IkReal gconst143=((1.0)*r10*x7726);
CheckValue<IkReal> x7729 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7729.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7729.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7730=((-1.0)*r11);
CheckValue<IkReal> x7733 = IKatan2WithCheck(IkReal(x7730),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7733.valid){
continue;
}
IkReal x7731=((1.0)*(x7733.value));
IkReal x7732=x7726;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7731)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7731)));
IkReal gconst142=(x7730*x7732);
IkReal gconst143=((1.0)*r10*x7732);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7734=((-1.0)*r11);
CheckValue<IkReal> x7737 = IKatan2WithCheck(IkReal(x7734),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7737.valid){
continue;
}
IkReal x7735=((1.0)*(x7737.value));
IkReal x7736=x7726;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7735)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7735)));
IkReal gconst142=(x7734*x7736);
IkReal gconst143=((1.0)*r10*x7736);
IkReal x7738=r12*r12;
IkReal x7739=((1.0)*sj0);
IkReal x7740=(cj0*r02);
IkReal x7741=x7726;
j4eval[0]=((IKabs((((sj0*x7738*x7741))+(((-1.0)*x7739*x7741))+((r12*x7740*x7741)))))+(IKabs(((((-1.0)*r12*x7739))+(((-1.0)*x7740))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7742=((-1.0)*r11);
CheckValue<IkReal> x7745 = IKatan2WithCheck(IkReal(x7742),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7745.valid){
continue;
}
IkReal x7743=((1.0)*(x7745.value));
IkReal x7744=x7726;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7743)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7743)));
IkReal gconst142=(x7742*x7744);
IkReal gconst143=((1.0)*r10*x7744);
IkReal x7746=r12*r12;
IkReal x7747=(cj1*cj2*r22);
IkReal x7748=(r22*sj1*sj2);
CheckValue<IkReal> x7752=IKPowWithIntegerCheck(((-1.0)+x7746),-1);
if(!x7752.valid){
continue;
}
IkReal x7749=x7752.value;
if((((1.0)+(((-1.0)*x7746)))) < -0.00001)
continue;
IkReal x7750=IKsqrt(((1.0)+(((-1.0)*x7746))));
IkReal x7751=(r12*x7749*x7750);
j4eval[0]=((IKabs((((x7747*x7751))+(((-1.0)*x7748*x7751)))))+(IKabs(((((-1.0)*x7747))+x7748))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7753=(sj1*sj2);
IkReal x7754=(gconst143*r20);
IkReal x7755=(gconst142*r21);
IkReal x7756=(cj1*cj2);
CheckValue<IkReal> x7757=IKPowWithIntegerCheck(IKsign(((x7754*x7754)+(r22*r22)+(((-2.0)*x7754*x7755))+(x7755*x7755))),-1);
if(!x7757.valid){
continue;
}
CheckValue<IkReal> x7758 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7756))+((r22*x7753)))),IkReal(((((-1.0)*x7753*x7754))+((x7753*x7755))+(((-1.0)*x7755*x7756))+((x7754*x7756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7757.value)))+(x7758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7759=IKsin(j4);
IkReal x7760=IKcos(j4);
IkReal x7761=(gconst143*r20);
IkReal x7762=((1.0)*cj2);
IkReal x7763=((1.0)*sj0);
IkReal x7764=(cj1*sj2);
IkReal x7765=((1.0)*x7760);
IkReal x7766=((1.0)*x7759);
IkReal x7767=(gconst142*x7759);
IkReal x7768=(gconst143*x7760);
evalcond[0]=((((-1.0)*r22*x7765))+(((-1.0)*x7761*x7766))+((r21*x7767)));
evalcond[1]=(cj0+(((-1.0)*r12*x7765))+((r11*x7767))+(((-1.0)*gconst143*r10*x7766)));
evalcond[2]=((((-1.0)*r02*x7765))+(((-1.0)*gconst143*r00*x7766))+(((-1.0)*x7763))+((r01*x7767)));
evalcond[3]=(((x7760*x7761))+(((-1.0)*r22*x7766))+((sj1*sj2))+(((-1.0)*cj1*x7762))+(((-1.0)*gconst142*r21*x7765)));
evalcond[4]=((((-1.0)*cj0*x7764))+(((-1.0)*r02*x7766))+(((-1.0)*gconst142*r01*x7765))+(((-1.0)*cj0*sj1*x7762))+((r00*x7768)));
evalcond[5]=((((-1.0)*sj0*sj1*x7762))+(((-1.0)*r12*x7766))+(((-1.0)*x7763*x7764))+(((-1.0)*gconst142*r11*x7765))+((r10*x7768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7769=((1.0)*sj0);
IkReal x7770=((1.0)*gconst142);
CheckValue<IkReal> x7771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7770))+(((-1.0)*gconst143*r21)))),-1);
if(!x7771.valid){
continue;
}
CheckValue<IkReal> x7772 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7769)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*gconst142*r11*x7769))+((gconst143*r10*sj0))+(((-1.0)*cj0*r01*x7770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7771.value)))+(x7772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7773=IKsin(j4);
IkReal x7774=IKcos(j4);
IkReal x7775=(gconst143*r20);
IkReal x7776=((1.0)*cj2);
IkReal x7777=((1.0)*sj0);
IkReal x7778=(cj1*sj2);
IkReal x7779=((1.0)*x7774);
IkReal x7780=((1.0)*x7773);
IkReal x7781=(gconst142*x7773);
IkReal x7782=(gconst143*x7774);
evalcond[0]=((((-1.0)*r22*x7779))+((r21*x7781))+(((-1.0)*x7775*x7780)));
evalcond[1]=((((-1.0)*gconst143*r10*x7780))+cj0+((r11*x7781))+(((-1.0)*r12*x7779)));
evalcond[2]=((((-1.0)*r02*x7779))+((r01*x7781))+(((-1.0)*x7777))+(((-1.0)*gconst143*r00*x7780)));
evalcond[3]=(((sj1*sj2))+((x7774*x7775))+(((-1.0)*r22*x7780))+(((-1.0)*cj1*x7776))+(((-1.0)*gconst142*r21*x7779)));
evalcond[4]=((((-1.0)*gconst142*r01*x7779))+((r00*x7782))+(((-1.0)*r02*x7780))+(((-1.0)*cj0*sj1*x7776))+(((-1.0)*cj0*x7778)));
evalcond[5]=((((-1.0)*sj0*sj1*x7776))+((r10*x7782))+(((-1.0)*x7777*x7778))+(((-1.0)*gconst142*r11*x7779))+(((-1.0)*r12*x7780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7783=((1.0)*gconst143);
CheckValue<IkReal> x7784 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7783))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7784.valid){
continue;
}
CheckValue<IkReal> x7785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7783))+(((-1.0)*gconst142*r00)))),-1);
if(!x7785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7784.value)+(((1.5707963267949)*(x7785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7786=IKsin(j4);
IkReal x7787=IKcos(j4);
IkReal x7788=(gconst143*r20);
IkReal x7789=((1.0)*cj2);
IkReal x7790=((1.0)*sj0);
IkReal x7791=(cj1*sj2);
IkReal x7792=((1.0)*x7787);
IkReal x7793=((1.0)*x7786);
IkReal x7794=(gconst142*x7786);
IkReal x7795=(gconst143*x7787);
evalcond[0]=((((-1.0)*r22*x7792))+((r21*x7794))+(((-1.0)*x7788*x7793)));
evalcond[1]=((((-1.0)*gconst143*r10*x7793))+cj0+(((-1.0)*r12*x7792))+((r11*x7794)));
evalcond[2]=((((-1.0)*x7790))+(((-1.0)*gconst143*r00*x7793))+((r01*x7794))+(((-1.0)*r02*x7792)));
evalcond[3]=((((-1.0)*r22*x7793))+(((-1.0)*cj1*x7789))+((x7787*x7788))+((sj1*sj2))+(((-1.0)*gconst142*r21*x7792)));
evalcond[4]=((((-1.0)*cj0*sj1*x7789))+(((-1.0)*gconst142*r01*x7792))+((r00*x7795))+(((-1.0)*r02*x7793))+(((-1.0)*cj0*x7791)));
evalcond[5]=((((-1.0)*gconst142*r11*x7792))+((r10*x7795))+(((-1.0)*r12*x7793))+(((-1.0)*sj0*sj1*x7789))+(((-1.0)*x7790*x7791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7796=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7796;
j4eval[1]=IKsign(x7796);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7797=((1.0)*cj5);
IkReal x7798=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7797)));
j4eval[0]=x7798;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7797)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7799=cj5*cj5;
IkReal x7800=r11*r11;
IkReal x7801=(r11*sj5);
IkReal x7802=(cj5*r10);
IkReal x7803=((r12*r12)+(((-1.0)*x7799*x7800))+(((-2.0)*x7801*x7802))+x7800+((x7799*(r10*r10))));
j4eval[0]=x7803;
j4eval[1]=IKsign(x7803);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7801))+x7802))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7804=cj5*cj5;
IkReal x7805=r11*r11;
IkReal x7806=(cj5*r10);
IkReal x7807=(r11*sj5);
CheckValue<IkReal> x7808=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7804*(r10*r10)))+x7805+(((-2.0)*x7806*x7807))+(((-1.0)*x7804*x7805)))),-1);
if(!x7808.valid){
continue;
}
CheckValue<IkReal> x7809 = IKatan2WithCheck(IkReal(((((-1.0)*x7807))+x7806)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7808.value)))+(x7809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7810=IKsin(j4);
IkReal x7811=IKcos(j4);
IkReal x7812=(cj5*r10);
IkReal x7813=(r01*sj5);
IkReal x7814=((1.0)*cj2);
IkReal x7815=(cj5*r00);
IkReal x7816=(cj5*r20);
IkReal x7817=((1.0)*x7811);
IkReal x7818=((1.0)*x7810);
IkReal x7819=(sj5*x7810);
evalcond[0]=((((-1.0)*r22*x7817))+((r21*x7819))+(((-1.0)*x7816*x7818)));
evalcond[1]=(((x7810*x7813))+(((-1.0)*r02*x7817))+(((-1.0)*x7815*x7818)));
evalcond[2]=((((-1.0)*r12*x7818))+(((-1.0)*r11*sj5*x7817))+((x7811*x7812)));
evalcond[3]=((1.0)+((r11*x7819))+(((-1.0)*x7812*x7818))+(((-1.0)*r12*x7817)));
evalcond[4]=((((-1.0)*r21*sj5*x7817))+((sj1*sj2))+(((-1.0)*cj1*x7814))+(((-1.0)*r22*x7818))+((x7811*x7816)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7814))+(((-1.0)*r02*x7818))+(((-1.0)*x7813*x7817))+((x7811*x7815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7820=((1.0)*cj5);
CheckValue<IkReal> x7821 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7820))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7821.valid){
continue;
}
CheckValue<IkReal> x7822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7820)))),-1);
if(!x7822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7821.value)+(((1.5707963267949)*(x7822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7823=IKsin(j4);
IkReal x7824=IKcos(j4);
IkReal x7825=(cj5*r10);
IkReal x7826=(r01*sj5);
IkReal x7827=((1.0)*cj2);
IkReal x7828=(cj5*r00);
IkReal x7829=(cj5*r20);
IkReal x7830=((1.0)*x7824);
IkReal x7831=((1.0)*x7823);
IkReal x7832=(sj5*x7823);
evalcond[0]=(((r21*x7832))+(((-1.0)*x7829*x7831))+(((-1.0)*r22*x7830)));
evalcond[1]=((((-1.0)*x7828*x7831))+(((-1.0)*r02*x7830))+((x7823*x7826)));
evalcond[2]=((((-1.0)*r11*sj5*x7830))+(((-1.0)*r12*x7831))+((x7824*x7825)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7830))+(((-1.0)*x7825*x7831))+((r11*x7832)));
evalcond[4]=((((-1.0)*r22*x7831))+(((-1.0)*cj1*x7827))+((sj1*sj2))+(((-1.0)*r21*sj5*x7830))+((x7824*x7829)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x7831))+(((-1.0)*sj1*x7827))+((x7824*x7828))+(((-1.0)*x7826*x7830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7833=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7833.valid){
continue;
}
CheckValue<IkReal> x7834 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7833.value)))+(x7834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7835=IKsin(j4);
IkReal x7836=IKcos(j4);
IkReal x7837=(cj5*r10);
IkReal x7838=(r01*sj5);
IkReal x7839=((1.0)*cj2);
IkReal x7840=(cj5*r00);
IkReal x7841=(cj5*r20);
IkReal x7842=((1.0)*x7836);
IkReal x7843=((1.0)*x7835);
IkReal x7844=(sj5*x7835);
evalcond[0]=(((r21*x7844))+(((-1.0)*r22*x7842))+(((-1.0)*x7841*x7843)));
evalcond[1]=(((x7835*x7838))+(((-1.0)*x7840*x7843))+(((-1.0)*r02*x7842)));
evalcond[2]=(((x7836*x7837))+(((-1.0)*r11*sj5*x7842))+(((-1.0)*r12*x7843)));
evalcond[3]=((1.0)+(((-1.0)*x7837*x7843))+(((-1.0)*r12*x7842))+((r11*x7844)));
evalcond[4]=(((x7836*x7841))+(((-1.0)*r22*x7843))+((sj1*sj2))+(((-1.0)*r21*sj5*x7842))+(((-1.0)*cj1*x7839)));
evalcond[5]=((((-1.0)*x7838*x7842))+((x7836*x7840))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x7843))+(((-1.0)*sj1*x7839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7845=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7845;
j4eval[1]=IKsign(x7845);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7846=((1.0)*cj5);
IkReal x7847=((((-1.0)*r21*x7846))+(((-1.0)*r20*sj5)));
j4eval[0]=x7847;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7846))))));
j4eval[2]=IKsign(x7847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7848=cj5*cj5;
IkReal x7849=r11*r11;
IkReal x7850=(cj5*r10);
IkReal x7851=(r11*sj5);
IkReal x7852=((((-1.0)*x7848*(r10*r10)))+((x7848*x7849))+(((-1.0)*x7849))+(((2.0)*x7850*x7851))+(((-1.0)*(r12*r12))));
j4eval[0]=x7852;
j4eval[1]=((IKabs(r12))+(IKabs((x7850+(((-1.0)*x7851))))));
j4eval[2]=IKsign(x7852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7853=cj5*cj5;
IkReal x7854=r11*r11;
IkReal x7855=(cj5*r10);
IkReal x7856=(r11*sj5);
CheckValue<IkReal> x7857 = IKatan2WithCheck(IkReal((x7855+(((-1.0)*x7856)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7857.valid){
continue;
}
CheckValue<IkReal> x7858=IKPowWithIntegerCheck(IKsign(((((2.0)*x7855*x7856))+(((-1.0)*x7854))+(((-1.0)*(r12*r12)))+((x7853*x7854))+(((-1.0)*x7853*(r10*r10))))),-1);
if(!x7858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7857.value)+(((1.5707963267949)*(x7858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7859=IKsin(j4);
IkReal x7860=IKcos(j4);
IkReal x7861=(cj5*r10);
IkReal x7862=(r01*sj5);
IkReal x7863=(cj5*r00);
IkReal x7864=(cj5*r20);
IkReal x7865=((1.0)*x7860);
IkReal x7866=((1.0)*x7859);
IkReal x7867=(sj5*x7859);
evalcond[0]=((((-1.0)*x7864*x7866))+((r21*x7867))+(((-1.0)*r22*x7865)));
evalcond[1]=((((-1.0)*x7863*x7866))+((x7859*x7862))+(((-1.0)*r02*x7865)));
evalcond[2]=(((x7860*x7861))+(((-1.0)*r11*sj5*x7865))+(((-1.0)*r12*x7866)));
evalcond[3]=((-1.0)+((r11*x7867))+(((-1.0)*r12*x7865))+(((-1.0)*x7861*x7866)));
evalcond[4]=((((-1.0)*x7862*x7865))+((cj2*sj1))+((x7860*x7863))+((cj1*sj2))+(((-1.0)*r02*x7866)));
evalcond[5]=(((x7860*x7864))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7865))+(((-1.0)*r22*x7866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7868=((1.0)*cj5);
CheckValue<IkReal> x7869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7868))+(((-1.0)*r20*sj5)))),-1);
if(!x7869.valid){
continue;
}
CheckValue<IkReal> x7870 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7869.value)))+(x7870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7871=IKsin(j4);
IkReal x7872=IKcos(j4);
IkReal x7873=(cj5*r10);
IkReal x7874=(r01*sj5);
IkReal x7875=(cj5*r00);
IkReal x7876=(cj5*r20);
IkReal x7877=((1.0)*x7872);
IkReal x7878=((1.0)*x7871);
IkReal x7879=(sj5*x7871);
evalcond[0]=((((-1.0)*r22*x7877))+(((-1.0)*x7876*x7878))+((r21*x7879)));
evalcond[1]=((((-1.0)*x7875*x7878))+(((-1.0)*r02*x7877))+((x7871*x7874)));
evalcond[2]=((((-1.0)*r11*sj5*x7877))+(((-1.0)*r12*x7878))+((x7872*x7873)));
evalcond[3]=((-1.0)+(((-1.0)*x7873*x7878))+((r11*x7879))+(((-1.0)*r12*x7877)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7874*x7877))+((cj1*sj2))+(((-1.0)*r02*x7878))+((x7872*x7875)));
evalcond[5]=((((-1.0)*r22*x7878))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7872*x7876))+(((-1.0)*r21*sj5*x7877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7880 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7880.valid){
continue;
}
CheckValue<IkReal> x7881=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7880.value)+(((1.5707963267949)*(x7881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7882=IKsin(j4);
IkReal x7883=IKcos(j4);
IkReal x7884=(cj5*r10);
IkReal x7885=(r01*sj5);
IkReal x7886=(cj5*r00);
IkReal x7887=(cj5*r20);
IkReal x7888=((1.0)*x7883);
IkReal x7889=((1.0)*x7882);
IkReal x7890=(sj5*x7882);
evalcond[0]=(((r21*x7890))+(((-1.0)*r22*x7888))+(((-1.0)*x7887*x7889)));
evalcond[1]=((((-1.0)*r02*x7888))+((x7882*x7885))+(((-1.0)*x7886*x7889)));
evalcond[2]=(((x7883*x7884))+(((-1.0)*r11*sj5*x7888))+(((-1.0)*r12*x7889)));
evalcond[3]=((-1.0)+(((-1.0)*x7884*x7889))+(((-1.0)*r12*x7888))+((r11*x7890)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x7889))+((x7883*x7886))+(((-1.0)*x7885*x7888)));
evalcond[5]=((((-1.0)*r22*x7889))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7883*x7887))+(((-1.0)*r21*sj5*x7888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7891=((-1.0)*r00);
IkReal x7893 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7893)==0){
continue;
}
IkReal x7892=pow(x7893,-0.5);
CheckValue<IkReal> x7894 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7891),IKFAST_ATAN2_MAGTHRESH);
if(!x7894.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7894.value));
IkReal gconst145=(r01*x7892);
IkReal gconst146=(x7891*x7892);
CheckValue<IkReal> x7895 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7895.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7895.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7896=((-1.0)*r00);
IkReal x7897=x7892;
CheckValue<IkReal> x7899 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7896),IKFAST_ATAN2_MAGTHRESH);
if(!x7899.valid){
continue;
}
IkReal x7898=((-1.0)*(x7899.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7898;
IkReal gconst144=x7898;
IkReal gconst145=(r01*x7897);
IkReal gconst146=(x7896*x7897);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7900=((1.0)*sj0);
IkReal x7901=((1.0)*gconst145);
CheckValue<IkReal> x7902 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7900))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x7901))+(((-1.0)*gconst145*r11*x7900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7902.valid){
continue;
}
CheckValue<IkReal> x7903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7901))+(((-1.0)*gconst146*r21)))),-1);
if(!x7903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7902.value)+(((1.5707963267949)*(x7903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7904=IKsin(j4);
IkReal x7905=IKcos(j4);
IkReal x7906=(gconst146*r10);
IkReal x7907=((1.0)*cj2);
IkReal x7908=(gconst146*r20);
IkReal x7909=((1.0)*sj0);
IkReal x7910=(gconst146*r00);
IkReal x7911=(cj1*sj2);
IkReal x7912=((1.0)*x7905);
IkReal x7913=((1.0)*x7904);
IkReal x7914=(gconst145*x7904);
evalcond[0]=(((r21*x7914))+(((-1.0)*r22*x7912))+(((-1.0)*x7908*x7913)));
evalcond[1]=((((-1.0)*x7906*x7913))+cj0+((r11*x7914))+(((-1.0)*r12*x7912)));
evalcond[2]=((((-1.0)*r02*x7912))+(((-1.0)*x7910*x7913))+(((-1.0)*x7909))+((r01*x7914)));
evalcond[3]=((((-1.0)*r22*x7913))+((sj1*sj2))+(((-1.0)*cj1*x7907))+(((-1.0)*gconst145*r21*x7912))+((x7905*x7908)));
evalcond[4]=((((-1.0)*cj0*sj1*x7907))+(((-1.0)*r02*x7913))+(((-1.0)*gconst145*r01*x7912))+((x7905*x7910))+(((-1.0)*cj0*x7911)));
evalcond[5]=((((-1.0)*gconst145*r11*x7912))+(((-1.0)*sj0*sj1*x7907))+(((-1.0)*r12*x7913))+((x7905*x7906))+(((-1.0)*x7909*x7911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7915=((1.0)*gconst146);
CheckValue<IkReal> x7916=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7915))+(((-1.0)*gconst145*r10)))),-1);
if(!x7916.valid){
continue;
}
CheckValue<IkReal> x7917 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7915))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7916.value)))+(x7917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7918=IKsin(j4);
IkReal x7919=IKcos(j4);
IkReal x7920=(gconst146*r10);
IkReal x7921=((1.0)*cj2);
IkReal x7922=(gconst146*r20);
IkReal x7923=((1.0)*sj0);
IkReal x7924=(gconst146*r00);
IkReal x7925=(cj1*sj2);
IkReal x7926=((1.0)*x7919);
IkReal x7927=((1.0)*x7918);
IkReal x7928=(gconst145*x7918);
evalcond[0]=((((-1.0)*x7922*x7927))+(((-1.0)*r22*x7926))+((r21*x7928)));
evalcond[1]=((((-1.0)*x7920*x7927))+cj0+(((-1.0)*r12*x7926))+((r11*x7928)));
evalcond[2]=((((-1.0)*x7923))+(((-1.0)*r02*x7926))+(((-1.0)*x7924*x7927))+((r01*x7928)));
evalcond[3]=((((-1.0)*r22*x7927))+((sj1*sj2))+(((-1.0)*cj1*x7921))+((x7919*x7922))+(((-1.0)*gconst145*r21*x7926)));
evalcond[4]=((((-1.0)*r02*x7927))+(((-1.0)*gconst145*r01*x7926))+(((-1.0)*cj0*sj1*x7921))+((x7919*x7924))+(((-1.0)*cj0*x7925)));
evalcond[5]=((((-1.0)*gconst145*r11*x7926))+(((-1.0)*r12*x7927))+((x7919*x7920))+(((-1.0)*x7923*x7925))+(((-1.0)*sj0*sj1*x7921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7929=((-1.0)*r01);
IkReal x7931 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7931)==0){
continue;
}
IkReal x7930=pow(x7931,-0.5);
CheckValue<IkReal> x7932 = IKatan2WithCheck(IkReal(x7929),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7932.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7932.value))));
IkReal gconst148=(x7929*x7930);
IkReal gconst149=((1.0)*r00*x7930);
CheckValue<IkReal> x7933 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7933.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7933.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7934=((-1.0)*r01);
CheckValue<IkReal> x7937 = IKatan2WithCheck(IkReal(x7934),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7937.valid){
continue;
}
IkReal x7935=((1.0)*(x7937.value));
IkReal x7936=x7930;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7935)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7935)));
IkReal gconst148=(x7934*x7936);
IkReal gconst149=((1.0)*r00*x7936);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7938=((-1.0)*r01);
CheckValue<IkReal> x7941 = IKatan2WithCheck(IkReal(x7938),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7941.valid){
continue;
}
IkReal x7939=((1.0)*(x7941.value));
IkReal x7940=x7930;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7939)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7939)));
IkReal gconst148=(x7938*x7940);
IkReal gconst149=((1.0)*r00*x7940);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7942=((-1.0)*r01);
CheckValue<IkReal> x7945 = IKatan2WithCheck(IkReal(x7942),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7945.valid){
continue;
}
IkReal x7943=((1.0)*(x7945.value));
IkReal x7944=x7930;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7943)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7943)));
IkReal gconst148=(x7942*x7944);
IkReal gconst149=((1.0)*r00*x7944);
IkReal x7946=r02*r02;
IkReal x7947=(r12*sj0);
IkReal x7948=((1.0)*cj0);
IkReal x7949=x7930;
j4eval[0]=((IKabs(((((-1.0)*r02*x7948))+(((-1.0)*x7947)))))+(IKabs((((cj0*x7946*x7949))+((r02*x7947*x7949))+(((-1.0)*x7948*x7949))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7950=((1.0)*sj0);
IkReal x7951=((1.0)*gconst148);
CheckValue<IkReal> x7952 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7950)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x7951))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7952.valid){
continue;
}
CheckValue<IkReal> x7953=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x7951)))),-1);
if(!x7953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7952.value)+(((1.5707963267949)*(x7953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7954=IKsin(j4);
IkReal x7955=IKcos(j4);
IkReal x7956=(gconst148*r11);
IkReal x7957=((1.0)*cj2);
IkReal x7958=((1.0)*sj0);
IkReal x7959=(cj1*sj2);
IkReal x7960=((1.0)*x7955);
IkReal x7961=(gconst149*x7955);
IkReal x7962=(gconst148*x7954);
IkReal x7963=((1.0)*x7954);
evalcond[0]=(((r21*x7962))+(((-1.0)*r22*x7960))+(((-1.0)*gconst149*r20*x7963)));
evalcond[1]=(cj0+((x7954*x7956))+(((-1.0)*r12*x7960))+(((-1.0)*gconst149*r10*x7963)));
evalcond[2]=(((r01*x7962))+(((-1.0)*x7958))+(((-1.0)*gconst149*r00*x7963))+(((-1.0)*r02*x7960)));
evalcond[3]=((((-1.0)*cj1*x7957))+(((-1.0)*r22*x7963))+((sj1*sj2))+((r20*x7961))+(((-1.0)*gconst148*r21*x7960)));
evalcond[4]=((((-1.0)*cj0*sj1*x7957))+((r00*x7961))+(((-1.0)*cj0*x7959))+(((-1.0)*r02*x7963))+(((-1.0)*gconst148*r01*x7960)));
evalcond[5]=((((-1.0)*x7956*x7960))+(((-1.0)*x7958*x7959))+(((-1.0)*sj0*sj1*x7957))+(((-1.0)*r12*x7963))+((r10*x7961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7964=((1.0)*gconst149);
CheckValue<IkReal> x7965 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7964))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7965.valid){
continue;
}
CheckValue<IkReal> x7966=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7964))+(((-1.0)*gconst148*r10)))),-1);
if(!x7966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7965.value)+(((1.5707963267949)*(x7966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7967=IKsin(j4);
IkReal x7968=IKcos(j4);
IkReal x7969=(gconst148*r11);
IkReal x7970=((1.0)*cj2);
IkReal x7971=((1.0)*sj0);
IkReal x7972=(cj1*sj2);
IkReal x7973=((1.0)*x7968);
IkReal x7974=(gconst149*x7968);
IkReal x7975=(gconst148*x7967);
IkReal x7976=((1.0)*x7967);
evalcond[0]=((((-1.0)*r22*x7973))+(((-1.0)*gconst149*r20*x7976))+((r21*x7975)));
evalcond[1]=(cj0+((x7967*x7969))+(((-1.0)*r12*x7973))+(((-1.0)*gconst149*r10*x7976)));
evalcond[2]=(((r01*x7975))+(((-1.0)*x7971))+(((-1.0)*r02*x7973))+(((-1.0)*gconst149*r00*x7976)));
evalcond[3]=((((-1.0)*r22*x7976))+(((-1.0)*cj1*x7970))+((sj1*sj2))+((r20*x7974))+(((-1.0)*gconst148*r21*x7973)));
evalcond[4]=((((-1.0)*gconst148*r01*x7973))+((r00*x7974))+(((-1.0)*cj0*x7972))+(((-1.0)*r02*x7976))+(((-1.0)*cj0*sj1*x7970)));
evalcond[5]=((((-1.0)*sj0*sj1*x7970))+(((-1.0)*r12*x7976))+(((-1.0)*x7969*x7973))+((r10*x7974))+(((-1.0)*x7971*x7972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7977=((1.0)*gconst149);
CheckValue<IkReal> x7978 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x7977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7978.valid){
continue;
}
CheckValue<IkReal> x7979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7977))+(((-1.0)*gconst148*r00)))),-1);
if(!x7979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7978.value)+(((1.5707963267949)*(x7979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7980=IKsin(j4);
IkReal x7981=IKcos(j4);
IkReal x7982=(gconst148*r11);
IkReal x7983=((1.0)*cj2);
IkReal x7984=((1.0)*sj0);
IkReal x7985=(cj1*sj2);
IkReal x7986=((1.0)*x7981);
IkReal x7987=(gconst149*x7981);
IkReal x7988=(gconst148*x7980);
IkReal x7989=((1.0)*x7980);
evalcond[0]=((((-1.0)*r22*x7986))+(((-1.0)*gconst149*r20*x7989))+((r21*x7988)));
evalcond[1]=((((-1.0)*r12*x7986))+cj0+(((-1.0)*gconst149*r10*x7989))+((x7980*x7982)));
evalcond[2]=(((r01*x7988))+(((-1.0)*gconst149*r00*x7989))+(((-1.0)*x7984))+(((-1.0)*r02*x7986)));
evalcond[3]=((((-1.0)*r22*x7989))+((r20*x7987))+(((-1.0)*gconst148*r21*x7986))+(((-1.0)*cj1*x7983))+((sj1*sj2)));
evalcond[4]=((((-1.0)*gconst148*r01*x7986))+(((-1.0)*cj0*sj1*x7983))+((r00*x7987))+(((-1.0)*cj0*x7985))+(((-1.0)*r02*x7989)));
evalcond[5]=((((-1.0)*r12*x7989))+(((-1.0)*x7984*x7985))+(((-1.0)*x7982*x7986))+(((-1.0)*sj0*sj1*x7983))+((r10*x7987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7990=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7990;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7991=((1.0)*cj5);
IkReal x7992=((((-1.0)*r11*x7991))+(((-1.0)*r10*sj5)));
j4eval[0]=x7992;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7991))+((r21*sj5))))));
j4eval[2]=IKsign(x7992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7993=cj5*cj5;
IkReal x7994=r01*r01;
IkReal x7995=(r01*sj5);
IkReal x7996=(cj5*r00);
IkReal x7997=((((2.0)*x7995*x7996))+(((-1.0)*(r02*r02)))+(((-1.0)*x7993*(r00*r00)))+(((-1.0)*x7994))+((x7993*x7994)));
j4eval[0]=x7997;
j4eval[1]=IKsign(x7997);
j4eval[2]=((IKabs(r02))+(IKabs((x7996+(((-1.0)*x7995))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7998=cj5*cj5;
IkReal x7999=r01*r01;
IkReal x8000=(r01*sj5);
IkReal x8001=(cj5*r00);
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal(((((-1.0)*x8000))+x8001)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
CheckValue<IkReal> x8003=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x7998*x7999))+(((-1.0)*x7999))+(((-1.0)*x7998*(r00*r00)))+(((2.0)*x8000*x8001)))),-1);
if(!x8003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8002.value)+(((1.5707963267949)*(x8003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8004=IKsin(j4);
IkReal x8005=IKcos(j4);
IkReal x8006=(cj5*r10);
IkReal x8007=(r01*sj5);
IkReal x8008=((1.0)*cj2);
IkReal x8009=(cj5*r00);
IkReal x8010=(cj5*r20);
IkReal x8011=((1.0)*x8005);
IkReal x8012=((1.0)*x8004);
IkReal x8013=(sj5*x8004);
evalcond[0]=((((-1.0)*r22*x8011))+(((-1.0)*x8010*x8012))+((r21*x8013)));
evalcond[1]=(((r11*x8013))+(((-1.0)*x8006*x8012))+(((-1.0)*r12*x8011)));
evalcond[2]=(((x8005*x8009))+(((-1.0)*r02*x8012))+(((-1.0)*x8007*x8011)));
evalcond[3]=((-1.0)+(((-1.0)*x8009*x8012))+(((-1.0)*r02*x8011))+((x8004*x8007)));
evalcond[4]=((((-1.0)*r22*x8012))+((sj1*sj2))+((x8005*x8010))+(((-1.0)*cj1*x8008))+(((-1.0)*r21*sj5*x8011)));
evalcond[5]=(((x8005*x8006))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x8011))+(((-1.0)*sj1*x8008))+(((-1.0)*r12*x8012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8014=((1.0)*cj5);
CheckValue<IkReal> x8015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8014)))),-1);
if(!x8015.valid){
continue;
}
CheckValue<IkReal> x8016 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8015.value)))+(x8016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8017=IKsin(j4);
IkReal x8018=IKcos(j4);
IkReal x8019=(cj5*r10);
IkReal x8020=(r01*sj5);
IkReal x8021=((1.0)*cj2);
IkReal x8022=(cj5*r00);
IkReal x8023=(cj5*r20);
IkReal x8024=((1.0)*x8018);
IkReal x8025=((1.0)*x8017);
IkReal x8026=(sj5*x8017);
evalcond[0]=((((-1.0)*x8023*x8025))+((r21*x8026))+(((-1.0)*r22*x8024)));
evalcond[1]=((((-1.0)*r12*x8024))+(((-1.0)*x8019*x8025))+((r11*x8026)));
evalcond[2]=(((x8018*x8022))+(((-1.0)*r02*x8025))+(((-1.0)*x8020*x8024)));
evalcond[3]=((-1.0)+((x8017*x8020))+(((-1.0)*x8022*x8025))+(((-1.0)*r02*x8024)));
evalcond[4]=(((x8018*x8023))+((sj1*sj2))+(((-1.0)*cj1*x8021))+(((-1.0)*r21*sj5*x8024))+(((-1.0)*r22*x8025)));
evalcond[5]=((((-1.0)*sj1*x8021))+(((-1.0)*r12*x8025))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x8024))+((x8018*x8019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8027=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8027.valid){
continue;
}
CheckValue<IkReal> x8028 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8027.value)))+(x8028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8029=IKsin(j4);
IkReal x8030=IKcos(j4);
IkReal x8031=(cj5*r10);
IkReal x8032=(r01*sj5);
IkReal x8033=((1.0)*cj2);
IkReal x8034=(cj5*r00);
IkReal x8035=(cj5*r20);
IkReal x8036=((1.0)*x8030);
IkReal x8037=((1.0)*x8029);
IkReal x8038=(sj5*x8029);
evalcond[0]=((((-1.0)*x8035*x8037))+((r21*x8038))+(((-1.0)*r22*x8036)));
evalcond[1]=((((-1.0)*r12*x8036))+((r11*x8038))+(((-1.0)*x8031*x8037)));
evalcond[2]=((((-1.0)*r02*x8037))+(((-1.0)*x8032*x8036))+((x8030*x8034)));
evalcond[3]=((-1.0)+((x8029*x8032))+(((-1.0)*r02*x8036))+(((-1.0)*x8034*x8037)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x8033))+(((-1.0)*r21*sj5*x8036))+(((-1.0)*r22*x8037))+((x8030*x8035)));
evalcond[5]=((((-1.0)*r12*x8037))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x8036))+((x8030*x8031))+(((-1.0)*sj1*x8033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8039=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8039;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8040=((1.0)*cj5);
IkReal x8041=((((-1.0)*r21*x8040))+(((-1.0)*r20*sj5)));
j4eval[0]=x8041;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8040))+((r11*sj5))))));
j4eval[2]=IKsign(x8041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8042=cj5*cj5;
IkReal x8043=r01*r01;
IkReal x8044=(cj5*r00);
IkReal x8045=(r01*sj5);
IkReal x8046=((((-1.0)*x8042*x8043))+(((-2.0)*x8044*x8045))+((x8042*(r00*r00)))+x8043+(r02*r02));
j4eval[0]=x8046;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8045))+x8044))));
j4eval[2]=IKsign(x8046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8047=cj5*cj5;
IkReal x8048=r01*r01;
IkReal x8049=(r01*sj5);
IkReal x8050=(cj5*r00);
CheckValue<IkReal> x8051=IKPowWithIntegerCheck(IKsign((((x8047*(r00*r00)))+(((-1.0)*x8047*x8048))+x8048+(r02*r02)+(((-2.0)*x8049*x8050)))),-1);
if(!x8051.valid){
continue;
}
CheckValue<IkReal> x8052 = IKatan2WithCheck(IkReal(((((-1.0)*x8049))+x8050)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8051.value)))+(x8052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8053=IKsin(j4);
IkReal x8054=IKcos(j4);
IkReal x8055=(cj5*r10);
IkReal x8056=(r01*sj5);
IkReal x8057=(cj5*r00);
IkReal x8058=(cj5*r20);
IkReal x8059=((1.0)*x8054);
IkReal x8060=((1.0)*x8053);
IkReal x8061=(sj5*x8053);
evalcond[0]=(((r21*x8061))+(((-1.0)*r22*x8059))+(((-1.0)*x8058*x8060)));
evalcond[1]=((((-1.0)*r12*x8059))+(((-1.0)*x8055*x8060))+((r11*x8061)));
evalcond[2]=(((x8054*x8057))+(((-1.0)*x8056*x8059))+(((-1.0)*r02*x8060)));
evalcond[3]=((1.0)+(((-1.0)*x8057*x8060))+(((-1.0)*r02*x8059))+((x8053*x8056)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8054*x8055))+(((-1.0)*r12*x8060))+(((-1.0)*r11*sj5*x8059)));
evalcond[5]=((((-1.0)*r21*sj5*x8059))+((x8054*x8058))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8062=((1.0)*cj5);
CheckValue<IkReal> x8063 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8062))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8063.valid){
continue;
}
CheckValue<IkReal> x8064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8062))+(((-1.0)*r20*sj5)))),-1);
if(!x8064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8063.value)+(((1.5707963267949)*(x8064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8065=IKsin(j4);
IkReal x8066=IKcos(j4);
IkReal x8067=(cj5*r10);
IkReal x8068=(r01*sj5);
IkReal x8069=(cj5*r00);
IkReal x8070=(cj5*r20);
IkReal x8071=((1.0)*x8066);
IkReal x8072=((1.0)*x8065);
IkReal x8073=(sj5*x8065);
evalcond[0]=((((-1.0)*x8070*x8072))+((r21*x8073))+(((-1.0)*r22*x8071)));
evalcond[1]=((((-1.0)*x8067*x8072))+((r11*x8073))+(((-1.0)*r12*x8071)));
evalcond[2]=((((-1.0)*r02*x8072))+(((-1.0)*x8068*x8071))+((x8066*x8069)));
evalcond[3]=((1.0)+((x8065*x8068))+(((-1.0)*r02*x8071))+(((-1.0)*x8069*x8072)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x8071))+((x8066*x8067))+(((-1.0)*r12*x8072)));
evalcond[5]=(((x8066*x8070))+(((-1.0)*r21*sj5*x8071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8074 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8074.valid){
continue;
}
CheckValue<IkReal> x8075=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8074.value)+(((1.5707963267949)*(x8075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8076=IKsin(j4);
IkReal x8077=IKcos(j4);
IkReal x8078=(cj5*r10);
IkReal x8079=(r01*sj5);
IkReal x8080=(cj5*r00);
IkReal x8081=(cj5*r20);
IkReal x8082=((1.0)*x8077);
IkReal x8083=((1.0)*x8076);
IkReal x8084=(sj5*x8076);
evalcond[0]=(((r21*x8084))+(((-1.0)*r22*x8082))+(((-1.0)*x8081*x8083)));
evalcond[1]=((((-1.0)*x8078*x8083))+((r11*x8084))+(((-1.0)*r12*x8082)));
evalcond[2]=((((-1.0)*r02*x8083))+(((-1.0)*x8079*x8082))+((x8077*x8080)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8082))+(((-1.0)*x8080*x8083))+((x8076*x8079)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x8082))+((x8077*x8078))+(((-1.0)*r12*x8083)));
evalcond[5]=((((-1.0)*r21*sj5*x8082))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8077*x8081))+(((-1.0)*r22*x8083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8085=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8085);
rxp1_1=(px*r21);
rxp1_2=(r11*x8085);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8086=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8086);
rxp1_1=(px*r21);
rxp1_2=(r11*x8086);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8087=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8087);
rxp1_1=(px*r21);
rxp1_2=(r11*x8087);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8090=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8090.valid){
continue;
}
IkReal x8088=x8090.value;
IkReal x8089=(sj0*x8088);
cj4array[0]=(((cj1*sj2*x8089))+((cj2*sj1*x8089)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8091=IKsin(j4);
IkReal x8092=IKcos(j4);
IkReal x8093=(cj5*r20);
IkReal x8094=(r21*sj5);
IkReal x8095=((1.0)*x8091);
IkReal x8096=((1.0)*x8092);
evalcond[0]=((-1.0)*r02*x8091);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8096)));
evalcond[2]=((((-1.0)*x8093*x8095))+((x8091*x8094)));
evalcond[3]=((((-1.0)*cj5*r10*x8095))+((r11*sj5*x8091)));
evalcond[4]=((((-1.0)*x8094*x8096))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8092*x8093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8098=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8098.valid){
continue;
}
IkReal x8097=x8098.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8097))+((cj1*cj2*x8097)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8099=IKsin(j4);
IkReal x8100=IKcos(j4);
IkReal x8101=(r11*sj5);
IkReal x8102=((1.0)*sj0);
IkReal x8103=((1.0)*x8100);
IkReal x8104=((1.0)*cj5*x8099);
evalcond[0]=((-1.0)*r02*x8099);
evalcond[1]=((((-1.0)*x8102))+(((-1.0)*r02*x8103)));
evalcond[2]=((((-1.0)*r20*x8104))+((r21*sj5*x8099)));
evalcond[3]=(((x8099*x8101))+(((-1.0)*r10*x8104)));
evalcond[4]=(((cj5*r10*x8100))+(((-1.0)*cj2*sj1*x8102))+(((-1.0)*cj1*sj2*x8102))+(((-1.0)*x8101*x8103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8105=IKPowWithIntegerCheck(r02,-1);
if(!x8105.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8105.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8106=IKsin(j4);
IkReal x8107=IKcos(j4);
IkReal x8108=((1.0)*sj0);
IkReal x8109=(cj5*x8107);
IkReal x8110=(sj5*x8106);
IkReal x8111=((1.0)*sj5*x8107);
IkReal x8112=((1.0)*cj5*x8106);
evalcond[0]=((-1.0)*r02*x8106);
evalcond[1]=((((-1.0)*r20*x8112))+((r21*x8110)));
evalcond[2]=(((r11*x8110))+(((-1.0)*r10*x8112)));
evalcond[3]=((((-1.0)*r21*x8111))+((r20*x8109))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj2*sj1*x8108))+(((-1.0)*r11*x8111))+(((-1.0)*cj1*sj2*x8108))+((r10*x8109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8113=((1.0)*sj0);
IkReal x8114=((1.0)*cj0);
CheckValue<IkReal> x8115 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8113))+(((-1.0)*r02*x8114)))),IkReal(((((-1.0)*r01*sj5*x8114))+(((-1.0)*r11*sj5*x8113))+((cj0*cj5*r00))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8115.valid){
continue;
}
CheckValue<IkReal> x8116=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8115.value)+(((1.5707963267949)*(x8116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8117=IKsin(j4);
IkReal x8118=IKcos(j4);
IkReal x8119=(cj5*r10);
IkReal x8120=(r01*sj5);
IkReal x8121=((1.0)*cj2);
IkReal x8122=(cj5*r00);
IkReal x8123=((1.0)*sj0);
IkReal x8124=(cj5*r20);
IkReal x8125=(cj1*sj2);
IkReal x8126=((1.0)*x8118);
IkReal x8127=((1.0)*x8117);
IkReal x8128=(sj5*x8117);
evalcond[0]=((((-1.0)*x8124*x8127))+((r21*x8128))+(((-1.0)*r22*x8126)));
evalcond[1]=((((-1.0)*r12*x8126))+cj0+((r11*x8128))+(((-1.0)*x8119*x8127)));
evalcond[2]=((((-1.0)*x8122*x8127))+(((-1.0)*x8123))+((x8117*x8120))+(((-1.0)*r02*x8126)));
evalcond[3]=(((x8118*x8124))+(((-1.0)*r21*sj5*x8126))+((sj1*sj2))+(((-1.0)*r22*x8127))+(((-1.0)*cj1*x8121)));
evalcond[4]=(((x8118*x8122))+(((-1.0)*cj0*sj1*x8121))+(((-1.0)*r02*x8127))+(((-1.0)*cj0*x8125))+(((-1.0)*x8120*x8126)));
evalcond[5]=((((-1.0)*r11*sj5*x8126))+(((-1.0)*r12*x8127))+((x8118*x8119))+(((-1.0)*x8123*x8125))+(((-1.0)*sj0*sj1*x8121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8129=((1.0)*cj5);
CheckValue<IkReal> x8130 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8129))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8130.valid){
continue;
}
CheckValue<IkReal> x8131=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8129)))),-1);
if(!x8131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8130.value)+(((1.5707963267949)*(x8131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8132=IKsin(j4);
IkReal x8133=IKcos(j4);
IkReal x8134=(cj5*r10);
IkReal x8135=(r01*sj5);
IkReal x8136=((1.0)*cj2);
IkReal x8137=(cj5*r00);
IkReal x8138=((1.0)*sj0);
IkReal x8139=(cj5*r20);
IkReal x8140=(cj1*sj2);
IkReal x8141=((1.0)*x8133);
IkReal x8142=((1.0)*x8132);
IkReal x8143=(sj5*x8132);
evalcond[0]=((((-1.0)*x8139*x8142))+(((-1.0)*r22*x8141))+((r21*x8143)));
evalcond[1]=(cj0+(((-1.0)*x8134*x8142))+((r11*x8143))+(((-1.0)*r12*x8141)));
evalcond[2]=(((x8132*x8135))+(((-1.0)*x8138))+(((-1.0)*r02*x8141))+(((-1.0)*x8137*x8142)));
evalcond[3]=((((-1.0)*cj1*x8136))+((sj1*sj2))+(((-1.0)*r22*x8142))+((x8133*x8139))+(((-1.0)*r21*sj5*x8141)));
evalcond[4]=((((-1.0)*r02*x8142))+(((-1.0)*cj0*sj1*x8136))+(((-1.0)*x8135*x8141))+((x8133*x8137))+(((-1.0)*cj0*x8140)));
evalcond[5]=((((-1.0)*r11*sj5*x8141))+(((-1.0)*x8138*x8140))+(((-1.0)*sj0*sj1*x8136))+(((-1.0)*r12*x8142))+((x8133*x8134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8144=((1.0)*cj5);
CheckValue<IkReal> x8145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8144))+(((-1.0)*r00*sj5)))),-1);
if(!x8145.valid){
continue;
}
CheckValue<IkReal> x8146 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8145.value)))+(x8146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8147=IKsin(j4);
IkReal x8148=IKcos(j4);
IkReal x8149=(cj5*r10);
IkReal x8150=(r01*sj5);
IkReal x8151=((1.0)*cj2);
IkReal x8152=(cj5*r00);
IkReal x8153=((1.0)*sj0);
IkReal x8154=(cj5*r20);
IkReal x8155=(cj1*sj2);
IkReal x8156=((1.0)*x8148);
IkReal x8157=((1.0)*x8147);
IkReal x8158=(sj5*x8147);
evalcond[0]=((((-1.0)*r22*x8156))+((r21*x8158))+(((-1.0)*x8154*x8157)));
evalcond[1]=(cj0+((r11*x8158))+(((-1.0)*r12*x8156))+(((-1.0)*x8149*x8157)));
evalcond[2]=((((-1.0)*x8153))+(((-1.0)*r02*x8156))+((x8147*x8150))+(((-1.0)*x8152*x8157)));
evalcond[3]=(((x8148*x8154))+((sj1*sj2))+(((-1.0)*cj1*x8151))+(((-1.0)*r21*sj5*x8156))+(((-1.0)*r22*x8157)));
evalcond[4]=(((x8148*x8152))+(((-1.0)*x8150*x8156))+(((-1.0)*r02*x8157))+(((-1.0)*cj0*x8155))+(((-1.0)*cj0*sj1*x8151)));
evalcond[5]=((((-1.0)*x8153*x8155))+(((-1.0)*sj0*sj1*x8151))+((x8148*x8149))+(((-1.0)*r11*sj5*x8156))+(((-1.0)*r12*x8157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8159=cj1*cj1;
IkReal x8160=cj2*cj2;
IkReal x8161=((170000000.0)*sj1);
IkReal x8162=(cj1*sj2);
IkReal x8163=((14850585.0)*sj5);
IkReal x8164=((4132419.0)*sj5);
IkReal x8165=((4132419.0)*cj5);
IkReal x8166=(cj2*sj1);
IkReal x8167=((14850585.0)*cj5);
IkReal x8168=((133365000.0)*cj2);
IkReal x8169=((16090500.0)*cj5*sj1);
IkReal x8170=((156900000.0)*x8166);
IkReal x8171=((16090500.0)*sj1*sj5);
CheckValue<IkReal> x8172=IKPowWithIntegerCheck(IKsign(((77015489.0)+(((123088050.0)*x8162*x8166))+(((-1.0)*x8159*x8168))+(((133365000.0)*sj1*x8162))+(((61544025.0)*x8160))+(((-10705975.0)*x8159))+x8168+(((-123088050.0)*x8159*x8160)))),-1);
if(!x8172.valid){
continue;
}
CheckValue<IkReal> x8173 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+((r11*x8169))+((r11*x8166*x8167))+(((156900000.0)*py*x8162))+((py*x8161))+(((-1.0)*r01*x8165))+(((-1.0)*r00*x8164))+((r10*x8163*x8166))+((r10*x8171))+((r10*x8162*x8163))+((py*x8170))+((r11*x8162*x8167)))),IkReal((((r11*x8165))+((r00*x8162*x8163))+((r01*x8169))+(((43660000.0)*py))+((r10*x8164))+((r00*x8163*x8166))+((r01*x8162*x8167))+(((156900000.0)*px*x8162))+((px*x8161))+((r01*x8166*x8167))+((r00*x8171))+((px*x8170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8173.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8172.value)))+(x8173.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8174=IKcos(j0);
IkReal x8175=IKsin(j0);
IkReal x8176=(cj2*sj1);
IkReal x8177=(cj1*sj2);
IkReal x8178=((0.09465)*cj5);
IkReal x8179=((0.425)*sj1);
IkReal x8180=((0.09465)*sj5);
IkReal x8181=((0.39225)*x8175);
IkReal x8182=((0.39225)*x8174);
evalcond[0]=((((-1.0)*r01*x8178))+((x8174*x8179))+(((-1.0)*r00*x8180))+((x8177*x8182))+(((-1.0)*px))+((x8176*x8182))+(((-0.10915)*x8175)));
evalcond[1]=((((-1.0)*r11*x8178))+((x8177*x8181))+(((-1.0)*r10*x8180))+(((-1.0)*py))+((x8176*x8181))+(((0.10915)*x8174))+((x8175*x8179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8183=((1.0)*cj5);
IkReal x8184=((((-1.0)*r01*x8183))+(((-1.0)*r00*sj5)));
j4eval[0]=x8184;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8183))))));
j4eval[2]=IKsign(x8184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8185=((1.0)*cj5);
IkReal x8186=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8185)));
j4eval[0]=x8186;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8185)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8186);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8187=((1.0)*sj0);
IkReal x8188=((1.0)*cj0);
IkReal x8189=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8189;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8188))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8187)))))+(IKabs(((((-1.0)*r02*x8188))+(((-1.0)*r12*x8187))))));
j4eval[2]=IKsign(x8189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8190=((-1.0)*r20);
IkReal x8192 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8192)==0){
continue;
}
IkReal x8191=pow(x8192,-0.5);
CheckValue<IkReal> x8193 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8190),IKFAST_ATAN2_MAGTHRESH);
if(!x8193.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8193.value));
IkReal gconst1=(r21*x8191);
IkReal gconst2=(x8190*x8191);
CheckValue<IkReal> x8194 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8194.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8194.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8195=((-1.0)*r20);
IkReal x8196=x8191;
CheckValue<IkReal> x8198 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8195),IKFAST_ATAN2_MAGTHRESH);
if(!x8198.valid){
continue;
}
IkReal x8197=((-1.0)*(x8198.value));
sj5=gconst1;
cj5=gconst2;
j5=x8197;
IkReal gconst0=x8197;
IkReal gconst1=(r21*x8196);
IkReal gconst2=(x8195*x8196);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8199=((-1.0)*r20);
IkReal x8200=x8191;
CheckValue<IkReal> x8202 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8199),IKFAST_ATAN2_MAGTHRESH);
if(!x8202.valid){
continue;
}
IkReal x8201=((-1.0)*(x8202.value));
sj5=gconst1;
cj5=gconst2;
j5=x8201;
IkReal gconst0=x8201;
IkReal gconst1=(r21*x8200);
IkReal gconst2=(x8199*x8200);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8203=((-1.0)*r20);
IkReal x8204=x8191;
CheckValue<IkReal> x8206 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8203),IKFAST_ATAN2_MAGTHRESH);
if(!x8206.valid){
continue;
}
IkReal x8205=((-1.0)*(x8206.value));
sj5=gconst1;
cj5=gconst2;
j5=x8205;
IkReal gconst0=x8205;
IkReal gconst1=(r21*x8204);
IkReal gconst2=(x8203*x8204);
IkReal x8207=r22*r22;
IkReal x8208=((1.0)*x8207);
CheckValue<IkReal> x8213=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8208))),-1);
if(!x8213.valid){
continue;
}
IkReal x8209=x8213.value;
IkReal x8210=(cj3*x8209);
IkReal x8211=((1.0)*x8210);
IkReal x8212=((((-1.0)*x8211*(r20*r20*r20*r20)))+(((-1.0)*x8211*(r21*r21*r21*r21)))+(((-1.0)*cj3*x8208))+(((-2.0)*x8210*(r20*r20)*(r21*r21))));
j4eval[0]=x8212;
j4eval[1]=IKsign(x8212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8214=((-1.0)*r20);
IkReal x8215=x8191;
CheckValue<IkReal> x8217 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8214),IKFAST_ATAN2_MAGTHRESH);
if(!x8217.valid){
continue;
}
IkReal x8216=((-1.0)*(x8217.value));
sj5=gconst1;
cj5=gconst2;
j5=x8216;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8216;
IkReal gconst1=(r21*x8215);
IkReal gconst2=(x8214*x8215);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8218=((-1.0)*r20);
IkReal x8219=x8191;
CheckValue<IkReal> x8221 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8218),IKFAST_ATAN2_MAGTHRESH);
if(!x8221.valid){
continue;
}
IkReal x8220=((-1.0)*(x8221.value));
sj5=gconst1;
cj5=gconst2;
j5=x8220;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8220;
IkReal gconst1=(r21*x8219);
IkReal gconst2=(x8218*x8219);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8222=((-1.0)*r20);
IkReal x8223=x8191;
CheckValue<IkReal> x8225 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8222),IKFAST_ATAN2_MAGTHRESH);
if(!x8225.valid){
continue;
}
IkReal x8224=((-1.0)*(x8225.value));
sj5=gconst1;
cj5=gconst2;
j5=x8224;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8224;
IkReal gconst1=(r21*x8223);
IkReal gconst2=(x8222*x8223);
IkReal x8226=((1.0)*(r22*r22));
CheckValue<IkReal> x8230=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8226))),-1);
if(!x8230.valid){
continue;
}
IkReal x8227=x8230.value;
IkReal x8228=((1.0)*x8227);
IkReal x8229=((((-1.0)*x8228*(r20*r20*r20*r20)))+(((-1.0)*x8228*(r21*r21*r21*r21)))+(((-1.0)*x8226))+(((-2.0)*x8227*(r20*r20)*(r21*r21))));
j4eval[0]=x8229;
j4eval[1]=IKsign(x8229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8231=((-1.0)*r20);
IkReal x8232=x8191;
CheckValue<IkReal> x8234 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8231),IKFAST_ATAN2_MAGTHRESH);
if(!x8234.valid){
continue;
}
IkReal x8233=((-1.0)*(x8234.value));
sj5=gconst1;
cj5=gconst2;
j5=x8233;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8233;
IkReal gconst1=(r21*x8232);
IkReal gconst2=(x8231*x8232);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8235=((-1.0)*r20);
IkReal x8236=x8191;
CheckValue<IkReal> x8238 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8235),IKFAST_ATAN2_MAGTHRESH);
if(!x8238.valid){
continue;
}
IkReal x8237=((-1.0)*(x8238.value));
sj5=gconst1;
cj5=gconst2;
j5=x8237;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8237;
IkReal gconst1=(r21*x8236);
IkReal gconst2=(x8235*x8236);
IkReal x8239=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8243=IKPowWithIntegerCheck(x8239,-1);
if(!x8243.valid){
continue;
}
IkReal x8240=x8243.value;
IkReal x8241=((1.0)*x8240);
IkReal x8242=((((-1.0)*x8241*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8241*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8240)));
j4eval[0]=x8242;
j4eval[1]=r12;
j4eval[2]=x8239;
j4eval[3]=IKsign(x8242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8244=((-1.0)*r20);
IkReal x8245=x8191;
CheckValue<IkReal> x8247 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8244),IKFAST_ATAN2_MAGTHRESH);
if(!x8247.valid){
continue;
}
IkReal x8246=((-1.0)*(x8247.value));
sj5=gconst1;
cj5=gconst2;
j5=x8246;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8246;
IkReal gconst1=(r21*x8245);
IkReal gconst2=(x8244*x8245);
IkReal x8248=r22*r22;
IkReal x8249=(cj1*cj2*r12);
IkReal x8250=(r12*sj1*sj2);
CheckValue<IkReal> x8254=IKPowWithIntegerCheck(((-1.0)+x8248),-1);
if(!x8254.valid){
continue;
}
IkReal x8251=x8254.value;
if((((1.0)+(((-1.0)*x8248)))) < -0.00001)
continue;
IkReal x8252=IKsqrt(((1.0)+(((-1.0)*x8248))));
IkReal x8253=(r22*x8251*x8252);
j4eval[0]=((IKabs(((((-1.0)*x8250))+x8249)))+(IKabs(((((-1.0)*x8249*x8253))+((x8250*x8253))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8255=(sj1*sj2);
IkReal x8256=(gconst1*r11);
IkReal x8257=(cj1*cj2);
IkReal x8258=(gconst2*r10);
CheckValue<IkReal> x8259=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8259.valid){
continue;
}
CheckValue<IkReal> x8260 = IKatan2WithCheck(IkReal((((x8255*x8256))+((x8257*x8258))+(((-1.0)*x8256*x8257))+(((-1.0)*x8255*x8258)))),IkReal((((r12*x8257))+(((-1.0)*r12*x8255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8259.value)))+(x8260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8261=IKcos(j4);
IkReal x8262=IKsin(j4);
IkReal x8263=((1.0)*cj2);
IkReal x8264=((1.0)*x8261);
IkReal x8265=(gconst1*x8261);
IkReal x8266=(gconst1*x8262);
IkReal x8267=((1.0)*gconst2*x8262);
evalcond[0]=((((-1.0)*gconst2*r10*x8264))+((r12*x8262))+((r11*x8265)));
evalcond[1]=((((-1.0)*r20*x8267))+((r21*x8266))+(((-1.0)*r22*x8264)));
evalcond[2]=((((-1.0)*r02*x8264))+((r01*x8266))+(((-1.0)*r00*x8267)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8264))+(((-1.0)*r10*x8267))+((r11*x8266)));
evalcond[4]=((((-1.0)*gconst2*r20*x8264))+((r21*x8265))+((sj1*sj2))+(((-1.0)*cj1*x8263))+((r22*x8262)));
evalcond[5]=((((-1.0)*gconst2*r00*x8264))+(((-1.0)*sj1*x8263))+((r02*x8262))+(((-1.0)*cj1*sj2))+((r01*x8265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8268=(gconst2*r10);
IkReal x8269=(gconst1*r11);
CheckValue<IkReal> x8270=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8269*x8269)))+(((-1.0)*(x8268*x8268)))+(((-1.0)*(r12*r12)))+(((2.0)*x8268*x8269)))),-1);
if(!x8270.valid){
continue;
}
CheckValue<IkReal> x8271 = IKatan2WithCheck(IkReal(((((-1.0)*x8268))+x8269)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8270.value)))+(x8271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8272=IKcos(j4);
IkReal x8273=IKsin(j4);
IkReal x8274=((1.0)*cj2);
IkReal x8275=((1.0)*x8272);
IkReal x8276=(gconst1*x8272);
IkReal x8277=(gconst1*x8273);
IkReal x8278=((1.0)*gconst2*x8273);
evalcond[0]=((((-1.0)*gconst2*r10*x8275))+((r11*x8276))+((r12*x8273)));
evalcond[1]=((((-1.0)*r20*x8278))+(((-1.0)*r22*x8275))+((r21*x8277)));
evalcond[2]=((((-1.0)*r02*x8275))+(((-1.0)*r00*x8278))+((r01*x8277)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8278))+((r11*x8277))+(((-1.0)*r12*x8275)));
evalcond[4]=((((-1.0)*gconst2*r20*x8275))+((sj1*sj2))+((r22*x8273))+((r21*x8276))+(((-1.0)*cj1*x8274)));
evalcond[5]=((((-1.0)*gconst2*r00*x8275))+(((-1.0)*sj1*x8274))+((r02*x8273))+(((-1.0)*cj1*sj2))+((r01*x8276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8279=((1.0)*gconst2);
CheckValue<IkReal> x8280 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8279))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8280.valid){
continue;
}
CheckValue<IkReal> x8281=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8279)))),-1);
if(!x8281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8280.value)+(((1.5707963267949)*(x8281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8282=IKcos(j4);
IkReal x8283=IKsin(j4);
IkReal x8284=((1.0)*cj2);
IkReal x8285=((1.0)*x8282);
IkReal x8286=(gconst1*x8282);
IkReal x8287=(gconst1*x8283);
IkReal x8288=((1.0)*gconst2*x8283);
evalcond[0]=((((-1.0)*gconst2*r10*x8285))+((r11*x8286))+((r12*x8283)));
evalcond[1]=((((-1.0)*r20*x8288))+((r21*x8287))+(((-1.0)*r22*x8285)));
evalcond[2]=((((-1.0)*r02*x8285))+((r01*x8287))+(((-1.0)*r00*x8288)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8285))+(((-1.0)*r10*x8288))+((r11*x8287)));
evalcond[4]=(((r21*x8286))+(((-1.0)*cj1*x8284))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8285))+((r22*x8283)));
evalcond[5]=((((-1.0)*sj1*x8284))+(((-1.0)*gconst2*r00*x8285))+((r01*x8286))+(((-1.0)*cj1*sj2))+((r02*x8283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8289=((-1.0)*r20);
IkReal x8290=x8191;
CheckValue<IkReal> x8292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8289),IKFAST_ATAN2_MAGTHRESH);
if(!x8292.valid){
continue;
}
IkReal x8291=((-1.0)*(x8292.value));
sj5=gconst1;
cj5=gconst2;
j5=x8291;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8291;
IkReal gconst1=(r21*x8290);
IkReal gconst2=(x8289*x8290);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8293=((-1.0)*r20);
IkReal x8294=x8191;
CheckValue<IkReal> x8296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8293),IKFAST_ATAN2_MAGTHRESH);
if(!x8296.valid){
continue;
}
IkReal x8295=((-1.0)*(x8296.value));
sj5=gconst1;
cj5=gconst2;
j5=x8295;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8295;
IkReal gconst1=(r21*x8294);
IkReal gconst2=(x8293*x8294);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8297=((-1.0)*r20);
IkReal x8298=x8191;
CheckValue<IkReal> x8300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8297),IKFAST_ATAN2_MAGTHRESH);
if(!x8300.valid){
continue;
}
IkReal x8299=((-1.0)*(x8300.value));
sj5=gconst1;
cj5=gconst2;
j5=x8299;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8299;
IkReal gconst1=(r21*x8298);
IkReal gconst2=(x8297*x8298);
IkReal x8301=r22*r22;
IkReal x8302=(cj1*cj2*r12);
IkReal x8303=(r12*sj1*sj2);
CheckValue<IkReal> x8307=IKPowWithIntegerCheck(((-1.0)+x8301),-1);
if(!x8307.valid){
continue;
}
IkReal x8304=x8307.value;
if((((1.0)+(((-1.0)*x8301)))) < -0.00001)
continue;
IkReal x8305=IKsqrt(((1.0)+(((-1.0)*x8301))));
IkReal x8306=(r22*x8304*x8305);
j4eval[0]=((IKabs(((((-1.0)*x8302*x8306))+((x8303*x8306)))))+(IKabs((x8302+(((-1.0)*x8303))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8308=(sj1*sj2);
IkReal x8309=(gconst1*r11);
IkReal x8310=(cj1*cj2);
IkReal x8311=(gconst2*r10);
CheckValue<IkReal> x8312=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8312.valid){
continue;
}
CheckValue<IkReal> x8313 = IKatan2WithCheck(IkReal((((x8308*x8309))+((x8310*x8311))+(((-1.0)*x8308*x8311))+(((-1.0)*x8309*x8310)))),IkReal(((((-1.0)*r12*x8308))+((r12*x8310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8312.value)))+(x8313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8314=IKcos(j4);
IkReal x8315=IKsin(j4);
IkReal x8316=((1.0)*x8314);
IkReal x8317=(gconst1*x8314);
IkReal x8318=(gconst1*x8315);
IkReal x8319=((1.0)*gconst2*x8315);
evalcond[0]=((((-1.0)*gconst2*r10*x8316))+((r11*x8317))+((r12*x8315)));
evalcond[1]=((((-1.0)*r20*x8319))+(((-1.0)*r22*x8316))+((r21*x8318)));
evalcond[2]=(((r01*x8318))+(((-1.0)*r02*x8316))+(((-1.0)*r00*x8319)));
evalcond[3]=((-1.0)+((r11*x8318))+(((-1.0)*r12*x8316))+(((-1.0)*r10*x8319)));
evalcond[4]=(((cj2*sj1))+((r01*x8317))+((cj1*sj2))+((r02*x8315))+(((-1.0)*gconst2*r00*x8316)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8317))+(((-1.0)*gconst2*r20*x8316))+((r22*x8315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8320=(gconst1*r11);
IkReal x8321=(gconst2*r10);
CheckValue<IkReal> x8322=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8320*x8320)+(x8321*x8321)+(((-2.0)*x8320*x8321)))),-1);
if(!x8322.valid){
continue;
}
CheckValue<IkReal> x8323 = IKatan2WithCheck(IkReal((x8320+(((-1.0)*x8321)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8322.value)))+(x8323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8324=IKcos(j4);
IkReal x8325=IKsin(j4);
IkReal x8326=((1.0)*x8324);
IkReal x8327=(gconst1*x8324);
IkReal x8328=(gconst1*x8325);
IkReal x8329=((1.0)*gconst2*x8325);
evalcond[0]=((((-1.0)*gconst2*r10*x8326))+((r12*x8325))+((r11*x8327)));
evalcond[1]=((((-1.0)*r22*x8326))+((r21*x8328))+(((-1.0)*r20*x8329)));
evalcond[2]=((((-1.0)*r00*x8329))+((r01*x8328))+(((-1.0)*r02*x8326)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8329))+((r11*x8328))+(((-1.0)*r12*x8326)));
evalcond[4]=(((cj2*sj1))+((r02*x8325))+((cj1*sj2))+((r01*x8327))+(((-1.0)*gconst2*r00*x8326)));
evalcond[5]=(((r22*x8325))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8327))+(((-1.0)*gconst2*r20*x8326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8330 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8330.valid){
continue;
}
CheckValue<IkReal> x8331=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8330.value)+(((1.5707963267949)*(x8331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8332=IKcos(j4);
IkReal x8333=IKsin(j4);
IkReal x8334=((1.0)*x8332);
IkReal x8335=(gconst1*x8332);
IkReal x8336=(gconst1*x8333);
IkReal x8337=((1.0)*gconst2*x8333);
evalcond[0]=(((r12*x8333))+((r11*x8335))+(((-1.0)*gconst2*r10*x8334)));
evalcond[1]=(((r21*x8336))+(((-1.0)*r22*x8334))+(((-1.0)*r20*x8337)));
evalcond[2]=(((r01*x8336))+(((-1.0)*r00*x8337))+(((-1.0)*r02*x8334)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8334))+(((-1.0)*r10*x8337))+((r11*x8336)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x8335))+(((-1.0)*gconst2*r00*x8334))+((r02*x8333)));
evalcond[5]=(((r21*x8335))+((r22*x8333))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8338=((-1.0)*r20);
IkReal x8339=x8191;
CheckValue<IkReal> x8341 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8338),IKFAST_ATAN2_MAGTHRESH);
if(!x8341.valid){
continue;
}
IkReal x8340=((-1.0)*(x8341.value));
sj5=gconst1;
cj5=gconst2;
j5=x8340;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8340;
IkReal gconst1=(r21*x8339);
IkReal gconst2=(x8338*x8339);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8342=((-1.0)*r20);
IkReal x8343=x8191;
CheckValue<IkReal> x8345 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8342),IKFAST_ATAN2_MAGTHRESH);
if(!x8345.valid){
continue;
}
IkReal x8344=((-1.0)*(x8345.value));
sj5=gconst1;
cj5=gconst2;
j5=x8344;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8344;
IkReal gconst1=(r21*x8343);
IkReal gconst2=(x8342*x8343);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8346=((-1.0)*r20);
IkReal x8347=x8191;
CheckValue<IkReal> x8349 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8346),IKFAST_ATAN2_MAGTHRESH);
if(!x8349.valid){
continue;
}
IkReal x8348=((-1.0)*(x8349.value));
sj5=gconst1;
cj5=gconst2;
j5=x8348;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8348;
IkReal gconst1=(r21*x8347);
IkReal gconst2=(x8346*x8347);
IkReal x8350=r22*r22;
IkReal x8351=(r02*sj1*sj2);
IkReal x8352=(cj1*cj2*r02);
CheckValue<IkReal> x8356=IKPowWithIntegerCheck(((-1.0)+x8350),-1);
if(!x8356.valid){
continue;
}
IkReal x8353=x8356.value;
if((((1.0)+(((-1.0)*x8350)))) < -0.00001)
continue;
IkReal x8354=IKsqrt(((1.0)+(((-1.0)*x8350))));
IkReal x8355=(r22*x8353*x8354);
j4eval[0]=((IKabs((((x8351*x8355))+(((-1.0)*x8352*x8355)))))+(IKabs((x8352+(((-1.0)*x8351))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8357=(gconst2*r00);
IkReal x8358=(gconst1*r01);
IkReal x8359=(cj1*cj2);
IkReal x8360=((1.0)*sj1*sj2);
CheckValue<IkReal> x8361 = IKatan2WithCheck(IkReal(((((-1.0)*x8357*x8360))+((sj1*sj2*x8358))+(((-1.0)*x8358*x8359))+((x8357*x8359)))),IkReal((((r02*x8359))+(((-1.0)*r02*x8360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8361.valid){
continue;
}
CheckValue<IkReal> x8362=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8361.value)+(((1.5707963267949)*(x8362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8363=IKcos(j4);
IkReal x8364=IKsin(j4);
IkReal x8365=((1.0)*cj2);
IkReal x8366=((1.0)*x8363);
IkReal x8367=(gconst1*x8363);
IkReal x8368=(gconst1*x8364);
IkReal x8369=((1.0)*gconst2*x8364);
evalcond[0]=(((r01*x8367))+((r02*x8364))+(((-1.0)*gconst2*r00*x8366)));
evalcond[1]=((((-1.0)*r20*x8369))+(((-1.0)*r22*x8366))+((r21*x8368)));
evalcond[2]=((((-1.0)*r12*x8366))+(((-1.0)*r10*x8369))+((r11*x8368)));
evalcond[3]=((-1.0)+((r01*x8368))+(((-1.0)*r00*x8369))+(((-1.0)*r02*x8366)));
evalcond[4]=((((-1.0)*cj1*x8365))+((r22*x8364))+((sj1*sj2))+((r21*x8367))+(((-1.0)*gconst2*r20*x8366)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r10*x8366))+(((-1.0)*sj1*x8365))+((r12*x8364))+((r11*x8367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8370=(gconst1*r01);
IkReal x8371=(gconst2*r00);
CheckValue<IkReal> x8372 = IKatan2WithCheck(IkReal((x8370+(((-1.0)*x8371)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8372.valid){
continue;
}
CheckValue<IkReal> x8373=IKPowWithIntegerCheck(IKsign(((x8370*x8370)+(((-2.0)*x8370*x8371))+(r02*r02)+(x8371*x8371))),-1);
if(!x8373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8372.value)+(((1.5707963267949)*(x8373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8374=IKcos(j4);
IkReal x8375=IKsin(j4);
IkReal x8376=((1.0)*cj2);
IkReal x8377=((1.0)*x8374);
IkReal x8378=(gconst1*x8374);
IkReal x8379=(gconst1*x8375);
IkReal x8380=((1.0)*gconst2*x8375);
evalcond[0]=(((r02*x8375))+(((-1.0)*gconst2*r00*x8377))+((r01*x8378)));
evalcond[1]=((((-1.0)*r22*x8377))+((r21*x8379))+(((-1.0)*r20*x8380)));
evalcond[2]=((((-1.0)*r12*x8377))+(((-1.0)*r10*x8380))+((r11*x8379)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8377))+(((-1.0)*r00*x8380))+((r01*x8379)));
evalcond[4]=((((-1.0)*cj1*x8376))+((sj1*sj2))+((r21*x8378))+(((-1.0)*gconst2*r20*x8377))+((r22*x8375)));
evalcond[5]=((((-1.0)*gconst2*r10*x8377))+(((-1.0)*cj1*sj2))+((r12*x8375))+(((-1.0)*sj1*x8376))+((r11*x8378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8381=((1.0)*gconst2);
CheckValue<IkReal> x8382=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8381)))),-1);
if(!x8382.valid){
continue;
}
CheckValue<IkReal> x8383 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8382.value)))+(x8383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8384=IKcos(j4);
IkReal x8385=IKsin(j4);
IkReal x8386=((1.0)*cj2);
IkReal x8387=((1.0)*x8384);
IkReal x8388=(gconst1*x8384);
IkReal x8389=(gconst1*x8385);
IkReal x8390=((1.0)*gconst2*x8385);
evalcond[0]=(((r02*x8385))+((r01*x8388))+(((-1.0)*gconst2*r00*x8387)));
evalcond[1]=(((r21*x8389))+(((-1.0)*r22*x8387))+(((-1.0)*r20*x8390)));
evalcond[2]=((((-1.0)*r10*x8390))+(((-1.0)*r12*x8387))+((r11*x8389)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8387))+((r01*x8389))+(((-1.0)*r00*x8390)));
evalcond[4]=(((sj1*sj2))+((r21*x8388))+((r22*x8385))+(((-1.0)*gconst2*r20*x8387))+(((-1.0)*cj1*x8386)));
evalcond[5]=((((-1.0)*gconst2*r10*x8387))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8386))+((r12*x8385))+((r11*x8388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8391=((-1.0)*r20);
IkReal x8392=x8191;
CheckValue<IkReal> x8394 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8391),IKFAST_ATAN2_MAGTHRESH);
if(!x8394.valid){
continue;
}
IkReal x8393=((-1.0)*(x8394.value));
sj5=gconst1;
cj5=gconst2;
j5=x8393;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8393;
IkReal gconst1=(r21*x8392);
IkReal gconst2=(x8391*x8392);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8395=((-1.0)*r20);
IkReal x8396=x8191;
CheckValue<IkReal> x8398 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8395),IKFAST_ATAN2_MAGTHRESH);
if(!x8398.valid){
continue;
}
IkReal x8397=((-1.0)*(x8398.value));
sj5=gconst1;
cj5=gconst2;
j5=x8397;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8397;
IkReal gconst1=(r21*x8396);
IkReal gconst2=(x8395*x8396);
IkReal x8399=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8403=IKPowWithIntegerCheck(x8399,-1);
if(!x8403.valid){
continue;
}
IkReal x8400=x8403.value;
IkReal x8401=((1.0)*x8400);
IkReal x8402=((((-2.0)*r00*r01*r20*r21*x8400))+(((-1.0)*(r02*r02)))+(((-1.0)*x8401*(r01*r01)*(r21*r21)))+(((-1.0)*x8401*(r00*r00)*(r20*r20))));
j4eval[0]=x8402;
j4eval[1]=IKsign(x8402);
j4eval[2]=r02;
j4eval[3]=x8399;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8404=((-1.0)*r20);
IkReal x8405=x8191;
CheckValue<IkReal> x8407 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8404),IKFAST_ATAN2_MAGTHRESH);
if(!x8407.valid){
continue;
}
IkReal x8406=((-1.0)*(x8407.value));
sj5=gconst1;
cj5=gconst2;
j5=x8406;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8406;
IkReal gconst1=(r21*x8405);
IkReal gconst2=(x8404*x8405);
IkReal x8408=r22*r22;
IkReal x8409=(r02*sj1*sj2);
IkReal x8410=(cj1*cj2*r02);
CheckValue<IkReal> x8414=IKPowWithIntegerCheck(((-1.0)+x8408),-1);
if(!x8414.valid){
continue;
}
IkReal x8411=x8414.value;
if((((1.0)+(((-1.0)*x8408)))) < -0.00001)
continue;
IkReal x8412=IKsqrt(((1.0)+(((-1.0)*x8408))));
IkReal x8413=(r22*x8411*x8412);
j4eval[0]=((IKabs(((((-1.0)*x8410*x8413))+((x8409*x8413)))))+(IKabs((x8410+(((-1.0)*x8409))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8415=(gconst2*r00);
IkReal x8416=(gconst1*r01);
IkReal x8417=(cj1*cj2);
IkReal x8418=((1.0)*sj1*sj2);
CheckValue<IkReal> x8419 = IKatan2WithCheck(IkReal(((((-1.0)*x8416*x8417))+(((-1.0)*x8415*x8418))+((x8415*x8417))+((sj1*sj2*x8416)))),IkReal((((r02*x8417))+(((-1.0)*r02*x8418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8419.valid){
continue;
}
CheckValue<IkReal> x8420=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8419.value)+(((1.5707963267949)*(x8420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8421=IKcos(j4);
IkReal x8422=IKsin(j4);
IkReal x8423=((1.0)*x8421);
IkReal x8424=(gconst1*x8421);
IkReal x8425=(gconst1*x8422);
IkReal x8426=((1.0)*gconst2*x8422);
evalcond[0]=(((r02*x8422))+(((-1.0)*gconst2*r00*x8423))+((r01*x8424)));
evalcond[1]=(((r21*x8425))+(((-1.0)*r22*x8423))+(((-1.0)*r20*x8426)));
evalcond[2]=((((-1.0)*r10*x8426))+((r11*x8425))+(((-1.0)*r12*x8423)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8423))+((r01*x8425))+(((-1.0)*r00*x8426)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x8424))+((r12*x8422))+(((-1.0)*gconst2*r10*x8423)));
evalcond[5]=(((r21*x8424))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8423))+((r22*x8422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8427=(gconst1*r01);
IkReal x8428=(gconst2*r00);
CheckValue<IkReal> x8429=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8427*x8427)))+(((-1.0)*(r02*r02)))+(((2.0)*x8427*x8428))+(((-1.0)*(x8428*x8428))))),-1);
if(!x8429.valid){
continue;
}
CheckValue<IkReal> x8430 = IKatan2WithCheck(IkReal((x8427+(((-1.0)*x8428)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8429.value)))+(x8430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8431=IKcos(j4);
IkReal x8432=IKsin(j4);
IkReal x8433=((1.0)*x8431);
IkReal x8434=(gconst1*x8431);
IkReal x8435=(gconst1*x8432);
IkReal x8436=((1.0)*gconst2*x8432);
evalcond[0]=(((r01*x8434))+((r02*x8432))+(((-1.0)*gconst2*r00*x8433)));
evalcond[1]=(((r21*x8435))+(((-1.0)*r20*x8436))+(((-1.0)*r22*x8433)));
evalcond[2]=((((-1.0)*r10*x8436))+(((-1.0)*r12*x8433))+((r11*x8435)));
evalcond[3]=((1.0)+((r01*x8435))+(((-1.0)*r00*x8436))+(((-1.0)*r02*x8433)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x8432))+(((-1.0)*gconst2*r10*x8433))+((r11*x8434)));
evalcond[5]=(((r21*x8434))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8432))+(((-1.0)*gconst2*r20*x8433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8437 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8437.valid){
continue;
}
CheckValue<IkReal> x8438=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8437.value)+(((1.5707963267949)*(x8438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8439=IKcos(j4);
IkReal x8440=IKsin(j4);
IkReal x8441=((1.0)*x8439);
IkReal x8442=(gconst1*x8439);
IkReal x8443=(gconst1*x8440);
IkReal x8444=((1.0)*gconst2*x8440);
evalcond[0]=((((-1.0)*gconst2*r00*x8441))+((r02*x8440))+((r01*x8442)));
evalcond[1]=(((r21*x8443))+(((-1.0)*r22*x8441))+(((-1.0)*r20*x8444)));
evalcond[2]=(((r11*x8443))+(((-1.0)*r12*x8441))+(((-1.0)*r10*x8444)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8444))+(((-1.0)*r02*x8441))+((r01*x8443)));
evalcond[4]=(((r12*x8440))+((cj2*sj1))+((r11*x8442))+((cj1*sj2))+(((-1.0)*gconst2*r10*x8441)));
evalcond[5]=(((r22*x8440))+((r21*x8442))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8445=((-1.0)*r20);
IkReal x8446=((-1.0)*px);
CheckValue<IkReal> x8448 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8445),IKFAST_ATAN2_MAGTHRESH);
if(!x8448.valid){
continue;
}
IkReal x8447=((-1.0)*(x8448.value));
sj5=gconst1;
cj5=gconst2;
j5=x8447;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8446);
rxp1_1=(px*r21);
rxp1_2=(r11*x8446);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8447;
IkReal gconst1=r21;
IkReal gconst2=x8445;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8449=((-1.0)*r20);
IkReal x8450=((-1.0)*px);
CheckValue<IkReal> x8452 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8449),IKFAST_ATAN2_MAGTHRESH);
if(!x8452.valid){
continue;
}
IkReal x8451=((-1.0)*(x8452.value));
sj5=gconst1;
cj5=gconst2;
j5=x8451;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8450);
rxp1_1=(px*r21);
rxp1_2=(r11*x8450);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8451;
IkReal gconst1=r21;
IkReal gconst2=x8449;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8453=((-1.0)*r20);
IkReal x8454=((-1.0)*px);
CheckValue<IkReal> x8456 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8453),IKFAST_ATAN2_MAGTHRESH);
if(!x8456.valid){
continue;
}
IkReal x8455=((-1.0)*(x8456.value));
sj5=gconst1;
cj5=gconst2;
j5=x8455;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8454);
rxp1_1=(px*r21);
rxp1_2=(r11*x8454);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8455;
IkReal gconst1=r21;
IkReal gconst2=x8453;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8459=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8459.valid){
continue;
}
IkReal x8457=x8459.value;
IkReal x8458=(sj0*x8457);
cj4array[0]=(((cj1*sj2*x8458))+((cj2*sj1*x8458)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8460=IKsin(j4);
IkReal x8461=IKcos(j4);
IkReal x8462=((1.0)*gconst2);
IkReal x8463=(gconst1*r21);
evalcond[0]=(r02*x8460);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8461)));
evalcond[2]=((((-1.0)*r20*x8460*x8462))+((x8460*x8463)));
evalcond[3]=(((gconst1*r11*x8460))+(((-1.0)*r10*x8460*x8462)));
evalcond[4]=((((-1.0)*r20*x8461*x8462))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8461*x8463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8465=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8465.valid){
continue;
}
IkReal x8464=x8465.value;
cj4array[0]=(((cj1*cj2*x8464))+(((-1.0)*sj1*sj2*x8464)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8466=IKsin(j4);
IkReal x8467=IKcos(j4);
IkReal x8468=((1.0)*sj0);
IkReal x8469=(gconst1*x8466);
IkReal x8470=((1.0)*x8467);
IkReal x8471=((1.0)*gconst2*x8466);
evalcond[0]=(r02*x8466);
evalcond[1]=((((-1.0)*x8468))+(((-1.0)*r02*x8470)));
evalcond[2]=(((r21*x8469))+(((-1.0)*r20*x8471)));
evalcond[3]=(((r11*x8469))+(((-1.0)*r10*x8471)));
evalcond[4]=(((gconst1*r11*x8467))+(((-1.0)*cj1*sj2*x8468))+(((-1.0)*gconst2*r10*x8470))+(((-1.0)*cj2*sj1*x8468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8472=IKPowWithIntegerCheck(r02,-1);
if(!x8472.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8472.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8473=IKsin(j4);
IkReal x8474=IKcos(j4);
IkReal x8475=(gconst1*r21);
IkReal x8476=((1.0)*sj0);
IkReal x8477=(gconst1*r11);
IkReal x8478=((1.0)*gconst2*r10);
IkReal x8479=((1.0)*gconst2*r20);
evalcond[0]=(r02*x8473);
evalcond[1]=((((-1.0)*x8473*x8479))+((x8473*x8475)));
evalcond[2]=((((-1.0)*x8473*x8478))+((x8473*x8477)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8474*x8479))+((x8474*x8475)));
evalcond[4]=((((-1.0)*cj1*sj2*x8476))+(((-1.0)*cj2*sj1*x8476))+(((-1.0)*x8474*x8478))+((x8474*x8477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8480=(gconst2*r20);
IkReal x8481=(cj1*cj2);
IkReal x8482=(sj1*sj2);
IkReal x8483=(gconst1*r21);
CheckValue<IkReal> x8484=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8480*x8480)))+(((-1.0)*(x8483*x8483)))+(((2.0)*x8480*x8483))+(((-1.0)*(r22*r22))))),-1);
if(!x8484.valid){
continue;
}
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal((((r22*x8482))+(((-1.0)*r22*x8481)))),IkReal(((((-1.0)*x8480*x8482))+((x8480*x8481))+((x8482*x8483))+(((-1.0)*x8481*x8483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8484.value)))+(x8485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8486=IKsin(j4);
IkReal x8487=IKcos(j4);
IkReal x8488=(gconst2*r10);
IkReal x8489=((1.0)*cj2);
IkReal x8490=(gconst2*r00);
IkReal x8491=((1.0)*sj0);
IkReal x8492=(gconst2*r20);
IkReal x8493=(cj1*sj2);
IkReal x8494=((1.0)*x8487);
IkReal x8495=(gconst1*x8487);
IkReal x8496=(gconst1*x8486);
IkReal x8497=((1.0)*x8486);
evalcond[0]=((((-1.0)*r22*x8494))+(((-1.0)*x8492*x8497))+((r21*x8496)));
evalcond[1]=(cj0+(((-1.0)*x8488*x8497))+(((-1.0)*r12*x8494))+((r11*x8496)));
evalcond[2]=((((-1.0)*r02*x8494))+(((-1.0)*x8490*x8497))+((r01*x8496))+(((-1.0)*x8491)));
evalcond[3]=(((sj1*sj2))+((r22*x8486))+(((-1.0)*cj1*x8489))+(((-1.0)*x8492*x8494))+((r21*x8495)));
evalcond[4]=((((-1.0)*cj0*x8493))+(((-1.0)*cj0*sj1*x8489))+(((-1.0)*x8490*x8494))+((r02*x8486))+((r01*x8495)));
evalcond[5]=((((-1.0)*sj0*sj1*x8489))+(((-1.0)*x8491*x8493))+(((-1.0)*x8488*x8494))+((r12*x8486))+((r11*x8495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8498=((1.0)*gconst2);
CheckValue<IkReal> x8499 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8498))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8499.valid){
continue;
}
CheckValue<IkReal> x8500=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8498)))),-1);
if(!x8500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8499.value)+(((1.5707963267949)*(x8500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8501=IKsin(j4);
IkReal x8502=IKcos(j4);
IkReal x8503=(gconst2*r10);
IkReal x8504=((1.0)*cj2);
IkReal x8505=(gconst2*r00);
IkReal x8506=((1.0)*sj0);
IkReal x8507=(gconst2*r20);
IkReal x8508=(cj1*sj2);
IkReal x8509=((1.0)*x8502);
IkReal x8510=(gconst1*x8502);
IkReal x8511=(gconst1*x8501);
IkReal x8512=((1.0)*x8501);
evalcond[0]=(((r21*x8511))+(((-1.0)*r22*x8509))+(((-1.0)*x8507*x8512)));
evalcond[1]=((((-1.0)*x8503*x8512))+cj0+((r11*x8511))+(((-1.0)*r12*x8509)));
evalcond[2]=((((-1.0)*x8506))+(((-1.0)*r02*x8509))+((r01*x8511))+(((-1.0)*x8505*x8512)));
evalcond[3]=(((r22*x8501))+(((-1.0)*cj1*x8504))+((r21*x8510))+((sj1*sj2))+(((-1.0)*x8507*x8509)));
evalcond[4]=((((-1.0)*x8505*x8509))+((r02*x8501))+(((-1.0)*cj0*sj1*x8504))+(((-1.0)*cj0*x8508))+((r01*x8510)));
evalcond[5]=((((-1.0)*x8503*x8509))+(((-1.0)*sj0*sj1*x8504))+((r11*x8510))+((r12*x8501))+(((-1.0)*x8506*x8508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8513=((1.0)*gconst2);
CheckValue<IkReal> x8514 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x8513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8514.valid){
continue;
}
CheckValue<IkReal> x8515=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8513)))),-1);
if(!x8515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8514.value)+(((1.5707963267949)*(x8515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8516=IKsin(j4);
IkReal x8517=IKcos(j4);
IkReal x8518=(gconst2*r10);
IkReal x8519=((1.0)*cj2);
IkReal x8520=(gconst2*r00);
IkReal x8521=((1.0)*sj0);
IkReal x8522=(gconst2*r20);
IkReal x8523=(cj1*sj2);
IkReal x8524=((1.0)*x8517);
IkReal x8525=(gconst1*x8517);
IkReal x8526=(gconst1*x8516);
IkReal x8527=((1.0)*x8516);
evalcond[0]=(((r21*x8526))+(((-1.0)*r22*x8524))+(((-1.0)*x8522*x8527)));
evalcond[1]=(cj0+((r11*x8526))+(((-1.0)*x8518*x8527))+(((-1.0)*r12*x8524)));
evalcond[2]=((((-1.0)*r02*x8524))+(((-1.0)*x8521))+((r01*x8526))+(((-1.0)*x8520*x8527)));
evalcond[3]=(((r21*x8525))+((r22*x8516))+(((-1.0)*cj1*x8519))+((sj1*sj2))+(((-1.0)*x8522*x8524)));
evalcond[4]=(((r02*x8516))+(((-1.0)*cj0*sj1*x8519))+(((-1.0)*cj0*x8523))+((r01*x8525))+(((-1.0)*x8520*x8524)));
evalcond[5]=((((-1.0)*sj0*sj1*x8519))+((r11*x8525))+((r12*x8516))+(((-1.0)*x8518*x8524))+(((-1.0)*x8521*x8523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8528=((-1.0)*r20);
IkReal x8529=x8191;
CheckValue<IkReal> x8531 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8528),IKFAST_ATAN2_MAGTHRESH);
if(!x8531.valid){
continue;
}
IkReal x8530=((-1.0)*(x8531.value));
sj5=gconst1;
cj5=gconst2;
j5=x8530;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8530;
IkReal gconst1=(r21*x8529);
IkReal gconst2=(x8528*x8529);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8532=((-1.0)*r20);
IkReal x8533=x8191;
CheckValue<IkReal> x8535 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8532),IKFAST_ATAN2_MAGTHRESH);
if(!x8535.valid){
continue;
}
IkReal x8534=((-1.0)*(x8535.value));
sj5=gconst1;
cj5=gconst2;
j5=x8534;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8534;
IkReal gconst1=(r21*x8533);
IkReal gconst2=(x8532*x8533);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8536=((-1.0)*r20);
IkReal x8537=x8191;
CheckValue<IkReal> x8539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8536),IKFAST_ATAN2_MAGTHRESH);
if(!x8539.valid){
continue;
}
IkReal x8538=((-1.0)*(x8539.value));
sj5=gconst1;
cj5=gconst2;
j5=x8538;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8538;
IkReal gconst1=(r21*x8537);
IkReal gconst2=(x8536*x8537);
IkReal x8540=r22*r22;
CheckValue<IkReal> x8543=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8540))),-1);
if(!x8543.valid){
continue;
}
IkReal x8541=x8543.value;
IkReal x8542=(x8540+((x8541*(r20*r20*r20*r20)))+(((2.0)*x8541*(r20*r20)*(r21*r21)))+((x8541*(r21*r21*r21*r21))));
j4eval[0]=x8542;
j4eval[1]=IKsign(x8542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8544=((-1.0)*r20);
IkReal x8545=x8191;
CheckValue<IkReal> x8547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8544),IKFAST_ATAN2_MAGTHRESH);
if(!x8547.valid){
continue;
}
IkReal x8546=((-1.0)*(x8547.value));
sj5=gconst1;
cj5=gconst2;
j5=x8546;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8546;
IkReal gconst1=(r21*x8545);
IkReal gconst2=(x8544*x8545);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8548=((-1.0)*r20);
IkReal x8549=x8191;
CheckValue<IkReal> x8551 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8548),IKFAST_ATAN2_MAGTHRESH);
if(!x8551.valid){
continue;
}
IkReal x8550=((-1.0)*(x8551.value));
sj5=gconst1;
cj5=gconst2;
j5=x8550;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8550;
IkReal gconst1=(r21*x8549);
IkReal gconst2=(x8548*x8549);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8552=((-1.0)*r20);
IkReal x8553=x8191;
CheckValue<IkReal> x8555 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8552),IKFAST_ATAN2_MAGTHRESH);
if(!x8555.valid){
continue;
}
IkReal x8554=((-1.0)*(x8555.value));
sj5=gconst1;
cj5=gconst2;
j5=x8554;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8554;
IkReal gconst1=(r21*x8553);
IkReal gconst2=(x8552*x8553);
IkReal x8556=r22*r22;
IkReal x8557=(r12*sj1*sj2);
IkReal x8558=(cj1*cj2*r12);
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(((-1.0)+x8556),-1);
if(!x8562.valid){
continue;
}
IkReal x8559=x8562.value;
if((((1.0)+(((-1.0)*x8556)))) < -0.00001)
continue;
IkReal x8560=IKsqrt(((1.0)+(((-1.0)*x8556))));
IkReal x8561=(r22*x8559*x8560);
j4eval[0]=((IKabs(((((-1.0)*x8557*x8561))+((x8558*x8561)))))+(IKabs((x8557+(((-1.0)*x8558))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8563=((1.0)*gconst1);
IkReal x8564=(gconst2*r10);
IkReal x8565=(sj1*sj2);
IkReal x8566=((1.0)*cj1*cj2);
CheckValue<IkReal> x8567=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8563))+(((-1.0)*gconst2*r01)))),-1);
if(!x8567.valid){
continue;
}
CheckValue<IkReal> x8568 = IKatan2WithCheck(IkReal((((cj1*cj2*gconst1*r11))+(((-1.0)*x8564*x8566))+(((-1.0)*r11*x8563*x8565))+((x8564*x8565)))),IkReal(((((-1.0)*r12*x8566))+((r12*x8565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8567.value)))+(x8568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8569=IKsin(j4);
IkReal x8570=IKcos(j4);
IkReal x8571=((1.0)*cj2);
IkReal x8572=((1.0)*x8570);
IkReal x8573=(gconst2*x8570);
IkReal x8574=(gconst1*x8569);
IkReal x8575=((1.0)*x8569);
evalcond[0]=(((r21*x8574))+(((-1.0)*gconst2*r20*x8575))+(((-1.0)*r22*x8572)));
evalcond[1]=((((-1.0)*gconst2*r00*x8575))+(((-1.0)*r02*x8572))+((r01*x8574)));
evalcond[2]=((((-1.0)*gconst1*r11*x8572))+((r10*x8573))+(((-1.0)*r12*x8575)));
evalcond[3]=((1.0)+((r11*x8574))+(((-1.0)*r12*x8572))+(((-1.0)*gconst2*r10*x8575)));
evalcond[4]=(((sj1*sj2))+((r20*x8573))+(((-1.0)*gconst1*r21*x8572))+(((-1.0)*cj1*x8571))+(((-1.0)*r22*x8575)));
evalcond[5]=((((-1.0)*sj1*x8571))+(((-1.0)*r02*x8575))+(((-1.0)*cj1*sj2))+((r00*x8573))+(((-1.0)*gconst1*r01*x8572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8576=(gconst1*r11);
IkReal x8577=(gconst2*r10);
CheckValue<IkReal> x8578=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8576*x8576)+(x8577*x8577)+(((-2.0)*x8576*x8577)))),-1);
if(!x8578.valid){
continue;
}
CheckValue<IkReal> x8579 = IKatan2WithCheck(IkReal((x8577+(((-1.0)*x8576)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8578.value)))+(x8579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8580=IKsin(j4);
IkReal x8581=IKcos(j4);
IkReal x8582=((1.0)*cj2);
IkReal x8583=((1.0)*x8581);
IkReal x8584=(gconst2*x8581);
IkReal x8585=(gconst1*x8580);
IkReal x8586=((1.0)*x8580);
evalcond[0]=((((-1.0)*r22*x8583))+((r21*x8585))+(((-1.0)*gconst2*r20*x8586)));
evalcond[1]=((((-1.0)*gconst2*r00*x8586))+(((-1.0)*r02*x8583))+((r01*x8585)));
evalcond[2]=((((-1.0)*gconst1*r11*x8583))+((r10*x8584))+(((-1.0)*r12*x8586)));
evalcond[3]=((1.0)+((r11*x8585))+(((-1.0)*r12*x8583))+(((-1.0)*gconst2*r10*x8586)));
evalcond[4]=((((-1.0)*gconst1*r21*x8583))+(((-1.0)*r22*x8586))+((sj1*sj2))+((r20*x8584))+(((-1.0)*cj1*x8582)));
evalcond[5]=((((-1.0)*sj1*x8582))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x8586))+((r00*x8584))+(((-1.0)*gconst1*r01*x8583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8587=((1.0)*gconst2);
CheckValue<IkReal> x8588=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8587)))),-1);
if(!x8588.valid){
continue;
}
CheckValue<IkReal> x8589 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8587))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8588.value)))+(x8589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8590=IKsin(j4);
IkReal x8591=IKcos(j4);
IkReal x8592=((1.0)*cj2);
IkReal x8593=((1.0)*x8591);
IkReal x8594=(gconst2*x8591);
IkReal x8595=(gconst1*x8590);
IkReal x8596=((1.0)*x8590);
evalcond[0]=((((-1.0)*r22*x8593))+((r21*x8595))+(((-1.0)*gconst2*r20*x8596)));
evalcond[1]=((((-1.0)*r02*x8593))+((r01*x8595))+(((-1.0)*gconst2*r00*x8596)));
evalcond[2]=((((-1.0)*r12*x8596))+((r10*x8594))+(((-1.0)*gconst1*r11*x8593)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x8596))+(((-1.0)*r12*x8593))+((r11*x8595)));
evalcond[4]=((((-1.0)*r22*x8596))+((r20*x8594))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8593))+(((-1.0)*cj1*x8592)));
evalcond[5]=((((-1.0)*r02*x8596))+((r00*x8594))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r01*x8593))+(((-1.0)*sj1*x8592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8597=((-1.0)*r20);
IkReal x8598=x8191;
CheckValue<IkReal> x8600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8597),IKFAST_ATAN2_MAGTHRESH);
if(!x8600.valid){
continue;
}
IkReal x8599=((-1.0)*(x8600.value));
sj5=gconst1;
cj5=gconst2;
j5=x8599;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8599;
IkReal gconst1=(r21*x8598);
IkReal gconst2=(x8597*x8598);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8601=((-1.0)*r20);
IkReal x8602=x8191;
CheckValue<IkReal> x8604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8601),IKFAST_ATAN2_MAGTHRESH);
if(!x8604.valid){
continue;
}
IkReal x8603=((-1.0)*(x8604.value));
sj5=gconst1;
cj5=gconst2;
j5=x8603;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8603;
IkReal gconst1=(r21*x8602);
IkReal gconst2=(x8601*x8602);
IkReal x8605=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8609=IKPowWithIntegerCheck(x8605,-1);
if(!x8609.valid){
continue;
}
IkReal x8606=x8609.value;
IkReal x8607=((1.0)*x8606);
IkReal x8608=((((-2.0)*r10*r11*r20*r21*x8606))+(((-1.0)*x8607*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8607*(r10*r10)*(r20*r20))));
j4eval[0]=x8608;
j4eval[1]=r12;
j4eval[2]=x8605;
j4eval[3]=IKsign(x8608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8610=((-1.0)*r20);
IkReal x8611=x8191;
CheckValue<IkReal> x8613 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8610),IKFAST_ATAN2_MAGTHRESH);
if(!x8613.valid){
continue;
}
IkReal x8612=((-1.0)*(x8613.value));
sj5=gconst1;
cj5=gconst2;
j5=x8612;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8612;
IkReal gconst1=(r21*x8611);
IkReal gconst2=(x8610*x8611);
IkReal x8614=r22*r22;
IkReal x8615=(cj1*r02*sj2);
IkReal x8616=(cj2*r02*sj1);
CheckValue<IkReal> x8620=IKPowWithIntegerCheck(((-1.0)+x8614),-1);
if(!x8620.valid){
continue;
}
IkReal x8617=x8620.value;
if((((1.0)+(((-1.0)*x8614)))) < -0.00001)
continue;
IkReal x8618=IKsqrt(((1.0)+(((-1.0)*x8614))));
IkReal x8619=(r22*x8617*x8618);
j4eval[0]=((IKabs((((x8616*x8619))+((x8615*x8619)))))+(IKabs((x8615+x8616))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8621=(cj1*sj2);
IkReal x8622=(gconst2*r00);
IkReal x8623=(gconst1*r01);
IkReal x8624=(cj2*sj1);
CheckValue<IkReal> x8625 = IKatan2WithCheck(IkReal((((r02*x8621))+((r02*x8624)))),IkReal(((((-1.0)*x8621*x8622))+((x8623*x8624))+(((-1.0)*x8622*x8624))+((x8621*x8623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8625.valid){
continue;
}
CheckValue<IkReal> x8626=IKPowWithIntegerCheck(IKsign(((x8623*x8623)+(x8622*x8622)+(r02*r02)+(((-2.0)*x8622*x8623)))),-1);
if(!x8626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8625.value)+(((1.5707963267949)*(x8626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8627=IKsin(j4);
IkReal x8628=IKcos(j4);
IkReal x8629=((1.0)*x8628);
IkReal x8630=(gconst2*x8628);
IkReal x8631=(gconst1*x8627);
IkReal x8632=((1.0)*x8627);
evalcond[0]=(((r21*x8631))+(((-1.0)*r22*x8629))+(((-1.0)*gconst2*r20*x8632)));
evalcond[1]=((((-1.0)*gconst2*r00*x8632))+((r01*x8631))+(((-1.0)*r02*x8629)));
evalcond[2]=((((-1.0)*r12*x8632))+(((-1.0)*gconst1*r11*x8629))+((r10*x8630)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8629))+(((-1.0)*gconst2*r10*x8632))+((r11*x8631)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x8630))+(((-1.0)*r02*x8632))+(((-1.0)*gconst1*r01*x8629)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8632))+((r20*x8630))+(((-1.0)*gconst1*r21*x8629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8633=(gconst1*r11);
IkReal x8634=(gconst2*r10);
CheckValue<IkReal> x8635=IKPowWithIntegerCheck(IKsign(((((2.0)*x8633*x8634))+(((-1.0)*(x8634*x8634)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8633*x8633))))),-1);
if(!x8635.valid){
continue;
}
CheckValue<IkReal> x8636 = IKatan2WithCheck(IkReal((x8634+(((-1.0)*x8633)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8635.value)))+(x8636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8637=IKsin(j4);
IkReal x8638=IKcos(j4);
IkReal x8639=((1.0)*x8638);
IkReal x8640=(gconst2*x8638);
IkReal x8641=(gconst1*x8637);
IkReal x8642=((1.0)*x8637);
evalcond[0]=(((r21*x8641))+(((-1.0)*r22*x8639))+(((-1.0)*gconst2*r20*x8642)));
evalcond[1]=((((-1.0)*gconst2*r00*x8642))+((r01*x8641))+(((-1.0)*r02*x8639)));
evalcond[2]=((((-1.0)*gconst1*r11*x8639))+((r10*x8640))+(((-1.0)*r12*x8642)));
evalcond[3]=((-1.0)+((r11*x8641))+(((-1.0)*r12*x8639))+(((-1.0)*gconst2*r10*x8642)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x8640))+(((-1.0)*r02*x8642))+(((-1.0)*gconst1*r01*x8639)));
evalcond[5]=((((-1.0)*r22*x8642))+((r20*x8640))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
CheckValue<IkReal> x8644=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8643.value)+(((1.5707963267949)*(x8644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8645=IKsin(j4);
IkReal x8646=IKcos(j4);
IkReal x8647=((1.0)*x8646);
IkReal x8648=(gconst2*x8646);
IkReal x8649=(gconst1*x8645);
IkReal x8650=((1.0)*x8645);
evalcond[0]=((((-1.0)*gconst2*r20*x8650))+(((-1.0)*r22*x8647))+((r21*x8649)));
evalcond[1]=((((-1.0)*r02*x8647))+((r01*x8649))+(((-1.0)*gconst2*r00*x8650)));
evalcond[2]=((((-1.0)*r12*x8650))+((r10*x8648))+(((-1.0)*gconst1*r11*x8647)));
evalcond[3]=((-1.0)+((r11*x8649))+(((-1.0)*r12*x8647))+(((-1.0)*gconst2*r10*x8650)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r01*x8647))+((cj1*sj2))+((r00*x8648))+(((-1.0)*r02*x8650)));
evalcond[5]=((((-1.0)*gconst1*r21*x8647))+((r20*x8648))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8651=((-1.0)*r20);
IkReal x8652=x8191;
CheckValue<IkReal> x8654 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8651),IKFAST_ATAN2_MAGTHRESH);
if(!x8654.valid){
continue;
}
IkReal x8653=((-1.0)*(x8654.value));
sj5=gconst1;
cj5=gconst2;
j5=x8653;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8653;
IkReal gconst1=(r21*x8652);
IkReal gconst2=(x8651*x8652);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8655=((-1.0)*r20);
IkReal x8656=x8191;
CheckValue<IkReal> x8658 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8655),IKFAST_ATAN2_MAGTHRESH);
if(!x8658.valid){
continue;
}
IkReal x8657=((-1.0)*(x8658.value));
sj5=gconst1;
cj5=gconst2;
j5=x8657;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8657;
IkReal gconst1=(r21*x8656);
IkReal gconst2=(x8655*x8656);
IkReal x8659=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8663=IKPowWithIntegerCheck(x8659,-1);
if(!x8663.valid){
continue;
}
IkReal x8660=x8663.value;
IkReal x8661=((1.0)*x8660);
IkReal x8662=((((-1.0)*x8661*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8660))+(((-1.0)*(r02*r02)))+(((-1.0)*x8661*(r01*r01)*(r21*r21))));
j4eval[0]=x8662;
j4eval[1]=IKsign(x8662);
j4eval[2]=r02;
j4eval[3]=x8659;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8664=((-1.0)*r20);
IkReal x8665=x8191;
CheckValue<IkReal> x8667 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8664),IKFAST_ATAN2_MAGTHRESH);
if(!x8667.valid){
continue;
}
IkReal x8666=((-1.0)*(x8667.value));
sj5=gconst1;
cj5=gconst2;
j5=x8666;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8666;
IkReal gconst1=(r21*x8665);
IkReal gconst2=(x8664*x8665);
IkReal x8668=r22*r22;
IkReal x8669=(r02*sj1*sj2);
IkReal x8670=(cj1*cj2*r02);
CheckValue<IkReal> x8674=IKPowWithIntegerCheck(((-1.0)+x8668),-1);
if(!x8674.valid){
continue;
}
IkReal x8671=x8674.value;
if((((1.0)+(((-1.0)*x8668)))) < -0.00001)
continue;
IkReal x8672=IKsqrt(((1.0)+(((-1.0)*x8668))));
IkReal x8673=(r22*x8671*x8672);
j4eval[0]=((IKabs((x8669+(((-1.0)*x8670)))))+(IKabs(((((-1.0)*x8669*x8673))+((x8670*x8673))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8675=(sj1*sj2);
IkReal x8676=(gconst1*r01);
IkReal x8677=(gconst2*r00);
IkReal x8678=((1.0)*cj1*cj2);
CheckValue<IkReal> x8679 = IKatan2WithCheck(IkReal(((((-1.0)*x8675*x8676))+((cj1*cj2*x8676))+((x8675*x8677))+(((-1.0)*x8677*x8678)))),IkReal(((((-1.0)*r02*x8678))+((r02*x8675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8679.valid){
continue;
}
CheckValue<IkReal> x8680=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8679.value)+(((1.5707963267949)*(x8680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8681=IKsin(j4);
IkReal x8682=IKcos(j4);
IkReal x8683=((1.0)*cj2);
IkReal x8684=((1.0)*x8682);
IkReal x8685=(gconst2*x8682);
IkReal x8686=(gconst1*x8681);
IkReal x8687=((1.0)*x8681);
evalcond[0]=((((-1.0)*r22*x8684))+((r21*x8686))+(((-1.0)*gconst2*r20*x8687)));
evalcond[1]=((((-1.0)*r12*x8684))+((r11*x8686))+(((-1.0)*gconst2*r10*x8687)));
evalcond[2]=((((-1.0)*r02*x8687))+((r00*x8685))+(((-1.0)*gconst1*r01*x8684)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8684))+((r01*x8686))+(((-1.0)*gconst2*r00*x8687)));
evalcond[4]=((((-1.0)*gconst1*r21*x8684))+((r20*x8685))+((sj1*sj2))+(((-1.0)*r22*x8687))+(((-1.0)*cj1*x8683)));
evalcond[5]=((((-1.0)*sj1*x8683))+(((-1.0)*r12*x8687))+(((-1.0)*cj1*sj2))+((r10*x8685))+(((-1.0)*gconst1*r11*x8684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8688=(gconst2*r00);
IkReal x8689=(gconst1*r01);
CheckValue<IkReal> x8690 = IKatan2WithCheck(IkReal((x8688+(((-1.0)*x8689)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8690.valid){
continue;
}
CheckValue<IkReal> x8691=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x8689*x8689)))+(((2.0)*x8688*x8689))+(((-1.0)*(x8688*x8688))))),-1);
if(!x8691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8690.value)+(((1.5707963267949)*(x8691.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8692=IKsin(j4);
IkReal x8693=IKcos(j4);
IkReal x8694=((1.0)*cj2);
IkReal x8695=((1.0)*x8693);
IkReal x8696=(gconst2*x8693);
IkReal x8697=(gconst1*x8692);
IkReal x8698=((1.0)*x8692);
evalcond[0]=((((-1.0)*gconst2*r20*x8698))+((r21*x8697))+(((-1.0)*r22*x8695)));
evalcond[1]=((((-1.0)*r12*x8695))+(((-1.0)*gconst2*r10*x8698))+((r11*x8697)));
evalcond[2]=(((r00*x8696))+(((-1.0)*r02*x8698))+(((-1.0)*gconst1*r01*x8695)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x8698))+(((-1.0)*r02*x8695))+((r01*x8697)));
evalcond[4]=(((sj1*sj2))+((r20*x8696))+(((-1.0)*gconst1*r21*x8695))+(((-1.0)*cj1*x8694))+(((-1.0)*r22*x8698)));
evalcond[5]=((((-1.0)*gconst1*r11*x8695))+(((-1.0)*cj1*sj2))+((r10*x8696))+(((-1.0)*r12*x8698))+(((-1.0)*sj1*x8694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8699=((1.0)*gconst2);
CheckValue<IkReal> x8700 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8700.valid){
continue;
}
CheckValue<IkReal> x8701=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8699)))),-1);
if(!x8701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8700.value)+(((1.5707963267949)*(x8701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8702=IKsin(j4);
IkReal x8703=IKcos(j4);
IkReal x8704=((1.0)*cj2);
IkReal x8705=((1.0)*x8703);
IkReal x8706=(gconst2*x8703);
IkReal x8707=(gconst1*x8702);
IkReal x8708=((1.0)*x8702);
evalcond[0]=(((r21*x8707))+(((-1.0)*r22*x8705))+(((-1.0)*gconst2*r20*x8708)));
evalcond[1]=(((r11*x8707))+(((-1.0)*gconst2*r10*x8708))+(((-1.0)*r12*x8705)));
evalcond[2]=((((-1.0)*gconst1*r01*x8705))+(((-1.0)*r02*x8708))+((r00*x8706)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x8708))+(((-1.0)*r02*x8705))+((r01*x8707)));
evalcond[4]=((((-1.0)*cj1*x8704))+((sj1*sj2))+(((-1.0)*r22*x8708))+((r20*x8706))+(((-1.0)*gconst1*r21*x8705)));
evalcond[5]=(((r10*x8706))+(((-1.0)*sj1*x8704))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r11*x8705))+(((-1.0)*r12*x8708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8709=((-1.0)*r20);
IkReal x8710=x8191;
CheckValue<IkReal> x8712 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8709),IKFAST_ATAN2_MAGTHRESH);
if(!x8712.valid){
continue;
}
IkReal x8711=((-1.0)*(x8712.value));
sj5=gconst1;
cj5=gconst2;
j5=x8711;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8711;
IkReal gconst1=(r21*x8710);
IkReal gconst2=(x8709*x8710);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8713=((-1.0)*r20);
IkReal x8714=x8191;
CheckValue<IkReal> x8716 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8713),IKFAST_ATAN2_MAGTHRESH);
if(!x8716.valid){
continue;
}
IkReal x8715=((-1.0)*(x8716.value));
sj5=gconst1;
cj5=gconst2;
j5=x8715;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8715;
IkReal gconst1=(r21*x8714);
IkReal gconst2=(x8713*x8714);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8717=((-1.0)*r20);
IkReal x8718=x8191;
CheckValue<IkReal> x8720 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8717),IKFAST_ATAN2_MAGTHRESH);
if(!x8720.valid){
continue;
}
IkReal x8719=((-1.0)*(x8720.value));
sj5=gconst1;
cj5=gconst2;
j5=x8719;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8719;
IkReal gconst1=(r21*x8718);
IkReal gconst2=(x8717*x8718);
IkReal x8721=r22*r22;
IkReal x8722=(cj1*r12*sj2);
IkReal x8723=(cj2*r12*sj1);
CheckValue<IkReal> x8727=IKPowWithIntegerCheck(((-1.0)+x8721),-1);
if(!x8727.valid){
continue;
}
IkReal x8724=x8727.value;
if((((1.0)+(((-1.0)*x8721)))) < -0.00001)
continue;
IkReal x8725=IKsqrt(((1.0)+(((-1.0)*x8721))));
IkReal x8726=(r22*x8724*x8725);
j4eval[0]=((IKabs((((x8723*x8726))+((x8722*x8726)))))+(IKabs((x8723+x8722))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8728=(cj1*sj2);
IkReal x8729=(cj2*sj1);
IkReal x8730=(gconst1*r11);
IkReal x8731=((1.0)*gconst2*r10);
CheckValue<IkReal> x8732 = IKatan2WithCheck(IkReal((((r12*x8729))+((r12*x8728)))),IkReal(((((-1.0)*x8729*x8731))+((x8729*x8730))+((x8728*x8730))+(((-1.0)*x8728*x8731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8732.valid){
continue;
}
CheckValue<IkReal> x8733=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*gconst2*r10*x8730))+(((gconst2*gconst2)*(r10*r10)))+(x8730*x8730))),-1);
if(!x8733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8732.value)+(((1.5707963267949)*(x8733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8734=IKsin(j4);
IkReal x8735=IKcos(j4);
IkReal x8736=(gconst1*r11);
IkReal x8737=(gconst1*r21);
IkReal x8738=(gconst1*r01);
IkReal x8739=((1.0)*x8735);
IkReal x8740=(gconst2*x8735);
IkReal x8741=((1.0)*x8734);
evalcond[0]=(((x8734*x8737))+(((-1.0)*gconst2*r20*x8741))+(((-1.0)*r22*x8739)));
evalcond[1]=((((-1.0)*gconst2*r10*x8741))+((x8734*x8736))+(((-1.0)*r12*x8739)));
evalcond[2]=((((-1.0)*x8738*x8739))+((r00*x8740))+(((-1.0)*r02*x8741)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8741))+((x8734*x8738))+(((-1.0)*r02*x8739)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x8741))+((cj1*sj2))+(((-1.0)*x8736*x8739))+((r10*x8740)));
evalcond[5]=(((r20*x8740))+(((-1.0)*x8737*x8739))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8742=(gconst1*r01);
IkReal x8743=(gconst2*r00);
CheckValue<IkReal> x8744 = IKatan2WithCheck(IkReal((x8743+(((-1.0)*x8742)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8744.valid){
continue;
}
CheckValue<IkReal> x8745=IKPowWithIntegerCheck(IKsign(((x8742*x8742)+(x8743*x8743)+(((-2.0)*x8742*x8743))+(r02*r02))),-1);
if(!x8745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8744.value)+(((1.5707963267949)*(x8745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8746=IKsin(j4);
IkReal x8747=IKcos(j4);
IkReal x8748=(gconst1*r11);
IkReal x8749=(gconst1*r21);
IkReal x8750=(gconst1*r01);
IkReal x8751=((1.0)*x8747);
IkReal x8752=(gconst2*x8747);
IkReal x8753=((1.0)*x8746);
evalcond[0]=((((-1.0)*r22*x8751))+((x8746*x8749))+(((-1.0)*gconst2*r20*x8753)));
evalcond[1]=((((-1.0)*gconst2*r10*x8753))+((x8746*x8748))+(((-1.0)*r12*x8751)));
evalcond[2]=((((-1.0)*x8750*x8751))+(((-1.0)*r02*x8753))+((r00*x8752)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8753))+(((-1.0)*r02*x8751))+((x8746*x8750)));
evalcond[4]=(((cj2*sj1))+((r10*x8752))+((cj1*sj2))+(((-1.0)*r12*x8753))+(((-1.0)*x8748*x8751)));
evalcond[5]=((((-1.0)*r22*x8753))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8752))+(((-1.0)*x8749*x8751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8754 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8754.valid){
continue;
}
CheckValue<IkReal> x8755=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8754.value)+(((1.5707963267949)*(x8755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8756=IKsin(j4);
IkReal x8757=IKcos(j4);
IkReal x8758=(gconst1*r11);
IkReal x8759=(gconst1*r21);
IkReal x8760=(gconst1*r01);
IkReal x8761=((1.0)*x8757);
IkReal x8762=(gconst2*x8757);
IkReal x8763=((1.0)*x8756);
evalcond[0]=(((x8756*x8759))+(((-1.0)*r22*x8761))+(((-1.0)*gconst2*r20*x8763)));
evalcond[1]=((((-1.0)*gconst2*r10*x8763))+((x8756*x8758))+(((-1.0)*r12*x8761)));
evalcond[2]=((((-1.0)*r02*x8763))+((r00*x8762))+(((-1.0)*x8760*x8761)));
evalcond[3]=((1.0)+((x8756*x8760))+(((-1.0)*r02*x8761))+(((-1.0)*gconst2*r00*x8763)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x8763))+((r10*x8762))+(((-1.0)*x8758*x8761)));
evalcond[5]=((((-1.0)*x8759*x8761))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8763))+((r20*x8762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8764=((-1.0)*r20);
IkReal x8765=((-1.0)*px);
CheckValue<IkReal> x8767 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8764),IKFAST_ATAN2_MAGTHRESH);
if(!x8767.valid){
continue;
}
IkReal x8766=((-1.0)*(x8767.value));
sj5=gconst1;
cj5=gconst2;
j5=x8766;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8765);
rxp1_1=(px*r21);
rxp1_2=(r11*x8765);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8766;
IkReal gconst1=r21;
IkReal gconst2=x8764;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8768=((-1.0)*r20);
IkReal x8769=((-1.0)*px);
CheckValue<IkReal> x8771 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8768),IKFAST_ATAN2_MAGTHRESH);
if(!x8771.valid){
continue;
}
IkReal x8770=((-1.0)*(x8771.value));
sj5=gconst1;
cj5=gconst2;
j5=x8770;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8769);
rxp1_1=(px*r21);
rxp1_2=(r11*x8769);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8770;
IkReal gconst1=r21;
IkReal gconst2=x8768;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8772=((-1.0)*r20);
IkReal x8773=((-1.0)*px);
CheckValue<IkReal> x8775 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8772),IKFAST_ATAN2_MAGTHRESH);
if(!x8775.valid){
continue;
}
IkReal x8774=((-1.0)*(x8775.value));
sj5=gconst1;
cj5=gconst2;
j5=x8774;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8773);
rxp1_1=(px*r21);
rxp1_2=(r11*x8773);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8774;
IkReal gconst1=r21;
IkReal gconst2=x8772;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8778=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8778.valid){
continue;
}
IkReal x8776=x8778.value;
IkReal x8777=(sj0*x8776);
cj4array[0]=(((cj2*sj1*x8777))+((cj1*sj2*x8777)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8779=IKsin(j4);
IkReal x8780=IKcos(j4);
IkReal x8781=(gconst1*x8779);
IkReal x8782=((1.0)*x8780);
IkReal x8783=((1.0)*gconst2*x8779);
evalcond[0]=((-1.0)*r02*x8779);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8782)));
evalcond[2]=(((r21*x8781))+(((-1.0)*r20*x8783)));
evalcond[3]=(((r11*x8781))+(((-1.0)*r10*x8783)));
evalcond[4]=((((-1.0)*gconst1*r21*x8782))+((gconst2*r20*x8780))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8785=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8785.valid){
continue;
}
IkReal x8784=x8785.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8784))+((cj1*cj2*x8784)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8786=IKsin(j4);
IkReal x8787=IKcos(j4);
IkReal x8788=(gconst2*r10);
IkReal x8789=((1.0)*sj0);
IkReal x8790=((1.0)*x8786);
IkReal x8791=(gconst1*x8786);
IkReal x8792=((1.0)*x8787);
evalcond[0]=((-1.0)*r02*x8786);
evalcond[1]=((((-1.0)*r02*x8792))+(((-1.0)*x8789)));
evalcond[2]=((((-1.0)*gconst2*r20*x8790))+((r21*x8791)));
evalcond[3]=((((-1.0)*x8788*x8790))+((r11*x8791)));
evalcond[4]=(((x8787*x8788))+(((-1.0)*cj2*sj1*x8789))+(((-1.0)*cj1*sj2*x8789))+(((-1.0)*gconst1*r11*x8792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8793=IKPowWithIntegerCheck(r02,-1);
if(!x8793.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8793.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8794=IKsin(j4);
IkReal x8795=IKcos(j4);
IkReal x8796=(gconst2*r10);
IkReal x8797=((1.0)*sj0);
IkReal x8798=(gconst1*r11);
IkReal x8799=(gconst1*r21);
IkReal x8800=(gconst2*r20);
IkReal x8801=((1.0)*x8794);
IkReal x8802=((1.0)*x8795);
evalcond[0]=((-1.0)*r02*x8794);
evalcond[1]=((((-1.0)*x8800*x8801))+((x8794*x8799)));
evalcond[2]=((((-1.0)*x8796*x8801))+((x8794*x8798)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8795*x8800))+(((-1.0)*x8799*x8802)));
evalcond[4]=(((x8795*x8796))+(((-1.0)*x8798*x8802))+(((-1.0)*cj1*sj2*x8797))+(((-1.0)*cj2*sj1*x8797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8803=(gconst2*r20);
IkReal x8804=(cj1*cj2);
IkReal x8805=(sj1*sj2);
IkReal x8806=(gconst1*r21);
CheckValue<IkReal> x8807=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8803*x8806))+(x8803*x8803)+(x8806*x8806))),-1);
if(!x8807.valid){
continue;
}
CheckValue<IkReal> x8808 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8804))+((r22*x8805)))),IkReal(((((-1.0)*x8803*x8805))+((x8803*x8804))+(((-1.0)*x8804*x8806))+((x8805*x8806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8807.value)))+(x8808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8809=IKsin(j4);
IkReal x8810=IKcos(j4);
IkReal x8811=((1.0)*cj2);
IkReal x8812=((1.0)*sj0);
IkReal x8813=(cj1*sj2);
IkReal x8814=((1.0)*x8810);
IkReal x8815=(gconst2*x8810);
IkReal x8816=(gconst1*x8809);
IkReal x8817=((1.0)*x8809);
evalcond[0]=(((r21*x8816))+(((-1.0)*r22*x8814))+(((-1.0)*gconst2*r20*x8817)));
evalcond[1]=((((-1.0)*r12*x8814))+cj0+((r11*x8816))+(((-1.0)*gconst2*r10*x8817)));
evalcond[2]=((((-1.0)*r02*x8814))+((r01*x8816))+(((-1.0)*gconst2*r00*x8817))+(((-1.0)*x8812)));
evalcond[3]=((((-1.0)*r22*x8817))+(((-1.0)*cj1*x8811))+((sj1*sj2))+((r20*x8815))+(((-1.0)*gconst1*r21*x8814)));
evalcond[4]=((((-1.0)*cj0*x8813))+(((-1.0)*cj0*sj1*x8811))+(((-1.0)*r02*x8817))+(((-1.0)*gconst1*r01*x8814))+((r00*x8815)));
evalcond[5]=((((-1.0)*r12*x8817))+((r10*x8815))+(((-1.0)*sj0*sj1*x8811))+(((-1.0)*x8812*x8813))+(((-1.0)*gconst1*r11*x8814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8818=((1.0)*gconst2);
CheckValue<IkReal> x8819 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst1*r21*sj0))+(((-1.0)*r20*sj0*x8818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8819.valid){
continue;
}
CheckValue<IkReal> x8820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8818))+(((-1.0)*gconst1*r10)))),-1);
if(!x8820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8819.value)+(((1.5707963267949)*(x8820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8821=IKsin(j4);
IkReal x8822=IKcos(j4);
IkReal x8823=((1.0)*cj2);
IkReal x8824=((1.0)*sj0);
IkReal x8825=(cj1*sj2);
IkReal x8826=((1.0)*x8822);
IkReal x8827=(gconst2*x8822);
IkReal x8828=(gconst1*x8821);
IkReal x8829=((1.0)*x8821);
evalcond[0]=((((-1.0)*gconst2*r20*x8829))+((r21*x8828))+(((-1.0)*r22*x8826)));
evalcond[1]=((((-1.0)*r12*x8826))+cj0+((r11*x8828))+(((-1.0)*gconst2*r10*x8829)));
evalcond[2]=((((-1.0)*r02*x8826))+((r01*x8828))+(((-1.0)*gconst2*r00*x8829))+(((-1.0)*x8824)));
evalcond[3]=((((-1.0)*cj1*x8823))+((sj1*sj2))+((r20*x8827))+(((-1.0)*gconst1*r21*x8826))+(((-1.0)*r22*x8829)));
evalcond[4]=((((-1.0)*cj0*x8825))+(((-1.0)*cj0*sj1*x8823))+(((-1.0)*r02*x8829))+(((-1.0)*gconst1*r01*x8826))+((r00*x8827)));
evalcond[5]=((((-1.0)*r12*x8829))+((r10*x8827))+(((-1.0)*x8824*x8825))+(((-1.0)*sj0*sj1*x8823))+(((-1.0)*gconst1*r11*x8826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8830=((1.0)*gconst2);
CheckValue<IkReal> x8831 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x8830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8831.valid){
continue;
}
CheckValue<IkReal> x8832=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8830)))),-1);
if(!x8832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8831.value)+(((1.5707963267949)*(x8832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8833=IKsin(j4);
IkReal x8834=IKcos(j4);
IkReal x8835=((1.0)*cj2);
IkReal x8836=((1.0)*sj0);
IkReal x8837=(cj1*sj2);
IkReal x8838=((1.0)*x8834);
IkReal x8839=(gconst2*x8834);
IkReal x8840=(gconst1*x8833);
IkReal x8841=((1.0)*x8833);
evalcond[0]=(((r21*x8840))+(((-1.0)*gconst2*r20*x8841))+(((-1.0)*r22*x8838)));
evalcond[1]=(cj0+((r11*x8840))+(((-1.0)*gconst2*r10*x8841))+(((-1.0)*r12*x8838)));
evalcond[2]=((((-1.0)*r02*x8838))+(((-1.0)*gconst2*r00*x8841))+((r01*x8840))+(((-1.0)*x8836)));
evalcond[3]=(((r20*x8839))+((sj1*sj2))+(((-1.0)*cj1*x8835))+(((-1.0)*gconst1*r21*x8838))+(((-1.0)*r22*x8841)));
evalcond[4]=((((-1.0)*cj0*x8837))+(((-1.0)*r02*x8841))+(((-1.0)*gconst1*r01*x8838))+((r00*x8839))+(((-1.0)*cj0*sj1*x8835)));
evalcond[5]=(((r10*x8839))+(((-1.0)*sj0*sj1*x8835))+(((-1.0)*gconst1*r11*x8838))+(((-1.0)*x8836*x8837))+(((-1.0)*r12*x8841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8842=((-1.0)*r20);
IkReal x8843=x8191;
CheckValue<IkReal> x8845 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8842),IKFAST_ATAN2_MAGTHRESH);
if(!x8845.valid){
continue;
}
IkReal x8844=((-1.0)*(x8845.value));
sj5=gconst1;
cj5=gconst2;
j5=x8844;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8844;
IkReal gconst1=(r21*x8843);
IkReal gconst2=(x8842*x8843);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8846=gconst2*gconst2;
IkReal x8847=gconst1*gconst1;
IkReal x8848=((1.0)*cj3);
IkReal x8849=((1.0)*sj3);
IkReal x8850=(r11*sj3);
IkReal x8851=(r10*sj3);
IkReal x8852=(gconst1*gconst2*r00);
IkReal x8853=(gconst1*gconst2*r01);
IkReal x8854=(r00*x8846);
IkReal x8855=(r01*x8847);
CheckValue<IkReal> x8856=IKPowWithIntegerCheck(IKsign((((cj3*r11*x8852))+(((-1.0)*r11*x8848*x8855))+((cj3*r10*x8853))+(((-1.0)*r10*x8848*x8854))+(((-1.0)*r02*r12*x8848)))),-1);
if(!x8856.valid){
continue;
}
CheckValue<IkReal> x8857 = IKatan2WithCheck(IkReal((((gconst2*r02*x8850))+((gconst1*r02*x8851)))),IkReal((((x8850*x8853))+(((-1.0)*r11*x8849*x8854))+((x8851*x8855))+(((-1.0)*r10*x8849*x8852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8856.value)))+(x8857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8858=IKsin(j4);
IkReal x8859=IKcos(j4);
IkReal x8860=(gconst2*sj3);
IkReal x8861=(gconst1*r01);
IkReal x8862=(gconst1*r11);
IkReal x8863=(sj1*sj2);
IkReal x8864=((1.0)*cj3);
IkReal x8865=(gconst1*r10);
IkReal x8866=(cj3*gconst2);
IkReal x8867=((1.0)*cj2);
IkReal x8868=(gconst1*r20);
IkReal x8869=(gconst1*r21);
IkReal x8870=(gconst1*r00);
IkReal x8871=((1.0)*cj1*sj2);
IkReal x8872=(sj1*x8867);
IkReal x8873=((1.0)*x8859);
IkReal x8874=(sj3*x8859);
IkReal x8875=(cj3*x8858);
IkReal x8876=(sj3*x8858);
IkReal x8877=(cj3*x8859);
IkReal x8878=((1.0)*gconst2*x8858);
IkReal x8879=(x8871+x8872);
evalcond[0]=((((-1.0)*r22*x8873))+((x8858*x8869))+(((-1.0)*r20*x8878)));
evalcond[1]=((((-1.0)*r02*x8873))+((x8858*x8861))+(((-1.0)*r00*x8878)));
evalcond[2]=((1.0)+(((-1.0)*r10*x8878))+((x8858*x8862))+(((-1.0)*r12*x8873)));
evalcond[3]=(((x8862*x8877))+((sj3*x8865))+((r11*x8860))+((r12*x8875))+(((-1.0)*gconst2*r10*x8859*x8864)));
evalcond[4]=(((x8862*x8874))+(((-1.0)*x8864*x8865))+(((-1.0)*r10*x8860*x8873))+((r12*x8876))+(((-1.0)*gconst2*r11*x8864)));
evalcond[5]=(((r02*x8875))+((r01*x8860))+((sj3*x8870))+((x8861*x8877))+(((-1.0)*gconst2*r00*x8859*x8864))+((cj1*cj2))+(((-1.0)*x8863)));
evalcond[6]=(((r21*x8860))+(((-1.0)*x8879))+(((-1.0)*gconst2*r20*x8859*x8864))+((sj3*x8868))+((r22*x8875))+((x8869*x8877)));
evalcond[7]=((((-1.0)*cj1*x8867))+x8863+(((-1.0)*x8864*x8868))+(((-1.0)*r20*x8860*x8873))+((r22*x8876))+((x8869*x8874))+(((-1.0)*gconst2*r21*x8864)));
evalcond[8]=(((r02*x8876))+(((-1.0)*x8864*x8870))+(((-1.0)*r00*x8860*x8873))+(((-1.0)*x8879))+((x8861*x8874))+(((-1.0)*gconst2*r01*x8864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8880=((1.0)*gconst2);
CheckValue<IkReal> x8881 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8880))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8881.valid){
continue;
}
CheckValue<IkReal> x8882=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8880)))),-1);
if(!x8882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8881.value)+(((1.5707963267949)*(x8882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8883=IKsin(j4);
IkReal x8884=IKcos(j4);
IkReal x8885=(gconst2*sj3);
IkReal x8886=(gconst1*r01);
IkReal x8887=(gconst1*r11);
IkReal x8888=(sj1*sj2);
IkReal x8889=((1.0)*cj3);
IkReal x8890=(gconst1*r10);
IkReal x8891=(cj3*gconst2);
IkReal x8892=((1.0)*cj2);
IkReal x8893=(gconst1*r20);
IkReal x8894=(gconst1*r21);
IkReal x8895=(gconst1*r00);
IkReal x8896=((1.0)*cj1*sj2);
IkReal x8897=(sj1*x8892);
IkReal x8898=((1.0)*x8884);
IkReal x8899=(sj3*x8884);
IkReal x8900=(cj3*x8883);
IkReal x8901=(sj3*x8883);
IkReal x8902=(cj3*x8884);
IkReal x8903=((1.0)*gconst2*x8883);
IkReal x8904=(x8897+x8896);
evalcond[0]=(((x8883*x8894))+(((-1.0)*r20*x8903))+(((-1.0)*r22*x8898)));
evalcond[1]=((((-1.0)*r02*x8898))+(((-1.0)*r00*x8903))+((x8883*x8886)));
evalcond[2]=((1.0)+(((-1.0)*r10*x8903))+(((-1.0)*r12*x8898))+((x8883*x8887)));
evalcond[3]=(((r12*x8900))+((sj3*x8890))+((x8887*x8902))+((r11*x8885))+(((-1.0)*gconst2*r10*x8884*x8889)));
evalcond[4]=(((x8887*x8899))+(((-1.0)*x8889*x8890))+(((-1.0)*r10*x8885*x8898))+((r12*x8901))+(((-1.0)*gconst2*r11*x8889)));
evalcond[5]=((((-1.0)*x8888))+((x8886*x8902))+((sj3*x8895))+(((-1.0)*gconst2*r00*x8884*x8889))+((cj1*cj2))+((r01*x8885))+((r02*x8900)));
evalcond[6]=(((x8894*x8902))+((r21*x8885))+(((-1.0)*x8904))+(((-1.0)*gconst2*r20*x8884*x8889))+((sj3*x8893))+((r22*x8900)));
evalcond[7]=((((-1.0)*gconst2*r21*x8889))+(((-1.0)*x8889*x8893))+x8888+((x8894*x8899))+(((-1.0)*cj1*x8892))+(((-1.0)*r20*x8885*x8898))+((r22*x8901)));
evalcond[8]=((((-1.0)*x8889*x8895))+(((-1.0)*r00*x8885*x8898))+((x8886*x8899))+(((-1.0)*x8904))+(((-1.0)*gconst2*r01*x8889))+((r02*x8901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8905=((-1.0)*r20);
IkReal x8906=x8191;
CheckValue<IkReal> x8908 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8905),IKFAST_ATAN2_MAGTHRESH);
if(!x8908.valid){
continue;
}
IkReal x8907=((-1.0)*(x8908.value));
sj5=gconst1;
cj5=gconst2;
j5=x8907;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8907;
IkReal gconst1=(r21*x8906);
IkReal gconst2=(x8905*x8906);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8909=gconst2*gconst2;
IkReal x8910=gconst1*gconst1;
IkReal x8911=((1.0)*cj3);
IkReal x8912=((1.0)*sj3);
IkReal x8913=(r11*sj3);
IkReal x8914=(r10*sj3);
IkReal x8915=(gconst1*gconst2*r00);
IkReal x8916=(gconst1*gconst2*r01);
IkReal x8917=(r00*x8909);
IkReal x8918=(r01*x8910);
CheckValue<IkReal> x8919 = IKatan2WithCheck(IkReal((((gconst2*r02*x8913))+((gconst1*r02*x8914)))),IkReal((((x8913*x8916))+(((-1.0)*r11*x8912*x8917))+((x8914*x8918))+(((-1.0)*r10*x8912*x8915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8919.valid){
continue;
}
CheckValue<IkReal> x8920=IKPowWithIntegerCheck(IKsign((((cj3*r10*x8916))+(((-1.0)*r10*x8911*x8917))+((cj3*r11*x8915))+(((-1.0)*r02*r12*x8911))+(((-1.0)*r11*x8911*x8918)))),-1);
if(!x8920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8919.value)+(((1.5707963267949)*(x8920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8921=IKsin(j4);
IkReal x8922=IKcos(j4);
IkReal x8923=(sj1*sj2);
IkReal x8924=(gconst2*sj3);
IkReal x8925=(gconst1*r01);
IkReal x8926=(gconst1*r11);
IkReal x8927=((1.0)*cj3);
IkReal x8928=(gconst1*r10);
IkReal x8929=(cj3*gconst2);
IkReal x8930=((1.0)*cj2);
IkReal x8931=(gconst1*r21);
IkReal x8932=(cj1*sj2);
IkReal x8933=(gconst1*r20);
IkReal x8934=(gconst1*r00);
IkReal x8935=(cj1*x8930);
IkReal x8936=((1.0)*x8922);
IkReal x8937=(sj3*x8922);
IkReal x8938=(cj3*x8921);
IkReal x8939=(sj3*x8921);
IkReal x8940=(cj3*x8922);
IkReal x8941=((1.0)*gconst2*x8921);
evalcond[0]=((((-1.0)*r22*x8936))+((x8921*x8931))+(((-1.0)*r20*x8941)));
evalcond[1]=(((x8921*x8925))+(((-1.0)*r00*x8941))+(((-1.0)*r02*x8936)));
evalcond[2]=((-1.0)+((x8921*x8926))+(((-1.0)*r12*x8936))+(((-1.0)*r10*x8941)));
evalcond[3]=(((r12*x8938))+((x8926*x8940))+((r11*x8924))+(((-1.0)*gconst2*r10*x8922*x8927))+((sj3*x8928)));
evalcond[4]=(((r12*x8939))+((x8926*x8937))+(((-1.0)*x8927*x8928))+(((-1.0)*r10*x8924*x8936))+(((-1.0)*gconst2*r11*x8927)));
evalcond[5]=((((-1.0)*gconst2*r00*x8922*x8927))+((x8925*x8940))+x8923+((sj3*x8934))+(((-1.0)*x8935))+((r02*x8938))+((r01*x8924)));
evalcond[6]=((((-1.0)*gconst2*r20*x8922*x8927))+((sj3*x8933))+((r21*x8924))+(((-1.0)*x8932))+((x8931*x8940))+(((-1.0)*sj1*x8930))+((r22*x8938)));
evalcond[7]=(((x8925*x8937))+((cj2*sj1))+x8932+(((-1.0)*x8927*x8934))+(((-1.0)*gconst2*r01*x8927))+(((-1.0)*r00*x8924*x8936))+((r02*x8939)));
evalcond[8]=(x8923+(((-1.0)*x8927*x8933))+(((-1.0)*gconst2*r21*x8927))+(((-1.0)*x8935))+((x8931*x8937))+(((-1.0)*r20*x8924*x8936))+((r22*x8939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8942 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8942.valid){
continue;
}
CheckValue<IkReal> x8943=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8942.value)+(((1.5707963267949)*(x8943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8944=IKsin(j4);
IkReal x8945=IKcos(j4);
IkReal x8946=(sj1*sj2);
IkReal x8947=(gconst2*sj3);
IkReal x8948=(gconst1*r01);
IkReal x8949=(gconst1*r11);
IkReal x8950=((1.0)*cj3);
IkReal x8951=(gconst1*r10);
IkReal x8952=(cj3*gconst2);
IkReal x8953=((1.0)*cj2);
IkReal x8954=(gconst1*r21);
IkReal x8955=(cj1*sj2);
IkReal x8956=(gconst1*r20);
IkReal x8957=(gconst1*r00);
IkReal x8958=(cj1*x8953);
IkReal x8959=((1.0)*x8945);
IkReal x8960=(sj3*x8945);
IkReal x8961=(cj3*x8944);
IkReal x8962=(sj3*x8944);
IkReal x8963=(cj3*x8945);
IkReal x8964=((1.0)*gconst2*x8944);
evalcond[0]=(((x8944*x8954))+(((-1.0)*r22*x8959))+(((-1.0)*r20*x8964)));
evalcond[1]=(((x8944*x8948))+(((-1.0)*r00*x8964))+(((-1.0)*r02*x8959)));
evalcond[2]=((-1.0)+((x8944*x8949))+(((-1.0)*r10*x8964))+(((-1.0)*r12*x8959)));
evalcond[3]=(((r11*x8947))+(((-1.0)*gconst2*r10*x8945*x8950))+((sj3*x8951))+((r12*x8961))+((x8949*x8963)));
evalcond[4]=((((-1.0)*gconst2*r11*x8950))+(((-1.0)*r10*x8947*x8959))+(((-1.0)*x8950*x8951))+((r12*x8962))+((x8949*x8960)));
evalcond[5]=(((x8948*x8963))+((r02*x8961))+x8946+((r01*x8947))+(((-1.0)*gconst2*r00*x8945*x8950))+((sj3*x8957))+(((-1.0)*x8958)));
evalcond[6]=(((r22*x8961))+(((-1.0)*sj1*x8953))+(((-1.0)*gconst2*r20*x8945*x8950))+((x8954*x8963))+(((-1.0)*x8955))+((sj3*x8956))+((r21*x8947)));
evalcond[7]=(((cj2*sj1))+((x8948*x8960))+((r02*x8962))+x8955+(((-1.0)*x8950*x8957))+(((-1.0)*gconst2*r01*x8950))+(((-1.0)*r00*x8947*x8959)));
evalcond[8]=(((r22*x8962))+x8946+(((-1.0)*gconst2*r21*x8950))+((x8954*x8960))+(((-1.0)*x8950*x8956))+(((-1.0)*r20*x8947*x8959))+(((-1.0)*x8958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8965=((-1.0)*r20);
IkReal x8966=x8191;
CheckValue<IkReal> x8968 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8965),IKFAST_ATAN2_MAGTHRESH);
if(!x8968.valid){
continue;
}
IkReal x8967=((-1.0)*(x8968.value));
sj5=gconst1;
cj5=gconst2;
j5=x8967;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8967;
IkReal gconst1=(r21*x8966);
IkReal gconst2=(x8965*x8966);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8969=gconst1*gconst1;
IkReal x8970=gconst2*gconst2;
IkReal x8971=((1.0)*cj3);
IkReal x8972=(gconst2*r10);
IkReal x8973=(r01*sj3);
IkReal x8974=(gconst1*r00*sj3);
IkReal x8975=(gconst1*gconst2*r11);
IkReal x8976=(r10*x8970);
IkReal x8977=(r11*x8969);
CheckValue<IkReal> x8978 = IKatan2WithCheck(IkReal((((r12*x8974))+((gconst2*r12*x8973)))),IkReal((((x8973*x8975))+(((-1.0)*x8972*x8974))+(((-1.0)*x8973*x8976))+((r00*sj3*x8977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8978.valid){
continue;
}
CheckValue<IkReal> x8979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x8971))+((cj3*gconst1*r01*x8972))+(((-1.0)*r01*x8971*x8977))+((cj3*r00*x8975))+(((-1.0)*r00*x8971*x8976)))),-1);
if(!x8979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8978.value)+(((1.5707963267949)*(x8979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8980=IKsin(j4);
IkReal x8981=IKcos(j4);
IkReal x8982=(r00*sj3);
IkReal x8983=(gconst2*r20);
IkReal x8984=(sj1*sj2);
IkReal x8985=((1.0)*cj3);
IkReal x8986=(gconst1*r10);
IkReal x8987=(gconst1*sj3);
IkReal x8988=((1.0)*cj2);
IkReal x8989=(cj3*gconst2);
IkReal x8990=(gconst2*r21);
IkReal x8991=(gconst2*sj3);
IkReal x8992=(cj3*gconst1);
IkReal x8993=((1.0)*cj1*sj2);
IkReal x8994=(sj1*x8988);
IkReal x8995=((1.0)*x8981);
IkReal x8996=(gconst1*x8980);
IkReal x8997=(cj3*x8980);
IkReal x8998=(sj3*x8980);
IkReal x8999=(r21*x8981);
IkReal x9000=(r11*x8981);
IkReal x9001=(r01*x8981);
IkReal x9002=((1.0)*x8980);
IkReal x9003=(x8993+x8994);
evalcond[0]=(((r21*x8996))+(((-1.0)*r22*x8995))+(((-1.0)*x8983*x9002)));
evalcond[1]=((((-1.0)*r12*x8995))+(((-1.0)*gconst2*r10*x9002))+((r11*x8996)));
evalcond[2]=((-1.0)+((r01*x8996))+(((-1.0)*r02*x8995))+(((-1.0)*gconst2*r00*x9002)));
evalcond[3]=(((gconst1*x8982))+((x8992*x9001))+((r01*x8991))+(((-1.0)*gconst2*r00*x8981*x8985))+((r02*x8997)));
evalcond[4]=(((x8987*x9001))+(((-1.0)*gconst1*r00*x8985))+(((-1.0)*gconst2*x8982*x8995))+(((-1.0)*gconst2*r01*x8985))+((r02*x8998)));
evalcond[5]=((((-1.0)*x8984))+(((-1.0)*gconst2*r10*x8981*x8985))+((r11*x8991))+((r12*x8997))+((x8992*x9000))+((cj1*cj2))+((sj3*x8986)));
evalcond[6]=((((-1.0)*x9003))+(((-1.0)*x8981*x8983*x8985))+((sj3*x8990))+((x8992*x8999))+((r22*x8997))+((r20*x8987)));
evalcond[7]=((((-1.0)*x8985*x8990))+((x8987*x8999))+x8984+(((-1.0)*gconst1*r20*x8985))+(((-1.0)*sj3*x8983*x8995))+((r22*x8998))+(((-1.0)*cj1*x8988)));
evalcond[8]=((((-1.0)*x9003))+((r12*x8998))+((x8987*x9000))+(((-1.0)*gconst2*r11*x8985))+(((-1.0)*x8985*x8986))+(((-1.0)*r10*x8991*x8995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9004=((1.0)*gconst2);
CheckValue<IkReal> x9005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9004))+(((-1.0)*gconst1*r10)))),-1);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9005.value)))+(x9006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9007=IKsin(j4);
IkReal x9008=IKcos(j4);
IkReal x9009=(r00*sj3);
IkReal x9010=(gconst2*r20);
IkReal x9011=(sj1*sj2);
IkReal x9012=((1.0)*cj3);
IkReal x9013=(gconst1*r10);
IkReal x9014=(gconst1*sj3);
IkReal x9015=((1.0)*cj2);
IkReal x9016=(cj3*gconst2);
IkReal x9017=(gconst2*r21);
IkReal x9018=(gconst2*sj3);
IkReal x9019=(cj3*gconst1);
IkReal x9020=((1.0)*cj1*sj2);
IkReal x9021=(sj1*x9015);
IkReal x9022=((1.0)*x9008);
IkReal x9023=(gconst1*x9007);
IkReal x9024=(cj3*x9007);
IkReal x9025=(sj3*x9007);
IkReal x9026=(r21*x9008);
IkReal x9027=(r11*x9008);
IkReal x9028=(r01*x9008);
IkReal x9029=((1.0)*x9007);
IkReal x9030=(x9021+x9020);
evalcond[0]=((((-1.0)*x9010*x9029))+((r21*x9023))+(((-1.0)*r22*x9022)));
evalcond[1]=((((-1.0)*r12*x9022))+(((-1.0)*gconst2*r10*x9029))+((r11*x9023)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9029))+((r01*x9023))+(((-1.0)*r02*x9022)));
evalcond[3]=(((x9019*x9028))+(((-1.0)*gconst2*r00*x9008*x9012))+((r02*x9024))+((gconst1*x9009))+((r01*x9018)));
evalcond[4]=((((-1.0)*gconst2*x9009*x9022))+((r02*x9025))+(((-1.0)*gconst2*r01*x9012))+((x9014*x9028))+(((-1.0)*gconst1*r00*x9012)));
evalcond[5]=((((-1.0)*gconst2*r10*x9008*x9012))+(((-1.0)*x9011))+((x9019*x9027))+((sj3*x9013))+((cj1*cj2))+((r12*x9024))+((r11*x9018)));
evalcond[6]=(((x9019*x9026))+(((-1.0)*x9030))+((sj3*x9017))+((r22*x9024))+(((-1.0)*x9008*x9010*x9012))+((r20*x9014)));
evalcond[7]=(((r22*x9025))+(((-1.0)*sj3*x9010*x9022))+x9011+(((-1.0)*cj1*x9015))+(((-1.0)*x9012*x9017))+(((-1.0)*gconst1*r20*x9012))+((x9014*x9026)));
evalcond[8]=((((-1.0)*x9030))+(((-1.0)*r10*x9018*x9022))+(((-1.0)*x9012*x9013))+((x9014*x9027))+(((-1.0)*gconst2*r11*x9012))+((r12*x9025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9031=((-1.0)*r20);
IkReal x9032=x8191;
CheckValue<IkReal> x9034 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9031),IKFAST_ATAN2_MAGTHRESH);
if(!x9034.valid){
continue;
}
IkReal x9033=((-1.0)*(x9034.value));
sj5=gconst1;
cj5=gconst2;
j5=x9033;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9033;
IkReal gconst1=(r21*x9032);
IkReal gconst2=(x9031*x9032);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9035=gconst1*gconst1;
IkReal x9036=gconst2*gconst2;
IkReal x9037=((1.0)*cj3);
IkReal x9038=(gconst2*r10);
IkReal x9039=(r01*sj3);
IkReal x9040=(gconst1*r00*sj3);
IkReal x9041=(gconst1*gconst2*r11);
IkReal x9042=(r10*x9036);
IkReal x9043=(r11*x9035);
CheckValue<IkReal> x9044=IKPowWithIntegerCheck(IKsign((((cj3*gconst1*r01*x9038))+(((-1.0)*r00*x9037*x9042))+((cj3*r00*x9041))+(((-1.0)*r02*r12*x9037))+(((-1.0)*r01*x9037*x9043)))),-1);
if(!x9044.valid){
continue;
}
CheckValue<IkReal> x9045 = IKatan2WithCheck(IkReal((((r12*x9040))+((gconst2*r12*x9039)))),IkReal(((((-1.0)*x9039*x9042))+(((-1.0)*x9038*x9040))+((x9039*x9041))+((r00*sj3*x9043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9044.value)))+(x9045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9046=IKsin(j4);
IkReal x9047=IKcos(j4);
IkReal x9048=(sj1*sj2);
IkReal x9049=(r00*sj3);
IkReal x9050=((1.0)*cj3);
IkReal x9051=(gconst2*r11);
IkReal x9052=(gconst2*r20);
IkReal x9053=(gconst1*r10);
IkReal x9054=((1.0)*cj2);
IkReal x9055=(gconst1*sj3);
IkReal x9056=(cj3*gconst2);
IkReal x9057=(gconst2*r21);
IkReal x9058=(cj1*sj2);
IkReal x9059=(cj3*gconst1);
IkReal x9060=(gconst2*r01);
IkReal x9061=(gconst2*r10);
IkReal x9062=(cj1*x9054);
IkReal x9063=((1.0)*x9047);
IkReal x9064=(gconst1*x9046);
IkReal x9065=(cj3*x9046);
IkReal x9066=(sj3*x9046);
IkReal x9067=(r21*x9047);
IkReal x9068=(r11*x9047);
IkReal x9069=(r01*x9047);
IkReal x9070=((1.0)*x9046);
evalcond[0]=(((r21*x9064))+(((-1.0)*x9052*x9070))+(((-1.0)*r22*x9063)));
evalcond[1]=(((r11*x9064))+(((-1.0)*x9061*x9070))+(((-1.0)*r12*x9063)));
evalcond[2]=((1.0)+((r01*x9064))+(((-1.0)*gconst2*r00*x9070))+(((-1.0)*r02*x9063)));
evalcond[3]=(((gconst1*x9049))+((sj3*x9060))+((r02*x9065))+((x9059*x9069))+(((-1.0)*gconst2*r00*x9047*x9050)));
evalcond[4]=((((-1.0)*gconst1*r00*x9050))+((r02*x9066))+(((-1.0)*gconst2*x9049*x9063))+((x9055*x9069))+(((-1.0)*x9050*x9060)));
evalcond[5]=((((-1.0)*x9062))+(((-1.0)*x9047*x9050*x9061))+((r12*x9065))+x9048+((sj3*x9053))+((sj3*x9051))+((x9059*x9068)));
evalcond[6]=(((r22*x9065))+((r20*x9055))+(((-1.0)*x9047*x9050*x9052))+(((-1.0)*sj1*x9054))+((sj3*x9057))+((x9059*x9067))+(((-1.0)*x9058)));
evalcond[7]=(((cj2*sj1))+((r12*x9066))+((x9055*x9068))+x9058+(((-1.0)*sj3*x9061*x9063))+(((-1.0)*x9050*x9051))+(((-1.0)*x9050*x9053)));
evalcond[8]=((((-1.0)*x9062))+((r22*x9066))+((x9055*x9067))+x9048+(((-1.0)*sj3*x9052*x9063))+(((-1.0)*x9050*x9057))+(((-1.0)*gconst1*r20*x9050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9071 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9071.valid){
continue;
}
CheckValue<IkReal> x9072=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9071.value)+(((1.5707963267949)*(x9072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9073=IKsin(j4);
IkReal x9074=IKcos(j4);
IkReal x9075=(sj1*sj2);
IkReal x9076=(r00*sj3);
IkReal x9077=((1.0)*cj3);
IkReal x9078=(gconst2*r11);
IkReal x9079=(gconst2*r20);
IkReal x9080=(gconst1*r10);
IkReal x9081=((1.0)*cj2);
IkReal x9082=(gconst1*sj3);
IkReal x9083=(cj3*gconst2);
IkReal x9084=(gconst2*r21);
IkReal x9085=(cj1*sj2);
IkReal x9086=(cj3*gconst1);
IkReal x9087=(gconst2*r01);
IkReal x9088=(gconst2*r10);
IkReal x9089=(cj1*x9081);
IkReal x9090=((1.0)*x9074);
IkReal x9091=(gconst1*x9073);
IkReal x9092=(cj3*x9073);
IkReal x9093=(sj3*x9073);
IkReal x9094=(r21*x9074);
IkReal x9095=(r11*x9074);
IkReal x9096=(r01*x9074);
IkReal x9097=((1.0)*x9073);
evalcond[0]=(((r21*x9091))+(((-1.0)*r22*x9090))+(((-1.0)*x9079*x9097)));
evalcond[1]=(((r11*x9091))+(((-1.0)*r12*x9090))+(((-1.0)*x9088*x9097)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9097))+((r01*x9091))+(((-1.0)*r02*x9090)));
evalcond[3]=((((-1.0)*gconst2*r00*x9074*x9077))+((x9086*x9096))+((sj3*x9087))+((gconst1*x9076))+((r02*x9092)));
evalcond[4]=((((-1.0)*gconst2*x9076*x9090))+((x9082*x9096))+(((-1.0)*gconst1*r00*x9077))+(((-1.0)*x9077*x9087))+((r02*x9093)));
evalcond[5]=(((r12*x9092))+(((-1.0)*x9089))+x9075+((x9086*x9095))+(((-1.0)*x9074*x9077*x9088))+((sj3*x9080))+((sj3*x9078)));
evalcond[6]=(((r20*x9082))+(((-1.0)*sj1*x9081))+(((-1.0)*x9074*x9077*x9079))+((x9086*x9094))+((sj3*x9084))+((r22*x9092))+(((-1.0)*x9085)));
evalcond[7]=(((cj2*sj1))+((x9082*x9095))+((r12*x9093))+x9085+(((-1.0)*x9077*x9080))+(((-1.0)*x9077*x9078))+(((-1.0)*sj3*x9088*x9090)));
evalcond[8]=(((x9082*x9094))+(((-1.0)*x9089))+x9075+(((-1.0)*x9077*x9084))+((r22*x9093))+(((-1.0)*sj3*x9079*x9090))+(((-1.0)*gconst1*r20*x9077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9098=((-1.0)*r20);
IkReal x9099=((-1.0)*px);
CheckValue<IkReal> x9101 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9098),IKFAST_ATAN2_MAGTHRESH);
if(!x9101.valid){
continue;
}
IkReal x9100=((-1.0)*(x9101.value));
sj5=gconst1;
cj5=gconst2;
j5=x9100;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9099);
rxp1_1=(px*r21);
rxp1_2=(r11*x9099);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9100;
IkReal gconst1=r21;
IkReal gconst2=x9098;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9102=((-1.0)*r20);
IkReal x9103=((-1.0)*px);
CheckValue<IkReal> x9105 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9102),IKFAST_ATAN2_MAGTHRESH);
if(!x9105.valid){
continue;
}
IkReal x9104=((-1.0)*(x9105.value));
sj5=gconst1;
cj5=gconst2;
j5=x9104;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9103);
rxp1_1=(px*r21);
rxp1_2=(r11*x9103);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9104;
IkReal gconst1=r21;
IkReal gconst2=x9102;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9106=((-1.0)*r20);
IkReal x9107=((-1.0)*px);
CheckValue<IkReal> x9109 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9106),IKFAST_ATAN2_MAGTHRESH);
if(!x9109.valid){
continue;
}
IkReal x9108=((-1.0)*(x9109.value));
sj5=gconst1;
cj5=gconst2;
j5=x9108;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9107);
rxp1_1=(px*r21);
rxp1_2=(r11*x9107);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9108;
IkReal gconst1=r21;
IkReal gconst2=x9106;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9110=((-1.0)*r20);
IkReal x9111=((-1.0)*px);
CheckValue<IkReal> x9113 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9110),IKFAST_ATAN2_MAGTHRESH);
if(!x9113.valid){
continue;
}
IkReal x9112=((-1.0)*(x9113.value));
sj5=gconst1;
cj5=gconst2;
j5=x9112;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9111);
rxp1_1=(px*r21);
rxp1_2=(r11*x9111);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9112;
IkReal gconst1=r21;
IkReal gconst2=x9110;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9114=((-1.0)*r20);
IkReal x9115=((-1.0)*px);
CheckValue<IkReal> x9117 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9114),IKFAST_ATAN2_MAGTHRESH);
if(!x9117.valid){
continue;
}
IkReal x9116=((-1.0)*(x9117.value));
sj5=gconst1;
cj5=gconst2;
j5=x9116;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9115);
rxp1_1=(px*r21);
rxp1_2=(r11*x9115);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9116;
IkReal gconst1=r21;
IkReal gconst2=x9114;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9118=((-1.0)*r20);
IkReal x9119=((-1.0)*px);
CheckValue<IkReal> x9121 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9118),IKFAST_ATAN2_MAGTHRESH);
if(!x9121.valid){
continue;
}
IkReal x9120=((-1.0)*(x9121.value));
sj5=gconst1;
cj5=gconst2;
j5=x9120;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9119);
rxp1_1=(px*r21);
rxp1_2=(r11*x9119);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9120;
IkReal gconst1=r21;
IkReal gconst2=x9118;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9124=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9124.valid){
continue;
}
IkReal x9122=x9124.value;
IkReal x9123=(sj0*x9122);
cj4array[0]=((((-1.0)*cj1*cj2*x9123))+((sj1*sj2*x9123)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9125=IKsin(j4);
IkReal x9126=IKcos(j4);
IkReal x9127=((1.0)*gconst2);
IkReal x9128=(gconst1*r21);
evalcond[0]=(r02*x9125);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9126)));
evalcond[2]=(((x9125*x9128))+(((-1.0)*r20*x9125*x9127)));
evalcond[3]=((((-1.0)*r10*x9125*x9127))+((gconst1*r11*x9125)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x9126*x9128))+(((-1.0)*r20*x9126*x9127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9130=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9130.valid){
continue;
}
IkReal x9129=x9130.value;
cj4array[0]=(((cj1*sj2*x9129))+((cj2*sj1*x9129)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9131=IKsin(j4);
IkReal x9132=IKcos(j4);
IkReal x9133=((1.0)*sj0);
IkReal x9134=(gconst1*x9131);
IkReal x9135=((1.0)*x9132);
IkReal x9136=((1.0)*gconst2*x9131);
evalcond[0]=(r02*x9131);
evalcond[1]=((((-1.0)*r02*x9135))+(((-1.0)*x9133)));
evalcond[2]=((((-1.0)*r20*x9136))+((r21*x9134)));
evalcond[3]=((((-1.0)*r10*x9136))+((r11*x9134)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*gconst2*r10*x9135))+(((-1.0)*sj1*sj2*x9133))+((gconst1*r11*x9132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9137=IKPowWithIntegerCheck(r02,-1);
if(!x9137.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9137.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9138=IKsin(j4);
IkReal x9139=IKcos(j4);
IkReal x9140=((1.0)*gconst2);
IkReal x9141=(gconst1*r21);
IkReal x9142=((1.0)*sj1);
IkReal x9143=(gconst1*r11);
evalcond[0]=(r02*x9138);
evalcond[1]=((((-1.0)*r20*x9138*x9140))+((x9138*x9141)));
evalcond[2]=(((x9138*x9143))+(((-1.0)*r10*x9138*x9140)));
evalcond[3]=((((-1.0)*r20*x9139*x9140))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9142))+((x9139*x9141)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x9142))+(((-1.0)*r10*x9139*x9140))+((x9139*x9143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9144=((-1.0)*r20);
IkReal x9145=((-1.0)*px);
CheckValue<IkReal> x9147 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9144),IKFAST_ATAN2_MAGTHRESH);
if(!x9147.valid){
continue;
}
IkReal x9146=((-1.0)*(x9147.value));
sj5=gconst1;
cj5=gconst2;
j5=x9146;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9145);
rxp1_1=(px*r21);
rxp1_2=(r11*x9145);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9146;
IkReal gconst1=r21;
IkReal gconst2=x9144;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9148=((-1.0)*r20);
IkReal x9149=((-1.0)*px);
CheckValue<IkReal> x9151 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9148),IKFAST_ATAN2_MAGTHRESH);
if(!x9151.valid){
continue;
}
IkReal x9150=((-1.0)*(x9151.value));
sj5=gconst1;
cj5=gconst2;
j5=x9150;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9149);
rxp1_1=(px*r21);
rxp1_2=(r11*x9149);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9150;
IkReal gconst1=r21;
IkReal gconst2=x9148;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9152=((-1.0)*r20);
IkReal x9153=((-1.0)*px);
CheckValue<IkReal> x9155 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9152),IKFAST_ATAN2_MAGTHRESH);
if(!x9155.valid){
continue;
}
IkReal x9154=((-1.0)*(x9155.value));
sj5=gconst1;
cj5=gconst2;
j5=x9154;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9153);
rxp1_1=(px*r21);
rxp1_2=(r11*x9153);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9154;
IkReal gconst1=r21;
IkReal gconst2=x9152;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9158=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9158.valid){
continue;
}
IkReal x9156=x9158.value;
IkReal x9157=(sj0*x9156);
cj4array[0]=((((-1.0)*cj1*cj2*x9157))+((sj1*sj2*x9157)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9159=IKsin(j4);
IkReal x9160=IKcos(j4);
IkReal x9161=(gconst1*x9159);
IkReal x9162=((1.0)*x9160);
IkReal x9163=((1.0)*gconst2*x9159);
evalcond[0]=((-1.0)*r02*x9159);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9162)));
evalcond[2]=(((r21*x9161))+(((-1.0)*r20*x9163)));
evalcond[3]=((((-1.0)*r10*x9163))+((r11*x9161)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*gconst1*r21*x9162))+(((-1.0)*cj1*sj2))+((gconst2*r20*x9160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9165=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9165.valid){
continue;
}
IkReal x9164=x9165.value;
cj4array[0]=(((cj2*sj1*x9164))+((cj1*sj2*x9164)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9166=IKsin(j4);
IkReal x9167=IKcos(j4);
IkReal x9168=(gconst2*r10);
IkReal x9169=((1.0)*sj0);
IkReal x9170=((1.0)*x9166);
IkReal x9171=(gconst1*x9166);
IkReal x9172=((1.0)*x9167);
evalcond[0]=((-1.0)*r02*x9166);
evalcond[1]=((((-1.0)*r02*x9172))+(((-1.0)*x9169)));
evalcond[2]=((((-1.0)*gconst2*r20*x9170))+((r21*x9171)));
evalcond[3]=((((-1.0)*x9168*x9170))+((r11*x9171)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*gconst1*r11*x9172))+(((-1.0)*sj1*sj2*x9169))+((x9167*x9168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9173=IKPowWithIntegerCheck(r02,-1);
if(!x9173.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9173.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9174=IKsin(j4);
IkReal x9175=IKcos(j4);
IkReal x9176=(gconst2*r10);
IkReal x9177=((1.0)*sj1);
IkReal x9178=(gconst1*r11);
IkReal x9179=(gconst1*r21);
IkReal x9180=(gconst2*r20);
IkReal x9181=((1.0)*x9174);
IkReal x9182=((1.0)*x9175);
evalcond[0]=((-1.0)*r02*x9174);
evalcond[1]=(((x9174*x9179))+(((-1.0)*x9180*x9181)));
evalcond[2]=((((-1.0)*x9176*x9181))+((x9174*x9178)));
evalcond[3]=(((x9175*x9180))+(((-1.0)*x9179*x9182))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9177)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x9177))+((x9175*x9176))+(((-1.0)*x9178*x9182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9184=IKPowWithIntegerCheck(r02,-1);
if(!x9184.valid){
continue;
}
IkReal x9183=x9184.value;
CheckValue<IkReal> x9185=IKPowWithIntegerCheck(sj3,-1);
if(!x9185.valid){
continue;
}
if( IKabs((x9183*(x9185.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9183)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9183*(x9185.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x9183))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9183*(x9185.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x9183));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9186=IKsin(j4);
IkReal x9187=IKcos(j4);
IkReal x9188=(cj1*cj2);
IkReal x9189=(gconst1*r11);
IkReal x9190=(sj1*sj2);
IkReal x9191=((1.0)*cj3);
IkReal x9192=(gconst1*r10);
IkReal x9193=(gconst2*r21);
IkReal x9194=(gconst1*r20);
IkReal x9195=(gconst2*r11);
IkReal x9196=(gconst1*r21);
IkReal x9197=((1.0)*sj0);
IkReal x9198=(gconst2*r10);
IkReal x9199=(r02*x9186);
IkReal x9200=((1.0)*cj2*sj1);
IkReal x9201=((1.0)*cj1*sj2);
IkReal x9202=(sj3*x9187);
IkReal x9203=(cj3*x9187);
IkReal x9204=((1.0)*x9186);
IkReal x9205=((1.0)*gconst2*r20*x9187);
evalcond[0]=((((-1.0)*r02*x9187))+(((-1.0)*x9197)));
evalcond[1]=((((-1.0)*gconst2*r20*x9204))+((x9186*x9196)));
evalcond[2]=(cj0+(((-1.0)*x9198*x9204))+((x9186*x9189)));
evalcond[3]=((((-1.0)*cj0*x9190))+((cj0*x9188))+((cj3*x9199)));
evalcond[4]=((((-1.0)*cj0*x9201))+(((-1.0)*cj0*x9200))+((sj3*x9199)));
evalcond[5]=(((sj3*x9193))+((sj3*x9194))+((x9196*x9203))+(((-1.0)*gconst2*r20*x9187*x9191))+(((-1.0)*x9200))+(((-1.0)*x9201)));
evalcond[6]=((((-1.0)*x9191*x9194))+(((-1.0)*x9191*x9193))+x9190+(((-1.0)*gconst2*r20*x9202))+((x9196*x9202))+(((-1.0)*x9188)));
evalcond[7]=((((-1.0)*x9187*x9191*x9198))+((sj0*x9188))+((sj3*x9195))+((sj3*x9192))+(((-1.0)*x9190*x9197))+((x9189*x9203)));
evalcond[8]=((((-1.0)*x9191*x9195))+(((-1.0)*x9191*x9192))+(((-1.0)*x9198*x9202))+(((-1.0)*cj2*sj1*x9197))+((x9189*x9202))+(((-1.0)*cj1*sj2*x9197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9206=((1.0)*sj3);
IkReal x9207=((1.0)*gconst2);
CheckValue<IkReal> x9208=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x9207))),-1);
if(!x9208.valid){
continue;
}
CheckValue<IkReal> x9209=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9207))),-1);
if(!x9209.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9208.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9209.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r20*x9206))+(((-1.0)*gconst2*r21*x9206)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9208.value)))+IKsqr(((x9209.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r20*x9206))+(((-1.0)*gconst2*r21*x9206))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9208.value)), ((x9209.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r20*x9206))+(((-1.0)*gconst2*r21*x9206))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9210=IKsin(j4);
IkReal x9211=IKcos(j4);
IkReal x9212=(cj1*cj2);
IkReal x9213=(gconst1*r11);
IkReal x9214=(sj1*sj2);
IkReal x9215=((1.0)*cj3);
IkReal x9216=(gconst1*r10);
IkReal x9217=(gconst2*r21);
IkReal x9218=(gconst1*r20);
IkReal x9219=(gconst2*r11);
IkReal x9220=(gconst1*r21);
IkReal x9221=((1.0)*sj0);
IkReal x9222=(gconst2*r10);
IkReal x9223=(r02*x9210);
IkReal x9224=((1.0)*cj2*sj1);
IkReal x9225=((1.0)*cj1*sj2);
IkReal x9226=(sj3*x9211);
IkReal x9227=(cj3*x9211);
IkReal x9228=((1.0)*x9210);
IkReal x9229=((1.0)*gconst2*r20*x9211);
evalcond[0]=((((-1.0)*x9221))+(((-1.0)*r02*x9211)));
evalcond[1]=((((-1.0)*gconst2*r20*x9228))+((x9210*x9220)));
evalcond[2]=(cj0+((x9210*x9213))+(((-1.0)*x9222*x9228)));
evalcond[3]=((((-1.0)*cj0*x9214))+((cj0*x9212))+((cj3*x9223)));
evalcond[4]=((((-1.0)*cj0*x9225))+(((-1.0)*cj0*x9224))+((sj3*x9223)));
evalcond[5]=((((-1.0)*x9224))+(((-1.0)*x9225))+((sj3*x9218))+((sj3*x9217))+((x9220*x9227))+(((-1.0)*gconst2*r20*x9211*x9215)));
evalcond[6]=(x9214+(((-1.0)*gconst2*r20*x9226))+((x9220*x9226))+(((-1.0)*x9212))+(((-1.0)*x9215*x9218))+(((-1.0)*x9215*x9217)));
evalcond[7]=(((x9213*x9227))+((sj3*x9216))+((sj3*x9219))+((sj0*x9212))+(((-1.0)*x9211*x9215*x9222))+(((-1.0)*x9214*x9221)));
evalcond[8]=(((x9213*x9226))+(((-1.0)*x9222*x9226))+(((-1.0)*cj2*sj1*x9221))+(((-1.0)*cj1*sj2*x9221))+(((-1.0)*x9215*x9219))+(((-1.0)*x9215*x9216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9230=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9230.valid){
continue;
}
CheckValue<IkReal> x9231=IKPowWithIntegerCheck(r02,-1);
if(!x9231.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9230.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9231.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9230.value)))+IKsqr(((-1.0)*sj0*(x9231.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9230.value)), ((-1.0)*sj0*(x9231.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9232=IKsin(j4);
IkReal x9233=IKcos(j4);
IkReal x9234=(cj1*cj2);
IkReal x9235=(gconst1*r11);
IkReal x9236=(sj1*sj2);
IkReal x9237=((1.0)*cj3);
IkReal x9238=(gconst1*r10);
IkReal x9239=(gconst2*r21);
IkReal x9240=(gconst1*r20);
IkReal x9241=(gconst2*r11);
IkReal x9242=(gconst1*r21);
IkReal x9243=((1.0)*sj0);
IkReal x9244=(gconst2*r10);
IkReal x9245=(r02*x9232);
IkReal x9246=((1.0)*cj2*sj1);
IkReal x9247=((1.0)*cj1*sj2);
IkReal x9248=(sj3*x9233);
IkReal x9249=(cj3*x9233);
IkReal x9250=((1.0)*x9232);
IkReal x9251=((1.0)*gconst2*r20*x9233);
evalcond[0]=((((-1.0)*r02*x9233))+(((-1.0)*x9243)));
evalcond[1]=(((x9232*x9242))+(((-1.0)*gconst2*r20*x9250)));
evalcond[2]=((((-1.0)*x9244*x9250))+cj0+((x9232*x9235)));
evalcond[3]=(((cj3*x9245))+((cj0*x9234))+(((-1.0)*cj0*x9236)));
evalcond[4]=(((sj3*x9245))+(((-1.0)*cj0*x9246))+(((-1.0)*cj0*x9247)));
evalcond[5]=(((sj3*x9239))+((sj3*x9240))+((x9242*x9249))+(((-1.0)*x9246))+(((-1.0)*x9247))+(((-1.0)*gconst2*r20*x9233*x9237)));
evalcond[6]=((((-1.0)*x9237*x9239))+x9236+(((-1.0)*x9237*x9240))+((x9242*x9248))+(((-1.0)*gconst2*r20*x9248))+(((-1.0)*x9234)));
evalcond[7]=(((sj3*x9238))+(((-1.0)*x9236*x9243))+((sj3*x9241))+(((-1.0)*x9233*x9237*x9244))+((x9235*x9249))+((sj0*x9234)));
evalcond[8]=((((-1.0)*x9237*x9238))+(((-1.0)*x9237*x9241))+(((-1.0)*cj2*sj1*x9243))+(((-1.0)*cj1*sj2*x9243))+((x9235*x9248))+(((-1.0)*x9244*x9248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9252=gconst1*gconst1;
IkReal x9253=r21*r21;
IkReal x9254=gconst2*gconst2;
IkReal x9255=r20*r20;
IkReal x9256=(gconst2*sj3);
IkReal x9257=((1.0)*r22);
IkReal x9258=(cj1*sj2);
IkReal x9259=(gconst2*r20);
IkReal x9260=(cj2*sj1);
IkReal x9261=(gconst1*r21);
IkReal x9262=((1.0)*cj3);
IkReal x9263=((1.0)*x9254);
IkReal x9264=(r20*r21*sj3);
CheckValue<IkReal> x9265 = IKatan2WithCheck(IkReal(((((-1.0)*x9257*x9260))+((gconst1*r20*r22*sj3))+(((-1.0)*x9257*x9258))+((r21*r22*x9256)))),IkReal((((x9252*x9264))+((x9258*x9259))+((gconst1*x9253*x9256))+((x9259*x9260))+(((-1.0)*x9258*x9261))+(((-1.0)*x9263*x9264))+(((-1.0)*gconst1*x9255*x9256))+(((-1.0)*x9260*x9261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9265.valid){
continue;
}
CheckValue<IkReal> x9266=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r22*x9257))+(((2.0)*cj3*x9259*x9261))+(((-1.0)*x9254*x9255*x9262))+(((-1.0)*x9252*x9253*x9262)))),-1);
if(!x9266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9265.value)+(((1.5707963267949)*(x9266.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9267=IKsin(j4);
IkReal x9268=IKcos(j4);
IkReal x9269=(gconst2*sj3);
IkReal x9270=(gconst1*r01);
IkReal x9271=(cj1*cj2);
IkReal x9272=(gconst1*r11);
IkReal x9273=(sj1*sj2);
IkReal x9274=((1.0)*cj3);
IkReal x9275=(gconst1*r10);
IkReal x9276=(cj3*gconst2);
IkReal x9277=(gconst1*r20);
IkReal x9278=(gconst1*r21);
IkReal x9279=((1.0)*sj0);
IkReal x9280=(gconst1*r00);
IkReal x9281=((1.0)*x9268);
IkReal x9282=(sj3*x9268);
IkReal x9283=(cj3*x9267);
IkReal x9284=(sj3*x9267);
IkReal x9285=((1.0)*cj2*sj1);
IkReal x9286=((1.0)*cj1*sj2);
IkReal x9287=(cj3*x9268);
IkReal x9288=((1.0)*gconst2*x9267);
evalcond[0]=((((-1.0)*r22*x9281))+((x9267*x9278))+(((-1.0)*r20*x9288)));
evalcond[1]=((((-1.0)*r12*x9281))+cj0+((x9267*x9272))+(((-1.0)*r10*x9288)));
evalcond[2]=((((-1.0)*x9279))+((x9267*x9270))+(((-1.0)*r02*x9281))+(((-1.0)*r00*x9288)));
evalcond[3]=(((r22*x9283))+(((-1.0)*x9285))+(((-1.0)*x9286))+(((-1.0)*gconst2*r20*x9268*x9274))+((sj3*x9277))+((r21*x9269))+((x9278*x9287)));
evalcond[4]=(((r22*x9284))+x9273+(((-1.0)*x9274*x9277))+(((-1.0)*x9271))+(((-1.0)*r20*x9269*x9281))+(((-1.0)*gconst2*r21*x9274))+((x9278*x9282)));
evalcond[5]=(((cj0*x9271))+((r02*x9283))+((x9270*x9287))+((r01*x9269))+(((-1.0)*gconst2*r00*x9268*x9274))+(((-1.0)*cj0*x9273))+((sj3*x9280)));
evalcond[6]=(((sj0*x9271))+(((-1.0)*gconst2*r10*x9268*x9274))+(((-1.0)*x9273*x9279))+((x9272*x9287))+((sj3*x9275))+((r12*x9283))+((r11*x9269)));
evalcond[7]=(((r02*x9284))+(((-1.0)*gconst2*r01*x9274))+((x9270*x9282))+(((-1.0)*r00*x9269*x9281))+(((-1.0)*cj0*x9285))+(((-1.0)*cj0*x9286))+(((-1.0)*x9274*x9280)));
evalcond[8]=((((-1.0)*cj1*sj2*x9279))+(((-1.0)*r10*x9269*x9281))+((x9272*x9282))+(((-1.0)*gconst2*r11*x9274))+(((-1.0)*x9274*x9275))+((r12*x9284))+(((-1.0)*cj2*sj1*x9279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9289=((1.0)*gconst2);
CheckValue<IkReal> x9290 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9289))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9290.valid){
continue;
}
CheckValue<IkReal> x9291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9289))+(((-1.0)*gconst1*r10)))),-1);
if(!x9291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9290.value)+(((1.5707963267949)*(x9291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9292=IKsin(j4);
IkReal x9293=IKcos(j4);
IkReal x9294=(gconst2*sj3);
IkReal x9295=(gconst1*r01);
IkReal x9296=(cj1*cj2);
IkReal x9297=(gconst1*r11);
IkReal x9298=(sj1*sj2);
IkReal x9299=((1.0)*cj3);
IkReal x9300=(gconst1*r10);
IkReal x9301=(cj3*gconst2);
IkReal x9302=(gconst1*r20);
IkReal x9303=(gconst1*r21);
IkReal x9304=((1.0)*sj0);
IkReal x9305=(gconst1*r00);
IkReal x9306=((1.0)*x9293);
IkReal x9307=(sj3*x9293);
IkReal x9308=(cj3*x9292);
IkReal x9309=(sj3*x9292);
IkReal x9310=((1.0)*cj2*sj1);
IkReal x9311=((1.0)*cj1*sj2);
IkReal x9312=(cj3*x9293);
IkReal x9313=((1.0)*gconst2*x9292);
evalcond[0]=((((-1.0)*r20*x9313))+((x9292*x9303))+(((-1.0)*r22*x9306)));
evalcond[1]=(cj0+((x9292*x9297))+(((-1.0)*r10*x9313))+(((-1.0)*r12*x9306)));
evalcond[2]=((((-1.0)*r00*x9313))+((x9292*x9295))+(((-1.0)*x9304))+(((-1.0)*r02*x9306)));
evalcond[3]=((((-1.0)*gconst2*r20*x9293*x9299))+((r22*x9308))+(((-1.0)*x9310))+(((-1.0)*x9311))+((r21*x9294))+((x9303*x9312))+((sj3*x9302)));
evalcond[4]=(((r22*x9309))+x9298+(((-1.0)*x9296))+(((-1.0)*x9299*x9302))+((x9303*x9307))+(((-1.0)*gconst2*r21*x9299))+(((-1.0)*r20*x9294*x9306)));
evalcond[5]=(((r02*x9308))+(((-1.0)*gconst2*r00*x9293*x9299))+((r01*x9294))+((x9295*x9312))+(((-1.0)*cj0*x9298))+((cj0*x9296))+((sj3*x9305)));
evalcond[6]=(((r11*x9294))+((x9297*x9312))+(((-1.0)*gconst2*r10*x9293*x9299))+((r12*x9308))+(((-1.0)*x9298*x9304))+((sj0*x9296))+((sj3*x9300)));
evalcond[7]=((((-1.0)*gconst2*r01*x9299))+((r02*x9309))+(((-1.0)*r00*x9294*x9306))+((x9295*x9307))+(((-1.0)*x9299*x9305))+(((-1.0)*cj0*x9310))+(((-1.0)*cj0*x9311)));
evalcond[8]=((((-1.0)*cj2*sj1*x9304))+(((-1.0)*cj1*sj2*x9304))+((x9297*x9307))+(((-1.0)*gconst2*r11*x9299))+(((-1.0)*x9299*x9300))+((r12*x9309))+(((-1.0)*r10*x9294*x9306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9314=((1.0)*gconst2);
CheckValue<IkReal> x9315 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9315.valid){
continue;
}
CheckValue<IkReal> x9316=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9314)))),-1);
if(!x9316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9315.value)+(((1.5707963267949)*(x9316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9317=IKsin(j4);
IkReal x9318=IKcos(j4);
IkReal x9319=(gconst2*sj3);
IkReal x9320=(gconst1*r01);
IkReal x9321=(cj1*cj2);
IkReal x9322=(gconst1*r11);
IkReal x9323=(sj1*sj2);
IkReal x9324=((1.0)*cj3);
IkReal x9325=(gconst1*r10);
IkReal x9326=(cj3*gconst2);
IkReal x9327=(gconst1*r20);
IkReal x9328=(gconst1*r21);
IkReal x9329=((1.0)*sj0);
IkReal x9330=(gconst1*r00);
IkReal x9331=((1.0)*x9318);
IkReal x9332=(sj3*x9318);
IkReal x9333=(cj3*x9317);
IkReal x9334=(sj3*x9317);
IkReal x9335=((1.0)*cj2*sj1);
IkReal x9336=((1.0)*cj1*sj2);
IkReal x9337=(cj3*x9318);
IkReal x9338=((1.0)*gconst2*x9317);
evalcond[0]=(((x9317*x9328))+(((-1.0)*r22*x9331))+(((-1.0)*r20*x9338)));
evalcond[1]=(((x9317*x9322))+(((-1.0)*r12*x9331))+cj0+(((-1.0)*r10*x9338)));
evalcond[2]=((((-1.0)*x9329))+((x9317*x9320))+(((-1.0)*r02*x9331))+(((-1.0)*r00*x9338)));
evalcond[3]=(((x9328*x9337))+((sj3*x9327))+((r21*x9319))+((r22*x9333))+(((-1.0)*x9335))+(((-1.0)*x9336))+(((-1.0)*gconst2*r20*x9318*x9324)));
evalcond[4]=((((-1.0)*x9321))+x9323+((x9328*x9332))+(((-1.0)*x9324*x9327))+((r22*x9334))+(((-1.0)*gconst2*r21*x9324))+(((-1.0)*r20*x9319*x9331)));
evalcond[5]=(((cj0*x9321))+((sj3*x9330))+(((-1.0)*gconst2*r00*x9318*x9324))+((r02*x9333))+((r01*x9319))+(((-1.0)*cj0*x9323))+((x9320*x9337)));
evalcond[6]=(((sj0*x9321))+((sj3*x9325))+((r12*x9333))+(((-1.0)*gconst2*r10*x9318*x9324))+(((-1.0)*x9323*x9329))+((r11*x9319))+((x9322*x9337)));
evalcond[7]=((((-1.0)*gconst2*r01*x9324))+(((-1.0)*x9324*x9330))+(((-1.0)*cj0*x9336))+(((-1.0)*cj0*x9335))+(((-1.0)*r00*x9319*x9331))+((r02*x9334))+((x9320*x9332)));
evalcond[8]=((((-1.0)*r10*x9319*x9331))+(((-1.0)*x9324*x9325))+(((-1.0)*gconst2*r11*x9324))+((r12*x9334))+(((-1.0)*cj2*sj1*x9329))+(((-1.0)*cj1*sj2*x9329))+((x9322*x9332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9339=((-1.0)*r21);
IkReal x9341 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9341)==0){
continue;
}
IkReal x9340=pow(x9341,-0.5);
CheckValue<IkReal> x9342 = IKatan2WithCheck(IkReal(x9339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9342.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9342.value))));
IkReal gconst4=(x9339*x9340);
IkReal gconst5=((1.0)*r20*x9340);
CheckValue<IkReal> x9343 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9343.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9343.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9344=((-1.0)*r21);
CheckValue<IkReal> x9347 = IKatan2WithCheck(IkReal(x9344),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9347.valid){
continue;
}
IkReal x9345=((1.0)*(x9347.value));
IkReal x9346=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9345)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9345)));
IkReal gconst4=(x9344*x9346);
IkReal gconst5=((1.0)*r20*x9346);
IkReal x9348=r22*r22;
IkReal x9349=((1.0)*x9348);
CheckValue<IkReal> x9353=IKPowWithIntegerCheck(((-1.0)+x9348),-1);
if(!x9353.valid){
continue;
}
IkReal x9350=x9353.value;
if((((1.0)+(((-1.0)*x9349)))) < -0.00001)
continue;
IkReal x9351=IKsqrt(((1.0)+(((-1.0)*x9349))));
IkReal x9352=(cj0*x9350*x9351);
j4eval[0]=((IKabs((x9352+(((-1.0)*x9349*x9352)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9354=((-1.0)*r21);
CheckValue<IkReal> x9357 = IKatan2WithCheck(IkReal(x9354),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9357.valid){
continue;
}
IkReal x9355=((1.0)*(x9357.value));
IkReal x9356=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9355)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9355)));
IkReal gconst4=(x9354*x9356);
IkReal gconst5=((1.0)*r20*x9356);
IkReal x9358=r22*r22;
IkReal x9359=((1.0)*x9358);
CheckValue<IkReal> x9363=IKPowWithIntegerCheck(((-1.0)+x9358),-1);
if(!x9363.valid){
continue;
}
IkReal x9360=x9363.value;
if((((1.0)+(((-1.0)*x9359)))) < -0.00001)
continue;
IkReal x9361=IKsqrt(((1.0)+(((-1.0)*x9359))));
IkReal x9362=(sj0*x9360*x9361);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x9362+(((-1.0)*x9359*x9362))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9364=((-1.0)*r21);
CheckValue<IkReal> x9367 = IKatan2WithCheck(IkReal(x9364),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9367.valid){
continue;
}
IkReal x9365=((1.0)*(x9367.value));
IkReal x9366=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9365)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9365)));
IkReal gconst4=(x9364*x9366);
IkReal gconst5=((1.0)*r20*x9366);
IkReal x9368=r22*r22;
IkReal x9369=(r12*sj0);
IkReal x9370=(cj0*r02);
CheckValue<IkReal> x9374=IKPowWithIntegerCheck(((-1.0)+x9368),-1);
if(!x9374.valid){
continue;
}
IkReal x9371=x9374.value;
if((((1.0)+(((-1.0)*x9368)))) < -0.00001)
continue;
IkReal x9372=IKsqrt(((1.0)+(((-1.0)*x9368))));
IkReal x9373=(r22*x9371*x9372);
j4eval[0]=0;
j4eval[1]=((IKabs((((x9369*x9373))+((x9370*x9373)))))+(IKabs(((((-1.0)*x9369))+(((-1.0)*x9370))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9375=((-1.0)*r21);
CheckValue<IkReal> x9378 = IKatan2WithCheck(IkReal(x9375),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9378.valid){
continue;
}
IkReal x9376=((1.0)*(x9378.value));
IkReal x9377=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9376)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9376)));
IkReal gconst4=(x9375*x9377);
IkReal gconst5=((1.0)*r20*x9377);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9379=((-1.0)*r21);
CheckValue<IkReal> x9382 = IKatan2WithCheck(IkReal(x9379),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9382.valid){
continue;
}
IkReal x9380=((1.0)*(x9382.value));
IkReal x9381=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9380)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9380)));
IkReal gconst4=(x9379*x9381);
IkReal gconst5=((1.0)*r20*x9381);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9383=((-1.0)*r21);
CheckValue<IkReal> x9386 = IKatan2WithCheck(IkReal(x9383),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9386.valid){
continue;
}
IkReal x9384=((1.0)*(x9386.value));
IkReal x9385=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9384)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9384)));
IkReal gconst4=(x9383*x9385);
IkReal gconst5=((1.0)*r20*x9385);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9387=((-1.0)*r21);
CheckValue<IkReal> x9390 = IKatan2WithCheck(IkReal(x9387),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9390.valid){
continue;
}
IkReal x9388=((1.0)*(x9390.value));
IkReal x9389=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9388)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9388)));
IkReal gconst4=(x9387*x9389);
IkReal gconst5=((1.0)*r20*x9389);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9391=((-1.0)*r21);
CheckValue<IkReal> x9394 = IKatan2WithCheck(IkReal(x9391),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9394.valid){
continue;
}
IkReal x9392=((1.0)*(x9394.value));
IkReal x9393=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9392)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9392)));
IkReal gconst4=(x9391*x9393);
IkReal gconst5=((1.0)*r20*x9393);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9395=((-1.0)*r21);
CheckValue<IkReal> x9398 = IKatan2WithCheck(IkReal(x9395),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9398.valid){
continue;
}
IkReal x9396=((1.0)*(x9398.value));
IkReal x9397=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9396)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9396)));
IkReal gconst4=(x9395*x9397);
IkReal gconst5=((1.0)*r20*x9397);
IkReal x9399=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9403=IKPowWithIntegerCheck(x9399,-1);
if(!x9403.valid){
continue;
}
IkReal x9400=x9403.value;
IkReal x9401=((1.0)*x9400);
IkReal x9402=((((-1.0)*x9401*(r10*r10)*(r20*r20)))+(((-1.0)*x9401*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9400))+(((-1.0)*(r12*r12))));
j4eval[0]=x9402;
j4eval[1]=r12;
j4eval[2]=x9399;
j4eval[3]=IKsign(x9402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9404=(gconst5*r10);
IkReal x9405=(gconst4*r11);
CheckValue<IkReal> x9406=IKPowWithIntegerCheck(IKsign(((((2.0)*x9404*x9405))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9405*x9405)))+(((-1.0)*(x9404*x9404))))),-1);
if(!x9406.valid){
continue;
}
CheckValue<IkReal> x9407 = IKatan2WithCheck(IkReal(((((-1.0)*x9404))+x9405)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9406.value)))+(x9407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9408=IKcos(j4);
IkReal x9409=IKsin(j4);
IkReal x9410=(gconst4*r11);
IkReal x9411=(gconst5*r10);
IkReal x9412=((1.0)*cj1);
IkReal x9413=(gconst5*r00);
IkReal x9414=(gconst5*r20);
IkReal x9415=((1.0)*x9408);
IkReal x9416=(gconst4*x9408);
IkReal x9417=((1.0)*x9409);
IkReal x9418=(gconst4*x9409);
evalcond[0]=(((r12*x9409))+((x9408*x9410))+(((-1.0)*x9411*x9415)));
evalcond[1]=(((r21*x9418))+(((-1.0)*x9414*x9417))+(((-1.0)*r22*x9415)));
evalcond[2]=((((-1.0)*r02*x9415))+((r01*x9418))+(((-1.0)*x9413*x9417)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9415))+((x9409*x9410))+(((-1.0)*x9411*x9417)));
evalcond[4]=(((r22*x9409))+((r21*x9416))+(((-1.0)*cj2*x9412))+(((-1.0)*x9414*x9415))+((sj1*sj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x9416))+(((-1.0)*sj2*x9412))+((r02*x9409))+(((-1.0)*x9413*x9415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9419=((1.0)*gconst5);
CheckValue<IkReal> x9420 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9419))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9420.valid){
continue;
}
CheckValue<IkReal> x9421=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9419)))),-1);
if(!x9421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9420.value)+(((1.5707963267949)*(x9421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9422=IKcos(j4);
IkReal x9423=IKsin(j4);
IkReal x9424=(gconst4*r11);
IkReal x9425=(gconst5*r10);
IkReal x9426=((1.0)*cj1);
IkReal x9427=(gconst5*r00);
IkReal x9428=(gconst5*r20);
IkReal x9429=((1.0)*x9422);
IkReal x9430=(gconst4*x9422);
IkReal x9431=((1.0)*x9423);
IkReal x9432=(gconst4*x9423);
evalcond[0]=(((r12*x9423))+(((-1.0)*x9425*x9429))+((x9422*x9424)));
evalcond[1]=((((-1.0)*x9428*x9431))+((r21*x9432))+(((-1.0)*r22*x9429)));
evalcond[2]=((((-1.0)*x9427*x9431))+(((-1.0)*r02*x9429))+((r01*x9432)));
evalcond[3]=((1.0)+(((-1.0)*x9425*x9431))+((x9423*x9424))+(((-1.0)*r12*x9429)));
evalcond[4]=((((-1.0)*x9428*x9429))+((sj1*sj2))+(((-1.0)*cj2*x9426))+((r21*x9430))+((r22*x9423)));
evalcond[5]=((((-1.0)*sj2*x9426))+(((-1.0)*cj2*sj1))+((r02*x9423))+((r01*x9430))+(((-1.0)*x9427*x9429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9433 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9433.valid){
continue;
}
CheckValue<IkReal> x9434=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9433.value)+(((1.5707963267949)*(x9434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9435=IKcos(j4);
IkReal x9436=IKsin(j4);
IkReal x9437=(gconst4*r11);
IkReal x9438=(gconst5*r10);
IkReal x9439=((1.0)*cj1);
IkReal x9440=(gconst5*r00);
IkReal x9441=(gconst5*r20);
IkReal x9442=((1.0)*x9435);
IkReal x9443=(gconst4*x9435);
IkReal x9444=((1.0)*x9436);
IkReal x9445=(gconst4*x9436);
evalcond[0]=((((-1.0)*x9438*x9442))+((x9435*x9437))+((r12*x9436)));
evalcond[1]=(((r21*x9445))+(((-1.0)*x9441*x9444))+(((-1.0)*r22*x9442)));
evalcond[2]=(((r01*x9445))+(((-1.0)*x9440*x9444))+(((-1.0)*r02*x9442)));
evalcond[3]=((1.0)+((x9436*x9437))+(((-1.0)*x9438*x9444))+(((-1.0)*r12*x9442)));
evalcond[4]=(((r22*x9436))+((sj1*sj2))+((r21*x9443))+(((-1.0)*x9441*x9442))+(((-1.0)*cj2*x9439)));
evalcond[5]=(((r01*x9443))+(((-1.0)*sj2*x9439))+(((-1.0)*cj2*sj1))+((r02*x9436))+(((-1.0)*x9440*x9442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9446=((-1.0)*r21);
CheckValue<IkReal> x9449 = IKatan2WithCheck(IkReal(x9446),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9449.valid){
continue;
}
IkReal x9447=((1.0)*(x9449.value));
IkReal x9448=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9447)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9447)));
IkReal gconst4=(x9446*x9448);
IkReal gconst5=((1.0)*r20*x9448);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9450=((-1.0)*r21);
CheckValue<IkReal> x9453 = IKatan2WithCheck(IkReal(x9450),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9453.valid){
continue;
}
IkReal x9451=((1.0)*(x9453.value));
IkReal x9452=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9451)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9451)));
IkReal gconst4=(x9450*x9452);
IkReal gconst5=((1.0)*r20*x9452);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9454=((-1.0)*r21);
CheckValue<IkReal> x9457 = IKatan2WithCheck(IkReal(x9454),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9457.valid){
continue;
}
IkReal x9455=((1.0)*(x9457.value));
IkReal x9456=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9455)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9455)));
IkReal gconst4=(x9454*x9456);
IkReal gconst5=((1.0)*r20*x9456);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9458=(gconst5*r10);
IkReal x9459=(gconst4*r11);
CheckValue<IkReal> x9460 = IKatan2WithCheck(IkReal(((((-1.0)*x9459))+x9458)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9460.valid){
continue;
}
CheckValue<IkReal> x9461=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9458*x9459))+(x9459*x9459)+(x9458*x9458))),-1);
if(!x9461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9460.value)+(((1.5707963267949)*(x9461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9462=IKsin(j4);
IkReal x9463=IKcos(j4);
IkReal x9464=(gconst4*r11);
IkReal x9465=((1.0)*cj1);
IkReal x9466=(gconst5*r10);
IkReal x9467=(gconst4*r01);
IkReal x9468=(gconst5*r00);
IkReal x9469=(gconst4*r21);
IkReal x9470=(gconst5*r20);
IkReal x9471=((1.0)*x9463);
IkReal x9472=((1.0)*x9462);
evalcond[0]=((((-1.0)*x9470*x9472))+(((-1.0)*r22*x9471))+((x9462*x9469)));
evalcond[1]=((((-1.0)*r02*x9471))+(((-1.0)*x9468*x9472))+((x9462*x9467)));
evalcond[2]=(((x9463*x9466))+(((-1.0)*r12*x9472))+(((-1.0)*x9464*x9471)));
evalcond[3]=((1.0)+(((-1.0)*x9466*x9472))+(((-1.0)*r12*x9471))+((x9462*x9464)));
evalcond[4]=((((-1.0)*cj2*x9465))+((sj1*sj2))+((x9463*x9470))+(((-1.0)*x9469*x9471))+(((-1.0)*r22*x9472)));
evalcond[5]=((((-1.0)*r02*x9472))+(((-1.0)*cj2*sj1))+((x9463*x9468))+(((-1.0)*sj2*x9465))+(((-1.0)*x9467*x9471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9473=((1.0)*gconst5);
CheckValue<IkReal> x9474=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9473)))),-1);
if(!x9474.valid){
continue;
}
CheckValue<IkReal> x9475 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x9473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9474.value)))+(x9475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9476=IKsin(j4);
IkReal x9477=IKcos(j4);
IkReal x9478=(gconst4*r11);
IkReal x9479=((1.0)*cj1);
IkReal x9480=(gconst5*r10);
IkReal x9481=(gconst4*r01);
IkReal x9482=(gconst5*r00);
IkReal x9483=(gconst4*r21);
IkReal x9484=(gconst5*r20);
IkReal x9485=((1.0)*x9477);
IkReal x9486=((1.0)*x9476);
evalcond[0]=(((x9476*x9483))+(((-1.0)*x9484*x9486))+(((-1.0)*r22*x9485)));
evalcond[1]=(((x9476*x9481))+(((-1.0)*r02*x9485))+(((-1.0)*x9482*x9486)));
evalcond[2]=(((x9477*x9480))+(((-1.0)*x9478*x9485))+(((-1.0)*r12*x9486)));
evalcond[3]=((1.0)+(((-1.0)*x9480*x9486))+((x9476*x9478))+(((-1.0)*r12*x9485)));
evalcond[4]=(((x9477*x9484))+(((-1.0)*cj2*x9479))+((sj1*sj2))+(((-1.0)*r22*x9486))+(((-1.0)*x9483*x9485)));
evalcond[5]=(((x9477*x9482))+(((-1.0)*r02*x9486))+(((-1.0)*x9481*x9485))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9487 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9487.valid){
continue;
}
CheckValue<IkReal> x9488=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9487.value)+(((1.5707963267949)*(x9488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9489=IKsin(j4);
IkReal x9490=IKcos(j4);
IkReal x9491=(gconst4*r11);
IkReal x9492=((1.0)*cj1);
IkReal x9493=(gconst5*r10);
IkReal x9494=(gconst4*r01);
IkReal x9495=(gconst5*r00);
IkReal x9496=(gconst4*r21);
IkReal x9497=(gconst5*r20);
IkReal x9498=((1.0)*x9490);
IkReal x9499=((1.0)*x9489);
evalcond[0]=(((x9489*x9496))+(((-1.0)*r22*x9498))+(((-1.0)*x9497*x9499)));
evalcond[1]=(((x9489*x9494))+(((-1.0)*r02*x9498))+(((-1.0)*x9495*x9499)));
evalcond[2]=((((-1.0)*x9491*x9498))+((x9490*x9493))+(((-1.0)*r12*x9499)));
evalcond[3]=((1.0)+((x9489*x9491))+(((-1.0)*x9493*x9499))+(((-1.0)*r12*x9498)));
evalcond[4]=((((-1.0)*r22*x9499))+((x9490*x9497))+(((-1.0)*x9496*x9498))+((sj1*sj2))+(((-1.0)*cj2*x9492)));
evalcond[5]=((((-1.0)*r02*x9499))+(((-1.0)*cj2*sj1))+((x9490*x9495))+(((-1.0)*x9494*x9498))+(((-1.0)*sj2*x9492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9500=((-1.0)*r21);
CheckValue<IkReal> x9503 = IKatan2WithCheck(IkReal(x9500),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9503.valid){
continue;
}
IkReal x9501=((1.0)*(x9503.value));
IkReal x9502=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9501)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9501)));
IkReal gconst4=(x9500*x9502);
IkReal gconst5=((1.0)*r20*x9502);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9504=((-1.0)*r21);
CheckValue<IkReal> x9507 = IKatan2WithCheck(IkReal(x9504),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9507.valid){
continue;
}
IkReal x9505=((1.0)*(x9507.value));
IkReal x9506=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9505)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9505)));
IkReal gconst4=(x9504*x9506);
IkReal gconst5=((1.0)*r20*x9506);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9508=((-1.0)*r21);
CheckValue<IkReal> x9511 = IKatan2WithCheck(IkReal(x9508),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9511.valid){
continue;
}
IkReal x9509=((1.0)*(x9511.value));
IkReal x9510=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9509)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9509)));
IkReal gconst4=(x9508*x9510);
IkReal gconst5=((1.0)*r20*x9510);
IkReal x9512=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9516=IKPowWithIntegerCheck(x9512,-1);
if(!x9516.valid){
continue;
}
IkReal x9513=x9516.value;
IkReal x9514=((1.0)*x9513);
IkReal x9515=((((-1.0)*x9514*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9513))+(((-1.0)*x9514*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x9515;
j4eval[1]=r12;
j4eval[2]=x9512;
j4eval[3]=IKsign(x9515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9517=(gconst5*r10);
IkReal x9518=(gconst4*r11);
CheckValue<IkReal> x9519 = IKatan2WithCheck(IkReal(((((-1.0)*x9517))+x9518)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9519.valid){
continue;
}
CheckValue<IkReal> x9520=IKPowWithIntegerCheck(IKsign(((((2.0)*x9517*x9518))+(((-1.0)*(x9517*x9517)))+(((-1.0)*(x9518*x9518)))+(((-1.0)*(r12*r12))))),-1);
if(!x9520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9519.value)+(((1.5707963267949)*(x9520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9521=IKcos(j4);
IkReal x9522=IKsin(j4);
IkReal x9523=(gconst5*r10);
IkReal x9524=((1.0)*sj2);
IkReal x9525=(gconst5*r00);
IkReal x9526=(gconst5*r20);
IkReal x9527=((1.0)*x9521);
IkReal x9528=(gconst4*x9522);
IkReal x9529=(gconst4*x9521);
IkReal x9530=((1.0)*x9522);
evalcond[0]=(((r12*x9522))+((r11*x9529))+(((-1.0)*x9523*x9527)));
evalcond[1]=((((-1.0)*r22*x9527))+(((-1.0)*x9526*x9530))+((r21*x9528)));
evalcond[2]=((((-1.0)*x9525*x9530))+(((-1.0)*r02*x9527))+((r01*x9528)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9527))+((r11*x9528))+(((-1.0)*x9523*x9530)));
evalcond[4]=(((r02*x9522))+(((-1.0)*x9525*x9527))+((r01*x9529))+((cj1*cj2))+(((-1.0)*sj1*x9524)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x9526*x9527))+((r21*x9529))+(((-1.0)*cj1*x9524))+((r22*x9522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9531=((1.0)*gconst5);
CheckValue<IkReal> x9532 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9531))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9532.valid){
continue;
}
CheckValue<IkReal> x9533=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9531)))),-1);
if(!x9533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9532.value)+(((1.5707963267949)*(x9533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9534=IKcos(j4);
IkReal x9535=IKsin(j4);
IkReal x9536=(gconst5*r10);
IkReal x9537=((1.0)*sj2);
IkReal x9538=(gconst5*r00);
IkReal x9539=(gconst5*r20);
IkReal x9540=((1.0)*x9534);
IkReal x9541=(gconst4*x9535);
IkReal x9542=(gconst4*x9534);
IkReal x9543=((1.0)*x9535);
evalcond[0]=((((-1.0)*x9536*x9540))+((r11*x9542))+((r12*x9535)));
evalcond[1]=((((-1.0)*r22*x9540))+(((-1.0)*x9539*x9543))+((r21*x9541)));
evalcond[2]=((((-1.0)*r02*x9540))+((r01*x9541))+(((-1.0)*x9538*x9543)));
evalcond[3]=((1.0)+(((-1.0)*x9536*x9543))+(((-1.0)*r12*x9540))+((r11*x9541)));
evalcond[4]=(((r02*x9535))+((r01*x9542))+(((-1.0)*x9538*x9540))+((cj1*cj2))+(((-1.0)*sj1*x9537)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x9539*x9540))+((r22*x9535))+((r21*x9542))+(((-1.0)*cj1*x9537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9544 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9544.valid){
continue;
}
CheckValue<IkReal> x9545=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9544.value)+(((1.5707963267949)*(x9545.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9546=IKcos(j4);
IkReal x9547=IKsin(j4);
IkReal x9548=(gconst5*r10);
IkReal x9549=((1.0)*sj2);
IkReal x9550=(gconst5*r00);
IkReal x9551=(gconst5*r20);
IkReal x9552=((1.0)*x9546);
IkReal x9553=(gconst4*x9547);
IkReal x9554=(gconst4*x9546);
IkReal x9555=((1.0)*x9547);
evalcond[0]=(((r11*x9554))+((r12*x9547))+(((-1.0)*x9548*x9552)));
evalcond[1]=((((-1.0)*x9551*x9555))+(((-1.0)*r22*x9552))+((r21*x9553)));
evalcond[2]=((((-1.0)*r02*x9552))+(((-1.0)*x9550*x9555))+((r01*x9553)));
evalcond[3]=((1.0)+((r11*x9553))+(((-1.0)*x9548*x9555))+(((-1.0)*r12*x9552)));
evalcond[4]=(((r02*x9547))+(((-1.0)*x9550*x9552))+((cj1*cj2))+((r01*x9554))+(((-1.0)*sj1*x9549)));
evalcond[5]=(((r22*x9547))+(((-1.0)*x9551*x9552))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9549))+((r21*x9554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9556=((-1.0)*r21);
CheckValue<IkReal> x9559 = IKatan2WithCheck(IkReal(x9556),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9559.valid){
continue;
}
IkReal x9557=((1.0)*(x9559.value));
IkReal x9558=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9557)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9557)));
IkReal gconst4=(x9556*x9558);
IkReal gconst5=((1.0)*r20*x9558);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9560=((-1.0)*r21);
CheckValue<IkReal> x9563 = IKatan2WithCheck(IkReal(x9560),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9563.valid){
continue;
}
IkReal x9561=((1.0)*(x9563.value));
IkReal x9562=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9561)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9561)));
IkReal gconst4=(x9560*x9562);
IkReal gconst5=((1.0)*r20*x9562);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9564=((-1.0)*r21);
CheckValue<IkReal> x9567 = IKatan2WithCheck(IkReal(x9564),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9567.valid){
continue;
}
IkReal x9565=((1.0)*(x9567.value));
IkReal x9566=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9565)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9565)));
IkReal gconst4=(x9564*x9566);
IkReal gconst5=((1.0)*r20*x9566);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9568=(gconst5*r10);
IkReal x9569=(gconst4*r11);
CheckValue<IkReal> x9570 = IKatan2WithCheck(IkReal(((((-1.0)*x9569))+x9568)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9570.valid){
continue;
}
CheckValue<IkReal> x9571=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9568*x9569))+(x9569*x9569)+(x9568*x9568))),-1);
if(!x9571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9570.value)+(((1.5707963267949)*(x9571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9572=IKsin(j4);
IkReal x9573=IKcos(j4);
IkReal x9574=(gconst4*r11);
IkReal x9575=(gconst5*r10);
IkReal x9576=((1.0)*sj2);
IkReal x9577=(gconst5*r00);
IkReal x9578=(gconst5*r20);
IkReal x9579=((1.0)*x9573);
IkReal x9580=(gconst4*x9572);
IkReal x9581=((1.0)*x9572);
evalcond[0]=((((-1.0)*r22*x9579))+((r21*x9580))+(((-1.0)*x9578*x9581)));
evalcond[1]=((((-1.0)*r02*x9579))+((r01*x9580))+(((-1.0)*x9577*x9581)));
evalcond[2]=(((x9573*x9575))+(((-1.0)*x9574*x9579))+(((-1.0)*r12*x9581)));
evalcond[3]=((1.0)+((x9572*x9574))+(((-1.0)*r12*x9579))+(((-1.0)*x9575*x9581)));
evalcond[4]=(((x9573*x9577))+(((-1.0)*sj1*x9576))+(((-1.0)*gconst4*r01*x9579))+((cj1*cj2))+(((-1.0)*r02*x9581)));
evalcond[5]=((((-1.0)*gconst4*r21*x9579))+((x9573*x9578))+(((-1.0)*r22*x9581))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9582=((1.0)*gconst5);
CheckValue<IkReal> x9583=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9582)))),-1);
if(!x9583.valid){
continue;
}
CheckValue<IkReal> x9584 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9582))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9583.value)))+(x9584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9585=IKsin(j4);
IkReal x9586=IKcos(j4);
IkReal x9587=(gconst4*r11);
IkReal x9588=(gconst5*r10);
IkReal x9589=((1.0)*sj2);
IkReal x9590=(gconst5*r00);
IkReal x9591=(gconst5*r20);
IkReal x9592=((1.0)*x9586);
IkReal x9593=(gconst4*x9585);
IkReal x9594=((1.0)*x9585);
evalcond[0]=((((-1.0)*r22*x9592))+((r21*x9593))+(((-1.0)*x9591*x9594)));
evalcond[1]=((((-1.0)*x9590*x9594))+((r01*x9593))+(((-1.0)*r02*x9592)));
evalcond[2]=((((-1.0)*x9587*x9592))+((x9586*x9588))+(((-1.0)*r12*x9594)));
evalcond[3]=((1.0)+(((-1.0)*x9588*x9594))+((x9585*x9587))+(((-1.0)*r12*x9592)));
evalcond[4]=((((-1.0)*sj1*x9589))+((x9586*x9590))+(((-1.0)*gconst4*r01*x9592))+((cj1*cj2))+(((-1.0)*r02*x9594)));
evalcond[5]=((((-1.0)*gconst4*r21*x9592))+(((-1.0)*r22*x9594))+((x9586*x9591))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9595 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9595.valid){
continue;
}
CheckValue<IkReal> x9596=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9595.value)+(((1.5707963267949)*(x9596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9597=IKsin(j4);
IkReal x9598=IKcos(j4);
IkReal x9599=(gconst4*r11);
IkReal x9600=(gconst5*r10);
IkReal x9601=((1.0)*sj2);
IkReal x9602=(gconst5*r00);
IkReal x9603=(gconst5*r20);
IkReal x9604=((1.0)*x9598);
IkReal x9605=(gconst4*x9597);
IkReal x9606=((1.0)*x9597);
evalcond[0]=((((-1.0)*r22*x9604))+((r21*x9605))+(((-1.0)*x9603*x9606)));
evalcond[1]=((((-1.0)*x9602*x9606))+((r01*x9605))+(((-1.0)*r02*x9604)));
evalcond[2]=(((x9598*x9600))+(((-1.0)*r12*x9606))+(((-1.0)*x9599*x9604)));
evalcond[3]=((1.0)+((x9597*x9599))+(((-1.0)*x9600*x9606))+(((-1.0)*r12*x9604)));
evalcond[4]=((((-1.0)*sj1*x9601))+((x9598*x9602))+(((-1.0)*gconst4*r01*x9604))+(((-1.0)*r02*x9606))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x9601))+(((-1.0)*r22*x9606))+(((-1.0)*gconst4*r21*x9604))+((x9598*x9603))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9607=gconst4*gconst4;
IkReal x9608=gconst5*gconst5;
IkReal x9609=(r10*r21);
IkReal x9610=((1.0)*cj3);
IkReal x9611=(r11*r21);
IkReal x9612=(r11*r20);
IkReal x9613=(r22*sj3);
IkReal x9614=(gconst4*r10);
IkReal x9615=((1.0)*sj3);
IkReal x9616=(cj3*gconst4*gconst5);
CheckValue<IkReal> x9617 = IKatan2WithCheck(IkReal((((x9613*x9614))+((gconst5*r11*x9613)))),IkReal(((((-1.0)*x9608*x9612*x9615))+((sj3*x9607*x9609))+((gconst4*gconst5*sj3*x9611))+(((-1.0)*gconst5*r20*x9614*x9615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9617.valid){
continue;
}
CheckValue<IkReal> x9618=IKPowWithIntegerCheck(IKsign((((x9612*x9616))+(((-1.0)*x9607*x9610*x9611))+((x9609*x9616))+(((-1.0)*r10*r20*x9608*x9610))+(((-1.0)*r12*r22*x9610)))),-1);
if(!x9618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9617.value)+(((1.5707963267949)*(x9618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9619=IKsin(j4);
IkReal x9620=IKcos(j4);
IkReal x9621=(gconst5*sj3);
IkReal x9622=((1.0)*sj2);
IkReal x9623=(gconst5*r10);
IkReal x9624=((1.0)*cj2);
IkReal x9625=(gconst5*r00);
IkReal x9626=(cj3*r01);
IkReal x9627=(gconst4*sj3);
IkReal x9628=(cj3*gconst5);
IkReal x9629=(cj1*x9622);
IkReal x9630=(sj1*x9624);
IkReal x9631=((1.0)*x9620);
IkReal x9632=(gconst4*x9619);
IkReal x9633=(cj3*x9619);
IkReal x9634=(sj3*x9619);
IkReal x9635=((1.0)*x9619);
IkReal x9636=((1.0)*cj3*gconst4);
IkReal x9637=(gconst4*x9620);
IkReal x9638=(x9620*x9627);
IkReal x9639=(x9630+x9629);
evalcond[0]=((((-1.0)*gconst5*r20*x9635))+(((-1.0)*r22*x9631))+((r21*x9632)));
evalcond[1]=(((r01*x9632))+(((-1.0)*r02*x9631))+(((-1.0)*x9625*x9635)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9631))+((r11*x9632))+(((-1.0)*x9623*x9635)));
evalcond[3]=(((r10*x9627))+(((-1.0)*cj3*x9623*x9631))+((cj3*r11*x9637))+((r12*x9633))+((r11*x9621)));
evalcond[4]=((((-1.0)*r11*x9628))+(((-1.0)*r10*x9636))+((r12*x9634))+((r11*x9638))+(((-1.0)*r10*x9621*x9631)));
evalcond[5]=(((r01*x9621))+((r00*x9627))+((r02*x9633))+(((-1.0)*cj3*x9625*x9631))+((cj1*cj2))+(((-1.0)*sj1*x9622))+((x9626*x9637)));
evalcond[6]=(((r20*x9627))+(((-1.0)*r20*x9628*x9631))+((r21*x9621))+((r22*x9633))+((cj3*r21*x9637))+(((-1.0)*x9639)));
evalcond[7]=((((-1.0)*r21*x9628))+((r21*x9638))+((sj1*sj2))+((r22*x9634))+(((-1.0)*cj1*x9624))+(((-1.0)*r20*x9636))+(((-1.0)*r20*x9621*x9631)));
evalcond[8]=(((r01*x9638))+(((-1.0)*r00*x9636))+(((-1.0)*gconst5*x9626))+((r02*x9634))+(((-1.0)*r00*x9621*x9631))+(((-1.0)*x9639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9640=((1.0)*gconst5);
CheckValue<IkReal> x9641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9640)))),-1);
if(!x9641.valid){
continue;
}
CheckValue<IkReal> x9642 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9640))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9641.value)))+(x9642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9643=IKsin(j4);
IkReal x9644=IKcos(j4);
IkReal x9645=(gconst5*sj3);
IkReal x9646=((1.0)*sj2);
IkReal x9647=(gconst5*r10);
IkReal x9648=((1.0)*cj2);
IkReal x9649=(gconst5*r00);
IkReal x9650=(cj3*r01);
IkReal x9651=(gconst4*sj3);
IkReal x9652=(cj3*gconst5);
IkReal x9653=(cj1*x9646);
IkReal x9654=(sj1*x9648);
IkReal x9655=((1.0)*x9644);
IkReal x9656=(gconst4*x9643);
IkReal x9657=(cj3*x9643);
IkReal x9658=(sj3*x9643);
IkReal x9659=((1.0)*x9643);
IkReal x9660=((1.0)*cj3*gconst4);
IkReal x9661=(gconst4*x9644);
IkReal x9662=(x9644*x9651);
IkReal x9663=(x9653+x9654);
evalcond[0]=(((r21*x9656))+(((-1.0)*gconst5*r20*x9659))+(((-1.0)*r22*x9655)));
evalcond[1]=((((-1.0)*x9649*x9659))+((r01*x9656))+(((-1.0)*r02*x9655)));
evalcond[2]=((1.0)+((r11*x9656))+(((-1.0)*x9647*x9659))+(((-1.0)*r12*x9655)));
evalcond[3]=(((r11*x9645))+(((-1.0)*cj3*x9647*x9655))+((r12*x9657))+((r10*x9651))+((cj3*r11*x9661)));
evalcond[4]=((((-1.0)*r10*x9645*x9655))+(((-1.0)*r10*x9660))+((r11*x9662))+((r12*x9658))+(((-1.0)*r11*x9652)));
evalcond[5]=((((-1.0)*cj3*x9649*x9655))+(((-1.0)*sj1*x9646))+((r00*x9651))+((r01*x9645))+((r02*x9657))+((cj1*cj2))+((x9650*x9661)));
evalcond[6]=((((-1.0)*x9663))+(((-1.0)*r20*x9652*x9655))+((r20*x9651))+((r22*x9657))+((r21*x9645))+((cj3*r21*x9661)));
evalcond[7]=((((-1.0)*cj1*x9648))+((r21*x9662))+(((-1.0)*r20*x9660))+((sj1*sj2))+(((-1.0)*r20*x9645*x9655))+(((-1.0)*r21*x9652))+((r22*x9658)));
evalcond[8]=((((-1.0)*x9663))+(((-1.0)*r00*x9660))+(((-1.0)*gconst5*x9650))+((r01*x9662))+((r02*x9658))+(((-1.0)*r00*x9645*x9655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9664 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9664.valid){
continue;
}
CheckValue<IkReal> x9665=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9664.value)+(((1.5707963267949)*(x9665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9666=IKsin(j4);
IkReal x9667=IKcos(j4);
IkReal x9668=(gconst5*sj3);
IkReal x9669=((1.0)*sj2);
IkReal x9670=(gconst5*r10);
IkReal x9671=((1.0)*cj2);
IkReal x9672=(gconst5*r00);
IkReal x9673=(cj3*r01);
IkReal x9674=(gconst4*sj3);
IkReal x9675=(cj3*gconst5);
IkReal x9676=(cj1*x9669);
IkReal x9677=(sj1*x9671);
IkReal x9678=((1.0)*x9667);
IkReal x9679=(gconst4*x9666);
IkReal x9680=(cj3*x9666);
IkReal x9681=(sj3*x9666);
IkReal x9682=((1.0)*x9666);
IkReal x9683=((1.0)*cj3*gconst4);
IkReal x9684=(gconst4*x9667);
IkReal x9685=(x9667*x9674);
IkReal x9686=(x9676+x9677);
evalcond[0]=(((r21*x9679))+(((-1.0)*gconst5*r20*x9682))+(((-1.0)*r22*x9678)));
evalcond[1]=(((r01*x9679))+(((-1.0)*x9672*x9682))+(((-1.0)*r02*x9678)));
evalcond[2]=((1.0)+((r11*x9679))+(((-1.0)*r12*x9678))+(((-1.0)*x9670*x9682)));
evalcond[3]=((((-1.0)*cj3*x9670*x9678))+((r11*x9668))+((cj3*r11*x9684))+((r10*x9674))+((r12*x9680)));
evalcond[4]=((((-1.0)*r10*x9668*x9678))+(((-1.0)*r10*x9683))+((r12*x9681))+(((-1.0)*r11*x9675))+((r11*x9685)));
evalcond[5]=((((-1.0)*sj1*x9669))+((r02*x9680))+((r00*x9674))+((x9673*x9684))+((r01*x9668))+((cj1*cj2))+(((-1.0)*cj3*x9672*x9678)));
evalcond[6]=((((-1.0)*r20*x9675*x9678))+((cj3*r21*x9684))+((r21*x9668))+((r22*x9680))+((r20*x9674))+(((-1.0)*x9686)));
evalcond[7]=((((-1.0)*cj1*x9671))+((r22*x9681))+((sj1*sj2))+((r21*x9685))+(((-1.0)*r21*x9675))+(((-1.0)*r20*x9683))+(((-1.0)*r20*x9668*x9678)));
evalcond[8]=((((-1.0)*gconst5*x9673))+(((-1.0)*r00*x9668*x9678))+((r02*x9681))+(((-1.0)*r00*x9683))+(((-1.0)*x9686))+((r01*x9685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9687=((-1.0)*r21);
CheckValue<IkReal> x9690 = IKatan2WithCheck(IkReal(x9687),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9690.valid){
continue;
}
IkReal x9688=((1.0)*(x9690.value));
IkReal x9689=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9688)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9688)));
IkReal gconst4=(x9687*x9689);
IkReal gconst5=((1.0)*r20*x9689);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9691=((-1.0)*r21);
CheckValue<IkReal> x9694 = IKatan2WithCheck(IkReal(x9691),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9694.valid){
continue;
}
IkReal x9692=((1.0)*(x9694.value));
IkReal x9693=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9692)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9692)));
IkReal gconst4=(x9691*x9693);
IkReal gconst5=((1.0)*r20*x9693);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9695=((-1.0)*r21);
CheckValue<IkReal> x9698 = IKatan2WithCheck(IkReal(x9695),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9698.valid){
continue;
}
IkReal x9696=((1.0)*(x9698.value));
IkReal x9697=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9696)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9696)));
IkReal gconst4=(x9695*x9697);
IkReal gconst5=((1.0)*r20*x9697);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9699=((-1.0)*r21);
CheckValue<IkReal> x9702 = IKatan2WithCheck(IkReal(x9699),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9702.valid){
continue;
}
IkReal x9700=((1.0)*(x9702.value));
IkReal x9701=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9700)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9700)));
IkReal gconst4=(x9699*x9701);
IkReal gconst5=((1.0)*r20*x9701);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9703=((-1.0)*r21);
CheckValue<IkReal> x9706 = IKatan2WithCheck(IkReal(x9703),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9706.valid){
continue;
}
IkReal x9704=((1.0)*(x9706.value));
IkReal x9705=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9704)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9704)));
IkReal gconst4=(x9703*x9705);
IkReal gconst5=((1.0)*r20*x9705);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9707=((-1.0)*r21);
CheckValue<IkReal> x9710 = IKatan2WithCheck(IkReal(x9707),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9710.valid){
continue;
}
IkReal x9708=((1.0)*(x9710.value));
IkReal x9709=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9708)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9708)));
IkReal gconst4=(x9707*x9709);
IkReal gconst5=((1.0)*r20*x9709);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9711=(gconst5*r10);
IkReal x9712=(gconst4*r11);
CheckValue<IkReal> x9713=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9712*x9712)+(x9711*x9711)+(((-2.0)*x9711*x9712)))),-1);
if(!x9713.valid){
continue;
}
CheckValue<IkReal> x9714 = IKatan2WithCheck(IkReal((x9712+(((-1.0)*x9711)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9713.value)))+(x9714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9715=IKcos(j4);
IkReal x9716=IKsin(j4);
IkReal x9717=(gconst4*r11);
IkReal x9718=(gconst5*r10);
IkReal x9719=(gconst5*r00);
IkReal x9720=(gconst5*r20);
IkReal x9721=((1.0)*x9715);
IkReal x9722=(gconst4*x9715);
IkReal x9723=((1.0)*x9716);
IkReal x9724=(gconst4*x9716);
evalcond[0]=(((r12*x9716))+(((-1.0)*x9718*x9721))+((x9715*x9717)));
evalcond[1]=((((-1.0)*r22*x9721))+((r21*x9724))+(((-1.0)*x9720*x9723)));
evalcond[2]=(((r01*x9724))+(((-1.0)*r02*x9721))+(((-1.0)*x9719*x9723)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9721))+((x9716*x9717))+(((-1.0)*x9718*x9723)));
evalcond[4]=(((r01*x9722))+((cj2*sj1))+((cj1*sj2))+((r02*x9716))+(((-1.0)*x9719*x9721)));
evalcond[5]=(((r22*x9716))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9722))+(((-1.0)*x9720*x9721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9725=((1.0)*gconst5);
CheckValue<IkReal> x9726 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x9725))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9726.valid){
continue;
}
CheckValue<IkReal> x9727=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9725))+(((-1.0)*gconst4*r20)))),-1);
if(!x9727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9726.value)+(((1.5707963267949)*(x9727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9728=IKcos(j4);
IkReal x9729=IKsin(j4);
IkReal x9730=(gconst4*r11);
IkReal x9731=(gconst5*r10);
IkReal x9732=(gconst5*r00);
IkReal x9733=(gconst5*r20);
IkReal x9734=((1.0)*x9728);
IkReal x9735=(gconst4*x9728);
IkReal x9736=((1.0)*x9729);
IkReal x9737=(gconst4*x9729);
evalcond[0]=(((x9728*x9730))+((r12*x9729))+(((-1.0)*x9731*x9734)));
evalcond[1]=((((-1.0)*x9733*x9736))+(((-1.0)*r22*x9734))+((r21*x9737)));
evalcond[2]=((((-1.0)*r02*x9734))+(((-1.0)*x9732*x9736))+((r01*x9737)));
evalcond[3]=((-1.0)+((x9729*x9730))+(((-1.0)*r12*x9734))+(((-1.0)*x9731*x9736)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x9729))+(((-1.0)*x9732*x9734))+((r01*x9735)));
evalcond[5]=((((-1.0)*x9733*x9734))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9735))+((r22*x9729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9738=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9738.valid){
continue;
}
CheckValue<IkReal> x9739 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9738.value)))+(x9739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9740=IKcos(j4);
IkReal x9741=IKsin(j4);
IkReal x9742=(gconst4*r11);
IkReal x9743=(gconst5*r10);
IkReal x9744=(gconst5*r00);
IkReal x9745=(gconst5*r20);
IkReal x9746=((1.0)*x9740);
IkReal x9747=(gconst4*x9740);
IkReal x9748=((1.0)*x9741);
IkReal x9749=(gconst4*x9741);
evalcond[0]=(((x9740*x9742))+(((-1.0)*x9743*x9746))+((r12*x9741)));
evalcond[1]=(((r21*x9749))+(((-1.0)*x9745*x9748))+(((-1.0)*r22*x9746)));
evalcond[2]=((((-1.0)*x9744*x9748))+(((-1.0)*r02*x9746))+((r01*x9749)));
evalcond[3]=((-1.0)+(((-1.0)*x9743*x9748))+((x9741*x9742))+(((-1.0)*r12*x9746)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9744*x9746))+((cj1*sj2))+((r02*x9741))+((r01*x9747)));
evalcond[5]=(((r21*x9747))+((r22*x9741))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9745*x9746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9750=((-1.0)*r21);
CheckValue<IkReal> x9753 = IKatan2WithCheck(IkReal(x9750),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9753.valid){
continue;
}
IkReal x9751=((1.0)*(x9753.value));
IkReal x9752=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9751)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9751)));
IkReal gconst4=(x9750*x9752);
IkReal gconst5=((1.0)*r20*x9752);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9754=((-1.0)*r21);
CheckValue<IkReal> x9757 = IKatan2WithCheck(IkReal(x9754),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9757.valid){
continue;
}
IkReal x9755=((1.0)*(x9757.value));
IkReal x9756=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9755)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9755)));
IkReal gconst4=(x9754*x9756);
IkReal gconst5=((1.0)*r20*x9756);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9758=((-1.0)*r21);
CheckValue<IkReal> x9761 = IKatan2WithCheck(IkReal(x9758),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9761.valid){
continue;
}
IkReal x9759=((1.0)*(x9761.value));
IkReal x9760=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9759)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9759)));
IkReal gconst4=(x9758*x9760);
IkReal gconst5=((1.0)*r20*x9760);
IkReal x9762=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9766=IKPowWithIntegerCheck(x9762,-1);
if(!x9766.valid){
continue;
}
IkReal x9763=x9766.value;
IkReal x9764=((1.0)*x9763);
IkReal x9765=((((-1.0)*x9764*(r11*r11)*(r21*r21)))+(((-1.0)*x9764*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9763))+(((-1.0)*(r12*r12))));
j4eval[0]=x9765;
j4eval[1]=r12;
j4eval[2]=x9762;
j4eval[3]=IKsign(x9765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9767=(gconst5*r10);
IkReal x9768=(gconst4*r11);
CheckValue<IkReal> x9769 = IKatan2WithCheck(IkReal(((((-1.0)*x9768))+x9767)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9769.valid){
continue;
}
CheckValue<IkReal> x9770=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9767*x9767)))+(((-1.0)*(x9768*x9768)))+(((-1.0)*(r12*r12)))+(((2.0)*x9767*x9768)))),-1);
if(!x9770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9769.value)+(((1.5707963267949)*(x9770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9771=IKsin(j4);
IkReal x9772=IKcos(j4);
IkReal x9773=(gconst4*r11);
IkReal x9774=(gconst5*r10);
IkReal x9775=(gconst4*r01);
IkReal x9776=(gconst5*r00);
IkReal x9777=(gconst4*r21);
IkReal x9778=(gconst5*r20);
IkReal x9779=((1.0)*x9772);
IkReal x9780=((1.0)*x9771);
evalcond[0]=((((-1.0)*r22*x9779))+(((-1.0)*x9778*x9780))+((x9771*x9777)));
evalcond[1]=((((-1.0)*r02*x9779))+(((-1.0)*x9776*x9780))+((x9771*x9775)));
evalcond[2]=(((x9772*x9774))+(((-1.0)*r12*x9780))+(((-1.0)*x9773*x9779)));
evalcond[3]=((-1.0)+(((-1.0)*x9774*x9780))+((x9771*x9773))+(((-1.0)*r12*x9779)));
evalcond[4]=(((x9772*x9776))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9775*x9779))+(((-1.0)*r02*x9780)));
evalcond[5]=(((x9772*x9778))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9780))+(((-1.0)*x9777*x9779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9781=((1.0)*gconst5);
CheckValue<IkReal> x9782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9781))+(((-1.0)*gconst4*r20)))),-1);
if(!x9782.valid){
continue;
}
CheckValue<IkReal> x9783 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x9781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9782.value)))+(x9783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9784=IKsin(j4);
IkReal x9785=IKcos(j4);
IkReal x9786=(gconst4*r11);
IkReal x9787=(gconst5*r10);
IkReal x9788=(gconst4*r01);
IkReal x9789=(gconst5*r00);
IkReal x9790=(gconst4*r21);
IkReal x9791=(gconst5*r20);
IkReal x9792=((1.0)*x9785);
IkReal x9793=((1.0)*x9784);
evalcond[0]=((((-1.0)*x9791*x9793))+((x9784*x9790))+(((-1.0)*r22*x9792)));
evalcond[1]=((((-1.0)*x9789*x9793))+(((-1.0)*r02*x9792))+((x9784*x9788)));
evalcond[2]=(((x9785*x9787))+(((-1.0)*r12*x9793))+(((-1.0)*x9786*x9792)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9792))+(((-1.0)*x9787*x9793))+((x9784*x9786)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9788*x9792))+((x9785*x9789))+((cj1*sj2))+(((-1.0)*r02*x9793)));
evalcond[5]=((((-1.0)*x9790*x9792))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9785*x9791))+(((-1.0)*r22*x9793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9794=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9794.valid){
continue;
}
CheckValue<IkReal> x9795 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9794.value)))+(x9795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9796=IKsin(j4);
IkReal x9797=IKcos(j4);
IkReal x9798=(gconst4*r11);
IkReal x9799=(gconst5*r10);
IkReal x9800=(gconst4*r01);
IkReal x9801=(gconst5*r00);
IkReal x9802=(gconst4*r21);
IkReal x9803=(gconst5*r20);
IkReal x9804=((1.0)*x9797);
IkReal x9805=((1.0)*x9796);
evalcond[0]=((((-1.0)*r22*x9804))+(((-1.0)*x9803*x9805))+((x9796*x9802)));
evalcond[1]=((((-1.0)*r02*x9804))+(((-1.0)*x9801*x9805))+((x9796*x9800)));
evalcond[2]=(((x9797*x9799))+(((-1.0)*x9798*x9804))+(((-1.0)*r12*x9805)));
evalcond[3]=((-1.0)+(((-1.0)*x9799*x9805))+((x9796*x9798))+(((-1.0)*r12*x9804)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x9805))+(((-1.0)*x9800*x9804))+((cj1*sj2))+((x9797*x9801)));
evalcond[5]=((((-1.0)*r22*x9805))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9797*x9803))+(((-1.0)*x9802*x9804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9806=((-1.0)*r21);
CheckValue<IkReal> x9809 = IKatan2WithCheck(IkReal(x9806),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9809.valid){
continue;
}
IkReal x9807=((1.0)*(x9809.value));
IkReal x9808=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9807)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9807)));
IkReal gconst4=(x9806*x9808);
IkReal gconst5=((1.0)*r20*x9808);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9810=((-1.0)*r21);
CheckValue<IkReal> x9813 = IKatan2WithCheck(IkReal(x9810),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9813.valid){
continue;
}
IkReal x9811=((1.0)*(x9813.value));
IkReal x9812=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9811)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9811)));
IkReal gconst4=(x9810*x9812);
IkReal gconst5=((1.0)*r20*x9812);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9814=((-1.0)*r21);
CheckValue<IkReal> x9817 = IKatan2WithCheck(IkReal(x9814),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9817.valid){
continue;
}
IkReal x9815=((1.0)*(x9817.value));
IkReal x9816=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9815)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9815)));
IkReal gconst4=(x9814*x9816);
IkReal gconst5=((1.0)*r20*x9816);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9818=(gconst5*r10);
IkReal x9819=(gconst4*r11);
CheckValue<IkReal> x9820=IKPowWithIntegerCheck(IKsign(((x9818*x9818)+(r12*r12)+(((-2.0)*x9818*x9819))+(x9819*x9819))),-1);
if(!x9820.valid){
continue;
}
CheckValue<IkReal> x9821 = IKatan2WithCheck(IkReal(((((-1.0)*x9818))+x9819)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9820.value)))+(x9821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9822=IKcos(j4);
IkReal x9823=IKsin(j4);
IkReal x9824=(gconst4*r11);
IkReal x9825=(gconst5*r10);
IkReal x9826=((1.0)*cj1);
IkReal x9827=(gconst5*r00);
IkReal x9828=(gconst5*r20);
IkReal x9829=((1.0)*x9822);
IkReal x9830=(gconst4*x9822);
IkReal x9831=((1.0)*x9823);
IkReal x9832=(gconst4*x9823);
evalcond[0]=(((r12*x9823))+(((-1.0)*x9825*x9829))+((x9822*x9824)));
evalcond[1]=(((r21*x9832))+(((-1.0)*x9828*x9831))+(((-1.0)*r22*x9829)));
evalcond[2]=((((-1.0)*x9827*x9831))+((r01*x9832))+(((-1.0)*r02*x9829)));
evalcond[3]=((-1.0)+(((-1.0)*x9825*x9831))+(((-1.0)*r12*x9829))+((x9823*x9824)));
evalcond[4]=((((-1.0)*x9827*x9829))+((r01*x9830))+((sj1*sj2))+((r02*x9823))+(((-1.0)*cj2*x9826)));
evalcond[5]=(((r21*x9830))+(((-1.0)*x9828*x9829))+(((-1.0)*cj2*sj1))+((r22*x9823))+(((-1.0)*sj2*x9826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9833=((1.0)*gconst5);
CheckValue<IkReal> x9834 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x9833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9834.valid){
continue;
}
CheckValue<IkReal> x9835=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9833))+(((-1.0)*gconst4*r20)))),-1);
if(!x9835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9834.value)+(((1.5707963267949)*(x9835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9836=IKcos(j4);
IkReal x9837=IKsin(j4);
IkReal x9838=(gconst4*r11);
IkReal x9839=(gconst5*r10);
IkReal x9840=((1.0)*cj1);
IkReal x9841=(gconst5*r00);
IkReal x9842=(gconst5*r20);
IkReal x9843=((1.0)*x9836);
IkReal x9844=(gconst4*x9836);
IkReal x9845=((1.0)*x9837);
IkReal x9846=(gconst4*x9837);
evalcond[0]=((((-1.0)*x9839*x9843))+((r12*x9837))+((x9836*x9838)));
evalcond[1]=((((-1.0)*r22*x9843))+(((-1.0)*x9842*x9845))+((r21*x9846)));
evalcond[2]=((((-1.0)*r02*x9843))+((r01*x9846))+(((-1.0)*x9841*x9845)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9843))+(((-1.0)*x9839*x9845))+((x9837*x9838)));
evalcond[4]=(((sj1*sj2))+((r01*x9844))+((r02*x9837))+(((-1.0)*x9841*x9843))+(((-1.0)*cj2*x9840)));
evalcond[5]=(((r22*x9837))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9840))+(((-1.0)*x9842*x9843))+((r21*x9844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9847=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9847.valid){
continue;
}
CheckValue<IkReal> x9848 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9847.value)))+(x9848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9849=IKcos(j4);
IkReal x9850=IKsin(j4);
IkReal x9851=(gconst4*r11);
IkReal x9852=(gconst5*r10);
IkReal x9853=((1.0)*cj1);
IkReal x9854=(gconst5*r00);
IkReal x9855=(gconst5*r20);
IkReal x9856=((1.0)*x9849);
IkReal x9857=(gconst4*x9849);
IkReal x9858=((1.0)*x9850);
IkReal x9859=(gconst4*x9850);
evalcond[0]=(((x9849*x9851))+(((-1.0)*x9852*x9856))+((r12*x9850)));
evalcond[1]=(((r21*x9859))+(((-1.0)*x9855*x9858))+(((-1.0)*r22*x9856)));
evalcond[2]=((((-1.0)*x9854*x9858))+(((-1.0)*r02*x9856))+((r01*x9859)));
evalcond[3]=((-1.0)+((x9850*x9851))+(((-1.0)*x9852*x9858))+(((-1.0)*r12*x9856)));
evalcond[4]=((((-1.0)*x9854*x9856))+((r02*x9850))+((sj1*sj2))+((r01*x9857))+(((-1.0)*cj2*x9853)));
evalcond[5]=(((r21*x9857))+(((-1.0)*x9855*x9856))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9853))+((r22*x9850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9860=((-1.0)*r21);
CheckValue<IkReal> x9863 = IKatan2WithCheck(IkReal(x9860),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9863.valid){
continue;
}
IkReal x9861=((1.0)*(x9863.value));
IkReal x9862=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9861)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9861)));
IkReal gconst4=(x9860*x9862);
IkReal gconst5=((1.0)*r20*x9862);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9864=((-1.0)*r21);
CheckValue<IkReal> x9867 = IKatan2WithCheck(IkReal(x9864),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9867.valid){
continue;
}
IkReal x9865=((1.0)*(x9867.value));
IkReal x9866=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9865)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9865)));
IkReal gconst4=(x9864*x9866);
IkReal gconst5=((1.0)*r20*x9866);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9868=((-1.0)*r21);
CheckValue<IkReal> x9871 = IKatan2WithCheck(IkReal(x9868),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9871.valid){
continue;
}
IkReal x9869=((1.0)*(x9871.value));
IkReal x9870=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9869)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9869)));
IkReal gconst4=(x9868*x9870);
IkReal gconst5=((1.0)*r20*x9870);
IkReal x9872=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9876=IKPowWithIntegerCheck(x9872,-1);
if(!x9876.valid){
continue;
}
IkReal x9873=x9876.value;
IkReal x9874=((1.0)*x9873);
IkReal x9875=((((-2.0)*r10*r11*r20*r21*x9873))+(((-1.0)*(r12*r12)))+(((-1.0)*x9874*(r11*r11)*(r21*r21)))+(((-1.0)*x9874*(r10*r10)*(r20*r20))));
j4eval[0]=x9875;
j4eval[1]=r12;
j4eval[2]=x9872;
j4eval[3]=IKsign(x9875);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9877=(gconst5*r10);
IkReal x9878=(gconst4*r11);
CheckValue<IkReal> x9879 = IKatan2WithCheck(IkReal(((((-1.0)*x9878))+x9877)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9879.valid){
continue;
}
CheckValue<IkReal> x9880=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((2.0)*x9877*x9878))+(((-1.0)*(x9878*x9878)))+(((-1.0)*(x9877*x9877))))),-1);
if(!x9880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9879.value)+(((1.5707963267949)*(x9880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9881=IKsin(j4);
IkReal x9882=IKcos(j4);
IkReal x9883=(gconst4*r11);
IkReal x9884=((1.0)*cj1);
IkReal x9885=(gconst5*r10);
IkReal x9886=(gconst4*r01);
IkReal x9887=(gconst5*r00);
IkReal x9888=(gconst4*r21);
IkReal x9889=(gconst5*r20);
IkReal x9890=((1.0)*x9882);
IkReal x9891=((1.0)*x9881);
evalcond[0]=((((-1.0)*x9889*x9891))+((x9881*x9888))+(((-1.0)*r22*x9890)));
evalcond[1]=((((-1.0)*x9887*x9891))+((x9881*x9886))+(((-1.0)*r02*x9890)));
evalcond[2]=((((-1.0)*x9883*x9890))+(((-1.0)*r12*x9891))+((x9882*x9885)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9890))+(((-1.0)*x9885*x9891))+((x9881*x9883)));
evalcond[4]=((((-1.0)*cj2*x9884))+((sj1*sj2))+(((-1.0)*r02*x9891))+(((-1.0)*x9886*x9890))+((x9882*x9887)));
evalcond[5]=((((-1.0)*x9888*x9890))+(((-1.0)*sj2*x9884))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9891))+((x9882*x9889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9892=((1.0)*gconst5);
CheckValue<IkReal> x9893 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x9892))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9893.valid){
continue;
}
CheckValue<IkReal> x9894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9892))+(((-1.0)*gconst4*r20)))),-1);
if(!x9894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9893.value)+(((1.5707963267949)*(x9894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9895=IKsin(j4);
IkReal x9896=IKcos(j4);
IkReal x9897=(gconst4*r11);
IkReal x9898=((1.0)*cj1);
IkReal x9899=(gconst5*r10);
IkReal x9900=(gconst4*r01);
IkReal x9901=(gconst5*r00);
IkReal x9902=(gconst4*r21);
IkReal x9903=(gconst5*r20);
IkReal x9904=((1.0)*x9896);
IkReal x9905=((1.0)*x9895);
evalcond[0]=(((x9895*x9902))+(((-1.0)*r22*x9904))+(((-1.0)*x9903*x9905)));
evalcond[1]=((((-1.0)*x9901*x9905))+((x9895*x9900))+(((-1.0)*r02*x9904)));
evalcond[2]=((((-1.0)*r12*x9905))+((x9896*x9899))+(((-1.0)*x9897*x9904)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9904))+(((-1.0)*x9899*x9905))+((x9895*x9897)));
evalcond[4]=((((-1.0)*cj2*x9898))+((sj1*sj2))+(((-1.0)*r02*x9905))+((x9896*x9901))+(((-1.0)*x9900*x9904)));
evalcond[5]=((((-1.0)*x9902*x9904))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9905))+((x9896*x9903))+(((-1.0)*sj2*x9898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9906=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9906.valid){
continue;
}
CheckValue<IkReal> x9907 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9906.value)))+(x9907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9908=IKsin(j4);
IkReal x9909=IKcos(j4);
IkReal x9910=(gconst4*r11);
IkReal x9911=((1.0)*cj1);
IkReal x9912=(gconst5*r10);
IkReal x9913=(gconst4*r01);
IkReal x9914=(gconst5*r00);
IkReal x9915=(gconst4*r21);
IkReal x9916=(gconst5*r20);
IkReal x9917=((1.0)*x9909);
IkReal x9918=((1.0)*x9908);
evalcond[0]=(((x9908*x9915))+(((-1.0)*r22*x9917))+(((-1.0)*x9916*x9918)));
evalcond[1]=(((x9908*x9913))+(((-1.0)*x9914*x9918))+(((-1.0)*r02*x9917)));
evalcond[2]=((((-1.0)*r12*x9918))+(((-1.0)*x9910*x9917))+((x9909*x9912)));
evalcond[3]=((-1.0)+((x9908*x9910))+(((-1.0)*r12*x9917))+(((-1.0)*x9912*x9918)));
evalcond[4]=((((-1.0)*x9913*x9917))+((sj1*sj2))+(((-1.0)*cj2*x9911))+(((-1.0)*r02*x9918))+((x9909*x9914)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x9918))+(((-1.0)*x9915*x9917))+((x9909*x9916))+(((-1.0)*sj2*x9911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9919=((-1.0)*r21);
IkReal x9920=((-1.0)*px);
CheckValue<IkReal> x9922 = IKatan2WithCheck(IkReal(x9919),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9922.valid){
continue;
}
IkReal x9921=((1.0)*(x9922.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9921)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9920);
rxp1_1=(px*r21);
rxp1_2=(r11*x9920);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9921)));
IkReal gconst4=x9919;
IkReal gconst5=((1.0)*r20);
IkReal x9923=((1.0)*cj3);
IkReal x9924=(r10*r20);
IkReal x9925=(r11*r21);
j4eval[0]=((((-1.0)*x9925))+(((-1.0)*x9924)));
j4eval[1]=((((-1.0)*x9923*x9925))+(((-1.0)*x9923*x9924)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9926=((-1.0)*r21);
IkReal x9927=((-1.0)*px);
CheckValue<IkReal> x9929 = IKatan2WithCheck(IkReal(x9926),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9929.valid){
continue;
}
IkReal x9928=((1.0)*(x9929.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9928)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9927);
rxp1_1=(px*r21);
rxp1_2=(r11*x9927);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9928)));
IkReal gconst4=x9926;
IkReal gconst5=((1.0)*r20);
IkReal x9930=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r10*r20*x9930))+(((-1.0)*r11*r21*x9930)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9931=((-1.0)*r21);
IkReal x9932=((-1.0)*px);
CheckValue<IkReal> x9934 = IKatan2WithCheck(IkReal(x9931),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9934.valid){
continue;
}
IkReal x9933=((1.0)*(x9934.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9933)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9932);
rxp1_1=(px*r21);
rxp1_2=(r11*x9932);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9933)));
IkReal gconst4=x9931;
IkReal gconst5=((1.0)*r20);
IkReal x9935=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x9935))+(((-1.0)*r11*r21*x9935)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9936=((1.0)*r10);
CheckValue<IkReal> x9937=IKPowWithIntegerCheck(cj3,-1);
if(!x9937.valid){
continue;
}
CheckValue<IkReal> x9938=IKPowWithIntegerCheck(r02,-1);
if(!x9938.valid){
continue;
}
CheckValue<IkReal> x9939=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x9936))),-1);
if(!x9939.valid){
continue;
}
if( IKabs(((x9937.value)*(x9938.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9939.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x9936)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9937.value)*(x9938.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9939.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x9936))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9937.value)*(x9938.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x9939.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x9936))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9940=IKsin(j4);
IkReal x9941=IKcos(j4);
IkReal x9942=(sj1*sj2);
IkReal x9943=(gconst5*sj3);
IkReal x9944=(gconst4*r11);
IkReal x9945=((1.0)*cj2);
IkReal x9946=(gconst4*r21);
IkReal x9947=((1.0)*r10);
IkReal x9948=(cj1*sj2);
IkReal x9949=(cj3*gconst4);
IkReal x9950=((1.0)*r20);
IkReal x9951=(gconst4*sj3);
IkReal x9952=(cj1*x9945);
IkReal x9953=((1.0)*cj3*gconst5);
IkReal x9954=(r10*x9941);
IkReal x9955=(sj3*x9941);
IkReal x9956=(gconst5*x9940);
IkReal x9957=(cj3*x9941);
IkReal x9958=(r02*x9940);
IkReal x9959=(r20*x9941);
evalcond[0]=((-1.0)*r02*x9941);
evalcond[1]=(((cj2*sj1))+((sj3*x9958))+x9948);
evalcond[2]=((((-1.0)*x9950*x9956))+((x9940*x9946)));
evalcond[3]=(((cj3*x9958))+(((-1.0)*x9952))+x9942);
evalcond[4]=((-1.0)+((x9940*x9944))+(((-1.0)*x9947*x9956)));
evalcond[5]=((((-1.0)*gconst5*x9947*x9957))+((r11*x9943))+((x9944*x9957))+((r10*x9951)));
evalcond[6]=((((-1.0)*x9941*x9943*x9947))+(((-1.0)*x9947*x9949))+(((-1.0)*r11*x9953))+((x9944*x9955)));
evalcond[7]=((((-1.0)*x9948))+((r20*x9951))+(((-1.0)*sj1*x9945))+((r21*x9943))+(((-1.0)*gconst5*x9950*x9957))+((x9946*x9957)));
evalcond[8]=((((-1.0)*r21*x9953))+(((-1.0)*x9952))+((x9946*x9955))+x9942+(((-1.0)*x9941*x9943*x9950))+(((-1.0)*x9949*x9950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9960=IKPowWithIntegerCheck(r02,-1);
if(!x9960.valid){
continue;
}
CheckValue<IkReal> x9961=IKPowWithIntegerCheck(sj3,-1);
if(!x9961.valid){
continue;
}
CheckValue<IkReal> x9962=IKPowWithIntegerCheck(((((-1.0)*gconst5*r10*sj3))+((gconst4*r11*sj3))),-1);
if(!x9962.valid){
continue;
}
if( IKabs(((x9960.value)*(x9961.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9962.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9960.value)*(x9961.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x9962.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9960.value)*(x9961.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x9962.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9963=IKsin(j4);
IkReal x9964=IKcos(j4);
IkReal x9965=(sj1*sj2);
IkReal x9966=(gconst5*sj3);
IkReal x9967=(gconst4*r11);
IkReal x9968=((1.0)*cj2);
IkReal x9969=(gconst4*r21);
IkReal x9970=((1.0)*r10);
IkReal x9971=(cj1*sj2);
IkReal x9972=(cj3*gconst4);
IkReal x9973=((1.0)*r20);
IkReal x9974=(gconst4*sj3);
IkReal x9975=(cj1*x9968);
IkReal x9976=((1.0)*cj3*gconst5);
IkReal x9977=(r10*x9964);
IkReal x9978=(sj3*x9964);
IkReal x9979=(gconst5*x9963);
IkReal x9980=(cj3*x9964);
IkReal x9981=(r02*x9963);
IkReal x9982=(r20*x9964);
evalcond[0]=((-1.0)*r02*x9964);
evalcond[1]=(((cj2*sj1))+((sj3*x9981))+x9971);
evalcond[2]=(((x9963*x9969))+(((-1.0)*x9973*x9979)));
evalcond[3]=(((cj3*x9981))+x9965+(((-1.0)*x9975)));
evalcond[4]=((-1.0)+((x9963*x9967))+(((-1.0)*x9970*x9979)));
evalcond[5]=((((-1.0)*gconst5*x9970*x9980))+((r10*x9974))+((r11*x9966))+((x9967*x9980)));
evalcond[6]=((((-1.0)*x9964*x9966*x9970))+(((-1.0)*x9970*x9972))+(((-1.0)*r11*x9976))+((x9967*x9978)));
evalcond[7]=((((-1.0)*sj1*x9968))+((r21*x9966))+(((-1.0)*x9971))+((r20*x9974))+((x9969*x9980))+(((-1.0)*gconst5*x9973*x9980)));
evalcond[8]=(((x9969*x9978))+(((-1.0)*r21*x9976))+(((-1.0)*x9964*x9966*x9973))+x9965+(((-1.0)*x9975))+(((-1.0)*x9972*x9973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9983=((1.0)*sj3);
IkReal x9984=(gconst4*r11);
IkReal x9985=((1.0)*gconst5*r10);
CheckValue<IkReal> x9986=IKPowWithIntegerCheck((x9984+(((-1.0)*x9985))),-1);
if(!x9986.valid){
continue;
}
CheckValue<IkReal> x9987=IKPowWithIntegerCheck((((cj3*x9984))+(((-1.0)*cj3*x9985))),-1);
if(!x9987.valid){
continue;
}
if( IKabs(x9986.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9987.value)*(((((-1.0)*gconst4*r10*x9983))+(((-1.0)*gconst5*r11*x9983)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9986.value)+IKsqr(((x9987.value)*(((((-1.0)*gconst4*r10*x9983))+(((-1.0)*gconst5*r11*x9983))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9986.value, ((x9987.value)*(((((-1.0)*gconst4*r10*x9983))+(((-1.0)*gconst5*r11*x9983))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9988=IKsin(j4);
IkReal x9989=IKcos(j4);
IkReal x9990=(sj1*sj2);
IkReal x9991=(gconst5*sj3);
IkReal x9992=(gconst4*r11);
IkReal x9993=((1.0)*cj2);
IkReal x9994=(gconst4*r21);
IkReal x9995=((1.0)*r10);
IkReal x9996=(cj1*sj2);
IkReal x9997=(cj3*gconst4);
IkReal x9998=((1.0)*r20);
IkReal x9999=(gconst4*sj3);
IkReal x10000=(cj1*x9993);
IkReal x10001=((1.0)*cj3*gconst5);
IkReal x10002=(r10*x9989);
IkReal x10003=(sj3*x9989);
IkReal x10004=(gconst5*x9988);
IkReal x10005=(cj3*x9989);
IkReal x10006=(r02*x9988);
IkReal x10007=(r20*x9989);
evalcond[0]=((-1.0)*r02*x9989);
evalcond[1]=(((cj2*sj1))+((sj3*x10006))+x9996);
evalcond[2]=((((-1.0)*x10004*x9998))+((x9988*x9994)));
evalcond[3]=(((cj3*x10006))+x9990+(((-1.0)*x10000)));
evalcond[4]=((-1.0)+(((-1.0)*x10004*x9995))+((x9988*x9992)));
evalcond[5]=(((r11*x9991))+((r10*x9999))+((x10005*x9992))+(((-1.0)*gconst5*x10005*x9995)));
evalcond[6]=(((x10003*x9992))+(((-1.0)*x9995*x9997))+(((-1.0)*r11*x10001))+(((-1.0)*x9989*x9991*x9995)));
evalcond[7]=(((x10005*x9994))+((r21*x9991))+((r20*x9999))+(((-1.0)*gconst5*x10005*x9998))+(((-1.0)*x9996))+(((-1.0)*sj1*x9993)));
evalcond[8]=((((-1.0)*r21*x10001))+((x10003*x9994))+(((-1.0)*x9997*x9998))+(((-1.0)*x9989*x9991*x9998))+x9990+(((-1.0)*x10000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10008=gconst4*gconst4;
IkReal x10009=gconst5*gconst5;
IkReal x10010=(r10*r21);
IkReal x10011=((1.0)*cj3);
IkReal x10012=(r11*r21);
IkReal x10013=(r11*r20);
IkReal x10014=(r22*sj3);
IkReal x10015=(gconst4*r10);
IkReal x10016=((1.0)*sj3);
IkReal x10017=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10018 = IKatan2WithCheck(IkReal((((x10014*x10015))+((gconst5*r11*x10014)))),IkReal((((gconst4*gconst5*sj3*x10012))+(((-1.0)*gconst5*r20*x10015*x10016))+(((-1.0)*x10009*x10013*x10016))+((sj3*x10008*x10010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10018.valid){
continue;
}
CheckValue<IkReal> x10019=IKPowWithIntegerCheck(IKsign((((x10013*x10017))+((x10010*x10017))+(((-1.0)*r10*r20*x10009*x10011))+(((-1.0)*r12*r22*x10011))+(((-1.0)*x10008*x10011*x10012)))),-1);
if(!x10019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10018.value)+(((1.5707963267949)*(x10019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10020=IKsin(j4);
IkReal x10021=IKcos(j4);
IkReal x10022=(sj1*sj2);
IkReal x10023=(gconst5*sj3);
IkReal x10024=(cj3*gconst5);
IkReal x10025=((1.0)*cj1);
IkReal x10026=((1.0)*r10);
IkReal x10027=(cj2*sj1);
IkReal x10028=(cj3*gconst4);
IkReal x10029=((1.0)*r00);
IkReal x10030=((1.0)*r20);
IkReal x10031=(gconst4*sj3);
IkReal x10032=(cj2*x10025);
IkReal x10033=((1.0)*x10021);
IkReal x10034=(gconst4*x10020);
IkReal x10035=(cj3*x10020);
IkReal x10036=(sj3*x10020);
IkReal x10037=(gconst5*x10020);
IkReal x10038=(x10021*x10031);
evalcond[0]=(((r21*x10034))+(((-1.0)*r22*x10033))+(((-1.0)*x10030*x10037)));
evalcond[1]=((((-1.0)*r02*x10033))+((r01*x10034))+(((-1.0)*x10029*x10037)));
evalcond[2]=((-1.0)+((r11*x10034))+(((-1.0)*x10026*x10037))+(((-1.0)*r12*x10033)));
evalcond[3]=((((-1.0)*x10021*x10024*x10026))+((r10*x10031))+((r11*x10023))+((r12*x10035))+((r11*x10021*x10028)));
evalcond[4]=(((r11*x10038))+(((-1.0)*x10021*x10023*x10026))+((r12*x10036))+(((-1.0)*x10026*x10028))+(((-1.0)*r11*x10024)));
evalcond[5]=((((-1.0)*x10021*x10024*x10029))+((r01*x10021*x10028))+((r01*x10023))+x10022+((r00*x10031))+(((-1.0)*x10032))+((r02*x10035)));
evalcond[6]=((((-1.0)*x10021*x10024*x10030))+(((-1.0)*x10027))+((r21*x10023))+((r20*x10031))+((r21*x10021*x10028))+((r22*x10035))+(((-1.0)*sj2*x10025)));
evalcond[7]=((((-1.0)*r01*x10024))+((cj1*sj2))+x10027+((r01*x10038))+(((-1.0)*x10028*x10029))+(((-1.0)*x10021*x10023*x10029))+((r02*x10036)));
evalcond[8]=(((r21*x10038))+(((-1.0)*x10028*x10030))+x10022+(((-1.0)*r21*x10024))+(((-1.0)*x10032))+(((-1.0)*x10021*x10023*x10030))+((r22*x10036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10039=((1.0)*gconst5);
CheckValue<IkReal> x10040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10039))+(((-1.0)*gconst4*r20)))),-1);
if(!x10040.valid){
continue;
}
CheckValue<IkReal> x10041 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10039))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10040.value)))+(x10041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10042=IKsin(j4);
IkReal x10043=IKcos(j4);
IkReal x10044=(sj1*sj2);
IkReal x10045=(gconst5*sj3);
IkReal x10046=(cj3*gconst5);
IkReal x10047=((1.0)*cj1);
IkReal x10048=((1.0)*r10);
IkReal x10049=(cj2*sj1);
IkReal x10050=(cj3*gconst4);
IkReal x10051=((1.0)*r00);
IkReal x10052=((1.0)*r20);
IkReal x10053=(gconst4*sj3);
IkReal x10054=(cj2*x10047);
IkReal x10055=((1.0)*x10043);
IkReal x10056=(gconst4*x10042);
IkReal x10057=(cj3*x10042);
IkReal x10058=(sj3*x10042);
IkReal x10059=(gconst5*x10042);
IkReal x10060=(x10043*x10053);
evalcond[0]=(((r21*x10056))+(((-1.0)*r22*x10055))+(((-1.0)*x10052*x10059)));
evalcond[1]=(((r01*x10056))+(((-1.0)*x10051*x10059))+(((-1.0)*r02*x10055)));
evalcond[2]=((-1.0)+(((-1.0)*x10048*x10059))+(((-1.0)*r12*x10055))+((r11*x10056)));
evalcond[3]=(((r10*x10053))+((r11*x10045))+((r11*x10043*x10050))+((r12*x10057))+(((-1.0)*x10043*x10046*x10048)));
evalcond[4]=((((-1.0)*r11*x10046))+(((-1.0)*x10043*x10045*x10048))+(((-1.0)*x10048*x10050))+((r11*x10060))+((r12*x10058)));
evalcond[5]=((((-1.0)*x10043*x10046*x10051))+(((-1.0)*x10054))+((r00*x10053))+((r02*x10057))+((r01*x10045))+x10044+((r01*x10043*x10050)));
evalcond[6]=((((-1.0)*x10049))+((r20*x10053))+(((-1.0)*x10043*x10046*x10052))+((r21*x10043*x10050))+((r21*x10045))+((r22*x10057))+(((-1.0)*sj2*x10047)));
evalcond[7]=((((-1.0)*x10043*x10045*x10051))+(((-1.0)*r01*x10046))+((cj1*sj2))+((r01*x10060))+((r02*x10058))+(((-1.0)*x10050*x10051))+x10049);
evalcond[8]=((((-1.0)*x10043*x10045*x10052))+(((-1.0)*x10054))+(((-1.0)*x10050*x10052))+x10044+((r22*x10058))+(((-1.0)*r21*x10046))+((r21*x10060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10061=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10061.valid){
continue;
}
CheckValue<IkReal> x10062 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10061.value)))+(x10062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10063=IKsin(j4);
IkReal x10064=IKcos(j4);
IkReal x10065=(sj1*sj2);
IkReal x10066=(gconst5*sj3);
IkReal x10067=(cj3*gconst5);
IkReal x10068=((1.0)*cj1);
IkReal x10069=((1.0)*r10);
IkReal x10070=(cj2*sj1);
IkReal x10071=(cj3*gconst4);
IkReal x10072=((1.0)*r00);
IkReal x10073=((1.0)*r20);
IkReal x10074=(gconst4*sj3);
IkReal x10075=(cj2*x10068);
IkReal x10076=((1.0)*x10064);
IkReal x10077=(gconst4*x10063);
IkReal x10078=(cj3*x10063);
IkReal x10079=(sj3*x10063);
IkReal x10080=(gconst5*x10063);
IkReal x10081=(x10064*x10074);
evalcond[0]=(((r21*x10077))+(((-1.0)*r22*x10076))+(((-1.0)*x10073*x10080)));
evalcond[1]=(((r01*x10077))+(((-1.0)*r02*x10076))+(((-1.0)*x10072*x10080)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10076))+(((-1.0)*x10069*x10080))+((r11*x10077)));
evalcond[3]=(((r10*x10074))+((r12*x10078))+(((-1.0)*x10064*x10067*x10069))+((r11*x10064*x10071))+((r11*x10066)));
evalcond[4]=(((r12*x10079))+(((-1.0)*r11*x10067))+(((-1.0)*x10069*x10071))+(((-1.0)*x10064*x10066*x10069))+((r11*x10081)));
evalcond[5]=(((r00*x10074))+(((-1.0)*x10075))+(((-1.0)*x10064*x10067*x10072))+((r01*x10066))+x10065+((r02*x10078))+((r01*x10064*x10071)));
evalcond[6]=(((r21*x10064*x10071))+((r20*x10074))+(((-1.0)*x10064*x10067*x10073))+(((-1.0)*sj2*x10068))+((r22*x10078))+((r21*x10066))+(((-1.0)*x10070)));
evalcond[7]=(((r01*x10081))+((cj1*sj2))+x10070+((r02*x10079))+(((-1.0)*r01*x10067))+(((-1.0)*x10071*x10072))+(((-1.0)*x10064*x10066*x10072)));
evalcond[8]=((((-1.0)*r21*x10067))+(((-1.0)*x10075))+x10065+((r21*x10081))+((r22*x10079))+(((-1.0)*x10071*x10073))+(((-1.0)*x10064*x10066*x10073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10082=((-1.0)*r21);
CheckValue<IkReal> x10085 = IKatan2WithCheck(IkReal(x10082),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10085.valid){
continue;
}
IkReal x10083=((1.0)*(x10085.value));
IkReal x10084=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10083)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10083)));
IkReal gconst4=(x10082*x10084);
IkReal gconst5=((1.0)*r20*x10084);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10086=((-1.0)*r21);
CheckValue<IkReal> x10089 = IKatan2WithCheck(IkReal(x10086),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10089.valid){
continue;
}
IkReal x10087=((1.0)*(x10089.value));
IkReal x10088=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10087)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10087)));
IkReal gconst4=(x10086*x10088);
IkReal gconst5=((1.0)*r20*x10088);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10090=((-1.0)*r21);
CheckValue<IkReal> x10093 = IKatan2WithCheck(IkReal(x10090),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10093.valid){
continue;
}
IkReal x10091=((1.0)*(x10093.value));
IkReal x10092=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10091)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10091)));
IkReal gconst4=(x10090*x10092);
IkReal gconst5=((1.0)*r20*x10092);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10094=((-1.0)*r21);
CheckValue<IkReal> x10097 = IKatan2WithCheck(IkReal(x10094),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10097.valid){
continue;
}
IkReal x10095=((1.0)*(x10097.value));
IkReal x10096=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10095)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10095)));
IkReal gconst4=(x10094*x10096);
IkReal gconst5=((1.0)*r20*x10096);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10098=((-1.0)*r21);
CheckValue<IkReal> x10101 = IKatan2WithCheck(IkReal(x10098),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10101.valid){
continue;
}
IkReal x10099=((1.0)*(x10101.value));
IkReal x10100=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10099)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10099)));
IkReal gconst4=(x10098*x10100);
IkReal gconst5=((1.0)*r20*x10100);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10102=((-1.0)*r21);
CheckValue<IkReal> x10105 = IKatan2WithCheck(IkReal(x10102),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10105.valid){
continue;
}
IkReal x10103=((1.0)*(x10105.value));
IkReal x10104=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10103)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10103)));
IkReal gconst4=(x10102*x10104);
IkReal gconst5=((1.0)*r20*x10104);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10106=(gconst4*r01);
IkReal x10107=(gconst5*r00);
CheckValue<IkReal> x10108=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10106*x10107))+(x10106*x10106)+(x10107*x10107)+(r02*r02))),-1);
if(!x10108.valid){
continue;
}
CheckValue<IkReal> x10109 = IKatan2WithCheck(IkReal(((((-1.0)*x10107))+x10106)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10108.value)))+(x10109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10110=IKcos(j4);
IkReal x10111=IKsin(j4);
IkReal x10112=(gconst4*r11);
IkReal x10113=(gconst5*r10);
IkReal x10114=((1.0)*cj1);
IkReal x10115=(gconst5*r00);
IkReal x10116=(gconst5*r20);
IkReal x10117=((1.0)*x10110);
IkReal x10118=(gconst4*x10110);
IkReal x10119=((1.0)*x10111);
IkReal x10120=(gconst4*x10111);
evalcond[0]=(((r01*x10118))+((r02*x10111))+(((-1.0)*x10115*x10117)));
evalcond[1]=(((r21*x10120))+(((-1.0)*r22*x10117))+(((-1.0)*x10116*x10119)));
evalcond[2]=((((-1.0)*x10113*x10119))+(((-1.0)*r12*x10117))+((x10111*x10112)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10117))+(((-1.0)*x10115*x10119))+((r01*x10120)));
evalcond[4]=(((r21*x10118))+((sj1*sj2))+(((-1.0)*cj2*x10114))+((r22*x10111))+(((-1.0)*x10116*x10117)));
evalcond[5]=(((x10110*x10112))+(((-1.0)*x10113*x10117))+(((-1.0)*cj2*sj1))+((r12*x10111))+(((-1.0)*sj2*x10114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10121=((1.0)*gconst5);
CheckValue<IkReal> x10122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10121))+(((-1.0)*gconst4*r10)))),-1);
if(!x10122.valid){
continue;
}
CheckValue<IkReal> x10123 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10121))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10122.value)))+(x10123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10124=IKcos(j4);
IkReal x10125=IKsin(j4);
IkReal x10126=(gconst4*r11);
IkReal x10127=(gconst5*r10);
IkReal x10128=((1.0)*cj1);
IkReal x10129=(gconst5*r00);
IkReal x10130=(gconst5*r20);
IkReal x10131=((1.0)*x10124);
IkReal x10132=(gconst4*x10124);
IkReal x10133=((1.0)*x10125);
IkReal x10134=(gconst4*x10125);
evalcond[0]=((((-1.0)*x10129*x10131))+((r02*x10125))+((r01*x10132)));
evalcond[1]=(((r21*x10134))+(((-1.0)*x10130*x10133))+(((-1.0)*r22*x10131)));
evalcond[2]=((((-1.0)*x10127*x10133))+((x10125*x10126))+(((-1.0)*r12*x10131)));
evalcond[3]=((-1.0)+(((-1.0)*x10129*x10133))+(((-1.0)*r02*x10131))+((r01*x10134)));
evalcond[4]=(((r21*x10132))+(((-1.0)*cj2*x10128))+((sj1*sj2))+((r22*x10125))+(((-1.0)*x10130*x10131)));
evalcond[5]=((((-1.0)*x10127*x10131))+(((-1.0)*cj2*sj1))+((x10124*x10126))+(((-1.0)*sj2*x10128))+((r12*x10125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10135 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10135.valid){
continue;
}
CheckValue<IkReal> x10136=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10135.value)+(((1.5707963267949)*(x10136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10137=IKcos(j4);
IkReal x10138=IKsin(j4);
IkReal x10139=(gconst4*r11);
IkReal x10140=(gconst5*r10);
IkReal x10141=((1.0)*cj1);
IkReal x10142=(gconst5*r00);
IkReal x10143=(gconst5*r20);
IkReal x10144=((1.0)*x10137);
IkReal x10145=(gconst4*x10137);
IkReal x10146=((1.0)*x10138);
IkReal x10147=(gconst4*x10138);
evalcond[0]=(((r02*x10138))+(((-1.0)*x10142*x10144))+((r01*x10145)));
evalcond[1]=(((r21*x10147))+(((-1.0)*x10143*x10146))+(((-1.0)*r22*x10144)));
evalcond[2]=((((-1.0)*r12*x10144))+(((-1.0)*x10140*x10146))+((x10138*x10139)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10144))+(((-1.0)*x10142*x10146))+((r01*x10147)));
evalcond[4]=((((-1.0)*cj2*x10141))+((r21*x10145))+(((-1.0)*x10143*x10144))+((sj1*sj2))+((r22*x10138)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10141))+((r12*x10138))+((x10137*x10139))+(((-1.0)*x10140*x10144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10148=((-1.0)*r21);
CheckValue<IkReal> x10151 = IKatan2WithCheck(IkReal(x10148),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10151.valid){
continue;
}
IkReal x10149=((1.0)*(x10151.value));
IkReal x10150=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10149)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10149)));
IkReal gconst4=(x10148*x10150);
IkReal gconst5=((1.0)*r20*x10150);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10152=((-1.0)*r21);
CheckValue<IkReal> x10155 = IKatan2WithCheck(IkReal(x10152),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10155.valid){
continue;
}
IkReal x10153=((1.0)*(x10155.value));
IkReal x10154=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10153)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10153)));
IkReal gconst4=(x10152*x10154);
IkReal gconst5=((1.0)*r20*x10154);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10156=((-1.0)*r21);
CheckValue<IkReal> x10159 = IKatan2WithCheck(IkReal(x10156),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10159.valid){
continue;
}
IkReal x10157=((1.0)*(x10159.value));
IkReal x10158=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10157)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10157)));
IkReal gconst4=(x10156*x10158);
IkReal gconst5=((1.0)*r20*x10158);
IkReal x10160=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10164=IKPowWithIntegerCheck(x10160,-1);
if(!x10164.valid){
continue;
}
IkReal x10161=x10164.value;
IkReal x10162=((1.0)*x10161);
IkReal x10163=((((-2.0)*r00*r01*r20*r21*x10161))+(((-1.0)*x10162*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10162*(r00*r00)*(r20*r20))));
j4eval[0]=x10163;
j4eval[1]=r02;
j4eval[2]=x10160;
j4eval[3]=IKsign(x10163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10165=(gconst5*r00);
IkReal x10166=(gconst4*r01);
CheckValue<IkReal> x10167 = IKatan2WithCheck(IkReal(((((-1.0)*x10166))+x10165)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10167.valid){
continue;
}
CheckValue<IkReal> x10168=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10166*x10166)))+(((-1.0)*(x10165*x10165)))+(((-1.0)*(r02*r02)))+(((2.0)*x10165*x10166)))),-1);
if(!x10168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10167.value)+(((1.5707963267949)*(x10168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10169=IKsin(j4);
IkReal x10170=IKcos(j4);
IkReal x10171=(gconst4*r11);
IkReal x10172=((1.0)*cj1);
IkReal x10173=(gconst5*r10);
IkReal x10174=(gconst4*r01);
IkReal x10175=(gconst5*r00);
IkReal x10176=(gconst4*r21);
IkReal x10177=(gconst5*r20);
IkReal x10178=((1.0)*x10170);
IkReal x10179=((1.0)*x10169);
evalcond[0]=((((-1.0)*r22*x10178))+(((-1.0)*x10177*x10179))+((x10169*x10176)));
evalcond[1]=((((-1.0)*r12*x10178))+(((-1.0)*x10173*x10179))+((x10169*x10171)));
evalcond[2]=((((-1.0)*x10174*x10178))+((x10170*x10175))+(((-1.0)*r02*x10179)));
evalcond[3]=((-1.0)+(((-1.0)*x10175*x10179))+((x10169*x10174))+(((-1.0)*r02*x10178)));
evalcond[4]=((((-1.0)*x10176*x10178))+(((-1.0)*r22*x10179))+((x10170*x10177))+(((-1.0)*cj2*x10172))+((sj1*sj2)));
evalcond[5]=(((x10170*x10173))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10172))+(((-1.0)*r12*x10179))+(((-1.0)*x10171*x10178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10180=((1.0)*gconst5);
CheckValue<IkReal> x10181 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10180))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10181.valid){
continue;
}
CheckValue<IkReal> x10182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10180))+(((-1.0)*gconst4*r10)))),-1);
if(!x10182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10181.value)+(((1.5707963267949)*(x10182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10183=IKsin(j4);
IkReal x10184=IKcos(j4);
IkReal x10185=(gconst4*r11);
IkReal x10186=((1.0)*cj1);
IkReal x10187=(gconst5*r10);
IkReal x10188=(gconst4*r01);
IkReal x10189=(gconst5*r00);
IkReal x10190=(gconst4*r21);
IkReal x10191=(gconst5*r20);
IkReal x10192=((1.0)*x10184);
IkReal x10193=((1.0)*x10183);
evalcond[0]=((((-1.0)*x10191*x10193))+((x10183*x10190))+(((-1.0)*r22*x10192)));
evalcond[1]=((((-1.0)*x10187*x10193))+(((-1.0)*r12*x10192))+((x10183*x10185)));
evalcond[2]=((((-1.0)*r02*x10193))+(((-1.0)*x10188*x10192))+((x10184*x10189)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10192))+((x10183*x10188))+(((-1.0)*x10189*x10193)));
evalcond[4]=((((-1.0)*cj2*x10186))+((sj1*sj2))+(((-1.0)*x10190*x10192))+((x10184*x10191))+(((-1.0)*r22*x10193)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10186))+(((-1.0)*r12*x10193))+(((-1.0)*x10185*x10192))+((x10184*x10187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10194 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10194.valid){
continue;
}
CheckValue<IkReal> x10195=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10194.value)+(((1.5707963267949)*(x10195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10196=IKsin(j4);
IkReal x10197=IKcos(j4);
IkReal x10198=(gconst4*r11);
IkReal x10199=((1.0)*cj1);
IkReal x10200=(gconst5*r10);
IkReal x10201=(gconst4*r01);
IkReal x10202=(gconst5*r00);
IkReal x10203=(gconst4*r21);
IkReal x10204=(gconst5*r20);
IkReal x10205=((1.0)*x10197);
IkReal x10206=((1.0)*x10196);
evalcond[0]=((((-1.0)*r22*x10205))+((x10196*x10203))+(((-1.0)*x10204*x10206)));
evalcond[1]=((((-1.0)*x10200*x10206))+((x10196*x10198))+(((-1.0)*r12*x10205)));
evalcond[2]=((((-1.0)*r02*x10206))+(((-1.0)*x10201*x10205))+((x10197*x10202)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10205))+((x10196*x10201))+(((-1.0)*x10202*x10206)));
evalcond[4]=((((-1.0)*cj2*x10199))+(((-1.0)*r22*x10206))+((sj1*sj2))+(((-1.0)*x10203*x10205))+((x10197*x10204)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10199))+((x10197*x10200))+(((-1.0)*x10198*x10205))+(((-1.0)*r12*x10206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10207=((-1.0)*r21);
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal(x10207),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
IkReal x10208=((1.0)*(x10210.value));
IkReal x10209=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10208)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10208)));
IkReal gconst4=(x10207*x10209);
IkReal gconst5=((1.0)*r20*x10209);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10211=((-1.0)*r21);
CheckValue<IkReal> x10214 = IKatan2WithCheck(IkReal(x10211),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10214.valid){
continue;
}
IkReal x10212=((1.0)*(x10214.value));
IkReal x10213=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10212)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10212)));
IkReal gconst4=(x10211*x10213);
IkReal gconst5=((1.0)*r20*x10213);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10215=((-1.0)*r21);
CheckValue<IkReal> x10218 = IKatan2WithCheck(IkReal(x10215),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10218.valid){
continue;
}
IkReal x10216=((1.0)*(x10218.value));
IkReal x10217=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10216)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10216)));
IkReal gconst4=(x10215*x10217);
IkReal gconst5=((1.0)*r20*x10217);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10219=(gconst4*r01);
IkReal x10220=(gconst5*r00);
CheckValue<IkReal> x10221=IKPowWithIntegerCheck(IKsign(((x10220*x10220)+(x10219*x10219)+(((-2.0)*x10219*x10220))+(r02*r02))),-1);
if(!x10221.valid){
continue;
}
CheckValue<IkReal> x10222 = IKatan2WithCheck(IkReal((x10219+(((-1.0)*x10220)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10221.value)))+(x10222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10223=IKcos(j4);
IkReal x10224=IKsin(j4);
IkReal x10225=(gconst5*r10);
IkReal x10226=((1.0)*sj2);
IkReal x10227=(gconst5*r00);
IkReal x10228=(gconst5*r20);
IkReal x10229=((1.0)*x10223);
IkReal x10230=(gconst4*x10224);
IkReal x10231=(gconst4*x10223);
IkReal x10232=((1.0)*x10224);
evalcond[0]=((((-1.0)*x10227*x10229))+((r02*x10224))+((r01*x10231)));
evalcond[1]=(((r21*x10230))+(((-1.0)*r22*x10229))+(((-1.0)*x10228*x10232)));
evalcond[2]=((((-1.0)*x10225*x10232))+(((-1.0)*r12*x10229))+((r11*x10230)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10229))+(((-1.0)*x10227*x10232))+((r01*x10230)));
evalcond[4]=(((r12*x10224))+(((-1.0)*x10225*x10229))+((cj1*cj2))+((r11*x10231))+(((-1.0)*sj1*x10226)));
evalcond[5]=((((-1.0)*cj1*x10226))+((r22*x10224))+(((-1.0)*cj2*sj1))+((r21*x10231))+(((-1.0)*x10228*x10229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10233=((1.0)*gconst5);
CheckValue<IkReal> x10234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10233))+(((-1.0)*gconst4*r10)))),-1);
if(!x10234.valid){
continue;
}
CheckValue<IkReal> x10235 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10233)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10234.value)))+(x10235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10236=IKcos(j4);
IkReal x10237=IKsin(j4);
IkReal x10238=(gconst5*r10);
IkReal x10239=((1.0)*sj2);
IkReal x10240=(gconst5*r00);
IkReal x10241=(gconst5*r20);
IkReal x10242=((1.0)*x10236);
IkReal x10243=(gconst4*x10237);
IkReal x10244=(gconst4*x10236);
IkReal x10245=((1.0)*x10237);
evalcond[0]=((((-1.0)*x10240*x10242))+((r02*x10237))+((r01*x10244)));
evalcond[1]=((((-1.0)*x10241*x10245))+((r21*x10243))+(((-1.0)*r22*x10242)));
evalcond[2]=((((-1.0)*x10238*x10245))+(((-1.0)*r12*x10242))+((r11*x10243)));
evalcond[3]=((-1.0)+(((-1.0)*x10240*x10245))+((r01*x10243))+(((-1.0)*r02*x10242)));
evalcond[4]=((((-1.0)*sj1*x10239))+(((-1.0)*x10238*x10242))+((cj1*cj2))+((r12*x10237))+((r11*x10244)));
evalcond[5]=((((-1.0)*cj1*x10239))+(((-1.0)*x10241*x10242))+((r22*x10237))+(((-1.0)*cj2*sj1))+((r21*x10244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10246 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10246.valid){
continue;
}
CheckValue<IkReal> x10247=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10246.value)+(((1.5707963267949)*(x10247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10248=IKcos(j4);
IkReal x10249=IKsin(j4);
IkReal x10250=(gconst5*r10);
IkReal x10251=((1.0)*sj2);
IkReal x10252=(gconst5*r00);
IkReal x10253=(gconst5*r20);
IkReal x10254=((1.0)*x10248);
IkReal x10255=(gconst4*x10249);
IkReal x10256=(gconst4*x10248);
IkReal x10257=((1.0)*x10249);
evalcond[0]=((((-1.0)*x10252*x10254))+((r02*x10249))+((r01*x10256)));
evalcond[1]=((((-1.0)*x10253*x10257))+((r21*x10255))+(((-1.0)*r22*x10254)));
evalcond[2]=((((-1.0)*r12*x10254))+(((-1.0)*x10250*x10257))+((r11*x10255)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10254))+(((-1.0)*x10252*x10257))+((r01*x10255)));
evalcond[4]=(((cj1*cj2))+(((-1.0)*x10250*x10254))+((r11*x10256))+(((-1.0)*sj1*x10251))+((r12*x10249)));
evalcond[5]=((((-1.0)*x10253*x10254))+(((-1.0)*cj1*x10251))+((r22*x10249))+(((-1.0)*cj2*sj1))+((r21*x10256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10258=((-1.0)*r21);
CheckValue<IkReal> x10261 = IKatan2WithCheck(IkReal(x10258),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10261.valid){
continue;
}
IkReal x10259=((1.0)*(x10261.value));
IkReal x10260=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10259)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10259)));
IkReal gconst4=(x10258*x10260);
IkReal gconst5=((1.0)*r20*x10260);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10262=((-1.0)*r21);
CheckValue<IkReal> x10265 = IKatan2WithCheck(IkReal(x10262),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10265.valid){
continue;
}
IkReal x10263=((1.0)*(x10265.value));
IkReal x10264=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10263)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10263)));
IkReal gconst4=(x10262*x10264);
IkReal gconst5=((1.0)*r20*x10264);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10266=((-1.0)*r21);
CheckValue<IkReal> x10269 = IKatan2WithCheck(IkReal(x10266),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10269.valid){
continue;
}
IkReal x10267=((1.0)*(x10269.value));
IkReal x10268=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10267)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10267)));
IkReal gconst4=(x10266*x10268);
IkReal gconst5=((1.0)*r20*x10268);
IkReal x10270=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10274=IKPowWithIntegerCheck(x10270,-1);
if(!x10274.valid){
continue;
}
IkReal x10271=x10274.value;
IkReal x10272=((1.0)*x10271);
IkReal x10273=((((-1.0)*x10272*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10271))+(((-1.0)*x10272*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02))));
j4eval[0]=x10273;
j4eval[1]=r02;
j4eval[2]=x10270;
j4eval[3]=IKsign(x10273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10275=(gconst5*r00);
IkReal x10276=(gconst4*r01);
CheckValue<IkReal> x10277 = IKatan2WithCheck(IkReal((x10275+(((-1.0)*x10276)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10277.valid){
continue;
}
CheckValue<IkReal> x10278=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10275*x10276))+(((-1.0)*(x10276*x10276)))+(((-1.0)*(x10275*x10275))))),-1);
if(!x10278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10277.value)+(((1.5707963267949)*(x10278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10279=IKsin(j4);
IkReal x10280=IKcos(j4);
IkReal x10281=(gconst4*r11);
IkReal x10282=(gconst5*r10);
IkReal x10283=((1.0)*sj2);
IkReal x10284=(gconst5*r00);
IkReal x10285=(gconst5*r20);
IkReal x10286=((1.0)*x10280);
IkReal x10287=(gconst4*x10279);
IkReal x10288=((1.0)*x10279);
evalcond[0]=((((-1.0)*r22*x10286))+((r21*x10287))+(((-1.0)*x10285*x10288)));
evalcond[1]=((((-1.0)*x10282*x10288))+(((-1.0)*r12*x10286))+((x10279*x10281)));
evalcond[2]=((((-1.0)*gconst4*r01*x10286))+((x10280*x10284))+(((-1.0)*r02*x10288)));
evalcond[3]=((-1.0)+((r01*x10287))+(((-1.0)*r02*x10286))+(((-1.0)*x10284*x10288)));
evalcond[4]=((((-1.0)*x10281*x10286))+(((-1.0)*r12*x10288))+((x10280*x10282))+((cj1*cj2))+(((-1.0)*sj1*x10283)));
evalcond[5]=((((-1.0)*gconst4*r21*x10286))+(((-1.0)*cj2*sj1))+((x10280*x10285))+(((-1.0)*cj1*x10283))+(((-1.0)*r22*x10288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10289=((1.0)*gconst5);
CheckValue<IkReal> x10290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10289))+(((-1.0)*gconst4*r10)))),-1);
if(!x10290.valid){
continue;
}
CheckValue<IkReal> x10291 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10290.value)))+(x10291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10292=IKsin(j4);
IkReal x10293=IKcos(j4);
IkReal x10294=(gconst4*r11);
IkReal x10295=(gconst5*r10);
IkReal x10296=((1.0)*sj2);
IkReal x10297=(gconst5*r00);
IkReal x10298=(gconst5*r20);
IkReal x10299=((1.0)*x10293);
IkReal x10300=(gconst4*x10292);
IkReal x10301=((1.0)*x10292);
evalcond[0]=((((-1.0)*x10298*x10301))+((r21*x10300))+(((-1.0)*r22*x10299)));
evalcond[1]=((((-1.0)*r12*x10299))+((x10292*x10294))+(((-1.0)*x10295*x10301)));
evalcond[2]=((((-1.0)*r02*x10301))+(((-1.0)*gconst4*r01*x10299))+((x10293*x10297)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10299))+((r01*x10300))+(((-1.0)*x10297*x10301)));
evalcond[4]=((((-1.0)*sj1*x10296))+(((-1.0)*r12*x10301))+(((-1.0)*x10294*x10299))+((x10293*x10295))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst4*r21*x10299))+(((-1.0)*r22*x10301))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10296))+((x10293*x10298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10302 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10302.valid){
continue;
}
CheckValue<IkReal> x10303=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10302.value)+(((1.5707963267949)*(x10303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10304=IKsin(j4);
IkReal x10305=IKcos(j4);
IkReal x10306=(gconst4*r11);
IkReal x10307=(gconst5*r10);
IkReal x10308=((1.0)*sj2);
IkReal x10309=(gconst5*r00);
IkReal x10310=(gconst5*r20);
IkReal x10311=((1.0)*x10305);
IkReal x10312=(gconst4*x10304);
IkReal x10313=((1.0)*x10304);
evalcond[0]=((((-1.0)*x10310*x10313))+((r21*x10312))+(((-1.0)*r22*x10311)));
evalcond[1]=((((-1.0)*x10307*x10313))+((x10304*x10306))+(((-1.0)*r12*x10311)));
evalcond[2]=(((x10305*x10309))+(((-1.0)*r02*x10313))+(((-1.0)*gconst4*r01*x10311)));
evalcond[3]=((-1.0)+((r01*x10312))+(((-1.0)*x10309*x10313))+(((-1.0)*r02*x10311)));
evalcond[4]=(((x10305*x10307))+(((-1.0)*sj1*x10308))+(((-1.0)*x10306*x10311))+(((-1.0)*r12*x10313))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10308))+(((-1.0)*gconst4*r21*x10311))+((x10305*x10310))+(((-1.0)*r22*x10313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10314=gconst4*gconst4;
IkReal x10315=gconst5*gconst5;
IkReal x10316=(r01*r20);
IkReal x10317=(gconst4*sj3);
IkReal x10318=(r01*r21);
IkReal x10319=((1.0)*cj3);
IkReal x10320=(r00*r21);
IkReal x10321=(r00*r20);
IkReal x10322=(cj3*gconst4*gconst5);
IkReal x10323=((1.0)*x10315);
CheckValue<IkReal> x10324 = IKatan2WithCheck(IkReal((((r00*r22*x10317))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x10314*x10320))+(((-1.0)*gconst5*x10317*x10321))+((gconst5*x10317*x10318))+(((-1.0)*sj3*x10316*x10323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10324.valid){
continue;
}
CheckValue<IkReal> x10325=IKPowWithIntegerCheck(IKsign((((x10320*x10322))+((x10316*x10322))+(((-1.0)*x10315*x10319*x10321))+(((-1.0)*r02*r22*x10319))+(((-1.0)*x10314*x10318*x10319)))),-1);
if(!x10325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10324.value)+(((1.5707963267949)*(x10325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10326=IKsin(j4);
IkReal x10327=IKcos(j4);
IkReal x10328=(gconst5*sj3);
IkReal x10329=(cj3*gconst5);
IkReal x10330=((1.0)*sj2);
IkReal x10331=((1.0)*r10);
IkReal x10332=((1.0)*cj2);
IkReal x10333=(cj3*gconst4);
IkReal x10334=((1.0)*r00);
IkReal x10335=((1.0)*r20);
IkReal x10336=(gconst4*sj3);
IkReal x10337=(cj1*x10330);
IkReal x10338=(sj1*x10332);
IkReal x10339=((1.0)*x10327);
IkReal x10340=(gconst4*x10326);
IkReal x10341=(cj3*x10326);
IkReal x10342=(sj3*x10326);
IkReal x10343=(gconst5*x10326);
IkReal x10344=(x10327*x10336);
IkReal x10345=(x10337+x10338);
evalcond[0]=((((-1.0)*r22*x10339))+((r21*x10340))+(((-1.0)*x10335*x10343)));
evalcond[1]=((((-1.0)*x10331*x10343))+(((-1.0)*r12*x10339))+((r11*x10340)));
evalcond[2]=((-1.0)+((r01*x10340))+(((-1.0)*x10334*x10343))+(((-1.0)*r02*x10339)));
evalcond[3]=(((r00*x10336))+((r01*x10328))+((r01*x10327*x10333))+(((-1.0)*x10327*x10329*x10334))+((r02*x10341)));
evalcond[4]=((((-1.0)*x10333*x10334))+((r01*x10344))+(((-1.0)*x10327*x10328*x10334))+(((-1.0)*r01*x10329))+((r02*x10342)));
evalcond[5]=((((-1.0)*sj1*x10330))+((r11*x10327*x10333))+((r12*x10341))+(((-1.0)*x10327*x10329*x10331))+((r11*x10328))+((cj1*cj2))+((r10*x10336)));
evalcond[6]=((((-1.0)*x10345))+((r20*x10336))+((r22*x10341))+((r21*x10328))+(((-1.0)*x10327*x10329*x10335))+((r21*x10327*x10333)));
evalcond[7]=((((-1.0)*x10333*x10335))+(((-1.0)*r21*x10329))+(((-1.0)*cj1*x10332))+((sj1*sj2))+((r22*x10342))+(((-1.0)*x10327*x10328*x10335))+((r21*x10344)));
evalcond[8]=((((-1.0)*x10345))+(((-1.0)*x10327*x10328*x10331))+((r12*x10342))+(((-1.0)*r11*x10329))+((r11*x10344))+(((-1.0)*x10331*x10333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10346=((1.0)*gconst5);
CheckValue<IkReal> x10347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10346))+(((-1.0)*gconst4*r10)))),-1);
if(!x10347.valid){
continue;
}
CheckValue<IkReal> x10348 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10347.value)))+(x10348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10349=IKsin(j4);
IkReal x10350=IKcos(j4);
IkReal x10351=(gconst5*sj3);
IkReal x10352=(cj3*gconst5);
IkReal x10353=((1.0)*sj2);
IkReal x10354=((1.0)*r10);
IkReal x10355=((1.0)*cj2);
IkReal x10356=(cj3*gconst4);
IkReal x10357=((1.0)*r00);
IkReal x10358=((1.0)*r20);
IkReal x10359=(gconst4*sj3);
IkReal x10360=(cj1*x10353);
IkReal x10361=(sj1*x10355);
IkReal x10362=((1.0)*x10350);
IkReal x10363=(gconst4*x10349);
IkReal x10364=(cj3*x10349);
IkReal x10365=(sj3*x10349);
IkReal x10366=(gconst5*x10349);
IkReal x10367=(x10350*x10359);
IkReal x10368=(x10361+x10360);
evalcond[0]=(((r21*x10363))+(((-1.0)*x10358*x10366))+(((-1.0)*r22*x10362)));
evalcond[1]=((((-1.0)*x10354*x10366))+((r11*x10363))+(((-1.0)*r12*x10362)));
evalcond[2]=((-1.0)+((r01*x10363))+(((-1.0)*x10357*x10366))+(((-1.0)*r02*x10362)));
evalcond[3]=(((r00*x10359))+((r01*x10351))+(((-1.0)*x10350*x10352*x10357))+((r02*x10364))+((r01*x10350*x10356)));
evalcond[4]=((((-1.0)*x10350*x10351*x10357))+(((-1.0)*x10356*x10357))+((r01*x10367))+(((-1.0)*r01*x10352))+((r02*x10365)));
evalcond[5]=((((-1.0)*sj1*x10353))+(((-1.0)*x10350*x10352*x10354))+((cj1*cj2))+((r11*x10351))+((r10*x10359))+((r11*x10350*x10356))+((r12*x10364)));
evalcond[6]=(((r21*x10351))+((r22*x10364))+((r20*x10359))+(((-1.0)*x10350*x10352*x10358))+((r21*x10350*x10356))+(((-1.0)*x10368)));
evalcond[7]=((((-1.0)*x10350*x10351*x10358))+((r22*x10365))+((r21*x10367))+(((-1.0)*x10356*x10358))+(((-1.0)*cj1*x10355))+((sj1*sj2))+(((-1.0)*r21*x10352)));
evalcond[8]=((((-1.0)*x10350*x10351*x10354))+(((-1.0)*x10354*x10356))+(((-1.0)*r11*x10352))+((r11*x10367))+(((-1.0)*x10368))+((r12*x10365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10369 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10369.valid){
continue;
}
CheckValue<IkReal> x10370=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10369.value)+(((1.5707963267949)*(x10370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10371=IKsin(j4);
IkReal x10372=IKcos(j4);
IkReal x10373=(gconst5*sj3);
IkReal x10374=(cj3*gconst5);
IkReal x10375=((1.0)*sj2);
IkReal x10376=((1.0)*r10);
IkReal x10377=((1.0)*cj2);
IkReal x10378=(cj3*gconst4);
IkReal x10379=((1.0)*r00);
IkReal x10380=((1.0)*r20);
IkReal x10381=(gconst4*sj3);
IkReal x10382=(cj1*x10375);
IkReal x10383=(sj1*x10377);
IkReal x10384=((1.0)*x10372);
IkReal x10385=(gconst4*x10371);
IkReal x10386=(cj3*x10371);
IkReal x10387=(sj3*x10371);
IkReal x10388=(gconst5*x10371);
IkReal x10389=(x10372*x10381);
IkReal x10390=(x10383+x10382);
evalcond[0]=(((r21*x10385))+(((-1.0)*x10380*x10388))+(((-1.0)*r22*x10384)));
evalcond[1]=((((-1.0)*x10376*x10388))+((r11*x10385))+(((-1.0)*r12*x10384)));
evalcond[2]=((-1.0)+(((-1.0)*x10379*x10388))+(((-1.0)*r02*x10384))+((r01*x10385)));
evalcond[3]=(((r01*x10372*x10378))+((r01*x10373))+(((-1.0)*x10372*x10374*x10379))+((r02*x10386))+((r00*x10381)));
evalcond[4]=((((-1.0)*r01*x10374))+((r02*x10387))+(((-1.0)*x10378*x10379))+(((-1.0)*x10372*x10373*x10379))+((r01*x10389)));
evalcond[5]=(((r12*x10386))+(((-1.0)*x10372*x10374*x10376))+((r10*x10381))+((cj1*cj2))+((r11*x10372*x10378))+((r11*x10373))+(((-1.0)*sj1*x10375)));
evalcond[6]=(((r21*x10372*x10378))+(((-1.0)*x10390))+(((-1.0)*x10372*x10374*x10380))+((r22*x10386))+((r20*x10381))+((r21*x10373)));
evalcond[7]=((((-1.0)*r21*x10374))+((r21*x10389))+(((-1.0)*x10372*x10373*x10380))+((sj1*sj2))+(((-1.0)*cj1*x10377))+((r22*x10387))+(((-1.0)*x10378*x10380)));
evalcond[8]=((((-1.0)*x10390))+(((-1.0)*x10376*x10378))+((r12*x10387))+(((-1.0)*r11*x10374))+((r11*x10389))+(((-1.0)*x10372*x10373*x10376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10391=((-1.0)*r21);
CheckValue<IkReal> x10394 = IKatan2WithCheck(IkReal(x10391),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10394.valid){
continue;
}
IkReal x10392=((1.0)*(x10394.value));
IkReal x10393=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10392)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10392)));
IkReal gconst4=(x10391*x10393);
IkReal gconst5=((1.0)*r20*x10393);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10395=((-1.0)*r21);
CheckValue<IkReal> x10398 = IKatan2WithCheck(IkReal(x10395),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10398.valid){
continue;
}
IkReal x10396=((1.0)*(x10398.value));
IkReal x10397=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10396)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10396)));
IkReal gconst4=(x10395*x10397);
IkReal gconst5=((1.0)*r20*x10397);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10399=((-1.0)*r21);
CheckValue<IkReal> x10402 = IKatan2WithCheck(IkReal(x10399),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10402.valid){
continue;
}
IkReal x10400=((1.0)*(x10402.value));
IkReal x10401=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10400)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10400)));
IkReal gconst4=(x10399*x10401);
IkReal gconst5=((1.0)*r20*x10401);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10403=((-1.0)*r21);
CheckValue<IkReal> x10406 = IKatan2WithCheck(IkReal(x10403),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10406.valid){
continue;
}
IkReal x10404=((1.0)*(x10406.value));
IkReal x10405=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10404)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10404)));
IkReal gconst4=(x10403*x10405);
IkReal gconst5=((1.0)*r20*x10405);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10407=((-1.0)*r21);
CheckValue<IkReal> x10410 = IKatan2WithCheck(IkReal(x10407),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10410.valid){
continue;
}
IkReal x10408=((1.0)*(x10410.value));
IkReal x10409=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10408)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10408)));
IkReal gconst4=(x10407*x10409);
IkReal gconst5=((1.0)*r20*x10409);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10411=((-1.0)*r21);
CheckValue<IkReal> x10414 = IKatan2WithCheck(IkReal(x10411),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10414.valid){
continue;
}
IkReal x10412=((1.0)*(x10414.value));
IkReal x10413=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10412)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10412)));
IkReal gconst4=(x10411*x10413);
IkReal gconst5=((1.0)*r20*x10413);
IkReal x10415=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10419=IKPowWithIntegerCheck(x10415,-1);
if(!x10419.valid){
continue;
}
IkReal x10416=x10419.value;
IkReal x10417=((1.0)*x10416);
IkReal x10418=((((-1.0)*(r02*r02)))+(((-1.0)*x10417*(r01*r01)*(r21*r21)))+(((-1.0)*x10417*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10416)));
j4eval[0]=x10418;
j4eval[1]=IKsign(x10418);
j4eval[2]=r02;
j4eval[3]=x10415;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10420=(gconst4*r01);
IkReal x10421=(gconst5*r00);
CheckValue<IkReal> x10422=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10420*x10420)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10421*x10421)))+(((2.0)*x10420*x10421)))),-1);
if(!x10422.valid){
continue;
}
CheckValue<IkReal> x10423 = IKatan2WithCheck(IkReal((x10420+(((-1.0)*x10421)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10422.value)))+(x10423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10424=IKcos(j4);
IkReal x10425=IKsin(j4);
IkReal x10426=(gconst4*r11);
IkReal x10427=(gconst5*r10);
IkReal x10428=(gconst5*r00);
IkReal x10429=(gconst5*r20);
IkReal x10430=((1.0)*x10424);
IkReal x10431=(gconst4*x10424);
IkReal x10432=((1.0)*x10425);
IkReal x10433=(gconst4*x10425);
evalcond[0]=(((r01*x10431))+(((-1.0)*x10428*x10430))+((r02*x10425)));
evalcond[1]=((((-1.0)*x10429*x10432))+(((-1.0)*r22*x10430))+((r21*x10433)));
evalcond[2]=(((x10425*x10426))+(((-1.0)*x10427*x10432))+(((-1.0)*r12*x10430)));
evalcond[3]=((1.0)+((r01*x10433))+(((-1.0)*x10428*x10432))+(((-1.0)*r02*x10430)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10427*x10430))+((cj1*sj2))+((r12*x10425))+((x10424*x10426)));
evalcond[5]=(((r22*x10425))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10429*x10430))+((r21*x10431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10434=((1.0)*gconst5);
CheckValue<IkReal> x10435 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10434))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10435.valid){
continue;
}
CheckValue<IkReal> x10436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10434))+(((-1.0)*gconst4*r20)))),-1);
if(!x10436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10435.value)+(((1.5707963267949)*(x10436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10437=IKcos(j4);
IkReal x10438=IKsin(j4);
IkReal x10439=(gconst4*r11);
IkReal x10440=(gconst5*r10);
IkReal x10441=(gconst5*r00);
IkReal x10442=(gconst5*r20);
IkReal x10443=((1.0)*x10437);
IkReal x10444=(gconst4*x10437);
IkReal x10445=((1.0)*x10438);
IkReal x10446=(gconst4*x10438);
evalcond[0]=((((-1.0)*x10441*x10443))+((r02*x10438))+((r01*x10444)));
evalcond[1]=((((-1.0)*x10442*x10445))+((r21*x10446))+(((-1.0)*r22*x10443)));
evalcond[2]=((((-1.0)*x10440*x10445))+((x10438*x10439))+(((-1.0)*r12*x10443)));
evalcond[3]=((1.0)+(((-1.0)*x10441*x10445))+(((-1.0)*r02*x10443))+((r01*x10446)));
evalcond[4]=((((-1.0)*x10440*x10443))+((cj2*sj1))+((x10437*x10439))+((cj1*sj2))+((r12*x10438)));
evalcond[5]=(((r22*x10438))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10442*x10443))+((r21*x10444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10447=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10447.valid){
continue;
}
CheckValue<IkReal> x10448 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10447.value)))+(x10448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10449=IKcos(j4);
IkReal x10450=IKsin(j4);
IkReal x10451=(gconst4*r11);
IkReal x10452=(gconst5*r10);
IkReal x10453=(gconst5*r00);
IkReal x10454=(gconst5*r20);
IkReal x10455=((1.0)*x10449);
IkReal x10456=(gconst4*x10449);
IkReal x10457=((1.0)*x10450);
IkReal x10458=(gconst4*x10450);
evalcond[0]=(((r01*x10456))+(((-1.0)*x10453*x10455))+((r02*x10450)));
evalcond[1]=((((-1.0)*r22*x10455))+((r21*x10458))+(((-1.0)*x10454*x10457)));
evalcond[2]=((((-1.0)*x10452*x10457))+((x10450*x10451))+(((-1.0)*r12*x10455)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10455))+((r01*x10458))+(((-1.0)*x10453*x10457)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10449*x10451))+(((-1.0)*x10452*x10455))+((r12*x10450)));
evalcond[5]=(((r22*x10450))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10456))+(((-1.0)*x10454*x10455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10459=((-1.0)*r21);
CheckValue<IkReal> x10462 = IKatan2WithCheck(IkReal(x10459),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10462.valid){
continue;
}
IkReal x10460=((1.0)*(x10462.value));
IkReal x10461=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10460)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10460)));
IkReal gconst4=(x10459*x10461);
IkReal gconst5=((1.0)*r20*x10461);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10463=((-1.0)*r21);
CheckValue<IkReal> x10466 = IKatan2WithCheck(IkReal(x10463),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10466.valid){
continue;
}
IkReal x10464=((1.0)*(x10466.value));
IkReal x10465=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10464)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10464)));
IkReal gconst4=(x10463*x10465);
IkReal gconst5=((1.0)*r20*x10465);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10467=((-1.0)*r21);
CheckValue<IkReal> x10470 = IKatan2WithCheck(IkReal(x10467),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10470.valid){
continue;
}
IkReal x10468=((1.0)*(x10470.value));
IkReal x10469=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10468)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10468)));
IkReal gconst4=(x10467*x10469);
IkReal gconst5=((1.0)*r20*x10469);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10471=(gconst5*r00);
IkReal x10472=(gconst4*r01);
CheckValue<IkReal> x10473 = IKatan2WithCheck(IkReal(((((-1.0)*x10472))+x10471)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10473.valid){
continue;
}
CheckValue<IkReal> x10474=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10471*x10472))+(x10472*x10472)+(x10471*x10471)+(r02*r02))),-1);
if(!x10474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10473.value)+(((1.5707963267949)*(x10474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10475=IKsin(j4);
IkReal x10476=IKcos(j4);
IkReal x10477=(gconst4*r11);
IkReal x10478=(gconst5*r10);
IkReal x10479=(gconst4*r01);
IkReal x10480=(gconst5*r00);
IkReal x10481=(gconst4*r21);
IkReal x10482=(gconst5*r20);
IkReal x10483=((1.0)*x10476);
IkReal x10484=((1.0)*x10475);
evalcond[0]=(((x10475*x10481))+(((-1.0)*r22*x10483))+(((-1.0)*x10482*x10484)));
evalcond[1]=((((-1.0)*x10478*x10484))+((x10475*x10477))+(((-1.0)*r12*x10483)));
evalcond[2]=((((-1.0)*x10479*x10483))+(((-1.0)*r02*x10484))+((x10476*x10480)));
evalcond[3]=((1.0)+(((-1.0)*x10480*x10484))+((x10475*x10479))+(((-1.0)*r02*x10483)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10477*x10483))+((cj1*sj2))+((x10476*x10478))+(((-1.0)*r12*x10484)));
evalcond[5]=((((-1.0)*x10481*x10483))+(((-1.0)*r22*x10484))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10476*x10482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10485=((1.0)*gconst5);
CheckValue<IkReal> x10486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10485))+(((-1.0)*gconst4*r20)))),-1);
if(!x10486.valid){
continue;
}
CheckValue<IkReal> x10487 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10486.value)))+(x10487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10488=IKsin(j4);
IkReal x10489=IKcos(j4);
IkReal x10490=(gconst4*r11);
IkReal x10491=(gconst5*r10);
IkReal x10492=(gconst4*r01);
IkReal x10493=(gconst5*r00);
IkReal x10494=(gconst4*r21);
IkReal x10495=(gconst5*r20);
IkReal x10496=((1.0)*x10489);
IkReal x10497=((1.0)*x10488);
evalcond[0]=((((-1.0)*x10495*x10497))+(((-1.0)*r22*x10496))+((x10488*x10494)));
evalcond[1]=((((-1.0)*r12*x10496))+(((-1.0)*x10491*x10497))+((x10488*x10490)));
evalcond[2]=(((x10489*x10493))+(((-1.0)*x10492*x10496))+(((-1.0)*r02*x10497)));
evalcond[3]=((1.0)+(((-1.0)*x10493*x10497))+(((-1.0)*r02*x10496))+((x10488*x10492)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10490*x10496))+((x10489*x10491))+(((-1.0)*r12*x10497)));
evalcond[5]=((((-1.0)*r22*x10497))+(((-1.0)*x10494*x10496))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10489*x10495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10498=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10498.valid){
continue;
}
CheckValue<IkReal> x10499 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10498.value)))+(x10499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10500=IKsin(j4);
IkReal x10501=IKcos(j4);
IkReal x10502=(gconst4*r11);
IkReal x10503=(gconst5*r10);
IkReal x10504=(gconst4*r01);
IkReal x10505=(gconst5*r00);
IkReal x10506=(gconst4*r21);
IkReal x10507=(gconst5*r20);
IkReal x10508=((1.0)*x10501);
IkReal x10509=((1.0)*x10500);
evalcond[0]=((((-1.0)*r22*x10508))+((x10500*x10506))+(((-1.0)*x10507*x10509)));
evalcond[1]=((((-1.0)*x10503*x10509))+(((-1.0)*r12*x10508))+((x10500*x10502)));
evalcond[2]=((((-1.0)*x10504*x10508))+(((-1.0)*r02*x10509))+((x10501*x10505)));
evalcond[3]=((1.0)+((x10500*x10504))+(((-1.0)*r02*x10508))+(((-1.0)*x10505*x10509)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10502*x10508))+((cj1*sj2))+(((-1.0)*r12*x10509))+((x10501*x10503)));
evalcond[5]=((((-1.0)*r22*x10509))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10506*x10508))+((x10501*x10507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10510=((-1.0)*r21);
CheckValue<IkReal> x10513 = IKatan2WithCheck(IkReal(x10510),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10513.valid){
continue;
}
IkReal x10511=((1.0)*(x10513.value));
IkReal x10512=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10511)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10511)));
IkReal gconst4=(x10510*x10512);
IkReal gconst5=((1.0)*r20*x10512);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10514=((-1.0)*r21);
CheckValue<IkReal> x10517 = IKatan2WithCheck(IkReal(x10514),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10517.valid){
continue;
}
IkReal x10515=((1.0)*(x10517.value));
IkReal x10516=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10515)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10515)));
IkReal gconst4=(x10514*x10516);
IkReal gconst5=((1.0)*r20*x10516);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10518=((-1.0)*r21);
CheckValue<IkReal> x10521 = IKatan2WithCheck(IkReal(x10518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10521.valid){
continue;
}
IkReal x10519=((1.0)*(x10521.value));
IkReal x10520=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10519)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10519)));
IkReal gconst4=(x10518*x10520);
IkReal gconst5=((1.0)*r20*x10520);
IkReal x10522=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10526=IKPowWithIntegerCheck(x10522,-1);
if(!x10526.valid){
continue;
}
IkReal x10523=x10526.value;
IkReal x10524=((1.0)*x10523);
IkReal x10525=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10523))+(((-1.0)*x10524*(r01*r01)*(r21*r21)))+(((-1.0)*x10524*(r00*r00)*(r20*r20))));
j4eval[0]=x10525;
j4eval[1]=IKsign(x10525);
j4eval[2]=r02;
j4eval[3]=x10522;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10527=(gconst4*r01);
IkReal x10528=(gconst5*r00);
CheckValue<IkReal> x10529=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10527*x10527)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10528*x10528)))+(((2.0)*x10527*x10528)))),-1);
if(!x10529.valid){
continue;
}
CheckValue<IkReal> x10530 = IKatan2WithCheck(IkReal(((((-1.0)*x10528))+x10527)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10529.value)))+(x10530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10531=IKcos(j4);
IkReal x10532=IKsin(j4);
IkReal x10533=(gconst4*r11);
IkReal x10534=(gconst5*r10);
IkReal x10535=((1.0)*cj1);
IkReal x10536=(gconst5*r00);
IkReal x10537=(gconst5*r20);
IkReal x10538=((1.0)*x10531);
IkReal x10539=(gconst4*x10531);
IkReal x10540=((1.0)*x10532);
IkReal x10541=(gconst4*x10532);
evalcond[0]=((((-1.0)*x10536*x10538))+((r02*x10532))+((r01*x10539)));
evalcond[1]=((((-1.0)*r22*x10538))+(((-1.0)*x10537*x10540))+((r21*x10541)));
evalcond[2]=((((-1.0)*x10534*x10540))+(((-1.0)*r12*x10538))+((x10532*x10533)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10538))+(((-1.0)*x10536*x10540))+((r01*x10541)));
evalcond[4]=(((sj1*sj2))+((x10531*x10533))+(((-1.0)*cj2*x10535))+((r12*x10532))+(((-1.0)*x10534*x10538)));
evalcond[5]=((((-1.0)*x10537*x10538))+((r22*x10532))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10535))+((r21*x10539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10542=((1.0)*gconst5);
CheckValue<IkReal> x10543=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10542)))),-1);
if(!x10543.valid){
continue;
}
CheckValue<IkReal> x10544 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10542))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10543.value)))+(x10544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10545=IKcos(j4);
IkReal x10546=IKsin(j4);
IkReal x10547=(gconst4*r11);
IkReal x10548=(gconst5*r10);
IkReal x10549=((1.0)*cj1);
IkReal x10550=(gconst5*r00);
IkReal x10551=(gconst5*r20);
IkReal x10552=((1.0)*x10545);
IkReal x10553=(gconst4*x10545);
IkReal x10554=((1.0)*x10546);
IkReal x10555=(gconst4*x10546);
evalcond[0]=((((-1.0)*x10550*x10552))+((r02*x10546))+((r01*x10553)));
evalcond[1]=((((-1.0)*x10551*x10554))+((r21*x10555))+(((-1.0)*r22*x10552)));
evalcond[2]=((((-1.0)*r12*x10552))+((x10546*x10547))+(((-1.0)*x10548*x10554)));
evalcond[3]=((1.0)+(((-1.0)*x10550*x10554))+(((-1.0)*r02*x10552))+((r01*x10555)));
evalcond[4]=((((-1.0)*cj2*x10549))+((r12*x10546))+((sj1*sj2))+(((-1.0)*x10548*x10552))+((x10545*x10547)));
evalcond[5]=((((-1.0)*x10551*x10552))+((r22*x10546))+(((-1.0)*cj2*sj1))+((r21*x10553))+(((-1.0)*sj2*x10549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10556=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10556.valid){
continue;
}
CheckValue<IkReal> x10557 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10556.value)))+(x10557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10558=IKcos(j4);
IkReal x10559=IKsin(j4);
IkReal x10560=(gconst4*r11);
IkReal x10561=(gconst5*r10);
IkReal x10562=((1.0)*cj1);
IkReal x10563=(gconst5*r00);
IkReal x10564=(gconst5*r20);
IkReal x10565=((1.0)*x10558);
IkReal x10566=(gconst4*x10558);
IkReal x10567=((1.0)*x10559);
IkReal x10568=(gconst4*x10559);
evalcond[0]=(((r01*x10566))+((r02*x10559))+(((-1.0)*x10563*x10565)));
evalcond[1]=((((-1.0)*r22*x10565))+((r21*x10568))+(((-1.0)*x10564*x10567)));
evalcond[2]=((((-1.0)*x10561*x10567))+(((-1.0)*r12*x10565))+((x10559*x10560)));
evalcond[3]=((1.0)+((r01*x10568))+(((-1.0)*x10563*x10567))+(((-1.0)*r02*x10565)));
evalcond[4]=((((-1.0)*x10561*x10565))+((sj1*sj2))+(((-1.0)*cj2*x10562))+((x10558*x10560))+((r12*x10559)));
evalcond[5]=((((-1.0)*sj2*x10562))+((r22*x10559))+(((-1.0)*cj2*sj1))+((r21*x10566))+(((-1.0)*x10564*x10565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10569=((-1.0)*r21);
CheckValue<IkReal> x10572 = IKatan2WithCheck(IkReal(x10569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10572.valid){
continue;
}
IkReal x10570=((1.0)*(x10572.value));
IkReal x10571=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10570)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10570)));
IkReal gconst4=(x10569*x10571);
IkReal gconst5=((1.0)*r20*x10571);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10573=((-1.0)*r21);
CheckValue<IkReal> x10576 = IKatan2WithCheck(IkReal(x10573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10576.valid){
continue;
}
IkReal x10574=((1.0)*(x10576.value));
IkReal x10575=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10574)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10574)));
IkReal gconst4=(x10573*x10575);
IkReal gconst5=((1.0)*r20*x10575);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10577=((-1.0)*r21);
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(x10577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
IkReal x10578=((1.0)*(x10580.value));
IkReal x10579=x9340;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10578)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10578)));
IkReal gconst4=(x10577*x10579);
IkReal gconst5=((1.0)*r20*x10579);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10581=(gconst5*r00);
IkReal x10582=(gconst4*r01);
CheckValue<IkReal> x10583=IKPowWithIntegerCheck(IKsign(((x10581*x10581)+(((-2.0)*x10581*x10582))+(x10582*x10582)+(r02*r02))),-1);
if(!x10583.valid){
continue;
}
CheckValue<IkReal> x10584 = IKatan2WithCheck(IkReal((x10581+(((-1.0)*x10582)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10583.value)))+(x10584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10585=IKsin(j4);
IkReal x10586=IKcos(j4);
IkReal x10587=(gconst4*r11);
IkReal x10588=((1.0)*cj1);
IkReal x10589=(gconst5*r10);
IkReal x10590=(gconst4*r01);
IkReal x10591=(gconst5*r00);
IkReal x10592=(gconst4*r21);
IkReal x10593=(gconst5*r20);
IkReal x10594=((1.0)*x10586);
IkReal x10595=((1.0)*x10585);
evalcond[0]=((((-1.0)*r22*x10594))+((x10585*x10592))+(((-1.0)*x10593*x10595)));
evalcond[1]=((((-1.0)*r12*x10594))+(((-1.0)*x10589*x10595))+((x10585*x10587)));
evalcond[2]=(((x10586*x10591))+(((-1.0)*r02*x10595))+(((-1.0)*x10590*x10594)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10594))+((x10585*x10590))+(((-1.0)*x10591*x10595)));
evalcond[4]=((((-1.0)*x10587*x10594))+(((-1.0)*r12*x10595))+((sj1*sj2))+((x10586*x10589))+(((-1.0)*cj2*x10588)));
evalcond[5]=((((-1.0)*x10592*x10594))+((x10586*x10593))+(((-1.0)*sj2*x10588))+(((-1.0)*r22*x10595))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10596=((1.0)*gconst5);
CheckValue<IkReal> x10597=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10596))+(((-1.0)*gconst4*r20)))),-1);
if(!x10597.valid){
continue;
}
CheckValue<IkReal> x10598 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10596))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10597.value)))+(x10598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10599=IKsin(j4);
IkReal x10600=IKcos(j4);
IkReal x10601=(gconst4*r11);
IkReal x10602=((1.0)*cj1);
IkReal x10603=(gconst5*r10);
IkReal x10604=(gconst4*r01);
IkReal x10605=(gconst5*r00);
IkReal x10606=(gconst4*r21);
IkReal x10607=(gconst5*r20);
IkReal x10608=((1.0)*x10600);
IkReal x10609=((1.0)*x10599);
evalcond[0]=((((-1.0)*x10607*x10609))+((x10599*x10606))+(((-1.0)*r22*x10608)));
evalcond[1]=((((-1.0)*r12*x10608))+((x10599*x10601))+(((-1.0)*x10603*x10609)));
evalcond[2]=(((x10600*x10605))+(((-1.0)*x10604*x10608))+(((-1.0)*r02*x10609)));
evalcond[3]=((1.0)+((x10599*x10604))+(((-1.0)*r02*x10608))+(((-1.0)*x10605*x10609)));
evalcond[4]=(((x10600*x10603))+(((-1.0)*r12*x10609))+(((-1.0)*cj2*x10602))+((sj1*sj2))+(((-1.0)*x10601*x10608)));
evalcond[5]=(((x10600*x10607))+(((-1.0)*cj2*sj1))+(((-1.0)*x10606*x10608))+(((-1.0)*r22*x10609))+(((-1.0)*sj2*x10602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10610=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10610.valid){
continue;
}
CheckValue<IkReal> x10611 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10610.value)))+(x10611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10612=IKsin(j4);
IkReal x10613=IKcos(j4);
IkReal x10614=(gconst4*r11);
IkReal x10615=((1.0)*cj1);
IkReal x10616=(gconst5*r10);
IkReal x10617=(gconst4*r01);
IkReal x10618=(gconst5*r00);
IkReal x10619=(gconst4*r21);
IkReal x10620=(gconst5*r20);
IkReal x10621=((1.0)*x10613);
IkReal x10622=((1.0)*x10612);
evalcond[0]=(((x10612*x10619))+(((-1.0)*r22*x10621))+(((-1.0)*x10620*x10622)));
evalcond[1]=(((x10612*x10614))+(((-1.0)*r12*x10621))+(((-1.0)*x10616*x10622)));
evalcond[2]=((((-1.0)*r02*x10622))+(((-1.0)*x10617*x10621))+((x10613*x10618)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10621))+(((-1.0)*x10618*x10622))+((x10612*x10617)));
evalcond[4]=((((-1.0)*cj2*x10615))+((x10613*x10616))+(((-1.0)*r12*x10622))+((sj1*sj2))+(((-1.0)*x10614*x10621)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10613*x10620))+(((-1.0)*x10619*x10621))+(((-1.0)*r22*x10622))+(((-1.0)*sj2*x10615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10623=((-1.0)*r21);
IkReal x10624=((-1.0)*r20);
CheckValue<IkReal> x10626 = IKatan2WithCheck(IkReal(x10623),IkReal(x10624),IKFAST_ATAN2_MAGTHRESH);
if(!x10626.valid){
continue;
}
IkReal x10625=((1.0)*(x10626.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10625)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10624);
rxp0_2=(py*r00);
rxp1_0=(py*x10623);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10625)));
IkReal gconst4=x10623;
IkReal gconst5=((1.0)*r20);
IkReal x10627=((1.0)*r01*r21);
IkReal x10628=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10628))+(((-1.0)*x10627)));
j4eval[1]=((((-1.0)*cj3*x10627))+(((-1.0)*cj3*x10628)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10629=((-1.0)*r21);
IkReal x10630=((-1.0)*r20);
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(x10629),IkReal(x10630),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
IkReal x10631=((1.0)*(x10632.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10631)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10630);
rxp0_2=(py*r00);
rxp1_0=(py*x10629);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10631)));
IkReal gconst4=x10629;
IkReal gconst5=((1.0)*r20);
IkReal x10633=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r21*x10633))+(((-1.0)*r00*r20*x10633)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10634=((-1.0)*r21);
IkReal x10635=((-1.0)*r20);
CheckValue<IkReal> x10637 = IKatan2WithCheck(IkReal(x10634),IkReal(x10635),IKFAST_ATAN2_MAGTHRESH);
if(!x10637.valid){
continue;
}
IkReal x10636=((1.0)*(x10637.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10636)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10635);
rxp0_2=(py*r00);
rxp1_0=(py*x10634);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10636)));
IkReal gconst4=x10634;
IkReal gconst5=((1.0)*r20);
IkReal x10638=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x10638))+(((-1.0)*r00*r20*x10638)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10639=((1.0)*gconst5);
CheckValue<IkReal> x10640=IKPowWithIntegerCheck(cj3,-1);
if(!x10640.valid){
continue;
}
CheckValue<IkReal> x10641=IKPowWithIntegerCheck(r12,-1);
if(!x10641.valid){
continue;
}
CheckValue<IkReal> x10642=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10639))+((cj3*gconst4*r01))),-1);
if(!x10642.valid){
continue;
}
if( IKabs(((x10640.value)*(x10641.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10642.value)*(((((-1.0)*r01*sj3*x10639))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10640.value)*(x10641.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10642.value)*(((((-1.0)*r01*sj3*x10639))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10640.value)*(x10641.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10642.value)*(((((-1.0)*r01*sj3*x10639))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10643=IKsin(j4);
IkReal x10644=IKcos(j4);
IkReal x10645=(sj1*sj2);
IkReal x10646=(cj3*r21);
IkReal x10647=((1.0)*gconst5);
IkReal x10648=((1.0)*cj1);
IkReal x10649=(gconst4*r01);
IkReal x10650=(cj2*sj1);
IkReal x10651=(gconst5*sj3);
IkReal x10652=(gconst4*sj3);
IkReal x10653=(cj2*x10648);
IkReal x10654=(r12*x10643);
IkReal x10655=(cj3*x10644);
IkReal x10656=(sj3*x10644);
IkReal x10657=((1.0)*cj3*gconst4);
IkReal x10658=(x10644*x10652);
evalcond[0]=((-1.0)*r12*x10644);
evalcond[1]=(((sj3*x10654))+((cj1*sj2))+x10650);
evalcond[2]=(((gconst4*r21*x10643))+(((-1.0)*r20*x10643*x10647)));
evalcond[3]=(((cj3*x10654))+x10645+(((-1.0)*x10653)));
evalcond[4]=((1.0)+((x10643*x10649))+(((-1.0)*r00*x10643*x10647)));
evalcond[5]=(((r00*x10652))+(((-1.0)*r00*x10647*x10655))+((x10649*x10655))+((r01*x10651)));
evalcond[6]=((((-1.0)*r00*x10647*x10656))+(((-1.0)*r00*x10657))+(((-1.0)*cj3*r01*x10647))+((x10649*x10656)));
evalcond[7]=((((-1.0)*sj2*x10648))+(((-1.0)*x10650))+(((-1.0)*r20*x10647*x10655))+((r21*x10651))+((r20*x10652))+((gconst4*x10644*x10646)));
evalcond[8]=((((-1.0)*r20*x10647*x10656))+(((-1.0)*x10646*x10647))+((r21*x10658))+(((-1.0)*r20*x10657))+x10645+(((-1.0)*x10653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10659=IKPowWithIntegerCheck(r12,-1);
if(!x10659.valid){
continue;
}
CheckValue<IkReal> x10660=IKPowWithIntegerCheck(sj3,-1);
if(!x10660.valid){
continue;
}
CheckValue<IkReal> x10661=IKPowWithIntegerCheck((((gconst4*r01*sj3))+(((-1.0)*gconst5*r00*sj3))),-1);
if(!x10661.valid){
continue;
}
if( IKabs(((x10659.value)*(x10660.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10661.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10659.value)*(x10660.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x10661.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10659.value)*(x10660.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x10661.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10662=IKsin(j4);
IkReal x10663=IKcos(j4);
IkReal x10664=(sj1*sj2);
IkReal x10665=(cj3*r21);
IkReal x10666=((1.0)*gconst5);
IkReal x10667=((1.0)*cj1);
IkReal x10668=(gconst4*r01);
IkReal x10669=(cj2*sj1);
IkReal x10670=(gconst5*sj3);
IkReal x10671=(gconst4*sj3);
IkReal x10672=(cj2*x10667);
IkReal x10673=(r12*x10662);
IkReal x10674=(cj3*x10663);
IkReal x10675=(sj3*x10663);
IkReal x10676=((1.0)*cj3*gconst4);
IkReal x10677=(x10663*x10671);
evalcond[0]=((-1.0)*r12*x10663);
evalcond[1]=(((sj3*x10673))+((cj1*sj2))+x10669);
evalcond[2]=(((gconst4*r21*x10662))+(((-1.0)*r20*x10662*x10666)));
evalcond[3]=(((cj3*x10673))+(((-1.0)*x10672))+x10664);
evalcond[4]=((1.0)+(((-1.0)*r00*x10662*x10666))+((x10662*x10668)));
evalcond[5]=(((x10668*x10674))+((r01*x10670))+((r00*x10671))+(((-1.0)*r00*x10666*x10674)));
evalcond[6]=((((-1.0)*cj3*r01*x10666))+((x10668*x10675))+(((-1.0)*r00*x10666*x10675))+(((-1.0)*r00*x10676)));
evalcond[7]=(((gconst4*x10663*x10665))+((r20*x10671))+(((-1.0)*x10669))+((r21*x10670))+(((-1.0)*sj2*x10667))+(((-1.0)*r20*x10666*x10674)));
evalcond[8]=((((-1.0)*r20*x10676))+(((-1.0)*x10665*x10666))+((r21*x10677))+(((-1.0)*x10672))+x10664+(((-1.0)*r20*x10666*x10675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10678=((1.0)*gconst5);
IkReal x10679=(gconst4*r01);
CheckValue<IkReal> x10680=IKPowWithIntegerCheck(((((-1.0)*r00*x10678))+x10679),-1);
if(!x10680.valid){
continue;
}
CheckValue<IkReal> x10681=IKPowWithIntegerCheck((((cj3*x10679))+(((-1.0)*cj3*r00*x10678))),-1);
if(!x10681.valid){
continue;
}
if( IKabs(((-1.0)*(x10680.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10681.value)*(((((-1.0)*r01*sj3*x10678))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10680.value)))+IKsqr(((x10681.value)*(((((-1.0)*r01*sj3*x10678))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10680.value)), ((x10681.value)*(((((-1.0)*r01*sj3*x10678))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10682=IKsin(j4);
IkReal x10683=IKcos(j4);
IkReal x10684=(sj1*sj2);
IkReal x10685=(cj3*r21);
IkReal x10686=((1.0)*gconst5);
IkReal x10687=((1.0)*cj1);
IkReal x10688=(gconst4*r01);
IkReal x10689=(cj2*sj1);
IkReal x10690=(gconst5*sj3);
IkReal x10691=(gconst4*sj3);
IkReal x10692=(cj2*x10687);
IkReal x10693=(r12*x10682);
IkReal x10694=(cj3*x10683);
IkReal x10695=(sj3*x10683);
IkReal x10696=((1.0)*cj3*gconst4);
IkReal x10697=(x10683*x10691);
evalcond[0]=((-1.0)*r12*x10683);
evalcond[1]=(((cj1*sj2))+((sj3*x10693))+x10689);
evalcond[2]=((((-1.0)*r20*x10682*x10686))+((gconst4*r21*x10682)));
evalcond[3]=((((-1.0)*x10692))+((cj3*x10693))+x10684);
evalcond[4]=((1.0)+(((-1.0)*r00*x10682*x10686))+((x10682*x10688)));
evalcond[5]=((((-1.0)*r00*x10686*x10694))+((r01*x10690))+((r00*x10691))+((x10688*x10694)));
evalcond[6]=((((-1.0)*r00*x10686*x10695))+(((-1.0)*r00*x10696))+(((-1.0)*cj3*r01*x10686))+((x10688*x10695)));
evalcond[7]=(((gconst4*x10683*x10685))+((r21*x10690))+(((-1.0)*sj2*x10687))+(((-1.0)*x10689))+((r20*x10691))+(((-1.0)*r20*x10686*x10694)));
evalcond[8]=(((r21*x10697))+(((-1.0)*x10692))+(((-1.0)*r20*x10696))+(((-1.0)*x10685*x10686))+x10684+(((-1.0)*r20*x10686*x10695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10698=gconst4*gconst4;
IkReal x10699=gconst5*gconst5;
IkReal x10700=(r01*r20);
IkReal x10701=(gconst4*sj3);
IkReal x10702=(r01*r21);
IkReal x10703=((1.0)*cj3);
IkReal x10704=(r00*r21);
IkReal x10705=(r00*r20);
IkReal x10706=(cj3*gconst4*gconst5);
IkReal x10707=((1.0)*x10699);
CheckValue<IkReal> x10708 = IKatan2WithCheck(IkReal((((r00*r22*x10701))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*sj3*x10700*x10707))+((gconst5*x10701*x10702))+(((-1.0)*gconst5*x10701*x10705))+((sj3*x10698*x10704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10708.valid){
continue;
}
CheckValue<IkReal> x10709=IKPowWithIntegerCheck(IKsign((((x10700*x10706))+((x10704*x10706))+(((-1.0)*x10699*x10703*x10705))+(((-1.0)*r02*r22*x10703))+(((-1.0)*x10698*x10702*x10703)))),-1);
if(!x10709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10708.value)+(((1.5707963267949)*(x10709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10710=IKsin(j4);
IkReal x10711=IKcos(j4);
IkReal x10712=(sj1*sj2);
IkReal x10713=(gconst5*sj3);
IkReal x10714=(cj3*gconst5);
IkReal x10715=((1.0)*cj1);
IkReal x10716=((1.0)*r10);
IkReal x10717=(cj2*sj1);
IkReal x10718=(cj3*gconst4);
IkReal x10719=((1.0)*r00);
IkReal x10720=((1.0)*r20);
IkReal x10721=(gconst4*sj3);
IkReal x10722=(cj2*x10715);
IkReal x10723=((1.0)*x10711);
IkReal x10724=(gconst4*x10710);
IkReal x10725=(cj3*x10710);
IkReal x10726=(sj3*x10710);
IkReal x10727=(gconst5*x10710);
IkReal x10728=(x10711*x10721);
evalcond[0]=((((-1.0)*r22*x10723))+((r21*x10724))+(((-1.0)*x10720*x10727)));
evalcond[1]=((((-1.0)*x10716*x10727))+(((-1.0)*r12*x10723))+((r11*x10724)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10723))+(((-1.0)*x10719*x10727))+((r01*x10724)));
evalcond[3]=(((r02*x10725))+(((-1.0)*x10711*x10714*x10719))+((r01*x10713))+((r00*x10721))+((r01*x10711*x10718)));
evalcond[4]=(((r02*x10726))+(((-1.0)*r01*x10714))+((r01*x10728))+(((-1.0)*x10711*x10713*x10719))+(((-1.0)*x10718*x10719)));
evalcond[5]=(((r10*x10721))+((r11*x10713))+(((-1.0)*x10711*x10714*x10716))+((r11*x10711*x10718))+(((-1.0)*x10722))+((r12*x10725))+x10712);
evalcond[6]=(((r22*x10725))+(((-1.0)*x10717))+((r21*x10711*x10718))+(((-1.0)*sj2*x10715))+((r21*x10713))+((r20*x10721))+(((-1.0)*x10711*x10714*x10720)));
evalcond[7]=(((cj1*sj2))+(((-1.0)*x10711*x10713*x10716))+((r12*x10726))+(((-1.0)*x10716*x10718))+x10717+(((-1.0)*r11*x10714))+((r11*x10728)));
evalcond[8]=(((r22*x10726))+((r21*x10728))+(((-1.0)*x10711*x10713*x10720))+(((-1.0)*r21*x10714))+(((-1.0)*x10718*x10720))+(((-1.0)*x10722))+x10712);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10729=((1.0)*gconst5);
CheckValue<IkReal> x10730 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10730.valid){
continue;
}
CheckValue<IkReal> x10731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10729))+(((-1.0)*gconst4*r20)))),-1);
if(!x10731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10730.value)+(((1.5707963267949)*(x10731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10732=IKsin(j4);
IkReal x10733=IKcos(j4);
IkReal x10734=(sj1*sj2);
IkReal x10735=(gconst5*sj3);
IkReal x10736=(cj3*gconst5);
IkReal x10737=((1.0)*cj1);
IkReal x10738=((1.0)*r10);
IkReal x10739=(cj2*sj1);
IkReal x10740=(cj3*gconst4);
IkReal x10741=((1.0)*r00);
IkReal x10742=((1.0)*r20);
IkReal x10743=(gconst4*sj3);
IkReal x10744=(cj2*x10737);
IkReal x10745=((1.0)*x10733);
IkReal x10746=(gconst4*x10732);
IkReal x10747=(cj3*x10732);
IkReal x10748=(sj3*x10732);
IkReal x10749=(gconst5*x10732);
IkReal x10750=(x10733*x10743);
evalcond[0]=((((-1.0)*r22*x10745))+(((-1.0)*x10742*x10749))+((r21*x10746)));
evalcond[1]=((((-1.0)*x10738*x10749))+(((-1.0)*r12*x10745))+((r11*x10746)));
evalcond[2]=((1.0)+(((-1.0)*x10741*x10749))+(((-1.0)*r02*x10745))+((r01*x10746)));
evalcond[3]=(((r01*x10733*x10740))+(((-1.0)*x10733*x10736*x10741))+((r02*x10747))+((r01*x10735))+((r00*x10743)));
evalcond[4]=((((-1.0)*r01*x10736))+((r02*x10748))+(((-1.0)*x10740*x10741))+(((-1.0)*x10733*x10735*x10741))+((r01*x10750)));
evalcond[5]=((((-1.0)*x10733*x10736*x10738))+((r10*x10743))+(((-1.0)*x10744))+((r11*x10733*x10740))+((r12*x10747))+x10734+((r11*x10735)));
evalcond[6]=((((-1.0)*x10733*x10736*x10742))+((r22*x10747))+((r21*x10735))+((r20*x10743))+(((-1.0)*x10739))+((r21*x10733*x10740))+(((-1.0)*sj2*x10737)));
evalcond[7]=((((-1.0)*x10738*x10740))+((cj1*sj2))+(((-1.0)*r11*x10736))+((r11*x10750))+((r12*x10748))+x10739+(((-1.0)*x10733*x10735*x10738)));
evalcond[8]=(((r22*x10748))+(((-1.0)*x10744))+x10734+(((-1.0)*x10740*x10742))+(((-1.0)*r21*x10736))+(((-1.0)*x10733*x10735*x10742))+((r21*x10750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10751=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10751.valid){
continue;
}
CheckValue<IkReal> x10752 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10751.value)))+(x10752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10753=IKsin(j4);
IkReal x10754=IKcos(j4);
IkReal x10755=(sj1*sj2);
IkReal x10756=(gconst5*sj3);
IkReal x10757=(cj3*gconst5);
IkReal x10758=((1.0)*cj1);
IkReal x10759=((1.0)*r10);
IkReal x10760=(cj2*sj1);
IkReal x10761=(cj3*gconst4);
IkReal x10762=((1.0)*r00);
IkReal x10763=((1.0)*r20);
IkReal x10764=(gconst4*sj3);
IkReal x10765=(cj2*x10758);
IkReal x10766=((1.0)*x10754);
IkReal x10767=(gconst4*x10753);
IkReal x10768=(cj3*x10753);
IkReal x10769=(sj3*x10753);
IkReal x10770=(gconst5*x10753);
IkReal x10771=(x10754*x10764);
evalcond[0]=((((-1.0)*x10763*x10770))+(((-1.0)*r22*x10766))+((r21*x10767)));
evalcond[1]=(((r11*x10767))+(((-1.0)*r12*x10766))+(((-1.0)*x10759*x10770)));
evalcond[2]=((1.0)+(((-1.0)*x10762*x10770))+((r01*x10767))+(((-1.0)*r02*x10766)));
evalcond[3]=((((-1.0)*x10754*x10757*x10762))+((r00*x10764))+((r01*x10754*x10761))+((r02*x10768))+((r01*x10756)));
evalcond[4]=((((-1.0)*r01*x10757))+(((-1.0)*x10761*x10762))+((r01*x10771))+(((-1.0)*x10754*x10756*x10762))+((r02*x10769)));
evalcond[5]=(((r12*x10768))+((r11*x10754*x10761))+(((-1.0)*x10765))+(((-1.0)*x10754*x10757*x10759))+((r11*x10756))+((r10*x10764))+x10755);
evalcond[6]=((((-1.0)*x10754*x10757*x10763))+(((-1.0)*x10760))+((r20*x10764))+((r22*x10768))+((r21*x10756))+(((-1.0)*sj2*x10758))+((r21*x10754*x10761)));
evalcond[7]=(((r12*x10769))+((r11*x10771))+(((-1.0)*r11*x10757))+(((-1.0)*x10754*x10756*x10759))+((cj1*sj2))+x10760+(((-1.0)*x10759*x10761)));
evalcond[8]=((((-1.0)*r21*x10757))+(((-1.0)*x10765))+(((-1.0)*x10761*x10763))+((r22*x10769))+((r21*x10771))+(((-1.0)*x10754*x10756*x10763))+x10755);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10772=((-1.0)*r21);
IkReal x10773=((-1.0)*px);
CheckValue<IkReal> x10775 = IKatan2WithCheck(IkReal(x10772),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10775.valid){
continue;
}
IkReal x10774=((1.0)*(x10775.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10774)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10773);
rxp1_1=(px*r21);
rxp1_2=(r11*x10773);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10774)));
IkReal gconst4=x10772;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10776=((-1.0)*r21);
IkReal x10777=((-1.0)*px);
CheckValue<IkReal> x10779 = IKatan2WithCheck(IkReal(x10776),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10779.valid){
continue;
}
IkReal x10778=((1.0)*(x10779.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10778)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10777);
rxp1_1=(px*r21);
rxp1_2=(r11*x10777);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10778)));
IkReal gconst4=x10776;
IkReal gconst5=((1.0)*r20);
IkReal x10780=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x10780*(r10*r10)))+(((-1.0)*x10780))+(((-1.0)*x10780*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10781=((-1.0)*r21);
IkReal x10782=((-1.0)*px);
CheckValue<IkReal> x10784 = IKatan2WithCheck(IkReal(x10781),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10784.valid){
continue;
}
IkReal x10783=((1.0)*(x10784.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10783)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10782);
rxp1_1=(px*r21);
rxp1_2=(r11*x10782);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10783)));
IkReal gconst4=x10781;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10785=((-1.0)*r21);
IkReal x10786=((-1.0)*px);
CheckValue<IkReal> x10788 = IKatan2WithCheck(IkReal(x10785),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10788.valid){
continue;
}
IkReal x10787=((1.0)*(x10788.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10787)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10786);
rxp1_1=(px*r21);
rxp1_2=(r11*x10786);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10787)));
IkReal gconst4=x10785;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10789=((-1.0)*r21);
IkReal x10790=((-1.0)*px);
CheckValue<IkReal> x10792 = IKatan2WithCheck(IkReal(x10789),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10792.valid){
continue;
}
IkReal x10791=((1.0)*(x10792.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10791)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10790);
rxp1_1=(px*r21);
rxp1_2=(r11*x10790);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10791)));
IkReal gconst4=x10789;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10793=((-1.0)*r21);
IkReal x10794=((-1.0)*px);
CheckValue<IkReal> x10796 = IKatan2WithCheck(IkReal(x10793),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10796.valid){
continue;
}
IkReal x10795=((1.0)*(x10796.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10795)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10794);
rxp1_1=(px*r21);
rxp1_2=(r11*x10794);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10795)));
IkReal gconst4=x10793;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10799=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10799.valid){
continue;
}
IkReal x10797=x10799.value;
IkReal x10798=(sj0*x10797);
cj4array[0]=((((-1.0)*cj1*cj2*x10798))+((sj1*sj2*x10798)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10800=IKsin(j4);
IkReal x10801=IKcos(j4);
IkReal x10802=(gconst5*r20);
IkReal x10803=(gconst4*x10800);
IkReal x10804=((1.0)*x10801);
IkReal x10805=((1.0)*x10800);
evalcond[0]=(r02*x10800);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10804)));
evalcond[2]=((((-1.0)*x10802*x10805))+((r21*x10803)));
evalcond[3]=(((r11*x10803))+(((-1.0)*gconst5*r10*x10805)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x10802*x10804))+((gconst4*r21*x10801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10807=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10807.valid){
continue;
}
IkReal x10806=x10807.value;
cj4array[0]=(((cj1*sj2*x10806))+((cj2*sj1*x10806)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10808=IKsin(j4);
IkReal x10809=IKcos(j4);
IkReal x10810=(gconst4*r11);
IkReal x10811=((1.0)*sj0);
IkReal x10812=(gconst5*r10);
IkReal x10813=((1.0)*x10809);
IkReal x10814=((1.0)*x10808);
evalcond[0]=(r02*x10808);
evalcond[1]=((((-1.0)*r02*x10813))+(((-1.0)*x10811)));
evalcond[2]=((((-1.0)*gconst5*r20*x10814))+((gconst4*r21*x10808)));
evalcond[3]=((((-1.0)*x10812*x10814))+((x10808*x10810)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x10812*x10813))+((x10809*x10810))+(((-1.0)*sj1*sj2*x10811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10815=IKPowWithIntegerCheck(r02,-1);
if(!x10815.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10815.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10816=IKsin(j4);
IkReal x10817=IKcos(j4);
IkReal x10818=(gconst4*r11);
IkReal x10819=((1.0)*sj1);
IkReal x10820=(gconst4*r21);
IkReal x10821=((1.0)*gconst5*x10817);
IkReal x10822=((1.0)*gconst5*x10816);
evalcond[0]=(r02*x10816);
evalcond[1]=(((x10816*x10820))+(((-1.0)*r20*x10822)));
evalcond[2]=(((x10816*x10818))+(((-1.0)*r10*x10822)));
evalcond[3]=(((x10817*x10820))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x10821))+(((-1.0)*cj2*x10819)));
evalcond[4]=(((cj1*cj2*sj0))+((x10817*x10818))+(((-1.0)*r10*x10821))+(((-1.0)*sj0*sj2*x10819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10823=((-1.0)*r21);
IkReal x10824=((-1.0)*px);
CheckValue<IkReal> x10826 = IKatan2WithCheck(IkReal(x10823),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10826.valid){
continue;
}
IkReal x10825=((1.0)*(x10826.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10825)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10824);
rxp1_1=(px*r21);
rxp1_2=(r11*x10824);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10825)));
IkReal gconst4=x10823;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10827=((-1.0)*r21);
IkReal x10828=((-1.0)*px);
CheckValue<IkReal> x10830 = IKatan2WithCheck(IkReal(x10827),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10830.valid){
continue;
}
IkReal x10829=((1.0)*(x10830.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10829)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10828);
rxp1_1=(px*r21);
rxp1_2=(r11*x10828);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10829)));
IkReal gconst4=x10827;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10831=((-1.0)*r21);
IkReal x10832=((-1.0)*px);
CheckValue<IkReal> x10834 = IKatan2WithCheck(IkReal(x10831),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10834.valid){
continue;
}
IkReal x10833=((1.0)*(x10834.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10833)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10832);
rxp1_1=(px*r21);
rxp1_2=(r11*x10832);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10833)));
IkReal gconst4=x10831;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10837=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x10837.valid){
continue;
}
IkReal x10835=x10837.value;
IkReal x10836=(sj0*x10835);
cj4array[0]=(((sj1*sj2*x10836))+(((-1.0)*cj1*cj2*x10836)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10838=IKsin(j4);
IkReal x10839=IKcos(j4);
IkReal x10840=(gconst5*r20);
IkReal x10841=(gconst4*x10838);
IkReal x10842=((1.0)*x10839);
IkReal x10843=((1.0)*x10838);
evalcond[0]=((-1.0)*r02*x10838);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10842)));
evalcond[2]=(((r21*x10841))+(((-1.0)*x10840*x10843)));
evalcond[3]=(((r11*x10841))+(((-1.0)*gconst5*r10*x10843)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x10839*x10840))+(((-1.0)*gconst4*r21*x10842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10845=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x10845.valid){
continue;
}
IkReal x10844=x10845.value;
cj4array[0]=(((cj2*sj1*x10844))+((cj1*sj2*x10844)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10846=IKsin(j4);
IkReal x10847=IKcos(j4);
IkReal x10848=(gconst5*r10);
IkReal x10849=((1.0)*sj0);
IkReal x10850=(gconst4*x10846);
IkReal x10851=((1.0)*x10847);
IkReal x10852=((1.0)*x10846);
evalcond[0]=((-1.0)*r02*x10846);
evalcond[1]=((((-1.0)*x10849))+(((-1.0)*r02*x10851)));
evalcond[2]=(((r21*x10850))+(((-1.0)*gconst5*r20*x10852)));
evalcond[3]=(((r11*x10850))+(((-1.0)*x10848*x10852)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x10849))+((x10847*x10848))+(((-1.0)*gconst4*r11*x10851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10853=IKPowWithIntegerCheck(r02,-1);
if(!x10853.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10853.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10854=IKsin(j4);
IkReal x10855=IKcos(j4);
IkReal x10856=((1.0)*sj1);
IkReal x10857=(gconst5*x10855);
IkReal x10858=(gconst4*x10854);
IkReal x10859=((1.0)*gconst4*x10855);
IkReal x10860=((1.0)*gconst5*x10854);
evalcond[0]=((-1.0)*r02*x10854);
evalcond[1]=(((r21*x10858))+(((-1.0)*r20*x10860)));
evalcond[2]=(((r11*x10858))+(((-1.0)*r10*x10860)));
evalcond[3]=(((r20*x10857))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x10859))+(((-1.0)*cj2*x10856)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x10856))+((r10*x10857))+(((-1.0)*r11*x10859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10861=((-1.0)*r21);
IkReal x10862=((-1.0)*px);
CheckValue<IkReal> x10864 = IKatan2WithCheck(IkReal(x10861),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10864.valid){
continue;
}
IkReal x10863=((1.0)*(x10864.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10863)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10862);
rxp1_1=(px*r21);
rxp1_2=(r11*x10862);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10863)));
IkReal gconst4=x10861;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10865=((-1.0)*r21);
IkReal x10866=((-1.0)*px);
CheckValue<IkReal> x10868 = IKatan2WithCheck(IkReal(x10865),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10868.valid){
continue;
}
IkReal x10867=((1.0)*(x10868.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10867)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10866);
rxp1_1=(px*r21);
rxp1_2=(r11*x10866);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10867)));
IkReal gconst4=x10865;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10869=((-1.0)*r21);
IkReal x10870=((-1.0)*px);
CheckValue<IkReal> x10872 = IKatan2WithCheck(IkReal(x10869),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10872.valid){
continue;
}
IkReal x10871=((1.0)*(x10872.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10871)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10870);
rxp1_1=(px*r21);
rxp1_2=(r11*x10870);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10871)));
IkReal gconst4=x10869;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10875=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10875.valid){
continue;
}
IkReal x10873=x10875.value;
IkReal x10874=(sj0*x10873);
cj4array[0]=(((cj2*sj1*x10874))+((cj1*sj2*x10874)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10876=IKsin(j4);
IkReal x10877=IKcos(j4);
IkReal x10878=(gconst5*r20);
IkReal x10879=(gconst4*x10876);
IkReal x10880=((1.0)*x10877);
IkReal x10881=((1.0)*x10876);
evalcond[0]=(r02*x10876);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10880)));
evalcond[2]=(((r21*x10879))+(((-1.0)*x10878*x10881)));
evalcond[3]=((((-1.0)*gconst5*r10*x10881))+((r11*x10879)));
evalcond[4]=((((-1.0)*x10878*x10880))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x10877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10883=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10883.valid){
continue;
}
IkReal x10882=x10883.value;
cj4array[0]=(((cj1*cj2*x10882))+(((-1.0)*sj1*sj2*x10882)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10884=IKsin(j4);
IkReal x10885=IKcos(j4);
IkReal x10886=(gconst4*r11);
IkReal x10887=((1.0)*sj0);
IkReal x10888=(gconst5*r10);
IkReal x10889=((1.0)*x10885);
IkReal x10890=((1.0)*x10884);
evalcond[0]=(r02*x10884);
evalcond[1]=((((-1.0)*r02*x10889))+(((-1.0)*x10887)));
evalcond[2]=(((gconst4*r21*x10884))+(((-1.0)*gconst5*r20*x10890)));
evalcond[3]=((((-1.0)*x10888*x10890))+((x10884*x10886)));
evalcond[4]=((((-1.0)*x10888*x10889))+((x10885*x10886))+(((-1.0)*cj1*sj2*x10887))+(((-1.0)*cj2*sj1*x10887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10891=IKPowWithIntegerCheck(r02,-1);
if(!x10891.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10891.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10892=IKsin(j4);
IkReal x10893=IKcos(j4);
IkReal x10894=(gconst4*r11);
IkReal x10895=((1.0)*cj1);
IkReal x10896=(gconst4*r21);
IkReal x10897=((1.0)*gconst5*x10893);
IkReal x10898=((1.0)*gconst5*x10892);
evalcond[0]=(r02*x10892);
evalcond[1]=(((x10892*x10896))+(((-1.0)*r20*x10898)));
evalcond[2]=(((x10892*x10894))+(((-1.0)*r10*x10898)));
evalcond[3]=(((sj1*sj2))+((x10893*x10896))+(((-1.0)*cj2*x10895))+(((-1.0)*r20*x10897)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x10893*x10894))+(((-1.0)*sj0*sj2*x10895))+(((-1.0)*r10*x10897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10899=((-1.0)*r21);
IkReal x10900=((-1.0)*px);
CheckValue<IkReal> x10902 = IKatan2WithCheck(IkReal(x10899),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10902.valid){
continue;
}
IkReal x10901=((1.0)*(x10902.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10901)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10900);
rxp1_1=(px*r21);
rxp1_2=(r11*x10900);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10901)));
IkReal gconst4=x10899;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10903=((-1.0)*r21);
IkReal x10904=((-1.0)*px);
CheckValue<IkReal> x10906 = IKatan2WithCheck(IkReal(x10903),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10906.valid){
continue;
}
IkReal x10905=((1.0)*(x10906.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10905)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10904);
rxp1_1=(px*r21);
rxp1_2=(r11*x10904);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10905)));
IkReal gconst4=x10903;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10907=((-1.0)*r21);
IkReal x10908=((-1.0)*px);
CheckValue<IkReal> x10910 = IKatan2WithCheck(IkReal(x10907),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10910.valid){
continue;
}
IkReal x10909=((1.0)*(x10910.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10909)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10908);
rxp1_1=(px*r21);
rxp1_2=(r11*x10908);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10909)));
IkReal gconst4=x10907;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10913=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x10913.valid){
continue;
}
IkReal x10911=x10913.value;
IkReal x10912=(sj0*x10911);
cj4array[0]=(((cj2*sj1*x10912))+((cj1*sj2*x10912)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10914=IKsin(j4);
IkReal x10915=IKcos(j4);
IkReal x10916=(gconst5*r20);
IkReal x10917=(gconst4*x10914);
IkReal x10918=((1.0)*x10915);
IkReal x10919=((1.0)*x10914);
evalcond[0]=((-1.0)*r02*x10914);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10918)));
evalcond[2]=(((r21*x10917))+(((-1.0)*x10916*x10919)));
evalcond[3]=((((-1.0)*gconst5*r10*x10919))+((r11*x10917)));
evalcond[4]=(((x10915*x10916))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x10918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10921=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x10921.valid){
continue;
}
IkReal x10920=x10921.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10920))+((cj1*cj2*x10920)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10922=IKsin(j4);
IkReal x10923=IKcos(j4);
IkReal x10924=(gconst5*r10);
IkReal x10925=((1.0)*sj0);
IkReal x10926=(gconst4*x10922);
IkReal x10927=((1.0)*x10923);
IkReal x10928=((1.0)*x10922);
evalcond[0]=((-1.0)*r02*x10922);
evalcond[1]=((((-1.0)*x10925))+(((-1.0)*r02*x10927)));
evalcond[2]=((((-1.0)*gconst5*r20*x10928))+((r21*x10926)));
evalcond[3]=((((-1.0)*x10924*x10928))+((r11*x10926)));
evalcond[4]=((((-1.0)*cj1*sj2*x10925))+(((-1.0)*gconst4*r11*x10927))+(((-1.0)*cj2*sj1*x10925))+((x10923*x10924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10929=IKPowWithIntegerCheck(r02,-1);
if(!x10929.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10929.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10930=IKsin(j4);
IkReal x10931=IKcos(j4);
IkReal x10932=((1.0)*sj0);
IkReal x10933=(gconst5*x10931);
IkReal x10934=(gconst4*x10930);
IkReal x10935=((1.0)*gconst4*x10931);
IkReal x10936=((1.0)*gconst5*x10930);
evalcond[0]=((-1.0)*r02*x10930);
evalcond[1]=(((r21*x10934))+(((-1.0)*r20*x10936)));
evalcond[2]=((((-1.0)*r10*x10936))+((r11*x10934)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x10935))+((r20*x10933)));
evalcond[4]=((((-1.0)*r11*x10935))+((r10*x10933))+(((-1.0)*cj1*sj2*x10932))+(((-1.0)*cj2*sj1*x10932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10938=IKPowWithIntegerCheck(r02,-1);
if(!x10938.valid){
continue;
}
IkReal x10937=x10938.value;
CheckValue<IkReal> x10939=IKPowWithIntegerCheck(sj3,-1);
if(!x10939.valid){
continue;
}
if( IKabs((x10937*(x10939.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10937)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10937*(x10939.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x10937))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10937*(x10939.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x10937));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10940=IKsin(j4);
IkReal x10941=IKcos(j4);
IkReal x10942=(gconst5*sj3);
IkReal x10943=(gconst4*r11);
IkReal x10944=(cj1*cj2);
IkReal x10945=(sj1*sj2);
IkReal x10946=(gconst4*r21);
IkReal x10947=((1.0)*r10);
IkReal x10948=((1.0)*sj0);
IkReal x10949=(cj3*gconst4);
IkReal x10950=((1.0)*r20);
IkReal x10951=(gconst4*sj3);
IkReal x10952=((1.0)*cj3*gconst5);
IkReal x10953=(r10*x10941);
IkReal x10954=(sj3*x10941);
IkReal x10955=(gconst5*x10940);
IkReal x10956=((1.0)*cj2*sj1);
IkReal x10957=((1.0)*cj1*sj2);
IkReal x10958=(cj3*x10941);
IkReal x10959=(r02*x10940);
IkReal x10960=(r20*x10941);
evalcond[0]=((((-1.0)*x10948))+(((-1.0)*r02*x10941)));
evalcond[1]=(((x10940*x10946))+(((-1.0)*x10950*x10955)));
evalcond[2]=((((-1.0)*x10947*x10955))+cj0+((x10940*x10943)));
evalcond[3]=(((cj0*x10944))+(((-1.0)*cj0*x10945))+((cj3*x10959)));
evalcond[4]=(((sj3*x10959))+(((-1.0)*cj0*x10956))+(((-1.0)*cj0*x10957)));
evalcond[5]=(((r21*x10942))+((r20*x10951))+((x10946*x10958))+(((-1.0)*x10957))+(((-1.0)*x10956))+(((-1.0)*gconst5*x10950*x10958)));
evalcond[6]=((((-1.0)*r21*x10952))+(((-1.0)*x10949*x10950))+(((-1.0)*x10944))+((x10946*x10954))+x10945+(((-1.0)*x10941*x10942*x10950)));
evalcond[7]=((((-1.0)*x10945*x10948))+((r11*x10942))+((sj0*x10944))+((r10*x10951))+((x10943*x10958))+(((-1.0)*gconst5*x10947*x10958)));
evalcond[8]=((((-1.0)*cj2*sj1*x10948))+(((-1.0)*cj1*sj2*x10948))+((x10943*x10954))+(((-1.0)*x10941*x10942*x10947))+(((-1.0)*x10947*x10949))+(((-1.0)*r11*x10952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10961=((1.0)*gconst5);
CheckValue<IkReal> x10962=IKPowWithIntegerCheck(((((-1.0)*r10*x10961))+((gconst4*r11))),-1);
if(!x10962.valid){
continue;
}
CheckValue<IkReal> x10963=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x10961))+((cj3*gconst4*r21))),-1);
if(!x10963.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10962.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10963.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x10961)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10962.value)))+IKsqr(((x10963.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x10961))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10962.value)), ((x10963.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x10961))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10964=IKsin(j4);
IkReal x10965=IKcos(j4);
IkReal x10966=(gconst5*sj3);
IkReal x10967=(gconst4*r11);
IkReal x10968=(cj1*cj2);
IkReal x10969=(sj1*sj2);
IkReal x10970=(gconst4*r21);
IkReal x10971=((1.0)*r10);
IkReal x10972=((1.0)*sj0);
IkReal x10973=(cj3*gconst4);
IkReal x10974=((1.0)*r20);
IkReal x10975=(gconst4*sj3);
IkReal x10976=((1.0)*cj3*gconst5);
IkReal x10977=(r10*x10965);
IkReal x10978=(sj3*x10965);
IkReal x10979=(gconst5*x10964);
IkReal x10980=((1.0)*cj2*sj1);
IkReal x10981=((1.0)*cj1*sj2);
IkReal x10982=(cj3*x10965);
IkReal x10983=(r02*x10964);
IkReal x10984=(r20*x10965);
evalcond[0]=((((-1.0)*x10972))+(((-1.0)*r02*x10965)));
evalcond[1]=(((x10964*x10970))+(((-1.0)*x10974*x10979)));
evalcond[2]=((((-1.0)*x10971*x10979))+cj0+((x10964*x10967)));
evalcond[3]=(((cj3*x10983))+((cj0*x10968))+(((-1.0)*cj0*x10969)));
evalcond[4]=(((sj3*x10983))+(((-1.0)*cj0*x10981))+(((-1.0)*cj0*x10980)));
evalcond[5]=(((r20*x10975))+((x10970*x10982))+((r21*x10966))+(((-1.0)*gconst5*x10974*x10982))+(((-1.0)*x10980))+(((-1.0)*x10981)));
evalcond[6]=((((-1.0)*x10965*x10966*x10974))+(((-1.0)*x10973*x10974))+(((-1.0)*r21*x10976))+(((-1.0)*x10968))+((x10970*x10978))+x10969);
evalcond[7]=((((-1.0)*gconst5*x10971*x10982))+((r11*x10966))+((sj0*x10968))+((x10967*x10982))+((r10*x10975))+(((-1.0)*x10969*x10972)));
evalcond[8]=((((-1.0)*x10971*x10973))+(((-1.0)*x10965*x10966*x10971))+((x10967*x10978))+(((-1.0)*cj1*sj2*x10972))+(((-1.0)*r11*x10976))+(((-1.0)*cj2*sj1*x10972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10985=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10985.valid){
continue;
}
CheckValue<IkReal> x10986=IKPowWithIntegerCheck(r02,-1);
if(!x10986.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10985.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10986.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10985.value)))+IKsqr(((-1.0)*sj0*(x10986.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10985.value)), ((-1.0)*sj0*(x10986.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10987=IKsin(j4);
IkReal x10988=IKcos(j4);
IkReal x10989=(gconst5*sj3);
IkReal x10990=(gconst4*r11);
IkReal x10991=(cj1*cj2);
IkReal x10992=(sj1*sj2);
IkReal x10993=(gconst4*r21);
IkReal x10994=((1.0)*r10);
IkReal x10995=((1.0)*sj0);
IkReal x10996=(cj3*gconst4);
IkReal x10997=((1.0)*r20);
IkReal x10998=(gconst4*sj3);
IkReal x10999=((1.0)*cj3*gconst5);
IkReal x11000=(r10*x10988);
IkReal x11001=(sj3*x10988);
IkReal x11002=(gconst5*x10987);
IkReal x11003=((1.0)*cj2*sj1);
IkReal x11004=((1.0)*cj1*sj2);
IkReal x11005=(cj3*x10988);
IkReal x11006=(r02*x10987);
IkReal x11007=(r20*x10988);
evalcond[0]=((((-1.0)*x10995))+(((-1.0)*r02*x10988)));
evalcond[1]=(((x10987*x10993))+(((-1.0)*x10997*x11002)));
evalcond[2]=(((x10987*x10990))+cj0+(((-1.0)*x10994*x11002)));
evalcond[3]=(((cj3*x11006))+((cj0*x10991))+(((-1.0)*cj0*x10992)));
evalcond[4]=((((-1.0)*cj0*x11004))+(((-1.0)*cj0*x11003))+((sj3*x11006)));
evalcond[5]=((((-1.0)*gconst5*x10997*x11005))+((r21*x10989))+(((-1.0)*x11003))+(((-1.0)*x11004))+((x10993*x11005))+((r20*x10998)));
evalcond[6]=((((-1.0)*x10988*x10989*x10997))+(((-1.0)*r21*x10999))+(((-1.0)*x10991))+((x10993*x11001))+(((-1.0)*x10996*x10997))+x10992);
evalcond[7]=((((-1.0)*x10992*x10995))+((r11*x10989))+(((-1.0)*gconst5*x10994*x11005))+((x10990*x11005))+((sj0*x10991))+((r10*x10998)));
evalcond[8]=((((-1.0)*x10988*x10989*x10994))+((x10990*x11001))+(((-1.0)*cj2*sj1*x10995))+(((-1.0)*x10994*x10996))+(((-1.0)*r11*x10999))+(((-1.0)*cj1*sj2*x10995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11008=((1.0)*sj0);
IkReal x11009=((1.0)*gconst4);
CheckValue<IkReal> x11010=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11009)))),-1);
if(!x11010.valid){
continue;
}
CheckValue<IkReal> x11011 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11008)))),IkReal(((((-1.0)*cj0*r01*x11009))+(((-1.0)*gconst4*r11*x11008))+((cj0*gconst5*r00))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11010.value)))+(x11011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11012=IKsin(j4);
IkReal x11013=IKcos(j4);
IkReal x11014=(gconst5*sj3);
IkReal x11015=(cj3*gconst5);
IkReal x11016=(cj1*cj2);
IkReal x11017=(sj1*sj2);
IkReal x11018=((1.0)*r10);
IkReal x11019=(cj3*gconst4);
IkReal x11020=((1.0)*r00);
IkReal x11021=((1.0)*sj0);
IkReal x11022=((1.0)*r20);
IkReal x11023=(gconst4*sj3);
IkReal x11024=((1.0)*x11013);
IkReal x11025=(gconst4*x11012);
IkReal x11026=(cj3*x11012);
IkReal x11027=(sj3*x11012);
IkReal x11028=(gconst5*x11012);
IkReal x11029=((1.0)*cj1*sj2);
IkReal x11030=((1.0)*cj2*sj1);
IkReal x11031=(x11013*x11023);
evalcond[0]=(((r21*x11025))+(((-1.0)*r22*x11024))+(((-1.0)*x11022*x11028)));
evalcond[1]=((((-1.0)*x11018*x11028))+cj0+(((-1.0)*r12*x11024))+((r11*x11025)));
evalcond[2]=((((-1.0)*r02*x11024))+((r01*x11025))+(((-1.0)*x11020*x11028))+(((-1.0)*x11021)));
evalcond[3]=(((r20*x11023))+(((-1.0)*x11013*x11015*x11022))+((r21*x11014))+((r22*x11026))+((r21*x11013*x11019))+(((-1.0)*x11029))+(((-1.0)*x11030)));
evalcond[4]=((((-1.0)*x11013*x11014*x11022))+((r21*x11031))+(((-1.0)*r21*x11015))+x11017+((r22*x11027))+(((-1.0)*x11019*x11022))+(((-1.0)*x11016)));
evalcond[5]=(((r00*x11023))+(((-1.0)*x11013*x11015*x11020))+((r01*x11013*x11019))+(((-1.0)*cj0*x11017))+((r01*x11014))+((cj0*x11016))+((r02*x11026)));
evalcond[6]=(((sj0*x11016))+((r10*x11023))+((r11*x11013*x11019))+((r11*x11014))+((r12*x11026))+(((-1.0)*x11013*x11015*x11018))+(((-1.0)*x11017*x11021)));
evalcond[7]=((((-1.0)*x11013*x11014*x11020))+((r01*x11031))+(((-1.0)*cj0*x11029))+(((-1.0)*cj0*x11030))+(((-1.0)*r01*x11015))+((r02*x11027))+(((-1.0)*x11019*x11020)));
evalcond[8]=((((-1.0)*cj2*sj1*x11021))+(((-1.0)*x11018*x11019))+((r12*x11027))+(((-1.0)*cj1*sj2*x11021))+((r11*x11031))+(((-1.0)*r11*x11015))+(((-1.0)*x11013*x11014*x11018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11032=((1.0)*gconst5);
CheckValue<IkReal> x11033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11032))+(((-1.0)*gconst4*r10)))),-1);
if(!x11033.valid){
continue;
}
CheckValue<IkReal> x11034 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11032))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11033.value)))+(x11034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11035=IKsin(j4);
IkReal x11036=IKcos(j4);
IkReal x11037=(gconst5*sj3);
IkReal x11038=(cj3*gconst5);
IkReal x11039=(cj1*cj2);
IkReal x11040=(sj1*sj2);
IkReal x11041=((1.0)*r10);
IkReal x11042=(cj3*gconst4);
IkReal x11043=((1.0)*r00);
IkReal x11044=((1.0)*sj0);
IkReal x11045=((1.0)*r20);
IkReal x11046=(gconst4*sj3);
IkReal x11047=((1.0)*x11036);
IkReal x11048=(gconst4*x11035);
IkReal x11049=(cj3*x11035);
IkReal x11050=(sj3*x11035);
IkReal x11051=(gconst5*x11035);
IkReal x11052=((1.0)*cj1*sj2);
IkReal x11053=((1.0)*cj2*sj1);
IkReal x11054=(x11036*x11046);
evalcond[0]=((((-1.0)*x11045*x11051))+(((-1.0)*r22*x11047))+((r21*x11048)));
evalcond[1]=(((r11*x11048))+cj0+(((-1.0)*r12*x11047))+(((-1.0)*x11041*x11051)));
evalcond[2]=((((-1.0)*x11044))+((r01*x11048))+(((-1.0)*x11043*x11051))+(((-1.0)*r02*x11047)));
evalcond[3]=(((r20*x11046))+((r21*x11037))+((r22*x11049))+((r21*x11036*x11042))+(((-1.0)*x11036*x11038*x11045))+(((-1.0)*x11053))+(((-1.0)*x11052)));
evalcond[4]=((((-1.0)*x11039))+((r22*x11050))+x11040+(((-1.0)*x11036*x11037*x11045))+(((-1.0)*x11042*x11045))+(((-1.0)*r21*x11038))+((r21*x11054)));
evalcond[5]=(((r01*x11037))+((r01*x11036*x11042))+(((-1.0)*cj0*x11040))+((r00*x11046))+(((-1.0)*x11036*x11038*x11043))+((r02*x11049))+((cj0*x11039)));
evalcond[6]=(((r10*x11046))+((r11*x11036*x11042))+(((-1.0)*x11036*x11038*x11041))+((sj0*x11039))+((r11*x11037))+((r12*x11049))+(((-1.0)*x11040*x11044)));
evalcond[7]=((((-1.0)*cj0*x11052))+(((-1.0)*cj0*x11053))+(((-1.0)*r01*x11038))+((r01*x11054))+(((-1.0)*x11036*x11037*x11043))+(((-1.0)*x11042*x11043))+((r02*x11050)));
evalcond[8]=(((r12*x11050))+(((-1.0)*cj2*sj1*x11044))+(((-1.0)*x11041*x11042))+(((-1.0)*r11*x11038))+(((-1.0)*x11036*x11037*x11041))+(((-1.0)*cj1*sj2*x11044))+((r11*x11054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11055=((1.0)*gconst5);
CheckValue<IkReal> x11056 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11055))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11056.valid){
continue;
}
CheckValue<IkReal> x11057=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11055)))),-1);
if(!x11057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11056.value)+(((1.5707963267949)*(x11057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11058=IKsin(j4);
IkReal x11059=IKcos(j4);
IkReal x11060=(gconst5*sj3);
IkReal x11061=(cj3*gconst5);
IkReal x11062=(cj1*cj2);
IkReal x11063=(sj1*sj2);
IkReal x11064=((1.0)*r10);
IkReal x11065=(cj3*gconst4);
IkReal x11066=((1.0)*r00);
IkReal x11067=((1.0)*sj0);
IkReal x11068=((1.0)*r20);
IkReal x11069=(gconst4*sj3);
IkReal x11070=((1.0)*x11059);
IkReal x11071=(gconst4*x11058);
IkReal x11072=(cj3*x11058);
IkReal x11073=(sj3*x11058);
IkReal x11074=(gconst5*x11058);
IkReal x11075=((1.0)*cj1*sj2);
IkReal x11076=((1.0)*cj2*sj1);
IkReal x11077=(x11059*x11069);
evalcond[0]=(((r21*x11071))+(((-1.0)*x11068*x11074))+(((-1.0)*r22*x11070)));
evalcond[1]=(cj0+(((-1.0)*x11064*x11074))+((r11*x11071))+(((-1.0)*r12*x11070)));
evalcond[2]=((((-1.0)*x11067))+(((-1.0)*r02*x11070))+(((-1.0)*x11066*x11074))+((r01*x11071)));
evalcond[3]=(((r20*x11069))+((r21*x11059*x11065))+((r21*x11060))+(((-1.0)*x11076))+(((-1.0)*x11075))+((r22*x11072))+(((-1.0)*x11059*x11061*x11068)));
evalcond[4]=((((-1.0)*x11059*x11060*x11068))+((r21*x11077))+(((-1.0)*r21*x11061))+x11063+(((-1.0)*x11065*x11068))+(((-1.0)*x11062))+((r22*x11073)));
evalcond[5]=(((r02*x11072))+(((-1.0)*cj0*x11063))+((r01*x11059*x11065))+((r01*x11060))+((cj0*x11062))+((r00*x11069))+(((-1.0)*x11059*x11061*x11066)));
evalcond[6]=(((sj0*x11062))+((r11*x11059*x11065))+((r12*x11072))+((r10*x11069))+((r11*x11060))+(((-1.0)*x11063*x11067))+(((-1.0)*x11059*x11061*x11064)));
evalcond[7]=((((-1.0)*x11059*x11060*x11066))+((r02*x11073))+(((-1.0)*r01*x11061))+((r01*x11077))+(((-1.0)*cj0*x11076))+(((-1.0)*cj0*x11075))+(((-1.0)*x11065*x11066)));
evalcond[8]=((((-1.0)*x11059*x11060*x11064))+(((-1.0)*cj2*sj1*x11067))+((r12*x11073))+((r11*x11077))+(((-1.0)*cj1*sj2*x11067))+(((-1.0)*x11064*x11065))+(((-1.0)*r11*x11061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11078=((-1.0)*r10);
IkReal x11080 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11080)==0){
continue;
}
IkReal x11079=pow(x11080,-0.5);
CheckValue<IkReal> x11081 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11078),IKFAST_ATAN2_MAGTHRESH);
if(!x11081.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11081.value));
IkReal gconst7=(r11*x11079);
IkReal gconst8=(x11078*x11079);
CheckValue<IkReal> x11082 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11082.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11082.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11083=((-1.0)*r10);
IkReal x11084=x11079;
CheckValue<IkReal> x11086 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11083),IKFAST_ATAN2_MAGTHRESH);
if(!x11086.valid){
continue;
}
IkReal x11085=((-1.0)*(x11086.value));
sj5=gconst7;
cj5=gconst8;
j5=x11085;
IkReal gconst6=x11085;
IkReal gconst7=(r11*x11084);
IkReal gconst8=(x11083*x11084);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11087=((1.0)*sj0);
IkReal x11088=((1.0)*gconst7);
CheckValue<IkReal> x11089 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11087)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11087))+(((-1.0)*cj0*r01*x11088))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11089.valid){
continue;
}
CheckValue<IkReal> x11090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11088))+(((-1.0)*gconst8*r21)))),-1);
if(!x11090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11089.value)+(((1.5707963267949)*(x11090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11091=IKsin(j4);
IkReal x11092=IKcos(j4);
IkReal x11093=(gconst7*sj3);
IkReal x11094=(cj1*cj2);
IkReal x11095=(cj3*gconst7);
IkReal x11096=(sj1*sj2);
IkReal x11097=((1.0)*r10);
IkReal x11098=((1.0)*r20);
IkReal x11099=(cj3*gconst8);
IkReal x11100=(gconst8*sj3);
IkReal x11101=((1.0)*sj0);
IkReal x11102=((1.0)*r00);
IkReal x11103=((1.0)*x11092);
IkReal x11104=(cj3*x11091);
IkReal x11105=(r01*x11092);
IkReal x11106=(sj3*x11091);
IkReal x11107=(gconst7*x11091);
IkReal x11108=(r11*x11092);
IkReal x11109=((1.0)*cj2*sj1);
IkReal x11110=((1.0)*cj1*sj2);
IkReal x11111=(r21*x11092);
IkReal x11112=(gconst8*x11091);
evalcond[0]=((((-1.0)*x11098*x11112))+((r21*x11107))+(((-1.0)*r22*x11103)));
evalcond[1]=((((-1.0)*x11097*x11112))+cj0+(((-1.0)*r12*x11103))+((r11*x11107)));
evalcond[2]=((((-1.0)*x11102*x11112))+(((-1.0)*r02*x11103))+(((-1.0)*x11101))+((r01*x11107)));
evalcond[3]=((((-1.0)*x11092*x11098*x11099))+((x11095*x11111))+((r20*x11093))+((r21*x11100))+(((-1.0)*x11110))+(((-1.0)*x11109))+((r22*x11104)));
evalcond[4]=(((x11093*x11111))+(((-1.0)*x11095*x11098))+(((-1.0)*x11094))+x11096+(((-1.0)*x11092*x11098*x11100))+(((-1.0)*r21*x11099))+((r22*x11106)));
evalcond[5]=(((cj0*x11094))+((r02*x11104))+((x11095*x11105))+(((-1.0)*x11092*x11099*x11102))+((r00*x11093))+(((-1.0)*cj0*x11096))+((r01*x11100)));
evalcond[6]=(((x11095*x11108))+(((-1.0)*x11096*x11101))+((sj0*x11094))+(((-1.0)*x11092*x11097*x11099))+((r10*x11093))+((r11*x11100))+((r12*x11104)));
evalcond[7]=(((r02*x11106))+((x11093*x11105))+(((-1.0)*x11092*x11100*x11102))+(((-1.0)*cj0*x11110))+(((-1.0)*cj0*x11109))+(((-1.0)*r01*x11099))+(((-1.0)*x11095*x11102)));
evalcond[8]=(((x11093*x11108))+(((-1.0)*x11095*x11097))+(((-1.0)*cj1*sj2*x11101))+(((-1.0)*cj2*sj1*x11101))+((r12*x11106))+(((-1.0)*x11092*x11097*x11100))+(((-1.0)*r11*x11099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11113=((1.0)*gconst8);
CheckValue<IkReal> x11114=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11113)))),-1);
if(!x11114.valid){
continue;
}
CheckValue<IkReal> x11115 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11114.value)))+(x11115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11116=IKsin(j4);
IkReal x11117=IKcos(j4);
IkReal x11118=(gconst7*sj3);
IkReal x11119=(cj1*cj2);
IkReal x11120=(cj3*gconst7);
IkReal x11121=(sj1*sj2);
IkReal x11122=((1.0)*r10);
IkReal x11123=((1.0)*r20);
IkReal x11124=(cj3*gconst8);
IkReal x11125=(gconst8*sj3);
IkReal x11126=((1.0)*sj0);
IkReal x11127=((1.0)*r00);
IkReal x11128=((1.0)*x11117);
IkReal x11129=(cj3*x11116);
IkReal x11130=(r01*x11117);
IkReal x11131=(sj3*x11116);
IkReal x11132=(gconst7*x11116);
IkReal x11133=(r11*x11117);
IkReal x11134=((1.0)*cj2*sj1);
IkReal x11135=((1.0)*cj1*sj2);
IkReal x11136=(r21*x11117);
IkReal x11137=(gconst8*x11116);
evalcond[0]=(((r21*x11132))+(((-1.0)*r22*x11128))+(((-1.0)*x11123*x11137)));
evalcond[1]=((((-1.0)*r12*x11128))+cj0+((r11*x11132))+(((-1.0)*x11122*x11137)));
evalcond[2]=((((-1.0)*x11126))+(((-1.0)*x11127*x11137))+(((-1.0)*r02*x11128))+((r01*x11132)));
evalcond[3]=(((r21*x11125))+((x11120*x11136))+((r22*x11129))+(((-1.0)*x11134))+(((-1.0)*x11135))+((r20*x11118))+(((-1.0)*x11117*x11123*x11124)));
evalcond[4]=(((r22*x11131))+(((-1.0)*x11119))+(((-1.0)*r21*x11124))+(((-1.0)*x11120*x11123))+x11121+(((-1.0)*x11117*x11123*x11125))+((x11118*x11136)));
evalcond[5]=((((-1.0)*x11117*x11124*x11127))+((x11120*x11130))+((cj0*x11119))+((r02*x11129))+((r00*x11118))+((r01*x11125))+(((-1.0)*cj0*x11121)));
evalcond[6]=(((x11120*x11133))+(((-1.0)*x11121*x11126))+((sj0*x11119))+((r10*x11118))+((r12*x11129))+((r11*x11125))+(((-1.0)*x11117*x11122*x11124)));
evalcond[7]=(((r02*x11131))+(((-1.0)*x11120*x11127))+(((-1.0)*x11117*x11125*x11127))+(((-1.0)*cj0*x11135))+(((-1.0)*cj0*x11134))+(((-1.0)*r01*x11124))+((x11118*x11130)));
evalcond[8]=((((-1.0)*cj1*sj2*x11126))+(((-1.0)*x11120*x11122))+(((-1.0)*r11*x11124))+(((-1.0)*cj2*sj1*x11126))+((r12*x11131))+(((-1.0)*x11117*x11122*x11125))+((x11118*x11133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11138=((-1.0)*r11);
IkReal x11140 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11140)==0){
continue;
}
IkReal x11139=pow(x11140,-0.5);
CheckValue<IkReal> x11141 = IKatan2WithCheck(IkReal(x11138),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11141.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11141.value))));
IkReal gconst10=(x11138*x11139);
IkReal gconst11=((1.0)*r10*x11139);
CheckValue<IkReal> x11142 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11142.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11142.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11143=((-1.0)*r11);
CheckValue<IkReal> x11146 = IKatan2WithCheck(IkReal(x11143),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11146.valid){
continue;
}
IkReal x11144=((1.0)*(x11146.value));
IkReal x11145=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11144)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11144)));
IkReal gconst10=(x11143*x11145);
IkReal gconst11=((1.0)*r10*x11145);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11147=((-1.0)*r11);
CheckValue<IkReal> x11150 = IKatan2WithCheck(IkReal(x11147),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11150.valid){
continue;
}
IkReal x11148=((1.0)*(x11150.value));
IkReal x11149=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11148)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11148)));
IkReal gconst10=(x11147*x11149);
IkReal gconst11=((1.0)*r10*x11149);
IkReal x11151=r12*r12;
IkReal x11152=((1.0)*sj0);
IkReal x11153=(cj0*r02);
IkReal x11154=x11139;
j4eval[0]=((IKabs(((((-1.0)*x11153))+(((-1.0)*r12*x11152)))))+(IKabs((((r12*x11153*x11154))+(((-1.0)*x11152*x11154))+((sj0*x11151*x11154))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11155=((-1.0)*r11);
CheckValue<IkReal> x11158 = IKatan2WithCheck(IkReal(x11155),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11158.valid){
continue;
}
IkReal x11156=((1.0)*(x11158.value));
IkReal x11157=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11156)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11156)));
IkReal gconst10=(x11155*x11157);
IkReal gconst11=((1.0)*r10*x11157);
IkReal x11159=((1.0)*cj3);
CheckValue<IkReal> x11164=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11164.valid){
continue;
}
IkReal x11160=x11164.value;
IkReal x11161=(cj3*x11160);
IkReal x11162=(x11159*x11160);
IkReal x11163=((((-1.0)*x11162*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11161))+(((-1.0)*x11162*(r10*r10)*(r20*r20)))+(((-1.0)*x11159*(r22*r22))));
j4eval[0]=x11163;
j4eval[1]=IKsign(x11163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11165=((-1.0)*r11);
CheckValue<IkReal> x11168 = IKatan2WithCheck(IkReal(x11165),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11168.valid){
continue;
}
IkReal x11166=((1.0)*(x11168.value));
IkReal x11167=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11166)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11166)));
IkReal gconst10=(x11165*x11167);
IkReal gconst11=((1.0)*r10*x11167);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11169=((-1.0)*r11);
CheckValue<IkReal> x11172 = IKatan2WithCheck(IkReal(x11169),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11172.valid){
continue;
}
IkReal x11170=((1.0)*(x11172.value));
IkReal x11171=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11170)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11170)));
IkReal gconst10=(x11169*x11171);
IkReal gconst11=((1.0)*r10*x11171);
IkReal x11173=r12*r12;
IkReal x11174=((1.0)*sj0);
IkReal x11175=(cj0*r02);
IkReal x11176=x11139;
j4eval[0]=((IKabs(((((-1.0)*r12*x11174))+(((-1.0)*x11175)))))+(IKabs(((((-1.0)*x11174*x11176))+((sj0*x11173*x11176))+((r12*x11175*x11176))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11177=((-1.0)*r11);
CheckValue<IkReal> x11180 = IKatan2WithCheck(IkReal(x11177),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11180.valid){
continue;
}
IkReal x11178=((1.0)*(x11180.value));
IkReal x11179=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11178)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11178)));
IkReal gconst10=(x11177*x11179);
IkReal gconst11=((1.0)*r10*x11179);
IkReal x11181=r12*r12;
IkReal x11182=((1.0)+(((-1.0)*x11181)));
IkReal x11183=(r22*sj1*sj2);
IkReal x11184=(cj1*cj2*r22);
CheckValue<IkReal> x11191=IKPowWithIntegerCheck(x11182,-1);
if(!x11191.valid){
continue;
}
IkReal x11185=x11191.value;
CheckValue<IkReal> x11192=IKPowWithIntegerCheck(((-1.0)+x11181),-1);
if(!x11192.valid){
continue;
}
IkReal x11186=x11192.value;
IkReal x11187=((1.0)*x11185);
if((x11182) < -0.00001)
continue;
IkReal x11188=IKsqrt(x11182);
IkReal x11189=(r12*x11186*x11188);
IkReal x11190=((((-1.0)*x11187*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x11187*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11185)));
j4eval[0]=x11190;
j4eval[1]=((IKabs((((x11184*x11189))+(((-1.0)*x11183*x11189)))))+(IKabs((x11183+(((-1.0)*x11184))))));
j4eval[2]=IKsign(x11190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11193=((-1.0)*r11);
CheckValue<IkReal> x11196 = IKatan2WithCheck(IkReal(x11193),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11196.valid){
continue;
}
IkReal x11194=((1.0)*(x11196.value));
IkReal x11195=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11194)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11194)));
IkReal gconst10=(x11193*x11195);
IkReal gconst11=((1.0)*r10*x11195);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11197=((-1.0)*r11);
CheckValue<IkReal> x11200 = IKatan2WithCheck(IkReal(x11197),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11200.valid){
continue;
}
IkReal x11198=((1.0)*(x11200.value));
IkReal x11199=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11198)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11198)));
IkReal gconst10=(x11197*x11199);
IkReal gconst11=((1.0)*r10*x11199);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11201=((-1.0)*r11);
CheckValue<IkReal> x11204 = IKatan2WithCheck(IkReal(x11201),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11204.valid){
continue;
}
IkReal x11202=((1.0)*(x11204.value));
IkReal x11203=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11202)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11202)));
IkReal gconst10=(x11201*x11203);
IkReal gconst11=((1.0)*r10*x11203);
IkReal x11205=(cj1*r02*sj2);
IkReal x11206=(cj2*r02*sj1);
IkReal x11207=x11139;
IkReal x11208=(r12*x11207);
j4eval[0]=((IKabs((((x11206*x11208))+((x11205*x11208)))))+(IKabs((x11206+x11205))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11209=(cj1*sj2);
IkReal x11210=(cj2*sj1);
IkReal x11211=(gconst11*r00);
IkReal x11212=((1.0)*gconst10*r01);
CheckValue<IkReal> x11213 = IKatan2WithCheck(IkReal(((((-1.0)*x11209*x11212))+((x11210*x11211))+((x11209*x11211))+(((-1.0)*x11210*x11212)))),IkReal((((r02*x11210))+((r02*x11209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11213.valid){
continue;
}
CheckValue<IkReal> x11214=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x11214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11213.value)+(((1.5707963267949)*(x11214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11215=IKcos(j4);
IkReal x11216=IKsin(j4);
IkReal x11217=((1.0)*cj2);
IkReal x11218=((1.0)*x11215);
IkReal x11219=(gconst10*x11215);
IkReal x11220=(gconst10*x11216);
IkReal x11221=((1.0)*gconst11*x11216);
evalcond[0]=(((r02*x11216))+((r01*x11219))+(((-1.0)*gconst11*r00*x11218)));
evalcond[1]=((((-1.0)*r20*x11221))+((r21*x11220))+(((-1.0)*r22*x11218)));
evalcond[2]=(((r11*x11220))+(((-1.0)*r12*x11218))+(((-1.0)*r10*x11221)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11221))+((r01*x11220))+(((-1.0)*r02*x11218)));
evalcond[4]=(((r21*x11219))+(((-1.0)*gconst11*r20*x11218))+((sj1*sj2))+(((-1.0)*cj1*x11217))+((r22*x11216)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x11218))+((r11*x11219))+((r12*x11216))+(((-1.0)*sj1*x11217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11222=(gconst10*r01);
IkReal x11223=(gconst11*r00);
CheckValue<IkReal> x11224 = IKatan2WithCheck(IkReal((x11222+(((-1.0)*x11223)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11224.valid){
continue;
}
CheckValue<IkReal> x11225=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11222*x11223))+(x11222*x11222)+(x11223*x11223)+(r02*r02))),-1);
if(!x11225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11224.value)+(((1.5707963267949)*(x11225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11226=IKcos(j4);
IkReal x11227=IKsin(j4);
IkReal x11228=((1.0)*cj2);
IkReal x11229=((1.0)*x11226);
IkReal x11230=(gconst10*x11226);
IkReal x11231=(gconst10*x11227);
IkReal x11232=((1.0)*gconst11*x11227);
evalcond[0]=((((-1.0)*gconst11*r00*x11229))+((r02*x11227))+((r01*x11230)));
evalcond[1]=((((-1.0)*r20*x11232))+((r21*x11231))+(((-1.0)*r22*x11229)));
evalcond[2]=(((r11*x11231))+(((-1.0)*r10*x11232))+(((-1.0)*r12*x11229)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11232))+((r01*x11231))+(((-1.0)*r02*x11229)));
evalcond[4]=((((-1.0)*gconst11*r20*x11229))+((r22*x11227))+(((-1.0)*cj1*x11228))+((sj1*sj2))+((r21*x11230)));
evalcond[5]=((((-1.0)*sj1*x11228))+((r11*x11230))+((r12*x11227))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x11229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11233 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11233.valid){
continue;
}
CheckValue<IkReal> x11234=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11233.value)+(((1.5707963267949)*(x11234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11235=IKcos(j4);
IkReal x11236=IKsin(j4);
IkReal x11237=((1.0)*cj2);
IkReal x11238=((1.0)*x11235);
IkReal x11239=(gconst10*x11235);
IkReal x11240=(gconst10*x11236);
IkReal x11241=((1.0)*gconst11*x11236);
evalcond[0]=(((r02*x11236))+(((-1.0)*gconst11*r00*x11238))+((r01*x11239)));
evalcond[1]=((((-1.0)*r20*x11241))+((r21*x11240))+(((-1.0)*r22*x11238)));
evalcond[2]=(((r11*x11240))+(((-1.0)*r10*x11241))+(((-1.0)*r12*x11238)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11238))+(((-1.0)*r00*x11241))+((r01*x11240)));
evalcond[4]=(((r22*x11236))+((sj1*sj2))+(((-1.0)*cj1*x11237))+((r21*x11239))+(((-1.0)*gconst11*r20*x11238)));
evalcond[5]=((((-1.0)*sj1*x11237))+((r11*x11239))+(((-1.0)*cj1*sj2))+((r12*x11236))+(((-1.0)*gconst11*r10*x11238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11242=((-1.0)*r11);
CheckValue<IkReal> x11245 = IKatan2WithCheck(IkReal(x11242),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11245.valid){
continue;
}
IkReal x11243=((1.0)*(x11245.value));
IkReal x11244=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11243)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11243)));
IkReal gconst10=(x11242*x11244);
IkReal gconst11=((1.0)*r10*x11244);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11246=((-1.0)*r11);
CheckValue<IkReal> x11249 = IKatan2WithCheck(IkReal(x11246),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11249.valid){
continue;
}
IkReal x11247=((1.0)*(x11249.value));
IkReal x11248=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11247)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11247)));
IkReal gconst10=(x11246*x11248);
IkReal gconst11=((1.0)*r10*x11248);
IkReal x11250=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11254=IKPowWithIntegerCheck(x11250,-1);
if(!x11254.valid){
continue;
}
IkReal x11251=x11254.value;
IkReal x11252=((1.0)*x11251);
IkReal x11253=((((-1.0)*(r02*r02)))+(((-1.0)*x11252*(r01*r01)*(r11*r11)))+(((-1.0)*x11252*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11251)));
j4eval[0]=x11253;
j4eval[1]=r02;
j4eval[2]=x11250;
j4eval[3]=IKsign(x11253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11255=((-1.0)*r11);
CheckValue<IkReal> x11258 = IKatan2WithCheck(IkReal(x11255),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11258.valid){
continue;
}
IkReal x11256=((1.0)*(x11258.value));
IkReal x11257=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11256)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11256)));
IkReal gconst10=(x11255*x11257);
IkReal gconst11=((1.0)*r10*x11257);
IkReal x11259=r12*r12;
IkReal x11260=((1.0)*r02);
IkReal x11261=(cj1*sj2);
IkReal x11262=(cj2*sj1);
CheckValue<IkReal> x11266=IKPowWithIntegerCheck(((-1.0)+x11259),-1);
if(!x11266.valid){
continue;
}
IkReal x11263=x11266.value;
if((((1.0)+(((-1.0)*x11259)))) < -0.00001)
continue;
IkReal x11264=IKsqrt(((1.0)+(((-1.0)*x11259))));
IkReal x11265=(r12*x11263*x11264);
j4eval[0]=((IKabs(((((-1.0)*x11260*x11261))+(((-1.0)*x11260*x11262)))))+(IKabs(((((-1.0)*x11260*x11261*x11265))+(((-1.0)*x11260*x11262*x11265))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11267=(cj1*sj2);
IkReal x11268=(gconst10*r01);
IkReal x11269=(cj2*sj1);
IkReal x11270=((1.0)*r02);
IkReal x11271=((1.0)*gconst11*r00);
CheckValue<IkReal> x11272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x11272.valid){
continue;
}
CheckValue<IkReal> x11273 = IKatan2WithCheck(IkReal((((x11267*x11268))+((x11268*x11269))+(((-1.0)*x11269*x11271))+(((-1.0)*x11267*x11271)))),IkReal(((((-1.0)*x11269*x11270))+(((-1.0)*x11267*x11270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11272.value)))+(x11273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11274=IKcos(j4);
IkReal x11275=IKsin(j4);
IkReal x11276=((1.0)*x11274);
IkReal x11277=(gconst10*x11274);
IkReal x11278=(gconst10*x11275);
IkReal x11279=((1.0)*gconst11*x11275);
evalcond[0]=(((r01*x11277))+(((-1.0)*gconst11*r00*x11276))+((r02*x11275)));
evalcond[1]=(((r21*x11278))+(((-1.0)*r22*x11276))+(((-1.0)*r20*x11279)));
evalcond[2]=((((-1.0)*r12*x11276))+(((-1.0)*r10*x11279))+((r11*x11278)));
evalcond[3]=((1.0)+(((-1.0)*r00*x11279))+((r01*x11278))+(((-1.0)*r02*x11276)));
evalcond[4]=(((cj2*sj1))+((r12*x11275))+((cj1*sj2))+(((-1.0)*gconst11*r10*x11276))+((r11*x11277)));
evalcond[5]=(((r22*x11275))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11277))+(((-1.0)*gconst11*r20*x11276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11280=(gconst10*r01);
IkReal x11281=(gconst11*r00);
CheckValue<IkReal> x11282 = IKatan2WithCheck(IkReal((x11280+(((-1.0)*x11281)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11282.valid){
continue;
}
CheckValue<IkReal> x11283=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11280*x11281))+(((-1.0)*(x11280*x11280)))+(((-1.0)*(x11281*x11281))))),-1);
if(!x11283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11282.value)+(((1.5707963267949)*(x11283.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11284=IKcos(j4);
IkReal x11285=IKsin(j4);
IkReal x11286=((1.0)*x11284);
IkReal x11287=(gconst10*x11284);
IkReal x11288=(gconst10*x11285);
IkReal x11289=((1.0)*gconst11*x11285);
evalcond[0]=(((r02*x11285))+((r01*x11287))+(((-1.0)*gconst11*r00*x11286)));
evalcond[1]=((((-1.0)*r22*x11286))+((r21*x11288))+(((-1.0)*r20*x11289)));
evalcond[2]=((((-1.0)*r10*x11289))+(((-1.0)*r12*x11286))+((r11*x11288)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11286))+(((-1.0)*r00*x11289))+((r01*x11288)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x11285))+((r11*x11287))+(((-1.0)*gconst11*r10*x11286)));
evalcond[5]=(((r22*x11285))+((r21*x11287))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x11286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11290=((1.0)*gconst11);
CheckValue<IkReal> x11291 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11291.valid){
continue;
}
CheckValue<IkReal> x11292=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11290)))),-1);
if(!x11292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11291.value)+(((1.5707963267949)*(x11292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11293=IKcos(j4);
IkReal x11294=IKsin(j4);
IkReal x11295=((1.0)*x11293);
IkReal x11296=(gconst10*x11293);
IkReal x11297=(gconst10*x11294);
IkReal x11298=((1.0)*gconst11*x11294);
evalcond[0]=(((r01*x11296))+(((-1.0)*gconst11*r00*x11295))+((r02*x11294)));
evalcond[1]=((((-1.0)*r22*x11295))+((r21*x11297))+(((-1.0)*r20*x11298)));
evalcond[2]=((((-1.0)*r10*x11298))+((r11*x11297))+(((-1.0)*r12*x11295)));
evalcond[3]=((1.0)+((r01*x11297))+(((-1.0)*r02*x11295))+(((-1.0)*r00*x11298)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x11295))+((cj1*sj2))+((r11*x11296))+((r12*x11294)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11296))+(((-1.0)*gconst11*r20*x11295))+((r22*x11294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11299=((-1.0)*r11);
IkReal x11300=((-1.0)*r10);
CheckValue<IkReal> x11302 = IKatan2WithCheck(IkReal(x11299),IkReal(x11300),IKFAST_ATAN2_MAGTHRESH);
if(!x11302.valid){
continue;
}
IkReal x11301=((1.0)*(x11302.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11301)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11300);
rxp1_1=(px*r21);
rxp1_2=(px*x11299);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11301)));
IkReal gconst10=x11299;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11303=((-1.0)*r11);
IkReal x11304=((-1.0)*r10);
CheckValue<IkReal> x11306 = IKatan2WithCheck(IkReal(x11303),IkReal(x11304),IKFAST_ATAN2_MAGTHRESH);
if(!x11306.valid){
continue;
}
IkReal x11305=((1.0)*(x11306.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11305)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11304);
rxp1_1=(px*r21);
rxp1_2=(px*x11303);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11305)));
IkReal gconst10=x11303;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11307=((-1.0)*r11);
IkReal x11308=((-1.0)*r10);
CheckValue<IkReal> x11310 = IKatan2WithCheck(IkReal(x11307),IkReal(x11308),IKFAST_ATAN2_MAGTHRESH);
if(!x11310.valid){
continue;
}
IkReal x11309=((1.0)*(x11310.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11309)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11308);
rxp1_1=(px*r21);
rxp1_2=(px*x11307);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11309)));
IkReal gconst10=x11307;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11313=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11313.valid){
continue;
}
IkReal x11311=x11313.value;
IkReal x11312=(sj0*x11311);
cj4array[0]=(((cj2*sj1*x11312))+((cj1*sj2*x11312)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11314=IKsin(j4);
IkReal x11315=IKcos(j4);
IkReal x11316=(gconst10*r21);
IkReal x11317=((1.0)*x11315);
IkReal x11318=((1.0)*gconst11*x11314);
evalcond[0]=(r02*x11314);
evalcond[1]=((((-1.0)*r02*x11317))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x11318))+((x11314*x11316)));
evalcond[3]=((((-1.0)*r10*x11318))+((gconst10*r11*x11314)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11315*x11316))+(((-1.0)*gconst11*r20*x11317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11320=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11320.valid){
continue;
}
IkReal x11319=x11320.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11319))+((cj1*cj2*x11319)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11321=IKsin(j4);
IkReal x11322=IKcos(j4);
IkReal x11323=((1.0)*sj0);
IkReal x11324=(gconst10*x11321);
IkReal x11325=((1.0)*x11322);
IkReal x11326=((1.0)*gconst11*x11321);
evalcond[0]=(r02*x11321);
evalcond[1]=((((-1.0)*r02*x11325))+(((-1.0)*x11323)));
evalcond[2]=((((-1.0)*r20*x11326))+((r21*x11324)));
evalcond[3]=((((-1.0)*r10*x11326))+((r11*x11324)));
evalcond[4]=((((-1.0)*cj1*sj2*x11323))+(((-1.0)*gconst11*r10*x11325))+(((-1.0)*cj2*sj1*x11323))+((gconst10*r11*x11322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11327=IKPowWithIntegerCheck(r02,-1);
if(!x11327.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11327.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11328=IKsin(j4);
IkReal x11329=IKcos(j4);
IkReal x11330=(gconst10*r21);
IkReal x11331=((1.0)*cj1);
IkReal x11332=(gconst10*r11);
IkReal x11333=((1.0)*gconst11*x11328);
IkReal x11334=((1.0)*gconst11*x11329);
evalcond[0]=(r02*x11328);
evalcond[1]=(((x11328*x11330))+(((-1.0)*r20*x11333)));
evalcond[2]=(((x11328*x11332))+(((-1.0)*r10*x11333)));
evalcond[3]=((((-1.0)*cj2*x11331))+(((-1.0)*r20*x11334))+((sj1*sj2))+((x11329*x11330)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x11329*x11332))+(((-1.0)*sj0*sj2*x11331))+(((-1.0)*r10*x11334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11335=((1.0)*gconst11);
CheckValue<IkReal> x11336 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11335))+(((-1.0)*cj0*r00*x11335))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11336.valid){
continue;
}
CheckValue<IkReal> x11337=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11336.value)+(((1.5707963267949)*(x11337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11338=IKsin(j4);
IkReal x11339=IKcos(j4);
IkReal x11340=((1.0)*gconst11);
IkReal x11341=((1.0)*cj2);
IkReal x11342=((1.0)*sj0);
IkReal x11343=(cj1*sj2);
IkReal x11344=(gconst10*x11339);
IkReal x11345=(gconst10*x11338);
IkReal x11346=((1.0)*x11339);
evalcond[0]=((((-1.0)*r20*x11338*x11340))+((r21*x11345)));
evalcond[1]=((((-1.0)*r10*x11338*x11340))+((r11*x11345))+cj0+(((-1.0)*r12*x11346)));
evalcond[2]=((((-1.0)*r20*x11339*x11340))+((sj1*sj2))+(((-1.0)*cj1*x11341))+((r21*x11344)));
evalcond[3]=((((-1.0)*r00*x11338*x11340))+(((-1.0)*x11342))+((r01*x11345))+(((-1.0)*r02*x11346)));
evalcond[4]=((((-1.0)*cj0*sj1*x11341))+(((-1.0)*r00*x11339*x11340))+(((-1.0)*cj0*x11343))+((r01*x11344))+((r02*x11338)));
evalcond[5]=(((r11*x11344))+((r12*x11338))+(((-1.0)*x11342*x11343))+(((-1.0)*r10*x11339*x11340))+(((-1.0)*sj0*sj1*x11341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11347=(gconst10*r21);
IkReal x11348=(gconst11*r20);
IkReal x11349=(sj1*sj2);
IkReal x11350=(cj1*cj2);
CheckValue<IkReal> x11351=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11348*x11348)))+(((2.0)*x11347*x11348))+(((-1.0)*(r22*r22)))+(((-1.0)*(x11347*x11347))))),-1);
if(!x11351.valid){
continue;
}
CheckValue<IkReal> x11352 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11350))+((r22*x11349)))),IkReal(((((-1.0)*x11347*x11350))+(((-1.0)*x11348*x11349))+((x11347*x11349))+((x11348*x11350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11351.value)))+(x11352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11353=IKsin(j4);
IkReal x11354=IKcos(j4);
IkReal x11355=((1.0)*cj2);
IkReal x11356=((1.0)*sj0);
IkReal x11357=(cj1*sj2);
IkReal x11358=((1.0)*x11354);
IkReal x11359=(gconst10*x11354);
IkReal x11360=(gconst10*x11353);
IkReal x11361=((1.0)*gconst11*x11353);
evalcond[0]=(((r21*x11360))+(((-1.0)*r22*x11358))+(((-1.0)*r20*x11361)));
evalcond[1]=((((-1.0)*r12*x11358))+cj0+(((-1.0)*r10*x11361))+((r11*x11360)));
evalcond[2]=(((r01*x11360))+(((-1.0)*x11356))+(((-1.0)*r00*x11361))+(((-1.0)*r02*x11358)));
evalcond[3]=((((-1.0)*gconst11*r20*x11358))+(((-1.0)*cj1*x11355))+((sj1*sj2))+((r21*x11359))+((r22*x11353)));
evalcond[4]=(((r02*x11353))+(((-1.0)*cj0*sj1*x11355))+(((-1.0)*cj0*x11357))+((r01*x11359))+(((-1.0)*gconst11*r00*x11358)));
evalcond[5]=(((r12*x11353))+(((-1.0)*gconst11*r10*x11358))+((r11*x11359))+(((-1.0)*sj0*sj1*x11355))+(((-1.0)*x11356*x11357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11362=((1.0)*sj0);
IkReal x11363=((1.0)*gconst10);
CheckValue<IkReal> x11364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11363))+(((-1.0)*gconst11*r21)))),-1);
if(!x11364.valid){
continue;
}
CheckValue<IkReal> x11365 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11362)))),IkReal(((((-1.0)*cj0*r01*x11363))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x11362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11364.value)))+(x11365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11366=IKsin(j4);
IkReal x11367=IKcos(j4);
IkReal x11368=((1.0)*cj2);
IkReal x11369=((1.0)*sj0);
IkReal x11370=(cj1*sj2);
IkReal x11371=((1.0)*x11367);
IkReal x11372=(gconst10*x11367);
IkReal x11373=(gconst10*x11366);
IkReal x11374=((1.0)*gconst11*x11366);
evalcond[0]=(((r21*x11373))+(((-1.0)*r22*x11371))+(((-1.0)*r20*x11374)));
evalcond[1]=(cj0+(((-1.0)*r10*x11374))+((r11*x11373))+(((-1.0)*r12*x11371)));
evalcond[2]=((((-1.0)*x11369))+((r01*x11373))+(((-1.0)*r02*x11371))+(((-1.0)*r00*x11374)));
evalcond[3]=(((r21*x11372))+((sj1*sj2))+((r22*x11366))+(((-1.0)*gconst11*r20*x11371))+(((-1.0)*cj1*x11368)));
evalcond[4]=((((-1.0)*cj0*x11370))+(((-1.0)*cj0*sj1*x11368))+((r01*x11372))+(((-1.0)*gconst11*r00*x11371))+((r02*x11366)));
evalcond[5]=((((-1.0)*x11369*x11370))+(((-1.0)*sj0*sj1*x11368))+((r12*x11366))+(((-1.0)*gconst11*r10*x11371))+((r11*x11372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11375=((1.0)*gconst11);
CheckValue<IkReal> x11376=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11375)))),-1);
if(!x11376.valid){
continue;
}
CheckValue<IkReal> x11377 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x11375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11376.value)))+(x11377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11378=IKsin(j4);
IkReal x11379=IKcos(j4);
IkReal x11380=((1.0)*cj2);
IkReal x11381=((1.0)*sj0);
IkReal x11382=(cj1*sj2);
IkReal x11383=((1.0)*x11379);
IkReal x11384=(gconst10*x11379);
IkReal x11385=(gconst10*x11378);
IkReal x11386=((1.0)*gconst11*x11378);
evalcond[0]=((((-1.0)*r20*x11386))+(((-1.0)*r22*x11383))+((r21*x11385)));
evalcond[1]=(((r11*x11385))+cj0+(((-1.0)*r10*x11386))+(((-1.0)*r12*x11383)));
evalcond[2]=((((-1.0)*x11381))+((r01*x11385))+(((-1.0)*r02*x11383))+(((-1.0)*r00*x11386)));
evalcond[3]=((((-1.0)*gconst11*r20*x11383))+((sj1*sj2))+((r22*x11378))+((r21*x11384))+(((-1.0)*cj1*x11380)));
evalcond[4]=((((-1.0)*cj0*sj1*x11380))+((r01*x11384))+(((-1.0)*gconst11*r00*x11383))+((r02*x11378))+(((-1.0)*cj0*x11382)));
evalcond[5]=(((r11*x11384))+(((-1.0)*x11381*x11382))+(((-1.0)*gconst11*r10*x11383))+((r12*x11378))+(((-1.0)*sj0*sj1*x11380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11387=((-1.0)*r11);
CheckValue<IkReal> x11390 = IKatan2WithCheck(IkReal(x11387),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11390.valid){
continue;
}
IkReal x11388=((1.0)*(x11390.value));
IkReal x11389=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11388)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11388)));
IkReal gconst10=(x11387*x11389);
IkReal gconst11=((1.0)*r10*x11389);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11391=((-1.0)*r11);
CheckValue<IkReal> x11394 = IKatan2WithCheck(IkReal(x11391),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11394.valid){
continue;
}
IkReal x11392=((1.0)*(x11394.value));
IkReal x11393=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11392)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11392)));
IkReal gconst10=(x11391*x11393);
IkReal gconst11=((1.0)*r10*x11393);
IkReal x11395=r12*r12;
IkReal x11396=((1.0)*sj0);
IkReal x11397=(cj0*r02);
IkReal x11398=x11139;
j4eval[0]=((IKabs(((((-1.0)*x11396*x11398))+((sj0*x11395*x11398))+((r12*x11397*x11398)))))+(IKabs(((((-1.0)*x11397))+(((-1.0)*r12*x11396))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11399=((-1.0)*r11);
CheckValue<IkReal> x11402 = IKatan2WithCheck(IkReal(x11399),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11402.valid){
continue;
}
IkReal x11400=((1.0)*(x11402.value));
IkReal x11401=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11400)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11400)));
IkReal gconst10=(x11399*x11401);
IkReal gconst11=((1.0)*r10*x11401);
IkReal x11403=r12*r12;
IkReal x11404=(cj1*cj2*r22);
IkReal x11405=(r22*sj1*sj2);
CheckValue<IkReal> x11409=IKPowWithIntegerCheck(((-1.0)+x11403),-1);
if(!x11409.valid){
continue;
}
IkReal x11406=x11409.value;
if((((1.0)+(((-1.0)*x11403)))) < -0.00001)
continue;
IkReal x11407=IKsqrt(((1.0)+(((-1.0)*x11403))));
IkReal x11408=(r12*x11406*x11407);
j4eval[0]=((IKabs(((((-1.0)*x11405*x11408))+((x11404*x11408)))))+(IKabs((x11405+(((-1.0)*x11404))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11410=((-1.0)*r11);
CheckValue<IkReal> x11413 = IKatan2WithCheck(IkReal(x11410),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11413.valid){
continue;
}
IkReal x11411=((1.0)*(x11413.value));
IkReal x11412=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11411)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11411)));
IkReal gconst10=(x11410*x11412);
IkReal gconst11=((1.0)*r10*x11412);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11414=((-1.0)*r11);
CheckValue<IkReal> x11417 = IKatan2WithCheck(IkReal(x11414),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11417.valid){
continue;
}
IkReal x11415=((1.0)*(x11417.value));
IkReal x11416=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11415)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11415)));
IkReal gconst10=(x11414*x11416);
IkReal gconst11=((1.0)*r10*x11416);
IkReal x11418=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11422=IKPowWithIntegerCheck(x11418,-1);
if(!x11422.valid){
continue;
}
IkReal x11419=x11422.value;
IkReal x11420=((1.0)*x11419);
IkReal x11421=((((-1.0)*x11420*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11419))+(((-1.0)*x11420*(r01*r01)*(r11*r11))));
j4eval[0]=x11421;
j4eval[1]=IKsign(x11421);
j4eval[2]=r02;
j4eval[3]=x11418;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11423=((-1.0)*r11);
CheckValue<IkReal> x11426 = IKatan2WithCheck(IkReal(x11423),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11426.valid){
continue;
}
IkReal x11424=((1.0)*(x11426.value));
IkReal x11425=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11424)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11424)));
IkReal gconst10=(x11423*x11425);
IkReal gconst11=((1.0)*r10*x11425);
IkReal x11427=r12*r12;
IkReal x11428=(cj1*cj2*r22);
IkReal x11429=(r22*sj1*sj2);
CheckValue<IkReal> x11433=IKPowWithIntegerCheck(((-1.0)+x11427),-1);
if(!x11433.valid){
continue;
}
IkReal x11430=x11433.value;
if((((1.0)+(((-1.0)*x11427)))) < -0.00001)
continue;
IkReal x11431=IKsqrt(((1.0)+(((-1.0)*x11427))));
IkReal x11432=(r12*x11430*x11431);
j4eval[0]=((IKabs((x11429+(((-1.0)*x11428)))))+(IKabs((((x11428*x11432))+(((-1.0)*x11429*x11432))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11434=(gconst10*r21);
IkReal x11435=(gconst11*r20);
IkReal x11436=(sj1*sj2);
IkReal x11437=(cj1*cj2);
CheckValue<IkReal> x11438=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11434*x11434)+(x11435*x11435)+(((-2.0)*x11434*x11435)))),-1);
if(!x11438.valid){
continue;
}
CheckValue<IkReal> x11439 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11437))+((r22*x11436)))),IkReal(((((-1.0)*x11435*x11436))+((x11434*x11436))+(((-1.0)*x11434*x11437))+((x11435*x11437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11438.value)))+(x11439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11440=IKsin(j4);
IkReal x11441=IKcos(j4);
IkReal x11442=((1.0)*cj2);
IkReal x11443=((1.0)*x11441);
IkReal x11444=(gconst10*x11440);
IkReal x11445=((1.0)*x11440);
IkReal x11446=(gconst11*x11441);
IkReal x11447=(gconst11*x11445);
evalcond[0]=((((-1.0)*r20*x11447))+(((-1.0)*r22*x11443))+((r21*x11444)));
evalcond[1]=((((-1.0)*r12*x11443))+((r11*x11444))+(((-1.0)*r10*x11447)));
evalcond[2]=(((r00*x11446))+(((-1.0)*gconst10*r01*x11443))+(((-1.0)*r02*x11445)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11447))+(((-1.0)*r02*x11443))+((r01*x11444)));
evalcond[4]=((((-1.0)*cj1*x11442))+((sj1*sj2))+(((-1.0)*r22*x11445))+((r20*x11446))+(((-1.0)*gconst10*r21*x11443)));
evalcond[5]=((((-1.0)*r12*x11445))+(((-1.0)*sj1*x11442))+(((-1.0)*cj1*sj2))+((r10*x11446))+(((-1.0)*gconst10*r11*x11443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11448=(gconst11*r00);
IkReal x11449=(gconst10*r01);
CheckValue<IkReal> x11450=IKPowWithIntegerCheck(IKsign(((((2.0)*x11448*x11449))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11449*x11449)))+(((-1.0)*(x11448*x11448))))),-1);
if(!x11450.valid){
continue;
}
CheckValue<IkReal> x11451 = IKatan2WithCheck(IkReal(((((-1.0)*x11449))+x11448)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11450.value)))+(x11451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11452=IKsin(j4);
IkReal x11453=IKcos(j4);
IkReal x11454=((1.0)*cj2);
IkReal x11455=((1.0)*x11453);
IkReal x11456=(gconst10*x11452);
IkReal x11457=((1.0)*x11452);
IkReal x11458=(gconst11*x11453);
IkReal x11459=(gconst11*x11457);
evalcond[0]=(((r21*x11456))+(((-1.0)*r20*x11459))+(((-1.0)*r22*x11455)));
evalcond[1]=((((-1.0)*r10*x11459))+(((-1.0)*r12*x11455))+((r11*x11456)));
evalcond[2]=((((-1.0)*r02*x11457))+((r00*x11458))+(((-1.0)*gconst10*r01*x11455)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11459))+(((-1.0)*r02*x11455))+((r01*x11456)));
evalcond[4]=(((r20*x11458))+(((-1.0)*gconst10*r21*x11455))+((sj1*sj2))+(((-1.0)*cj1*x11454))+(((-1.0)*r22*x11457)));
evalcond[5]=(((r10*x11458))+(((-1.0)*gconst10*r11*x11455))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11457))+(((-1.0)*sj1*x11454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11460 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11460.valid){
continue;
}
CheckValue<IkReal> x11461=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11460.value)+(((1.5707963267949)*(x11461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11462=IKsin(j4);
IkReal x11463=IKcos(j4);
IkReal x11464=((1.0)*cj2);
IkReal x11465=((1.0)*x11463);
IkReal x11466=(gconst10*x11462);
IkReal x11467=((1.0)*x11462);
IkReal x11468=(gconst11*x11463);
IkReal x11469=(gconst11*x11467);
evalcond[0]=((((-1.0)*r20*x11469))+(((-1.0)*r22*x11465))+((r21*x11466)));
evalcond[1]=((((-1.0)*r12*x11465))+((r11*x11466))+(((-1.0)*r10*x11469)));
evalcond[2]=((((-1.0)*gconst10*r01*x11465))+(((-1.0)*r02*x11467))+((r00*x11468)));
evalcond[3]=((-1.0)+((r01*x11466))+(((-1.0)*r00*x11469))+(((-1.0)*r02*x11465)));
evalcond[4]=((((-1.0)*cj1*x11464))+((sj1*sj2))+(((-1.0)*r22*x11467))+((r20*x11468))+(((-1.0)*gconst10*r21*x11465)));
evalcond[5]=((((-1.0)*r12*x11467))+(((-1.0)*cj1*sj2))+((r10*x11468))+(((-1.0)*sj1*x11464))+(((-1.0)*gconst10*r11*x11465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11470=((-1.0)*r11);
CheckValue<IkReal> x11473 = IKatan2WithCheck(IkReal(x11470),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11473.valid){
continue;
}
IkReal x11471=((1.0)*(x11473.value));
IkReal x11472=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11471)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11471)));
IkReal gconst10=(x11470*x11472);
IkReal gconst11=((1.0)*r10*x11472);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11474=((-1.0)*r11);
CheckValue<IkReal> x11477 = IKatan2WithCheck(IkReal(x11474),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11477.valid){
continue;
}
IkReal x11475=((1.0)*(x11477.value));
IkReal x11476=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11475)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11475)));
IkReal gconst10=(x11474*x11476);
IkReal gconst11=((1.0)*r10*x11476);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11478=((-1.0)*r11);
CheckValue<IkReal> x11481 = IKatan2WithCheck(IkReal(x11478),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11481.valid){
continue;
}
IkReal x11479=((1.0)*(x11481.value));
IkReal x11480=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11479)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11479)));
IkReal gconst10=(x11478*x11480);
IkReal gconst11=((1.0)*r10*x11480);
IkReal x11482=r12*r12;
CheckValue<IkReal> x11485=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11482))),-1);
if(!x11485.valid){
continue;
}
IkReal x11483=x11485.value;
IkReal x11484=((1.0)*x11483);
j4eval[0]=IKsign((x11482+((x11484*(r11*r11*r11*r11)))+((x11484*(r10*r10*r10*r10)))+(((2.0)*x11483*(r10*r10)*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11486=(cj2*sj1);
IkReal x11487=(gconst10*r11);
IkReal x11488=(gconst11*r10);
IkReal x11489=(cj1*sj2);
CheckValue<IkReal> x11490=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11488*x11488)+(((-2.0)*x11487*x11488))+(x11487*x11487))),-1);
if(!x11490.valid){
continue;
}
CheckValue<IkReal> x11491 = IKatan2WithCheck(IkReal((((r12*x11489))+((r12*x11486)))),IkReal((((x11486*x11487))+((x11487*x11489))+(((-1.0)*x11488*x11489))+(((-1.0)*x11486*x11488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11490.value)))+(x11491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11492=IKsin(j4);
IkReal x11493=IKcos(j4);
IkReal x11494=((1.0)*x11493);
IkReal x11495=(gconst10*x11492);
IkReal x11496=((1.0)*x11492);
IkReal x11497=(gconst11*x11493);
IkReal x11498=(gconst11*x11496);
evalcond[0]=((((-1.0)*r20*x11498))+((r21*x11495))+(((-1.0)*r22*x11494)));
evalcond[1]=((((-1.0)*r10*x11498))+((r11*x11495))+(((-1.0)*r12*x11494)));
evalcond[2]=(((r00*x11497))+(((-1.0)*gconst10*r01*x11494))+(((-1.0)*r02*x11496)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11494))+(((-1.0)*r00*x11498))+((r01*x11495)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x11497))+(((-1.0)*r12*x11496))+(((-1.0)*gconst10*r11*x11494)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r20*x11497))+((sj1*sj2))+(((-1.0)*r22*x11496))+(((-1.0)*gconst10*r21*x11494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11499=(gconst11*r00);
IkReal x11500=(gconst10*r01);
CheckValue<IkReal> x11501=IKPowWithIntegerCheck(IKsign(((x11499*x11499)+(r02*r02)+(((-2.0)*x11499*x11500))+(x11500*x11500))),-1);
if(!x11501.valid){
continue;
}
CheckValue<IkReal> x11502 = IKatan2WithCheck(IkReal((x11499+(((-1.0)*x11500)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11501.value)))+(x11502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11503=IKsin(j4);
IkReal x11504=IKcos(j4);
IkReal x11505=((1.0)*x11504);
IkReal x11506=(gconst10*x11503);
IkReal x11507=((1.0)*x11503);
IkReal x11508=(gconst11*x11504);
IkReal x11509=(gconst11*x11507);
evalcond[0]=(((r21*x11506))+(((-1.0)*r22*x11505))+(((-1.0)*r20*x11509)));
evalcond[1]=((((-1.0)*r12*x11505))+(((-1.0)*r10*x11509))+((r11*x11506)));
evalcond[2]=((((-1.0)*r02*x11507))+(((-1.0)*gconst10*r01*x11505))+((r00*x11508)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11505))+((r01*x11506))+(((-1.0)*r00*x11509)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11507))+((cj1*sj2))+((r10*x11508))+(((-1.0)*gconst10*r11*x11505)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11505))+(((-1.0)*r22*x11507))+((r20*x11508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11510=((1.0)*gconst11);
CheckValue<IkReal> x11511=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11510)))),-1);
if(!x11511.valid){
continue;
}
CheckValue<IkReal> x11512 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11511.value)))+(x11512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11513=IKsin(j4);
IkReal x11514=IKcos(j4);
IkReal x11515=((1.0)*x11514);
IkReal x11516=(gconst10*x11513);
IkReal x11517=((1.0)*x11513);
IkReal x11518=(gconst11*x11514);
IkReal x11519=(gconst11*x11517);
evalcond[0]=((((-1.0)*r22*x11515))+(((-1.0)*r20*x11519))+((r21*x11516)));
evalcond[1]=((((-1.0)*r12*x11515))+(((-1.0)*r10*x11519))+((r11*x11516)));
evalcond[2]=((((-1.0)*gconst10*r01*x11515))+(((-1.0)*r02*x11517))+((r00*x11518)));
evalcond[3]=((1.0)+((r01*x11516))+(((-1.0)*r00*x11519))+(((-1.0)*r02*x11515)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11515))+((cj1*sj2))+(((-1.0)*r12*x11517))+((r10*x11518)));
evalcond[5]=((((-1.0)*gconst10*r21*x11515))+((r20*x11518))+(((-1.0)*r22*x11517))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11520=((-1.0)*r11);
IkReal x11521=((-1.0)*r10);
CheckValue<IkReal> x11523 = IKatan2WithCheck(IkReal(x11520),IkReal(x11521),IKFAST_ATAN2_MAGTHRESH);
if(!x11523.valid){
continue;
}
IkReal x11522=((1.0)*(x11523.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11522)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11521);
rxp1_1=(px*r21);
rxp1_2=(px*x11520);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11522)));
IkReal gconst10=x11520;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11524=((-1.0)*r11);
IkReal x11525=((-1.0)*r10);
CheckValue<IkReal> x11527 = IKatan2WithCheck(IkReal(x11524),IkReal(x11525),IKFAST_ATAN2_MAGTHRESH);
if(!x11527.valid){
continue;
}
IkReal x11526=((1.0)*(x11527.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11526)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11525);
rxp1_1=(px*r21);
rxp1_2=(px*x11524);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11526)));
IkReal gconst10=x11524;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11528=((-1.0)*r11);
IkReal x11529=((-1.0)*r10);
CheckValue<IkReal> x11531 = IKatan2WithCheck(IkReal(x11528),IkReal(x11529),IKFAST_ATAN2_MAGTHRESH);
if(!x11531.valid){
continue;
}
IkReal x11530=((1.0)*(x11531.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11530)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11529);
rxp1_1=(px*r21);
rxp1_2=(px*x11528);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11530)));
IkReal gconst10=x11528;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11534=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11534.valid){
continue;
}
IkReal x11532=x11534.value;
IkReal x11533=(sj0*x11532);
cj4array[0]=(((cj2*sj1*x11533))+((cj1*sj2*x11533)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11535=IKsin(j4);
IkReal x11536=IKcos(j4);
IkReal x11537=(gconst10*r21);
IkReal x11538=(gconst11*r20);
IkReal x11539=((1.0)*x11535);
IkReal x11540=((1.0)*x11536);
evalcond[0]=((-1.0)*r02*x11535);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11540)));
evalcond[2]=((((-1.0)*x11538*x11539))+((x11535*x11537)));
evalcond[3]=((((-1.0)*gconst11*r10*x11539))+((gconst10*r11*x11535)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11537*x11540))+((x11536*x11538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11542=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11542.valid){
continue;
}
IkReal x11541=x11542.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11541))+((cj1*cj2*x11541)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11543=IKsin(j4);
IkReal x11544=IKcos(j4);
IkReal x11545=((1.0)*sj0);
IkReal x11546=(gconst10*x11543);
IkReal x11547=((1.0)*x11544);
IkReal x11548=((1.0)*gconst11*x11543);
evalcond[0]=((-1.0)*r02*x11543);
evalcond[1]=((((-1.0)*r02*x11547))+(((-1.0)*x11545)));
evalcond[2]=((((-1.0)*r20*x11548))+((r21*x11546)));
evalcond[3]=((((-1.0)*r10*x11548))+((r11*x11546)));
evalcond[4]=((((-1.0)*cj2*sj1*x11545))+(((-1.0)*cj1*sj2*x11545))+(((-1.0)*gconst10*r11*x11547))+((gconst11*r10*x11544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11549=IKPowWithIntegerCheck(r02,-1);
if(!x11549.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11549.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11550=IKsin(j4);
IkReal x11551=IKcos(j4);
IkReal x11552=(gconst10*r21);
IkReal x11553=((1.0)*sj0);
IkReal x11554=(gconst10*r11);
IkReal x11555=(gconst11*x11551);
IkReal x11556=((1.0)*x11551);
IkReal x11557=((1.0)*gconst11*x11550);
evalcond[0]=((-1.0)*r02*x11550);
evalcond[1]=((((-1.0)*r20*x11557))+((x11550*x11552)));
evalcond[2]=((((-1.0)*r10*x11557))+((x11550*x11554)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11552*x11556))+((r20*x11555)));
evalcond[4]=((((-1.0)*cj1*sj2*x11553))+(((-1.0)*x11554*x11556))+((r10*x11555))+(((-1.0)*cj2*sj1*x11553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11558=((1.0)*gconst11);
CheckValue<IkReal> x11559 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11558))+(((-1.0)*r10*sj0*x11558))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11559.valid){
continue;
}
CheckValue<IkReal> x11560=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11559.value)+(((1.5707963267949)*(x11560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11561=IKsin(j4);
IkReal x11562=IKcos(j4);
IkReal x11563=((1.0)*cj2);
IkReal x11564=((1.0)*sj0);
IkReal x11565=(cj1*sj2);
IkReal x11566=(gconst10*x11561);
IkReal x11567=((1.0)*x11562);
IkReal x11568=(gconst11*x11562);
IkReal x11569=((1.0)*x11561);
IkReal x11570=(gconst11*x11569);
evalcond[0]=((((-1.0)*r20*x11570))+((r21*x11566)));
evalcond[1]=(cj0+(((-1.0)*r10*x11570))+((r11*x11566))+(((-1.0)*r12*x11567)));
evalcond[2]=(((r20*x11568))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11567))+(((-1.0)*cj1*x11563)));
evalcond[3]=((((-1.0)*r00*x11570))+((r01*x11566))+(((-1.0)*x11564))+(((-1.0)*r02*x11567)));
evalcond[4]=((((-1.0)*cj0*sj1*x11563))+((r00*x11568))+(((-1.0)*cj0*x11565))+(((-1.0)*gconst10*r01*x11567))+(((-1.0)*r02*x11569)));
evalcond[5]=(((r10*x11568))+(((-1.0)*sj0*sj1*x11563))+(((-1.0)*gconst10*r11*x11567))+(((-1.0)*r12*x11569))+(((-1.0)*x11564*x11565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11571=(gconst10*r21);
IkReal x11572=(gconst11*r20);
IkReal x11573=(sj1*sj2);
IkReal x11574=(cj1*cj2);
CheckValue<IkReal> x11575 = IKatan2WithCheck(IkReal((((r22*x11573))+(((-1.0)*r22*x11574)))),IkReal((((x11571*x11573))+(((-1.0)*x11572*x11573))+(((-1.0)*x11571*x11574))+((x11572*x11574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11575.valid){
continue;
}
CheckValue<IkReal> x11576=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11572*x11572)+(((-2.0)*x11571*x11572))+(x11571*x11571))),-1);
if(!x11576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11575.value)+(((1.5707963267949)*(x11576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11577=IKsin(j4);
IkReal x11578=IKcos(j4);
IkReal x11579=((1.0)*cj2);
IkReal x11580=((1.0)*sj0);
IkReal x11581=(cj1*sj2);
IkReal x11582=((1.0)*x11578);
IkReal x11583=(gconst10*x11577);
IkReal x11584=((1.0)*x11577);
IkReal x11585=(gconst11*x11578);
IkReal x11586=(gconst11*x11584);
evalcond[0]=(((r21*x11583))+(((-1.0)*r22*x11582))+(((-1.0)*r20*x11586)));
evalcond[1]=(cj0+(((-1.0)*r12*x11582))+(((-1.0)*r10*x11586))+((r11*x11583)));
evalcond[2]=(((r01*x11583))+(((-1.0)*r00*x11586))+(((-1.0)*x11580))+(((-1.0)*r02*x11582)));
evalcond[3]=(((r20*x11585))+((sj1*sj2))+(((-1.0)*cj1*x11579))+(((-1.0)*r22*x11584))+(((-1.0)*gconst10*r21*x11582)));
evalcond[4]=((((-1.0)*gconst10*r01*x11582))+(((-1.0)*cj0*sj1*x11579))+(((-1.0)*r02*x11584))+(((-1.0)*cj0*x11581))+((r00*x11585)));
evalcond[5]=((((-1.0)*sj0*sj1*x11579))+(((-1.0)*gconst10*r11*x11582))+(((-1.0)*x11580*x11581))+(((-1.0)*r12*x11584))+((r10*x11585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11587=((1.0)*sj0);
IkReal x11588=((1.0)*gconst10);
CheckValue<IkReal> x11589 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11587)))),IkReal(((((-1.0)*cj0*r01*x11588))+(((-1.0)*gconst10*r11*x11587))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11589.valid){
continue;
}
CheckValue<IkReal> x11590=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x11588)))),-1);
if(!x11590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11589.value)+(((1.5707963267949)*(x11590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11591=IKsin(j4);
IkReal x11592=IKcos(j4);
IkReal x11593=((1.0)*cj2);
IkReal x11594=((1.0)*sj0);
IkReal x11595=(cj1*sj2);
IkReal x11596=((1.0)*x11592);
IkReal x11597=(gconst10*x11591);
IkReal x11598=((1.0)*x11591);
IkReal x11599=(gconst11*x11592);
IkReal x11600=(gconst11*x11598);
evalcond[0]=((((-1.0)*r20*x11600))+((r21*x11597))+(((-1.0)*r22*x11596)));
evalcond[1]=(cj0+(((-1.0)*r10*x11600))+((r11*x11597))+(((-1.0)*r12*x11596)));
evalcond[2]=((((-1.0)*r00*x11600))+((r01*x11597))+(((-1.0)*x11594))+(((-1.0)*r02*x11596)));
evalcond[3]=(((r20*x11599))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11596))+(((-1.0)*r22*x11598))+(((-1.0)*cj1*x11593)));
evalcond[4]=((((-1.0)*cj0*sj1*x11593))+(((-1.0)*cj0*x11595))+((r00*x11599))+(((-1.0)*r02*x11598))+(((-1.0)*gconst10*r01*x11596)));
evalcond[5]=((((-1.0)*x11594*x11595))+((r10*x11599))+(((-1.0)*sj0*sj1*x11593))+(((-1.0)*gconst10*r11*x11596))+(((-1.0)*r12*x11598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11601=((1.0)*gconst11);
CheckValue<IkReal> x11602 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x11601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11602.valid){
continue;
}
CheckValue<IkReal> x11603=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11601)))),-1);
if(!x11603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11602.value)+(((1.5707963267949)*(x11603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11604=IKsin(j4);
IkReal x11605=IKcos(j4);
IkReal x11606=((1.0)*cj2);
IkReal x11607=((1.0)*sj0);
IkReal x11608=(cj1*sj2);
IkReal x11609=((1.0)*x11605);
IkReal x11610=(gconst10*x11604);
IkReal x11611=((1.0)*x11604);
IkReal x11612=(gconst11*x11605);
IkReal x11613=(gconst11*x11611);
evalcond[0]=((((-1.0)*r22*x11609))+((r21*x11610))+(((-1.0)*r20*x11613)));
evalcond[1]=(cj0+((r11*x11610))+(((-1.0)*r10*x11613))+(((-1.0)*r12*x11609)));
evalcond[2]=((((-1.0)*r02*x11609))+(((-1.0)*x11607))+(((-1.0)*r00*x11613))+((r01*x11610)));
evalcond[3]=((((-1.0)*cj1*x11606))+((sj1*sj2))+(((-1.0)*r22*x11611))+((r20*x11612))+(((-1.0)*gconst10*r21*x11609)));
evalcond[4]=((((-1.0)*gconst10*r01*x11609))+(((-1.0)*cj0*x11608))+(((-1.0)*cj0*sj1*x11606))+((r00*x11612))+(((-1.0)*r02*x11611)));
evalcond[5]=((((-1.0)*r12*x11611))+(((-1.0)*gconst10*r11*x11609))+(((-1.0)*sj0*sj1*x11606))+(((-1.0)*x11607*x11608))+((r10*x11612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11614=((-1.0)*r11);
CheckValue<IkReal> x11617 = IKatan2WithCheck(IkReal(x11614),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11617.valid){
continue;
}
IkReal x11615=((1.0)*(x11617.value));
IkReal x11616=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11615)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11615)));
IkReal gconst10=(x11614*x11616);
IkReal gconst11=((1.0)*r10*x11616);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11618=gconst11*gconst11;
IkReal x11619=gconst10*gconst10;
IkReal x11620=(gconst11*r01);
IkReal x11621=(cj3*gconst10);
IkReal x11622=(r00*r21);
IkReal x11623=(r22*sj3);
IkReal x11624=(gconst10*sj3);
IkReal x11625=((1.0)*cj3);
IkReal x11626=(r20*x11618);
CheckValue<IkReal> x11627 = IKatan2WithCheck(IkReal((((gconst10*r00*x11623))+((x11620*x11623)))),IkReal((((r21*x11620*x11624))+((sj3*x11619*x11622))+(((-1.0)*r01*sj3*x11626))+(((-1.0)*gconst11*r00*r20*x11624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11627.valid){
continue;
}
CheckValue<IkReal> x11628=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11625*x11626))+(((-1.0)*r01*r21*x11619*x11625))+((gconst11*x11621*x11622))+((r20*x11620*x11621))+(((-1.0)*r02*r22*x11625)))),-1);
if(!x11628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11627.value)+(((1.5707963267949)*(x11628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11629=IKsin(j4);
IkReal x11630=IKcos(j4);
IkReal x11631=(cj3*r10);
IkReal x11632=(gconst10*r01);
IkReal x11633=((1.0)*gconst10);
IkReal x11634=(gconst10*r21);
IkReal x11635=(cj3*gconst11);
IkReal x11636=(sj1*sj2);
IkReal x11637=(gconst10*r11);
IkReal x11638=((1.0)*cj1);
IkReal x11639=(gconst10*sj3);
IkReal x11640=(gconst11*sj3);
IkReal x11641=(sj2*x11638);
IkReal x11642=((1.0)*cj2*sj1);
IkReal x11643=((1.0)*x11630);
IkReal x11644=(sj3*x11630);
IkReal x11645=(cj3*x11629);
IkReal x11646=(cj3*x11630);
IkReal x11647=(sj3*x11629);
IkReal x11648=((1.0)*gconst11*x11629);
IkReal x11649=(x11642+x11641);
evalcond[0]=((((-1.0)*r22*x11643))+((x11629*x11634))+(((-1.0)*r20*x11648)));
evalcond[1]=((((-1.0)*r12*x11643))+(((-1.0)*r10*x11648))+((x11629*x11637)));
evalcond[2]=((-1.0)+((x11629*x11632))+(((-1.0)*r00*x11648))+(((-1.0)*r02*x11643)));
evalcond[3]=(((r02*x11645))+((x11632*x11646))+(((-1.0)*r00*x11635*x11643))+((r00*x11639))+((r01*x11640)));
evalcond[4]=((((-1.0)*r00*x11640*x11643))+((r02*x11647))+((x11632*x11644))+(((-1.0)*r01*x11635))+(((-1.0)*cj3*r00*x11633)));
evalcond[5]=(((r10*x11639))+((r11*x11640))+((x11637*x11646))+((r12*x11645))+(((-1.0)*x11636))+(((-1.0)*gconst11*x11631*x11643))+((cj1*cj2)));
evalcond[6]=(((x11634*x11646))+((r22*x11645))+((r21*x11640))+(((-1.0)*r20*x11635*x11643))+((r20*x11639))+(((-1.0)*x11649)));
evalcond[7]=(((x11634*x11644))+x11636+((r22*x11647))+(((-1.0)*r21*x11635))+(((-1.0)*r20*x11640*x11643))+(((-1.0)*cj3*r20*x11633))+(((-1.0)*cj2*x11638)));
evalcond[8]=(((x11637*x11644))+((r12*x11647))+(((-1.0)*x11631*x11633))+(((-1.0)*r10*x11640*x11643))+(((-1.0)*r11*x11635))+(((-1.0)*x11649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11650 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11650.valid){
continue;
}
CheckValue<IkReal> x11651=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11650.value)+(((1.5707963267949)*(x11651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11652=IKsin(j4);
IkReal x11653=IKcos(j4);
IkReal x11654=(cj3*r10);
IkReal x11655=(gconst10*r01);
IkReal x11656=((1.0)*gconst10);
IkReal x11657=(gconst10*r21);
IkReal x11658=(cj3*gconst11);
IkReal x11659=(sj1*sj2);
IkReal x11660=(gconst10*r11);
IkReal x11661=((1.0)*cj1);
IkReal x11662=(gconst10*sj3);
IkReal x11663=(gconst11*sj3);
IkReal x11664=(sj2*x11661);
IkReal x11665=((1.0)*cj2*sj1);
IkReal x11666=((1.0)*x11653);
IkReal x11667=(sj3*x11653);
IkReal x11668=(cj3*x11652);
IkReal x11669=(cj3*x11653);
IkReal x11670=(sj3*x11652);
IkReal x11671=((1.0)*gconst11*x11652);
IkReal x11672=(x11665+x11664);
evalcond[0]=((((-1.0)*r20*x11671))+((x11652*x11657))+(((-1.0)*r22*x11666)));
evalcond[1]=((((-1.0)*r10*x11671))+(((-1.0)*r12*x11666))+((x11652*x11660)));
evalcond[2]=((-1.0)+((x11652*x11655))+(((-1.0)*r02*x11666))+(((-1.0)*r00*x11671)));
evalcond[3]=(((r01*x11663))+((r00*x11662))+(((-1.0)*r00*x11658*x11666))+((r02*x11668))+((x11655*x11669)));
evalcond[4]=((((-1.0)*cj3*r00*x11656))+(((-1.0)*r00*x11663*x11666))+((r02*x11670))+((x11655*x11667))+(((-1.0)*r01*x11658)));
evalcond[5]=((((-1.0)*x11659))+((r11*x11663))+((r12*x11668))+((r10*x11662))+((cj1*cj2))+((x11660*x11669))+(((-1.0)*gconst11*x11654*x11666)));
evalcond[6]=(((r21*x11663))+((r20*x11662))+((r22*x11668))+((x11657*x11669))+(((-1.0)*x11672))+(((-1.0)*r20*x11658*x11666)));
evalcond[7]=((((-1.0)*cj3*r20*x11656))+x11659+((r22*x11670))+(((-1.0)*cj2*x11661))+(((-1.0)*r21*x11658))+(((-1.0)*r20*x11663*x11666))+((x11657*x11667)));
evalcond[8]=(((r12*x11670))+(((-1.0)*x11654*x11656))+((x11660*x11667))+(((-1.0)*r10*x11663*x11666))+(((-1.0)*r11*x11658))+(((-1.0)*x11672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11673=((-1.0)*r11);
CheckValue<IkReal> x11676 = IKatan2WithCheck(IkReal(x11673),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11676.valid){
continue;
}
IkReal x11674=((1.0)*(x11676.value));
IkReal x11675=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11674)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11674)));
IkReal gconst10=(x11673*x11675);
IkReal gconst11=((1.0)*r10*x11675);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11677=gconst11*gconst11;
IkReal x11678=gconst10*gconst10;
IkReal x11679=(gconst11*r01);
IkReal x11680=(cj3*gconst10);
IkReal x11681=(r00*r21);
IkReal x11682=(r22*sj3);
IkReal x11683=(gconst10*sj3);
IkReal x11684=((1.0)*cj3);
IkReal x11685=(r20*x11677);
CheckValue<IkReal> x11686 = IKatan2WithCheck(IkReal((((x11679*x11682))+((gconst10*r00*x11682)))),IkReal((((r21*x11679*x11683))+((sj3*x11678*x11681))+(((-1.0)*r01*sj3*x11685))+(((-1.0)*gconst11*r00*r20*x11683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11686.valid){
continue;
}
CheckValue<IkReal> x11687=IKPowWithIntegerCheck(IKsign((((r20*x11679*x11680))+((gconst11*x11680*x11681))+(((-1.0)*r02*r22*x11684))+(((-1.0)*r00*x11684*x11685))+(((-1.0)*r01*r21*x11678*x11684)))),-1);
if(!x11687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11686.value)+(((1.5707963267949)*(x11687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11688=IKsin(j4);
IkReal x11689=IKcos(j4);
IkReal x11690=(sj1*sj2);
IkReal x11691=(cj3*r10);
IkReal x11692=(gconst10*r01);
IkReal x11693=((1.0)*gconst10);
IkReal x11694=(gconst10*r21);
IkReal x11695=(cj3*gconst11);
IkReal x11696=((1.0)*cj1);
IkReal x11697=(gconst10*r11);
IkReal x11698=(gconst10*sj3);
IkReal x11699=(cj2*sj1);
IkReal x11700=(gconst11*sj3);
IkReal x11701=(cj2*x11696);
IkReal x11702=((1.0)*x11689);
IkReal x11703=(sj3*x11689);
IkReal x11704=(cj3*x11688);
IkReal x11705=(cj3*x11689);
IkReal x11706=(sj3*x11688);
IkReal x11707=((1.0)*gconst11*x11688);
evalcond[0]=((((-1.0)*r22*x11702))+(((-1.0)*r20*x11707))+((x11688*x11694)));
evalcond[1]=(((x11688*x11697))+(((-1.0)*r12*x11702))+(((-1.0)*r10*x11707)));
evalcond[2]=((1.0)+((x11688*x11692))+(((-1.0)*r02*x11702))+(((-1.0)*r00*x11707)));
evalcond[3]=((((-1.0)*r00*x11695*x11702))+((x11692*x11705))+((r01*x11700))+((r00*x11698))+((r02*x11704)));
evalcond[4]=(((x11692*x11703))+(((-1.0)*r00*x11700*x11702))+(((-1.0)*r01*x11695))+(((-1.0)*cj3*r00*x11693))+((r02*x11706)));
evalcond[5]=(x11690+((x11697*x11705))+(((-1.0)*x11701))+(((-1.0)*gconst11*x11691*x11702))+((r12*x11704))+((r10*x11698))+((r11*x11700)));
evalcond[6]=(((r22*x11704))+((r21*x11700))+((r20*x11698))+(((-1.0)*sj2*x11696))+(((-1.0)*x11699))+(((-1.0)*r20*x11695*x11702))+((x11694*x11705)));
evalcond[7]=(x11699+((x11697*x11703))+((cj1*sj2))+(((-1.0)*x11691*x11693))+((r12*x11706))+(((-1.0)*r10*x11700*x11702))+(((-1.0)*r11*x11695)));
evalcond[8]=((((-1.0)*r21*x11695))+(((-1.0)*r20*x11700*x11702))+x11690+(((-1.0)*cj3*r20*x11693))+((r22*x11706))+(((-1.0)*x11701))+((x11694*x11703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11708=((1.0)*gconst11);
CheckValue<IkReal> x11709 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11709.valid){
continue;
}
CheckValue<IkReal> x11710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11708))+(((-1.0)*gconst10*r20)))),-1);
if(!x11710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11709.value)+(((1.5707963267949)*(x11710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11711=IKsin(j4);
IkReal x11712=IKcos(j4);
IkReal x11713=(sj1*sj2);
IkReal x11714=(cj3*r10);
IkReal x11715=(gconst10*r01);
IkReal x11716=((1.0)*gconst10);
IkReal x11717=(gconst10*r21);
IkReal x11718=(cj3*gconst11);
IkReal x11719=((1.0)*cj1);
IkReal x11720=(gconst10*r11);
IkReal x11721=(gconst10*sj3);
IkReal x11722=(cj2*sj1);
IkReal x11723=(gconst11*sj3);
IkReal x11724=(cj2*x11719);
IkReal x11725=((1.0)*x11712);
IkReal x11726=(sj3*x11712);
IkReal x11727=(cj3*x11711);
IkReal x11728=(cj3*x11712);
IkReal x11729=(sj3*x11711);
IkReal x11730=((1.0)*gconst11*x11711);
evalcond[0]=((((-1.0)*r20*x11730))+(((-1.0)*r22*x11725))+((x11711*x11717)));
evalcond[1]=((((-1.0)*r10*x11730))+(((-1.0)*r12*x11725))+((x11711*x11720)));
evalcond[2]=((1.0)+(((-1.0)*r00*x11730))+((x11711*x11715))+(((-1.0)*r02*x11725)));
evalcond[3]=(((r00*x11721))+((r01*x11723))+(((-1.0)*r00*x11718*x11725))+((r02*x11727))+((x11715*x11728)));
evalcond[4]=((((-1.0)*r00*x11723*x11725))+((r02*x11729))+(((-1.0)*cj3*r00*x11716))+(((-1.0)*r01*x11718))+((x11715*x11726)));
evalcond[5]=(((r12*x11727))+x11713+(((-1.0)*x11724))+((r10*x11721))+((x11720*x11728))+((r11*x11723))+(((-1.0)*gconst11*x11714*x11725)));
evalcond[6]=(((r20*x11721))+(((-1.0)*x11722))+(((-1.0)*sj2*x11719))+(((-1.0)*r20*x11718*x11725))+((r22*x11727))+((r21*x11723))+((x11717*x11728)));
evalcond[7]=(((r12*x11729))+x11722+((cj1*sj2))+(((-1.0)*r11*x11718))+(((-1.0)*r10*x11723*x11725))+((x11720*x11726))+(((-1.0)*x11714*x11716)));
evalcond[8]=(x11713+(((-1.0)*x11724))+(((-1.0)*cj3*r20*x11716))+((r22*x11729))+(((-1.0)*r20*x11723*x11725))+(((-1.0)*r21*x11718))+((x11717*x11726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11731=((-1.0)*r11);
IkReal x11732=((-1.0)*r10);
CheckValue<IkReal> x11734 = IKatan2WithCheck(IkReal(x11731),IkReal(x11732),IKFAST_ATAN2_MAGTHRESH);
if(!x11734.valid){
continue;
}
IkReal x11733=((1.0)*(x11734.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11733)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11732);
rxp1_1=(px*r21);
rxp1_2=(px*x11731);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11733)));
IkReal gconst10=x11731;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11735=((-1.0)*r11);
IkReal x11736=((-1.0)*r10);
CheckValue<IkReal> x11738 = IKatan2WithCheck(IkReal(x11735),IkReal(x11736),IKFAST_ATAN2_MAGTHRESH);
if(!x11738.valid){
continue;
}
IkReal x11737=((1.0)*(x11738.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11737)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11736);
rxp1_1=(px*r21);
rxp1_2=(px*x11735);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11737)));
IkReal gconst10=x11735;
IkReal gconst11=((1.0)*r10);
IkReal x11739=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x11739))+(((-1.0)*r10*r20*x11739)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11740=((-1.0)*r11);
IkReal x11741=((-1.0)*r10);
CheckValue<IkReal> x11743 = IKatan2WithCheck(IkReal(x11740),IkReal(x11741),IKFAST_ATAN2_MAGTHRESH);
if(!x11743.valid){
continue;
}
IkReal x11742=((1.0)*(x11743.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11742)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11741);
rxp1_1=(px*r21);
rxp1_2=(px*x11740);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11742)));
IkReal gconst10=x11740;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11744=((-1.0)*r11);
IkReal x11745=((-1.0)*r10);
CheckValue<IkReal> x11747 = IKatan2WithCheck(IkReal(x11744),IkReal(x11745),IKFAST_ATAN2_MAGTHRESH);
if(!x11747.valid){
continue;
}
IkReal x11746=((1.0)*(x11747.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11746)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11745);
rxp1_1=(px*r21);
rxp1_2=(px*x11744);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11746)));
IkReal gconst10=x11744;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11748=((-1.0)*r11);
IkReal x11749=((-1.0)*r10);
CheckValue<IkReal> x11751 = IKatan2WithCheck(IkReal(x11748),IkReal(x11749),IKFAST_ATAN2_MAGTHRESH);
if(!x11751.valid){
continue;
}
IkReal x11750=((1.0)*(x11751.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11750)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11749);
rxp1_1=(px*r21);
rxp1_2=(px*x11748);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11750)));
IkReal gconst10=x11748;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11752=((-1.0)*r11);
IkReal x11753=((-1.0)*r10);
CheckValue<IkReal> x11755 = IKatan2WithCheck(IkReal(x11752),IkReal(x11753),IKFAST_ATAN2_MAGTHRESH);
if(!x11755.valid){
continue;
}
IkReal x11754=((1.0)*(x11755.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11754)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11753);
rxp1_1=(px*r21);
rxp1_2=(px*x11752);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11754)));
IkReal gconst10=x11752;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11758=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11758.valid){
continue;
}
IkReal x11756=x11758.value;
IkReal x11757=(sj0*x11756);
cj4array[0]=((((-1.0)*cj1*cj2*x11757))+((sj1*sj2*x11757)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11759=IKsin(j4);
IkReal x11760=IKcos(j4);
IkReal x11761=(gconst10*r21);
IkReal x11762=((1.0)*x11760);
IkReal x11763=((1.0)*gconst11*x11759);
evalcond[0]=(r02*x11759);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11762)));
evalcond[2]=(((x11759*x11761))+(((-1.0)*r20*x11763)));
evalcond[3]=((((-1.0)*r10*x11763))+((gconst10*r11*x11759)));
evalcond[4]=((((-1.0)*gconst11*r20*x11762))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x11760*x11761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11765=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11765.valid){
continue;
}
IkReal x11764=x11765.value;
cj4array[0]=(((cj2*sj1*x11764))+((cj1*sj2*x11764)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11766=IKsin(j4);
IkReal x11767=IKcos(j4);
IkReal x11768=((1.0)*sj0);
IkReal x11769=(gconst10*x11766);
IkReal x11770=((1.0)*x11767);
IkReal x11771=((1.0)*gconst11*x11766);
evalcond[0]=(r02*x11766);
evalcond[1]=((((-1.0)*r02*x11770))+(((-1.0)*x11768)));
evalcond[2]=((((-1.0)*r20*x11771))+((r21*x11769)));
evalcond[3]=(((r11*x11769))+(((-1.0)*r10*x11771)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*gconst11*r10*x11770))+((gconst10*r11*x11767))+(((-1.0)*sj1*sj2*x11768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11772=IKPowWithIntegerCheck(r02,-1);
if(!x11772.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11772.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11773=IKsin(j4);
IkReal x11774=IKcos(j4);
IkReal x11775=(gconst10*r21);
IkReal x11776=((1.0)*sj1);
IkReal x11777=(gconst10*r11);
IkReal x11778=((1.0)*gconst11*x11773);
IkReal x11779=((1.0)*gconst11*x11774);
evalcond[0]=(r02*x11773);
evalcond[1]=(((x11773*x11775))+(((-1.0)*r20*x11778)));
evalcond[2]=((((-1.0)*r10*x11778))+((x11773*x11777)));
evalcond[3]=((((-1.0)*cj2*x11776))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x11779))+((x11774*x11775)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x11779))+(((-1.0)*sj0*sj2*x11776))+((x11774*x11777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11780=((-1.0)*r11);
IkReal x11781=((-1.0)*r10);
CheckValue<IkReal> x11783 = IKatan2WithCheck(IkReal(x11780),IkReal(x11781),IKFAST_ATAN2_MAGTHRESH);
if(!x11783.valid){
continue;
}
IkReal x11782=((1.0)*(x11783.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11782)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11781);
rxp1_1=(px*r21);
rxp1_2=(px*x11780);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11782)));
IkReal gconst10=x11780;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11784=((-1.0)*r11);
IkReal x11785=((-1.0)*r10);
CheckValue<IkReal> x11787 = IKatan2WithCheck(IkReal(x11784),IkReal(x11785),IKFAST_ATAN2_MAGTHRESH);
if(!x11787.valid){
continue;
}
IkReal x11786=((1.0)*(x11787.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11786)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11785);
rxp1_1=(px*r21);
rxp1_2=(px*x11784);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11786)));
IkReal gconst10=x11784;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11788=((-1.0)*r11);
IkReal x11789=((-1.0)*r10);
CheckValue<IkReal> x11791 = IKatan2WithCheck(IkReal(x11788),IkReal(x11789),IKFAST_ATAN2_MAGTHRESH);
if(!x11791.valid){
continue;
}
IkReal x11790=((1.0)*(x11791.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11790)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11789);
rxp1_1=(px*r21);
rxp1_2=(px*x11788);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11790)));
IkReal gconst10=x11788;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11794=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11794.valid){
continue;
}
IkReal x11792=x11794.value;
IkReal x11793=(sj0*x11792);
cj4array[0]=(((sj1*sj2*x11793))+(((-1.0)*cj1*cj2*x11793)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11795=IKsin(j4);
IkReal x11796=IKcos(j4);
IkReal x11797=(gconst10*r21);
IkReal x11798=(gconst11*r20);
IkReal x11799=((1.0)*x11795);
IkReal x11800=((1.0)*x11796);
evalcond[0]=((-1.0)*r02*x11795);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11800)));
evalcond[2]=(((x11795*x11797))+(((-1.0)*x11798*x11799)));
evalcond[3]=((((-1.0)*gconst11*r10*x11799))+((gconst10*r11*x11795)));
evalcond[4]=((((-1.0)*x11797*x11800))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x11796*x11798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11802=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11802.valid){
continue;
}
IkReal x11801=x11802.value;
cj4array[0]=(((cj1*sj2*x11801))+((cj2*sj1*x11801)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11803=IKsin(j4);
IkReal x11804=IKcos(j4);
IkReal x11805=((1.0)*sj0);
IkReal x11806=(gconst10*x11803);
IkReal x11807=((1.0)*x11804);
IkReal x11808=((1.0)*gconst11*x11803);
evalcond[0]=((-1.0)*r02*x11803);
evalcond[1]=((((-1.0)*x11805))+(((-1.0)*r02*x11807)));
evalcond[2]=(((r21*x11806))+(((-1.0)*r20*x11808)));
evalcond[3]=((((-1.0)*r10*x11808))+((r11*x11806)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x11805))+((gconst11*r10*x11804))+(((-1.0)*gconst10*r11*x11807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11809=IKPowWithIntegerCheck(r02,-1);
if(!x11809.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11809.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11810=IKsin(j4);
IkReal x11811=IKcos(j4);
IkReal x11812=((1.0)*sj1);
IkReal x11813=(gconst10*x11810);
IkReal x11814=(gconst11*x11811);
IkReal x11815=((1.0)*gconst11*x11810);
IkReal x11816=((1.0)*gconst10*x11811);
evalcond[0]=((-1.0)*r02*x11810);
evalcond[1]=((((-1.0)*r20*x11815))+((r21*x11813)));
evalcond[2]=((((-1.0)*r10*x11815))+((r11*x11813)));
evalcond[3]=((((-1.0)*r21*x11816))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11812))+((r20*x11814)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r11*x11816))+((r10*x11814))+(((-1.0)*sj0*sj2*x11812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11818=IKPowWithIntegerCheck(r02,-1);
if(!x11818.valid){
continue;
}
IkReal x11817=x11818.value;
CheckValue<IkReal> x11819=IKPowWithIntegerCheck(sj3,-1);
if(!x11819.valid){
continue;
}
if( IKabs((x11817*(x11819.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11817)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11817*(x11819.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x11817))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11817*(x11819.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x11817));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11820=IKsin(j4);
IkReal x11821=IKcos(j4);
IkReal x11822=(cj1*cj2);
IkReal x11823=((1.0)*gconst11);
IkReal x11824=(cj3*r10);
IkReal x11825=((1.0)*gconst10);
IkReal x11826=(r21*sj3);
IkReal x11827=(sj1*sj2);
IkReal x11828=(r20*sj3);
IkReal x11829=(cj3*r11);
IkReal x11830=(r11*sj3);
IkReal x11831=(r10*sj3);
IkReal x11832=((1.0)*sj0);
IkReal x11833=(cj3*r21);
IkReal x11834=(cj3*r20);
IkReal x11835=(gconst10*x11821);
IkReal x11836=(gconst10*x11820);
IkReal x11837=((1.0)*cj2*sj1);
IkReal x11838=((1.0)*cj1*sj2);
IkReal x11839=(r02*x11820);
evalcond[0]=((((-1.0)*r02*x11821))+(((-1.0)*x11832)));
evalcond[1]=(((r21*x11836))+(((-1.0)*r20*x11820*x11823)));
evalcond[2]=(cj0+(((-1.0)*r10*x11820*x11823))+((r11*x11836)));
evalcond[3]=(((cj0*x11822))+(((-1.0)*cj0*x11827))+((cj3*x11839)));
evalcond[4]=(((sj3*x11839))+(((-1.0)*cj0*x11837))+(((-1.0)*cj0*x11838)));
evalcond[5]=(((gconst10*x11828))+((gconst11*x11826))+(((-1.0)*x11838))+(((-1.0)*x11837))+(((-1.0)*x11821*x11823*x11834))+((x11833*x11835)));
evalcond[6]=((((-1.0)*x11825*x11834))+(((-1.0)*x11822))+(((-1.0)*x11821*x11823*x11828))+((x11826*x11835))+(((-1.0)*x11823*x11833))+x11827);
evalcond[7]=(((gconst10*x11831))+((x11829*x11835))+(((-1.0)*x11827*x11832))+((gconst11*x11830))+((sj0*x11822))+(((-1.0)*x11821*x11823*x11824)));
evalcond[8]=((((-1.0)*cj2*sj1*x11832))+(((-1.0)*x11824*x11825))+((x11830*x11835))+(((-1.0)*x11823*x11829))+(((-1.0)*cj1*sj2*x11832))+(((-1.0)*x11821*x11823*x11831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11840=((1.0)*gconst11);
CheckValue<IkReal> x11841=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x11840))),-1);
if(!x11841.valid){
continue;
}
CheckValue<IkReal> x11842=IKPowWithIntegerCheck((((cj3*gconst10*r21))+(((-1.0)*cj3*r20*x11840))),-1);
if(!x11842.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11841.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11842.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*r21*sj3*x11840)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11841.value)))+IKsqr(((x11842.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*r21*sj3*x11840))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11841.value)), ((x11842.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*r21*sj3*x11840))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11843=IKsin(j4);
IkReal x11844=IKcos(j4);
IkReal x11845=(cj1*cj2);
IkReal x11846=((1.0)*gconst11);
IkReal x11847=(cj3*r10);
IkReal x11848=((1.0)*gconst10);
IkReal x11849=(r21*sj3);
IkReal x11850=(sj1*sj2);
IkReal x11851=(r20*sj3);
IkReal x11852=(cj3*r11);
IkReal x11853=(r11*sj3);
IkReal x11854=(r10*sj3);
IkReal x11855=((1.0)*sj0);
IkReal x11856=(cj3*r21);
IkReal x11857=(cj3*r20);
IkReal x11858=(gconst10*x11844);
IkReal x11859=(gconst10*x11843);
IkReal x11860=((1.0)*cj2*sj1);
IkReal x11861=((1.0)*cj1*sj2);
IkReal x11862=(r02*x11843);
evalcond[0]=((((-1.0)*x11855))+(((-1.0)*r02*x11844)));
evalcond[1]=(((r21*x11859))+(((-1.0)*r20*x11843*x11846)));
evalcond[2]=((((-1.0)*r10*x11843*x11846))+cj0+((r11*x11859)));
evalcond[3]=(((cj0*x11845))+(((-1.0)*cj0*x11850))+((cj3*x11862)));
evalcond[4]=(((sj3*x11862))+(((-1.0)*cj0*x11860))+(((-1.0)*cj0*x11861)));
evalcond[5]=((((-1.0)*x11844*x11846*x11857))+(((-1.0)*x11860))+(((-1.0)*x11861))+((gconst11*x11849))+((gconst10*x11851))+((x11856*x11858)));
evalcond[6]=((((-1.0)*x11844*x11846*x11851))+(((-1.0)*x11845))+((x11849*x11858))+(((-1.0)*x11846*x11856))+x11850+(((-1.0)*x11848*x11857)));
evalcond[7]=((((-1.0)*x11844*x11846*x11847))+(((-1.0)*x11850*x11855))+((x11852*x11858))+((gconst11*x11853))+((gconst10*x11854))+((sj0*x11845)));
evalcond[8]=((((-1.0)*cj2*sj1*x11855))+(((-1.0)*x11844*x11846*x11854))+(((-1.0)*cj1*sj2*x11855))+((x11853*x11858))+(((-1.0)*x11846*x11852))+(((-1.0)*x11847*x11848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11863=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11863.valid){
continue;
}
CheckValue<IkReal> x11864=IKPowWithIntegerCheck(r02,-1);
if(!x11864.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11863.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11864.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11863.value)))+IKsqr(((-1.0)*sj0*(x11864.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11863.value)), ((-1.0)*sj0*(x11864.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11865=IKsin(j4);
IkReal x11866=IKcos(j4);
IkReal x11867=(cj1*cj2);
IkReal x11868=((1.0)*gconst11);
IkReal x11869=(cj3*r10);
IkReal x11870=((1.0)*gconst10);
IkReal x11871=(r21*sj3);
IkReal x11872=(sj1*sj2);
IkReal x11873=(r20*sj3);
IkReal x11874=(cj3*r11);
IkReal x11875=(r11*sj3);
IkReal x11876=(r10*sj3);
IkReal x11877=((1.0)*sj0);
IkReal x11878=(cj3*r21);
IkReal x11879=(cj3*r20);
IkReal x11880=(gconst10*x11866);
IkReal x11881=(gconst10*x11865);
IkReal x11882=((1.0)*cj2*sj1);
IkReal x11883=((1.0)*cj1*sj2);
IkReal x11884=(r02*x11865);
evalcond[0]=((((-1.0)*x11877))+(((-1.0)*r02*x11866)));
evalcond[1]=(((r21*x11881))+(((-1.0)*r20*x11865*x11868)));
evalcond[2]=(cj0+(((-1.0)*r10*x11865*x11868))+((r11*x11881)));
evalcond[3]=(((cj3*x11884))+(((-1.0)*cj0*x11872))+((cj0*x11867)));
evalcond[4]=((((-1.0)*cj0*x11883))+(((-1.0)*cj0*x11882))+((sj3*x11884)));
evalcond[5]=(((gconst11*x11871))+(((-1.0)*x11866*x11868*x11879))+((gconst10*x11873))+((x11878*x11880))+(((-1.0)*x11882))+(((-1.0)*x11883)));
evalcond[6]=((((-1.0)*x11868*x11878))+(((-1.0)*x11867))+(((-1.0)*x11870*x11879))+(((-1.0)*x11866*x11868*x11873))+((x11871*x11880))+x11872);
evalcond[7]=((((-1.0)*x11872*x11877))+((gconst11*x11875))+((x11874*x11880))+(((-1.0)*x11866*x11868*x11869))+((sj0*x11867))+((gconst10*x11876)));
evalcond[8]=(((x11875*x11880))+(((-1.0)*cj1*sj2*x11877))+(((-1.0)*x11868*x11874))+(((-1.0)*x11866*x11868*x11876))+(((-1.0)*x11869*x11870))+(((-1.0)*cj2*sj1*x11877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11885=((-1.0)*r11);
CheckValue<IkReal> x11888 = IKatan2WithCheck(IkReal(x11885),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11888.valid){
continue;
}
IkReal x11886=((1.0)*(x11888.value));
IkReal x11887=x11139;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11886)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11886)));
IkReal gconst10=(x11885*x11887);
IkReal gconst11=((1.0)*r10*x11887);
IkReal x11889=r12*r12;
IkReal x11890=((1.0)*sj0);
IkReal x11891=(cj0*r02);
IkReal x11892=x11139;
j4eval[0]=((IKabs(((((-1.0)*x11891))+(((-1.0)*r12*x11890)))))+(IKabs(((((-1.0)*x11890*x11892))+((r12*x11891*x11892))+((sj0*x11889*x11892))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11893=(r21*sj3);
IkReal x11894=(r20*sj3);
IkReal x11895=(cj1*cj2);
IkReal x11896=((1.0)*sj1*sj2);
IkReal x11897=(cj3*gconst11*r21);
IkReal x11898=((1.0)*gconst10*gconst11);
IkReal x11899=(cj3*gconst10*r20);
CheckValue<IkReal> x11900=IKPowWithIntegerCheck(((((-1.0)*r11*x11894*x11898))+((r10*x11894*(gconst11*gconst11)))+((r11*x11893*(gconst10*gconst10)))+(((-1.0)*r10*x11893*x11898))),-1);
if(!x11900.valid){
continue;
}
CheckValue<IkReal> x11901=IKPowWithIntegerCheck(((((-1.0)*gconst11*x11894))+((gconst10*x11893))),-1);
if(!x11901.valid){
continue;
}
if( IKabs(((x11900.value)*((((cj0*gconst11*x11894))+(((-1.0)*r12*x11896))+(((-1.0)*cj0*gconst10*x11893))+((r12*x11899))+((r12*x11897))+((r12*x11895)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11901.value)*(((((-1.0)*x11896))+x11899+x11897+x11895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11900.value)*((((cj0*gconst11*x11894))+(((-1.0)*r12*x11896))+(((-1.0)*cj0*gconst10*x11893))+((r12*x11899))+((r12*x11897))+((r12*x11895))))))+IKsqr(((x11901.value)*(((((-1.0)*x11896))+x11899+x11897+x11895))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11900.value)*((((cj0*gconst11*x11894))+(((-1.0)*r12*x11896))+(((-1.0)*cj0*gconst10*x11893))+((r12*x11899))+((r12*x11897))+((r12*x11895))))), ((x11901.value)*(((((-1.0)*x11896))+x11899+x11897+x11895))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11902=IKsin(j4);
IkReal x11903=IKcos(j4);
IkReal x11904=(cj1*cj2);
IkReal x11905=((1.0)*gconst11);
IkReal x11906=(cj3*r10);
IkReal x11907=(gconst10*r01);
IkReal x11908=((1.0)*gconst10);
IkReal x11909=(gconst10*r21);
IkReal x11910=(sj1*sj2);
IkReal x11911=(gconst11*sj3);
IkReal x11912=((1.0)*cj0);
IkReal x11913=(gconst10*r11);
IkReal x11914=((1.0)*sj0);
IkReal x11915=(cj2*sj1);
IkReal x11916=(gconst10*sj3);
IkReal x11917=(cj1*sj2);
IkReal x11918=(sj3*x11903);
IkReal x11919=(cj3*x11903);
IkReal x11920=(r12*x11902);
IkReal x11921=((1.0)*x11903);
IkReal x11922=(r02*x11902);
evalcond[0]=(((x11902*x11909))+(((-1.0)*r20*x11902*x11905)));
evalcond[1]=(cj0+((x11902*x11913))+(((-1.0)*r10*x11902*x11905))+(((-1.0)*r12*x11921)));
evalcond[2]=(((x11902*x11907))+(((-1.0)*r02*x11921))+(((-1.0)*r00*x11902*x11905))+(((-1.0)*x11914)));
evalcond[3]=(((x11909*x11919))+(((-1.0)*x11917))+(((-1.0)*x11915))+((r21*x11911))+(((-1.0)*r20*x11905*x11919))+((r20*x11916)));
evalcond[4]=(x11910+((x11909*x11918))+(((-1.0)*x11904))+(((-1.0)*cj3*r20*x11908))+(((-1.0)*r20*x11905*x11918))+(((-1.0)*cj3*r21*x11905)));
evalcond[5]=(((x11907*x11919))+(((-1.0)*r00*x11905*x11919))+((r00*x11916))+((r01*x11911))+((cj0*x11904))+(((-1.0)*x11910*x11912))+((cj3*x11922)));
evalcond[6]=(((r11*x11911))+(((-1.0)*x11903*x11905*x11906))+((x11913*x11919))+((sj0*x11904))+((r10*x11916))+(((-1.0)*x11910*x11914))+((cj3*x11920)));
evalcond[7]=(((x11907*x11918))+(((-1.0)*r00*x11905*x11918))+(((-1.0)*x11912*x11915))+(((-1.0)*x11912*x11917))+(((-1.0)*cj3*r00*x11908))+(((-1.0)*cj3*r01*x11905))+((sj3*x11922)));
evalcond[8]=((((-1.0)*r10*x11905*x11918))+((x11913*x11918))+(((-1.0)*x11914*x11917))+(((-1.0)*x11914*x11915))+(((-1.0)*cj3*r11*x11905))+(((-1.0)*x11906*x11908))+((sj3*x11920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11923=((1.0)*sj0);
IkReal x11924=((1.0)*gconst10);
CheckValue<IkReal> x11925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11924))+(((-1.0)*gconst11*r21)))),-1);
if(!x11925.valid){
continue;
}
CheckValue<IkReal> x11926 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11923)))),IkReal(((((-1.0)*gconst10*r11*x11923))+(((-1.0)*cj0*r01*x11924))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11925.value)))+(x11926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11927=IKsin(j4);
IkReal x11928=IKcos(j4);
IkReal x11929=(cj1*cj2);
IkReal x11930=((1.0)*gconst11);
IkReal x11931=(cj3*r10);
IkReal x11932=(gconst10*r01);
IkReal x11933=((1.0)*gconst10);
IkReal x11934=(gconst10*r21);
IkReal x11935=(sj1*sj2);
IkReal x11936=(gconst11*sj3);
IkReal x11937=((1.0)*cj0);
IkReal x11938=(gconst10*r11);
IkReal x11939=((1.0)*sj0);
IkReal x11940=(cj2*sj1);
IkReal x11941=(gconst10*sj3);
IkReal x11942=(cj1*sj2);
IkReal x11943=(sj3*x11928);
IkReal x11944=(cj3*x11928);
IkReal x11945=(r12*x11927);
IkReal x11946=((1.0)*x11928);
IkReal x11947=(r02*x11927);
evalcond[0]=(((x11927*x11934))+(((-1.0)*r20*x11927*x11930)));
evalcond[1]=(cj0+(((-1.0)*r10*x11927*x11930))+((x11927*x11938))+(((-1.0)*r12*x11946)));
evalcond[2]=((((-1.0)*r00*x11927*x11930))+(((-1.0)*x11939))+(((-1.0)*r02*x11946))+((x11927*x11932)));
evalcond[3]=(((r21*x11936))+((r20*x11941))+(((-1.0)*r20*x11930*x11944))+(((-1.0)*x11942))+(((-1.0)*x11940))+((x11934*x11944)));
evalcond[4]=(x11935+(((-1.0)*cj3*r20*x11933))+(((-1.0)*r20*x11930*x11943))+(((-1.0)*cj3*r21*x11930))+(((-1.0)*x11929))+((x11934*x11943)));
evalcond[5]=(((cj0*x11929))+(((-1.0)*x11935*x11937))+((x11932*x11944))+((cj3*x11947))+((r00*x11941))+((r01*x11936))+(((-1.0)*r00*x11930*x11944)));
evalcond[6]=((((-1.0)*x11935*x11939))+(((-1.0)*x11928*x11930*x11931))+((r11*x11936))+((r10*x11941))+((cj3*x11945))+((x11938*x11944))+((sj0*x11929)));
evalcond[7]=((((-1.0)*cj3*r00*x11933))+(((-1.0)*x11937*x11940))+(((-1.0)*x11937*x11942))+((x11932*x11943))+(((-1.0)*cj3*r01*x11930))+((sj3*x11947))+(((-1.0)*r00*x11930*x11943)));
evalcond[8]=((((-1.0)*cj3*r11*x11930))+(((-1.0)*r10*x11930*x11943))+((x11938*x11943))+((sj3*x11945))+(((-1.0)*x11931*x11933))+(((-1.0)*x11939*x11942))+(((-1.0)*x11939*x11940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11948=gconst10*gconst10;
IkReal x11949=r21*r21;
IkReal x11950=gconst11*gconst11;
IkReal x11951=r20*r20;
IkReal x11952=((1.0)*cj3);
IkReal x11953=(gconst11*r20);
IkReal x11954=(cj2*sj1);
IkReal x11955=(cj1*sj2);
IkReal x11956=((1.0)*r22);
IkReal x11957=(gconst10*sj3);
IkReal x11958=(gconst10*r21);
IkReal x11959=(r20*r21*sj3);
CheckValue<IkReal> x11960 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r20*r22*x11957))+(((-1.0)*x11955*x11956))+(((-1.0)*x11954*x11956)))),IkReal(((((-1.0)*x11955*x11958))+(((-1.0)*x11950*x11959))+((x11953*x11955))+((x11953*x11954))+((x11948*x11959))+(((-1.0)*gconst11*x11951*x11957))+((gconst11*x11949*x11957))+(((-1.0)*x11954*x11958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11960.valid){
continue;
}
CheckValue<IkReal> x11961=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x11953*x11958))+(((-1.0)*x11948*x11949*x11952))+(((-1.0)*x11952*(r22*r22)))+(((-1.0)*x11950*x11951*x11952)))),-1);
if(!x11961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11960.value)+(((1.5707963267949)*(x11961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11962=IKsin(j4);
IkReal x11963=IKcos(j4);
IkReal x11964=(cj1*cj2);
IkReal x11965=(cj3*r10);
IkReal x11966=(gconst10*r01);
IkReal x11967=((1.0)*gconst10);
IkReal x11968=(gconst10*r21);
IkReal x11969=(cj3*gconst11);
IkReal x11970=(sj1*sj2);
IkReal x11971=(gconst11*sj3);
IkReal x11972=((1.0)*cj0);
IkReal x11973=(gconst10*r11);
IkReal x11974=((1.0)*sj0);
IkReal x11975=(cj2*sj1);
IkReal x11976=(gconst10*sj3);
IkReal x11977=(cj1*sj2);
IkReal x11978=((1.0)*x11963);
IkReal x11979=(sj3*x11963);
IkReal x11980=(cj3*x11962);
IkReal x11981=(sj3*x11962);
IkReal x11982=(cj3*x11963);
IkReal x11983=((1.0)*gconst11*x11962);
evalcond[0]=(((x11962*x11968))+(((-1.0)*r22*x11978))+(((-1.0)*r20*x11983)));
evalcond[1]=((((-1.0)*r12*x11978))+cj0+(((-1.0)*r10*x11983))+((x11962*x11973)));
evalcond[2]=(((x11962*x11966))+(((-1.0)*r00*x11983))+(((-1.0)*x11974))+(((-1.0)*r02*x11978)));
evalcond[3]=((((-1.0)*x11977))+(((-1.0)*x11975))+(((-1.0)*r20*x11969*x11978))+((x11968*x11982))+((r20*x11976))+((r22*x11980))+((r21*x11971)));
evalcond[4]=(x11970+(((-1.0)*x11964))+((x11968*x11979))+(((-1.0)*r20*x11971*x11978))+(((-1.0)*r21*x11969))+((r22*x11981))+(((-1.0)*cj3*r20*x11967)));
evalcond[5]=(((r00*x11976))+((r01*x11971))+((cj0*x11964))+((r02*x11980))+(((-1.0)*r00*x11969*x11978))+(((-1.0)*x11970*x11972))+((x11966*x11982)));
evalcond[6]=(((r11*x11971))+((x11973*x11982))+((r10*x11976))+(((-1.0)*x11970*x11974))+((r12*x11980))+((sj0*x11964))+(((-1.0)*gconst11*x11965*x11978)));
evalcond[7]=((((-1.0)*r01*x11969))+((r02*x11981))+(((-1.0)*r00*x11971*x11978))+((x11966*x11979))+(((-1.0)*cj3*r00*x11967))+(((-1.0)*x11972*x11977))+(((-1.0)*x11972*x11975)));
evalcond[8]=((((-1.0)*x11965*x11967))+((x11973*x11979))+(((-1.0)*x11974*x11975))+(((-1.0)*x11974*x11977))+(((-1.0)*r11*x11969))+((r12*x11981))+(((-1.0)*r10*x11971*x11978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11984=((1.0)*sj0);
IkReal x11985=((1.0)*gconst10);
CheckValue<IkReal> x11986=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x11985)))),-1);
if(!x11986.valid){
continue;
}
CheckValue<IkReal> x11987 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11984))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x11984))+(((-1.0)*cj0*r01*x11985))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11986.value)))+(x11987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11988=IKsin(j4);
IkReal x11989=IKcos(j4);
IkReal x11990=(cj1*cj2);
IkReal x11991=(cj3*r10);
IkReal x11992=(gconst10*r01);
IkReal x11993=((1.0)*gconst10);
IkReal x11994=(gconst10*r21);
IkReal x11995=(cj3*gconst11);
IkReal x11996=(sj1*sj2);
IkReal x11997=(gconst11*sj3);
IkReal x11998=((1.0)*cj0);
IkReal x11999=(gconst10*r11);
IkReal x12000=((1.0)*sj0);
IkReal x12001=(cj2*sj1);
IkReal x12002=(gconst10*sj3);
IkReal x12003=(cj1*sj2);
IkReal x12004=((1.0)*x11989);
IkReal x12005=(sj3*x11989);
IkReal x12006=(cj3*x11988);
IkReal x12007=(sj3*x11988);
IkReal x12008=(cj3*x11989);
IkReal x12009=((1.0)*gconst11*x11988);
evalcond[0]=(((x11988*x11994))+(((-1.0)*r22*x12004))+(((-1.0)*r20*x12009)));
evalcond[1]=((((-1.0)*r10*x12009))+cj0+((x11988*x11999))+(((-1.0)*r12*x12004)));
evalcond[2]=(((x11988*x11992))+(((-1.0)*x12000))+(((-1.0)*r00*x12009))+(((-1.0)*r02*x12004)));
evalcond[3]=((((-1.0)*r20*x11995*x12004))+(((-1.0)*x12001))+(((-1.0)*x12003))+((r20*x12002))+((r21*x11997))+((r22*x12006))+((x11994*x12008)));
evalcond[4]=(x11996+(((-1.0)*cj3*r20*x11993))+((r22*x12007))+(((-1.0)*x11990))+((x11994*x12005))+(((-1.0)*r21*x11995))+(((-1.0)*r20*x11997*x12004)));
evalcond[5]=(((r00*x12002))+((x11992*x12008))+(((-1.0)*x11996*x11998))+((r01*x11997))+(((-1.0)*r00*x11995*x12004))+((cj0*x11990))+((r02*x12006)));
evalcond[6]=(((sj0*x11990))+(((-1.0)*gconst11*x11991*x12004))+((x11999*x12008))+((r12*x12006))+((r11*x11997))+((r10*x12002))+(((-1.0)*x11996*x12000)));
evalcond[7]=((((-1.0)*x11998*x12003))+(((-1.0)*x11998*x12001))+(((-1.0)*r00*x11997*x12004))+((x11992*x12005))+(((-1.0)*cj3*r00*x11993))+(((-1.0)*r01*x11995))+((r02*x12007)));
evalcond[8]=((((-1.0)*r10*x11997*x12004))+(((-1.0)*r11*x11995))+(((-1.0)*x11991*x11993))+(((-1.0)*x12000*x12001))+(((-1.0)*x12000*x12003))+((x11999*x12005))+((r12*x12007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12010=((1.0)*gconst11);
CheckValue<IkReal> x12011 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12010))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12011.valid){
continue;
}
CheckValue<IkReal> x12012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12010))+(((-1.0)*gconst10*r00)))),-1);
if(!x12012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12011.value)+(((1.5707963267949)*(x12012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12013=IKsin(j4);
IkReal x12014=IKcos(j4);
IkReal x12015=(cj1*cj2);
IkReal x12016=(cj3*r10);
IkReal x12017=(gconst10*r01);
IkReal x12018=((1.0)*gconst10);
IkReal x12019=(gconst10*r21);
IkReal x12020=(cj3*gconst11);
IkReal x12021=(sj1*sj2);
IkReal x12022=(gconst11*sj3);
IkReal x12023=((1.0)*cj0);
IkReal x12024=(gconst10*r11);
IkReal x12025=((1.0)*sj0);
IkReal x12026=(cj2*sj1);
IkReal x12027=(gconst10*sj3);
IkReal x12028=(cj1*sj2);
IkReal x12029=((1.0)*x12014);
IkReal x12030=(sj3*x12014);
IkReal x12031=(cj3*x12013);
IkReal x12032=(sj3*x12013);
IkReal x12033=(cj3*x12014);
IkReal x12034=((1.0)*gconst11*x12013);
evalcond[0]=((((-1.0)*r20*x12034))+(((-1.0)*r22*x12029))+((x12013*x12019)));
evalcond[1]=(cj0+((x12013*x12024))+(((-1.0)*r12*x12029))+(((-1.0)*r10*x12034)));
evalcond[2]=((((-1.0)*x12025))+(((-1.0)*r00*x12034))+(((-1.0)*r02*x12029))+((x12013*x12017)));
evalcond[3]=(((x12019*x12033))+((r20*x12027))+(((-1.0)*x12028))+(((-1.0)*x12026))+((r22*x12031))+(((-1.0)*r20*x12020*x12029))+((r21*x12022)));
evalcond[4]=(((x12019*x12030))+x12021+((r22*x12032))+(((-1.0)*x12015))+(((-1.0)*r21*x12020))+(((-1.0)*r20*x12022*x12029))+(((-1.0)*cj3*r20*x12018)));
evalcond[5]=(((x12017*x12033))+((r01*x12022))+((r00*x12027))+((cj0*x12015))+(((-1.0)*x12021*x12023))+((r02*x12031))+(((-1.0)*r00*x12020*x12029)));
evalcond[6]=(((sj0*x12015))+(((-1.0)*x12021*x12025))+((x12024*x12033))+((r12*x12031))+(((-1.0)*gconst11*x12016*x12029))+((r11*x12022))+((r10*x12027)));
evalcond[7]=((((-1.0)*r00*x12022*x12029))+((x12017*x12030))+(((-1.0)*r01*x12020))+(((-1.0)*x12023*x12026))+(((-1.0)*x12023*x12028))+((r02*x12032))+(((-1.0)*cj3*r00*x12018)));
evalcond[8]=((((-1.0)*x12025*x12028))+(((-1.0)*x12025*x12026))+(((-1.0)*x12016*x12018))+(((-1.0)*r11*x12020))+(((-1.0)*r10*x12022*x12029))+((x12024*x12030))+((r12*x12032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12035=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12035;
j4eval[1]=IKsign(x12035);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12036=((1.0)*cj5);
IkReal x12037=((((-1.0)*r01*x12036))+(((-1.0)*r00*sj5)));
j4eval[0]=x12037;
j4eval[1]=((IKabs(((((-1.0)*r20*x12036))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12038=cj5*cj5;
IkReal x12039=(cj3*r21);
IkReal x12040=(cj5*sj5);
IkReal x12041=((1.0)*cj3);
IkReal x12042=(((cj3*r11*r20*x12040))+(((-1.0)*r11*x12039))+((r11*x12038*x12039))+(((-1.0)*r12*r22*x12041))+(((-1.0)*r10*r20*x12038*x12041))+((r10*x12039*x12040)));
j4eval[0]=x12042;
j4eval[1]=IKsign(x12042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12043=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12043;
j4eval[1]=IKsign(x12043);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12044=((1.0)*cj5);
IkReal x12045=((((-1.0)*r01*x12044))+(((-1.0)*r00*sj5)));
j4eval[0]=x12045;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12044)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12046=(sj1*sj2);
IkReal x12047=(cj5*r10);
IkReal x12048=(r11*sj5);
IkReal x12049=(cj1*cj2);
IkReal x12050=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12050;
j4eval[1]=((IKabs(((((-1.0)*x12046*x12047))+((x12046*x12048))+(((-1.0)*x12048*x12049))+((x12047*x12049)))))+(IKabs(((((-1.0)*r12*x12046))+((r12*x12049))))));
j4eval[2]=IKsign(x12050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12051=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12051);
rxp1_1=(px*r21);
rxp1_2=(r11*x12051);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12052=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12052);
rxp1_1=(px*r21);
rxp1_2=(r11*x12052);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12053=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12053))+((r11*sj5)));
j4eval[1]=((((-1.0)*r20*x12053))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12054=((1.0)*cj5);
CheckValue<IkReal> x12055=IKPowWithIntegerCheck(((((-1.0)*r10*x12054))+((r11*sj5))),-1);
if(!x12055.valid){
continue;
}
CheckValue<IkReal> x12056=IKPowWithIntegerCheck(((((-1.0)*r20*x12054))+((r21*sj5))),-1);
if(!x12056.valid){
continue;
}
if( IKabs(((-1.0)*(x12055.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12056.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12055.value)))+IKsqr(((x12056.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12055.value)), ((x12056.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12057=IKsin(j4);
IkReal x12058=IKcos(j4);
IkReal x12059=((1.0)*cj2);
IkReal x12060=(r21*sj5);
IkReal x12061=(r11*sj5);
IkReal x12062=((1.0)*cj5*x12057);
IkReal x12063=((1.0)*cj5*x12058);
evalcond[0]=((-1.0)*r02*x12058);
evalcond[1]=(((x12057*x12060))+(((-1.0)*r20*x12062)));
evalcond[2]=((((-1.0)*sj1*x12059))+(((-1.0)*cj1*sj2))+((r02*x12057)));
evalcond[3]=((((-1.0)*r10*x12063))+((x12058*x12061)));
evalcond[4]=((1.0)+((x12057*x12061))+(((-1.0)*r10*x12062)));
evalcond[5]=((((-1.0)*cj1*x12059))+((sj1*sj2))+(((-1.0)*r20*x12063))+((x12058*x12060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12064=IKPowWithIntegerCheck(r02,-1);
if(!x12064.valid){
continue;
}
CheckValue<IkReal> x12065=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12065.valid){
continue;
}
if( IKabs(((x12064.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12065.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12064.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12065.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12064.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12065.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12066=IKsin(j4);
IkReal x12067=IKcos(j4);
IkReal x12068=((1.0)*cj2);
IkReal x12069=(r21*sj5);
IkReal x12070=(r11*sj5);
IkReal x12071=((1.0)*cj5*x12066);
IkReal x12072=((1.0)*cj5*x12067);
evalcond[0]=((-1.0)*r02*x12067);
evalcond[1]=((((-1.0)*r20*x12071))+((x12066*x12069)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12068))+((r02*x12066)));
evalcond[3]=(((x12067*x12070))+(((-1.0)*r10*x12072)));
evalcond[4]=((1.0)+((x12066*x12070))+(((-1.0)*r10*x12071)));
evalcond[5]=(((x12067*x12069))+(((-1.0)*r20*x12072))+((sj1*sj2))+(((-1.0)*cj1*x12068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12073=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12073;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12074=((1.0)*cj5);
IkReal x12075=((((-1.0)*r21*x12074))+(((-1.0)*r20*sj5)));
j4eval[0]=x12075;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12074))+((r11*sj5))))));
j4eval[2]=IKsign(x12075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12076=cj5*cj5;
IkReal x12077=(r11*r21);
IkReal x12078=((1.0)*r20);
IkReal x12079=(cj5*sj5);
IkReal x12080=((((-1.0)*x12077))+((r10*r21*x12079))+((x12076*x12077))+(((-1.0)*r12*r22))+((r11*r20*x12079))+(((-1.0)*r10*x12076*x12078)));
j4eval[0]=x12080;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12078))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12081=cj5*cj5;
IkReal x12082=(r21*sj5);
IkReal x12083=(r11*r21);
IkReal x12084=((1.0)*r20);
CheckValue<IkReal> x12085 = IKatan2WithCheck(IkReal((x12082+(((-1.0)*cj5*x12084)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12085.valid){
continue;
}
CheckValue<IkReal> x12086=IKPowWithIntegerCheck(IKsign((((x12081*x12083))+(((-1.0)*r12*r22))+(((-1.0)*x12083))+(((-1.0)*r10*x12081*x12084))+((cj5*r10*x12082))+((cj5*r11*r20*sj5)))),-1);
if(!x12086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12085.value)+(((1.5707963267949)*(x12086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12087=IKcos(j4);
IkReal x12088=IKsin(j4);
IkReal x12089=(cj5*r00);
IkReal x12090=(cj5*r20);
IkReal x12091=(cj5*r10);
IkReal x12092=((1.0)*x12087);
IkReal x12093=((1.0)*x12088);
IkReal x12094=(sj5*x12087);
IkReal x12095=(sj5*x12088);
evalcond[0]=((((-1.0)*x12090*x12092))+((r22*x12088))+((r21*x12094)));
evalcond[1]=(((r11*x12094))+((r12*x12088))+(((-1.0)*x12091*x12092)));
evalcond[2]=((((-1.0)*x12090*x12093))+(((-1.0)*r22*x12092))+((r21*x12095)));
evalcond[3]=(((r01*x12095))+(((-1.0)*x12089*x12093))+(((-1.0)*r02*x12092)));
evalcond[4]=((-1.0)+((r01*x12094))+((r02*x12088))+(((-1.0)*x12089*x12092)));
evalcond[5]=((1.0)+((r11*x12095))+(((-1.0)*r12*x12092))+(((-1.0)*x12091*x12093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12096=((1.0)*cj5);
CheckValue<IkReal> x12097=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12096))+(((-1.0)*r20*sj5)))),-1);
if(!x12097.valid){
continue;
}
CheckValue<IkReal> x12098 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12096))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12097.value)))+(x12098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12099=IKcos(j4);
IkReal x12100=IKsin(j4);
IkReal x12101=(cj5*r00);
IkReal x12102=(cj5*r20);
IkReal x12103=(cj5*r10);
IkReal x12104=((1.0)*x12099);
IkReal x12105=((1.0)*x12100);
IkReal x12106=(sj5*x12099);
IkReal x12107=(sj5*x12100);
evalcond[0]=((((-1.0)*x12102*x12104))+((r22*x12100))+((r21*x12106)));
evalcond[1]=((((-1.0)*x12103*x12104))+((r12*x12100))+((r11*x12106)));
evalcond[2]=((((-1.0)*r22*x12104))+(((-1.0)*x12102*x12105))+((r21*x12107)));
evalcond[3]=((((-1.0)*x12101*x12105))+((r01*x12107))+(((-1.0)*r02*x12104)));
evalcond[4]=((-1.0)+((r02*x12100))+(((-1.0)*x12101*x12104))+((r01*x12106)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12104))+(((-1.0)*x12103*x12105))+((r11*x12107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12108 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12108.valid){
continue;
}
CheckValue<IkReal> x12109=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12108.value)+(((1.5707963267949)*(x12109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12110=IKcos(j4);
IkReal x12111=IKsin(j4);
IkReal x12112=(cj5*r00);
IkReal x12113=(cj5*r20);
IkReal x12114=(cj5*r10);
IkReal x12115=((1.0)*x12110);
IkReal x12116=((1.0)*x12111);
IkReal x12117=(sj5*x12110);
IkReal x12118=(sj5*x12111);
evalcond[0]=(((r21*x12117))+(((-1.0)*x12113*x12115))+((r22*x12111)));
evalcond[1]=((((-1.0)*x12114*x12115))+((r12*x12111))+((r11*x12117)));
evalcond[2]=((((-1.0)*r22*x12115))+((r21*x12118))+(((-1.0)*x12113*x12116)));
evalcond[3]=(((r01*x12118))+(((-1.0)*x12112*x12116))+(((-1.0)*r02*x12115)));
evalcond[4]=((-1.0)+((r02*x12111))+((r01*x12117))+(((-1.0)*x12112*x12115)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12115))+(((-1.0)*x12114*x12116))+((r11*x12118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12119=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12119;
j4eval[1]=IKsign(x12119);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12120=((1.0)*cj5);
IkReal x12121=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12120)));
j4eval[0]=x12121;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12120))+((r21*sj5))))));
j4eval[2]=IKsign(x12121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12122=cj5*cj5;
IkReal x12123=(r11*r21);
IkReal x12124=((1.0)*r20);
IkReal x12125=(cj5*sj5);
IkReal x12126=((((-1.0)*r10*x12122*x12124))+(((-1.0)*r12*r22))+(((-1.0)*x12123))+((r11*r20*x12125))+((x12122*x12123))+((r10*r21*x12125)));
j4eval[0]=x12126;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12124)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12126);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12127=cj5*cj5;
IkReal x12128=(r21*sj5);
IkReal x12129=(r11*r21);
IkReal x12130=((1.0)*r20);
CheckValue<IkReal> x12131=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12128))+(((-1.0)*r10*x12127*x12130))+(((-1.0)*r12*r22))+((x12127*x12129))+(((-1.0)*x12129))+((cj5*r11*r20*sj5)))),-1);
if(!x12131.valid){
continue;
}
CheckValue<IkReal> x12132 = IKatan2WithCheck(IkReal((x12128+(((-1.0)*cj5*x12130)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12131.value)))+(x12132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12133=IKcos(j4);
IkReal x12134=IKsin(j4);
IkReal x12135=(cj5*r00);
IkReal x12136=(cj5*r20);
IkReal x12137=(cj5*r10);
IkReal x12138=((1.0)*x12133);
IkReal x12139=((1.0)*x12134);
IkReal x12140=(sj5*x12133);
IkReal x12141=(sj5*x12134);
evalcond[0]=(((r22*x12134))+(((-1.0)*x12136*x12138))+((r21*x12140)));
evalcond[1]=(((r12*x12134))+(((-1.0)*x12137*x12138))+((r11*x12140)));
evalcond[2]=((((-1.0)*r22*x12138))+(((-1.0)*x12136*x12139))+((r21*x12141)));
evalcond[3]=((((-1.0)*x12135*x12139))+((r01*x12141))+(((-1.0)*r02*x12138)));
evalcond[4]=((1.0)+(((-1.0)*x12135*x12138))+((r01*x12140))+((r02*x12134)));
evalcond[5]=((1.0)+(((-1.0)*x12137*x12139))+((r11*x12141))+(((-1.0)*r12*x12138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12142=((1.0)*cj5);
CheckValue<IkReal> x12143 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12142)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12143.valid){
continue;
}
CheckValue<IkReal> x12144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12142)))),-1);
if(!x12144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12143.value)+(((1.5707963267949)*(x12144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12145=IKcos(j4);
IkReal x12146=IKsin(j4);
IkReal x12147=(cj5*r00);
IkReal x12148=(cj5*r20);
IkReal x12149=(cj5*r10);
IkReal x12150=((1.0)*x12145);
IkReal x12151=((1.0)*x12146);
IkReal x12152=(sj5*x12145);
IkReal x12153=(sj5*x12146);
evalcond[0]=(((r22*x12146))+((r21*x12152))+(((-1.0)*x12148*x12150)));
evalcond[1]=(((r12*x12146))+((r11*x12152))+(((-1.0)*x12149*x12150)));
evalcond[2]=((((-1.0)*r22*x12150))+((r21*x12153))+(((-1.0)*x12148*x12151)));
evalcond[3]=((((-1.0)*r02*x12150))+((r01*x12153))+(((-1.0)*x12147*x12151)));
evalcond[4]=((1.0)+((r02*x12146))+((r01*x12152))+(((-1.0)*x12147*x12150)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12150))+((r11*x12153))+(((-1.0)*x12149*x12151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12154=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12154.valid){
continue;
}
CheckValue<IkReal> x12155 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12154.value)))+(x12155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12156=IKcos(j4);
IkReal x12157=IKsin(j4);
IkReal x12158=(cj5*r00);
IkReal x12159=(cj5*r20);
IkReal x12160=(cj5*r10);
IkReal x12161=((1.0)*x12156);
IkReal x12162=((1.0)*x12157);
IkReal x12163=(sj5*x12156);
IkReal x12164=(sj5*x12157);
evalcond[0]=(((r21*x12163))+((r22*x12157))+(((-1.0)*x12159*x12161)));
evalcond[1]=((((-1.0)*x12160*x12161))+((r12*x12157))+((r11*x12163)));
evalcond[2]=(((r21*x12164))+(((-1.0)*r22*x12161))+(((-1.0)*x12159*x12162)));
evalcond[3]=(((r01*x12164))+(((-1.0)*r02*x12161))+(((-1.0)*x12158*x12162)));
evalcond[4]=((1.0)+((r02*x12157))+((r01*x12163))+(((-1.0)*x12158*x12161)));
evalcond[5]=((1.0)+(((-1.0)*x12160*x12162))+((r11*x12164))+(((-1.0)*r12*x12161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12165=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12165;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12165);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12166=((1.0)*cj5);
IkReal x12167=((((-1.0)*r21*x12166))+(((-1.0)*r20*sj5)));
j4eval[0]=x12167;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12166))))));
j4eval[2]=IKsign(x12167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12168=cj5*cj5;
IkReal x12169=(r11*r21);
IkReal x12170=((1.0)*r20);
IkReal x12171=(cj5*sj5);
IkReal x12172=(((r11*r20*x12171))+(((-1.0)*x12169))+((x12168*x12169))+(((-1.0)*r12*r22))+((r10*r21*x12171))+(((-1.0)*r10*x12168*x12170)));
j4eval[0]=x12172;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12170))))));
j4eval[2]=IKsign(x12172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12173=cj5*cj5;
IkReal x12174=(r21*sj5);
IkReal x12175=(r11*r21);
IkReal x12176=((1.0)*r20);
CheckValue<IkReal> x12177 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12176))+x12174)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12177.valid){
continue;
}
CheckValue<IkReal> x12178=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12173*x12176))+((x12173*x12175))+(((-1.0)*x12175))+(((-1.0)*r12*r22))+((cj5*r10*x12174))+((cj5*r11*r20*sj5)))),-1);
if(!x12178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12177.value)+(((1.5707963267949)*(x12178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12179=IKcos(j4);
IkReal x12180=IKsin(j4);
IkReal x12181=(cj5*r00);
IkReal x12182=(cj5*r20);
IkReal x12183=(cj5*r10);
IkReal x12184=((1.0)*x12179);
IkReal x12185=((1.0)*x12180);
IkReal x12186=(sj5*x12179);
IkReal x12187=(sj5*x12180);
evalcond[0]=((((-1.0)*x12182*x12184))+((r22*x12180))+((r21*x12186)));
evalcond[1]=((((-1.0)*x12183*x12184))+((r12*x12180))+((r11*x12186)));
evalcond[2]=((((-1.0)*x12182*x12185))+((r21*x12187))+(((-1.0)*r22*x12184)));
evalcond[3]=((((-1.0)*r02*x12184))+(((-1.0)*x12181*x12185))+((r01*x12187)));
evalcond[4]=((-1.0)+((r02*x12180))+(((-1.0)*x12181*x12184))+((r01*x12186)));
evalcond[5]=((1.0)+(((-1.0)*x12183*x12185))+((r11*x12187))+(((-1.0)*r12*x12184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12188=((1.0)*cj5);
CheckValue<IkReal> x12189=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12188))+(((-1.0)*r20*sj5)))),-1);
if(!x12189.valid){
continue;
}
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12188)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12189.value)))+(x12190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12191=IKcos(j4);
IkReal x12192=IKsin(j4);
IkReal x12193=(cj5*r00);
IkReal x12194=(cj5*r20);
IkReal x12195=(cj5*r10);
IkReal x12196=((1.0)*x12191);
IkReal x12197=((1.0)*x12192);
IkReal x12198=(sj5*x12191);
IkReal x12199=(sj5*x12192);
evalcond[0]=((((-1.0)*x12194*x12196))+((r21*x12198))+((r22*x12192)));
evalcond[1]=(((r12*x12192))+((r11*x12198))+(((-1.0)*x12195*x12196)));
evalcond[2]=((((-1.0)*x12194*x12197))+((r21*x12199))+(((-1.0)*r22*x12196)));
evalcond[3]=((((-1.0)*r02*x12196))+((r01*x12199))+(((-1.0)*x12193*x12197)));
evalcond[4]=((-1.0)+((r02*x12192))+((r01*x12198))+(((-1.0)*x12193*x12196)));
evalcond[5]=((1.0)+((r11*x12199))+(((-1.0)*r12*x12196))+(((-1.0)*x12195*x12197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12200 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12200.valid){
continue;
}
CheckValue<IkReal> x12201=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12200.value)+(((1.5707963267949)*(x12201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12202=IKcos(j4);
IkReal x12203=IKsin(j4);
IkReal x12204=(cj5*r00);
IkReal x12205=(cj5*r20);
IkReal x12206=(cj5*r10);
IkReal x12207=((1.0)*x12202);
IkReal x12208=((1.0)*x12203);
IkReal x12209=(sj5*x12202);
IkReal x12210=(sj5*x12203);
evalcond[0]=((((-1.0)*x12205*x12207))+((r22*x12203))+((r21*x12209)));
evalcond[1]=(((r12*x12203))+(((-1.0)*x12206*x12207))+((r11*x12209)));
evalcond[2]=((((-1.0)*x12205*x12208))+(((-1.0)*r22*x12207))+((r21*x12210)));
evalcond[3]=((((-1.0)*r02*x12207))+(((-1.0)*x12204*x12208))+((r01*x12210)));
evalcond[4]=((-1.0)+((r02*x12203))+(((-1.0)*x12204*x12207))+((r01*x12209)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12207))+(((-1.0)*x12206*x12208))+((r11*x12210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12211=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12211;
j4eval[1]=IKsign(x12211);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12212=((1.0)*cj5);
IkReal x12213=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12212)));
j4eval[0]=x12213;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12212)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12213);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12214=cj5*cj5;
IkReal x12215=(r11*r21);
IkReal x12216=((1.0)*r20);
IkReal x12217=(cj5*sj5);
IkReal x12218=((((-1.0)*r10*x12214*x12216))+(((-1.0)*r12*r22))+((x12214*x12215))+((r11*r20*x12217))+((r10*r21*x12217))+(((-1.0)*x12215)));
j4eval[0]=x12218;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12216)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12219=cj5*cj5;
IkReal x12220=(r21*sj5);
IkReal x12221=(r11*r21);
IkReal x12222=((1.0)*r20);
CheckValue<IkReal> x12223 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12222))+x12220)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12223.valid){
continue;
}
CheckValue<IkReal> x12224=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12219*x12222))+((cj5*r10*x12220))+(((-1.0)*r12*r22))+((x12219*x12221))+(((-1.0)*x12221))+((cj5*r11*r20*sj5)))),-1);
if(!x12224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12223.value)+(((1.5707963267949)*(x12224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12225=IKcos(j4);
IkReal x12226=IKsin(j4);
IkReal x12227=(cj5*r00);
IkReal x12228=(cj5*r20);
IkReal x12229=(cj5*r10);
IkReal x12230=((1.0)*x12225);
IkReal x12231=((1.0)*x12226);
IkReal x12232=(sj5*x12225);
IkReal x12233=(sj5*x12226);
evalcond[0]=(((r22*x12226))+((r21*x12232))+(((-1.0)*x12228*x12230)));
evalcond[1]=((((-1.0)*x12229*x12230))+((r11*x12232))+((r12*x12226)));
evalcond[2]=((((-1.0)*r22*x12230))+((r21*x12233))+(((-1.0)*x12228*x12231)));
evalcond[3]=(((r01*x12233))+(((-1.0)*r02*x12230))+(((-1.0)*x12227*x12231)));
evalcond[4]=((1.0)+((r01*x12232))+((r02*x12226))+(((-1.0)*x12227*x12230)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12230))+(((-1.0)*x12229*x12231))+((r11*x12233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12234=((1.0)*cj5);
CheckValue<IkReal> x12235 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12234)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12235.valid){
continue;
}
CheckValue<IkReal> x12236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12234)))),-1);
if(!x12236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12235.value)+(((1.5707963267949)*(x12236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12237=IKcos(j4);
IkReal x12238=IKsin(j4);
IkReal x12239=(cj5*r00);
IkReal x12240=(cj5*r20);
IkReal x12241=(cj5*r10);
IkReal x12242=((1.0)*x12237);
IkReal x12243=((1.0)*x12238);
IkReal x12244=(sj5*x12237);
IkReal x12245=(sj5*x12238);
evalcond[0]=(((r22*x12238))+((r21*x12244))+(((-1.0)*x12240*x12242)));
evalcond[1]=(((r11*x12244))+((r12*x12238))+(((-1.0)*x12241*x12242)));
evalcond[2]=((((-1.0)*r22*x12242))+((r21*x12245))+(((-1.0)*x12240*x12243)));
evalcond[3]=((((-1.0)*x12239*x12243))+((r01*x12245))+(((-1.0)*r02*x12242)));
evalcond[4]=((1.0)+(((-1.0)*x12239*x12242))+((r01*x12244))+((r02*x12238)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12242))+((r11*x12245))+(((-1.0)*x12241*x12243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12246=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12246.valid){
continue;
}
CheckValue<IkReal> x12247 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12246.value)))+(x12247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12248=IKcos(j4);
IkReal x12249=IKsin(j4);
IkReal x12250=(cj5*r00);
IkReal x12251=(cj5*r20);
IkReal x12252=(cj5*r10);
IkReal x12253=((1.0)*x12248);
IkReal x12254=((1.0)*x12249);
IkReal x12255=(sj5*x12248);
IkReal x12256=(sj5*x12249);
evalcond[0]=((((-1.0)*x12251*x12253))+((r21*x12255))+((r22*x12249)));
evalcond[1]=(((r11*x12255))+((r12*x12249))+(((-1.0)*x12252*x12253)));
evalcond[2]=((((-1.0)*x12251*x12254))+((r21*x12256))+(((-1.0)*r22*x12253)));
evalcond[3]=((((-1.0)*x12250*x12254))+((r01*x12256))+(((-1.0)*r02*x12253)));
evalcond[4]=((1.0)+(((-1.0)*x12250*x12253))+((r01*x12255))+((r02*x12249)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12253))+((r11*x12256))+(((-1.0)*x12252*x12254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12257=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12257;
j4eval[1]=IKsign(x12257);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12258=((1.0)*cj5);
IkReal x12259=((((-1.0)*r11*x12258))+(((-1.0)*r10*sj5)));
j4eval[0]=x12259;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12258))))));
j4eval[2]=IKsign(x12259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12260=cj5*cj5;
IkReal x12261=(r11*r21);
IkReal x12262=((1.0)*r20);
IkReal x12263=(cj5*sj5);
IkReal x12264=((((-1.0)*r10*x12260*x12262))+(((-1.0)*r12*r22))+((r10*r21*x12263))+((x12260*x12261))+((r11*r20*x12263))+(((-1.0)*x12261)));
j4eval[0]=x12264;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12262))))));
j4eval[2]=IKsign(x12264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12265=cj5*cj5;
IkReal x12266=(r21*sj5);
IkReal x12267=(r11*r21);
IkReal x12268=((1.0)*r20);
CheckValue<IkReal> x12269 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12268))+x12266)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12269.valid){
continue;
}
CheckValue<IkReal> x12270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12265*x12268))+(((-1.0)*r12*r22))+((cj5*r10*x12266))+((x12265*x12267))+(((-1.0)*x12267))+((cj5*r11*r20*sj5)))),-1);
if(!x12270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12269.value)+(((1.5707963267949)*(x12270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12271=IKcos(j4);
IkReal x12272=IKsin(j4);
IkReal x12273=(cj5*r00);
IkReal x12274=(cj5*r20);
IkReal x12275=(cj5*r10);
IkReal x12276=((1.0)*x12271);
IkReal x12277=((1.0)*x12272);
IkReal x12278=(sj5*x12271);
IkReal x12279=(sj5*x12272);
evalcond[0]=(((r21*x12278))+((r22*x12272))+(((-1.0)*x12274*x12276)));
evalcond[1]=(((r12*x12272))+((r11*x12278))+(((-1.0)*x12275*x12276)));
evalcond[2]=(((r21*x12279))+(((-1.0)*r22*x12276))+(((-1.0)*x12274*x12277)));
evalcond[3]=((((-1.0)*x12273*x12277))+(((-1.0)*r02*x12276))+((r01*x12279)));
evalcond[4]=((1.0)+(((-1.0)*x12273*x12276))+((r02*x12272))+((r01*x12278)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12276))+((r11*x12279))+(((-1.0)*x12275*x12277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12280=((1.0)*cj5);
CheckValue<IkReal> x12281=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12280)))),-1);
if(!x12281.valid){
continue;
}
CheckValue<IkReal> x12282 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12280)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12281.value)))+(x12282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12283=IKcos(j4);
IkReal x12284=IKsin(j4);
IkReal x12285=(cj5*r00);
IkReal x12286=(cj5*r20);
IkReal x12287=(cj5*r10);
IkReal x12288=((1.0)*x12283);
IkReal x12289=((1.0)*x12284);
IkReal x12290=(sj5*x12283);
IkReal x12291=(sj5*x12284);
evalcond[0]=(((r21*x12290))+((r22*x12284))+(((-1.0)*x12286*x12288)));
evalcond[1]=((((-1.0)*x12287*x12288))+((r11*x12290))+((r12*x12284)));
evalcond[2]=(((r21*x12291))+(((-1.0)*r22*x12288))+(((-1.0)*x12286*x12289)));
evalcond[3]=(((r01*x12291))+(((-1.0)*x12285*x12289))+(((-1.0)*r02*x12288)));
evalcond[4]=((1.0)+((r01*x12290))+((r02*x12284))+(((-1.0)*x12285*x12288)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12288))+(((-1.0)*x12287*x12289))+((r11*x12291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12292=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12292.valid){
continue;
}
CheckValue<IkReal> x12293 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12292.value)))+(x12293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12294=IKcos(j4);
IkReal x12295=IKsin(j4);
IkReal x12296=(cj5*r00);
IkReal x12297=(cj5*r20);
IkReal x12298=(cj5*r10);
IkReal x12299=((1.0)*x12294);
IkReal x12300=((1.0)*x12295);
IkReal x12301=(sj5*x12294);
IkReal x12302=(sj5*x12295);
evalcond[0]=(((r21*x12301))+(((-1.0)*x12297*x12299))+((r22*x12295)));
evalcond[1]=((((-1.0)*x12298*x12299))+((r11*x12301))+((r12*x12295)));
evalcond[2]=((((-1.0)*x12297*x12300))+((r21*x12302))+(((-1.0)*r22*x12299)));
evalcond[3]=((((-1.0)*x12296*x12300))+(((-1.0)*r02*x12299))+((r01*x12302)));
evalcond[4]=((1.0)+(((-1.0)*x12296*x12299))+((r02*x12295))+((r01*x12301)));
evalcond[5]=((1.0)+((r11*x12302))+(((-1.0)*x12298*x12300))+(((-1.0)*r12*x12299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12303=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12303;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12304=((1.0)*cj5);
IkReal x12305=((((-1.0)*r21*x12304))+(((-1.0)*r20*sj5)));
j4eval[0]=x12305;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x12304)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12306=cj5*cj5;
IkReal x12307=(r11*r21);
IkReal x12308=((1.0)*r20);
IkReal x12309=(cj5*sj5);
IkReal x12310=((((-1.0)*x12307))+(((-1.0)*r12*r22))+((r10*r21*x12309))+((x12306*x12307))+(((-1.0)*r10*x12306*x12308))+((r11*r20*x12309)));
j4eval[0]=x12310;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12308))))));
j4eval[2]=IKsign(x12310);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12311=cj5*cj5;
IkReal x12312=(r21*sj5);
IkReal x12313=(r11*r21);
IkReal x12314=((1.0)*r20);
CheckValue<IkReal> x12315 = IKatan2WithCheck(IkReal((x12312+(((-1.0)*cj5*x12314)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12315.valid){
continue;
}
CheckValue<IkReal> x12316=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12313))+((cj5*r10*x12312))+((x12311*x12313))+(((-1.0)*r10*x12311*x12314))+((cj5*r11*r20*sj5)))),-1);
if(!x12316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12315.value)+(((1.5707963267949)*(x12316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12317=IKcos(j4);
IkReal x12318=IKsin(j4);
IkReal x12319=(cj5*r00);
IkReal x12320=(cj5*r20);
IkReal x12321=(cj5*r10);
IkReal x12322=((1.0)*x12317);
IkReal x12323=((1.0)*x12318);
IkReal x12324=(sj5*x12317);
IkReal x12325=(sj5*x12318);
evalcond[0]=(((r22*x12318))+(((-1.0)*x12320*x12322))+((r21*x12324)));
evalcond[1]=(((r12*x12318))+(((-1.0)*x12321*x12322))+((r11*x12324)));
evalcond[2]=((((-1.0)*r22*x12322))+(((-1.0)*x12320*x12323))+((r21*x12325)));
evalcond[3]=((((-1.0)*x12319*x12323))+((r01*x12325))+(((-1.0)*r02*x12322)));
evalcond[4]=((-1.0)+(((-1.0)*x12319*x12322))+((r01*x12324))+((r02*x12318)));
evalcond[5]=((1.0)+(((-1.0)*x12321*x12323))+(((-1.0)*r12*x12322))+((r11*x12325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12326=((1.0)*cj5);
CheckValue<IkReal> x12327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12326))+(((-1.0)*r20*sj5)))),-1);
if(!x12327.valid){
continue;
}
CheckValue<IkReal> x12328 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12326)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12327.value)))+(x12328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12329=IKcos(j4);
IkReal x12330=IKsin(j4);
IkReal x12331=(cj5*r00);
IkReal x12332=(cj5*r20);
IkReal x12333=(cj5*r10);
IkReal x12334=((1.0)*x12329);
IkReal x12335=((1.0)*x12330);
IkReal x12336=(sj5*x12329);
IkReal x12337=(sj5*x12330);
evalcond[0]=(((r21*x12336))+(((-1.0)*x12332*x12334))+((r22*x12330)));
evalcond[1]=((((-1.0)*x12333*x12334))+((r12*x12330))+((r11*x12336)));
evalcond[2]=((((-1.0)*r22*x12334))+((r21*x12337))+(((-1.0)*x12332*x12335)));
evalcond[3]=(((r01*x12337))+(((-1.0)*x12331*x12335))+(((-1.0)*r02*x12334)));
evalcond[4]=((-1.0)+((r01*x12336))+(((-1.0)*x12331*x12334))+((r02*x12330)));
evalcond[5]=((1.0)+(((-1.0)*x12333*x12335))+((r11*x12337))+(((-1.0)*r12*x12334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12338 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12338.valid){
continue;
}
CheckValue<IkReal> x12339=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12338.value)+(((1.5707963267949)*(x12339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12340=IKcos(j4);
IkReal x12341=IKsin(j4);
IkReal x12342=(cj5*r00);
IkReal x12343=(cj5*r20);
IkReal x12344=(cj5*r10);
IkReal x12345=((1.0)*x12340);
IkReal x12346=((1.0)*x12341);
IkReal x12347=(sj5*x12340);
IkReal x12348=(sj5*x12341);
evalcond[0]=((((-1.0)*x12343*x12345))+((r22*x12341))+((r21*x12347)));
evalcond[1]=((((-1.0)*x12344*x12345))+((r11*x12347))+((r12*x12341)));
evalcond[2]=((((-1.0)*x12343*x12346))+((r21*x12348))+(((-1.0)*r22*x12345)));
evalcond[3]=((((-1.0)*r02*x12345))+(((-1.0)*x12342*x12346))+((r01*x12348)));
evalcond[4]=((-1.0)+(((-1.0)*x12342*x12345))+((r01*x12347))+((r02*x12341)));
evalcond[5]=((1.0)+(((-1.0)*x12344*x12346))+(((-1.0)*r12*x12345))+((r11*x12348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12349=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12349;
j4eval[1]=IKsign(x12349);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12350=((1.0)*cj5);
IkReal x12351=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12350)));
j4eval[0]=x12351;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12350))))));
j4eval[2]=IKsign(x12351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12352=cj5*cj5;
IkReal x12353=(r11*r21);
IkReal x12354=((1.0)*r20);
IkReal x12355=(cj5*sj5);
IkReal x12356=((((-1.0)*x12353))+((x12352*x12353))+(((-1.0)*r12*r22))+((r11*r20*x12355))+(((-1.0)*r10*x12352*x12354))+((r10*r21*x12355)));
j4eval[0]=x12356;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12354))+((r21*sj5))))));
j4eval[2]=IKsign(x12356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12357=cj5*cj5;
IkReal x12358=(r21*sj5);
IkReal x12359=(r11*r21);
IkReal x12360=((1.0)*r20);
CheckValue<IkReal> x12361=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12359))+((cj5*r10*x12358))+(((-1.0)*r12*r22))+((x12357*x12359))+(((-1.0)*r10*x12357*x12360))+((cj5*r11*r20*sj5)))),-1);
if(!x12361.valid){
continue;
}
CheckValue<IkReal> x12362 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12360))+x12358)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12361.value)))+(x12362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12363=IKcos(j4);
IkReal x12364=IKsin(j4);
IkReal x12365=(cj5*r00);
IkReal x12366=(cj5*r20);
IkReal x12367=(cj5*r10);
IkReal x12368=((1.0)*x12363);
IkReal x12369=((1.0)*x12364);
IkReal x12370=(sj5*x12363);
IkReal x12371=(sj5*x12364);
evalcond[0]=((((-1.0)*x12366*x12368))+((r21*x12370))+((r22*x12364)));
evalcond[1]=(((r11*x12370))+(((-1.0)*x12367*x12368))+((r12*x12364)));
evalcond[2]=((((-1.0)*r22*x12368))+(((-1.0)*x12366*x12369))+((r21*x12371)));
evalcond[3]=((((-1.0)*x12365*x12369))+(((-1.0)*r02*x12368))+((r01*x12371)));
evalcond[4]=((1.0)+(((-1.0)*x12365*x12368))+((r02*x12364))+((r01*x12370)));
evalcond[5]=((1.0)+((r11*x12371))+(((-1.0)*r12*x12368))+(((-1.0)*x12367*x12369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12372=((1.0)*cj5);
CheckValue<IkReal> x12373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12372)))),-1);
if(!x12373.valid){
continue;
}
CheckValue<IkReal> x12374 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12372)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12373.value)))+(x12374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12375=IKcos(j4);
IkReal x12376=IKsin(j4);
IkReal x12377=(cj5*r00);
IkReal x12378=(cj5*r20);
IkReal x12379=(cj5*r10);
IkReal x12380=((1.0)*x12375);
IkReal x12381=((1.0)*x12376);
IkReal x12382=(sj5*x12375);
IkReal x12383=(sj5*x12376);
evalcond[0]=(((r21*x12382))+((r22*x12376))+(((-1.0)*x12378*x12380)));
evalcond[1]=(((r11*x12382))+((r12*x12376))+(((-1.0)*x12379*x12380)));
evalcond[2]=(((r21*x12383))+(((-1.0)*r22*x12380))+(((-1.0)*x12378*x12381)));
evalcond[3]=((((-1.0)*r02*x12380))+((r01*x12383))+(((-1.0)*x12377*x12381)));
evalcond[4]=((1.0)+((r01*x12382))+((r02*x12376))+(((-1.0)*x12377*x12380)));
evalcond[5]=((1.0)+((r11*x12383))+(((-1.0)*x12379*x12381))+(((-1.0)*r12*x12380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12384=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12384.valid){
continue;
}
CheckValue<IkReal> x12385 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12384.value)))+(x12385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12386=IKcos(j4);
IkReal x12387=IKsin(j4);
IkReal x12388=(cj5*r00);
IkReal x12389=(cj5*r20);
IkReal x12390=(cj5*r10);
IkReal x12391=((1.0)*x12386);
IkReal x12392=((1.0)*x12387);
IkReal x12393=(sj5*x12386);
IkReal x12394=(sj5*x12387);
evalcond[0]=((((-1.0)*x12389*x12391))+((r21*x12393))+((r22*x12387)));
evalcond[1]=(((r12*x12387))+((r11*x12393))+(((-1.0)*x12390*x12391)));
evalcond[2]=((((-1.0)*x12389*x12392))+(((-1.0)*r22*x12391))+((r21*x12394)));
evalcond[3]=((((-1.0)*r02*x12391))+((r01*x12394))+(((-1.0)*x12388*x12392)));
evalcond[4]=((1.0)+((r02*x12387))+((r01*x12393))+(((-1.0)*x12388*x12391)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12391))+((r11*x12394))+(((-1.0)*x12390*x12392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12395=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12395;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12396=((1.0)*cj5);
IkReal x12397=((((-1.0)*r21*x12396))+(((-1.0)*r20*sj5)));
j4eval[0]=x12397;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12396))))));
j4eval[2]=IKsign(x12397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12398=cj5*cj5;
IkReal x12399=(r11*r21);
IkReal x12400=((1.0)*r20);
IkReal x12401=(cj5*sj5);
IkReal x12402=((((-1.0)*r12*r22))+((r10*r21*x12401))+(((-1.0)*r10*x12398*x12400))+(((-1.0)*x12399))+((x12398*x12399))+((r11*r20*x12401)));
j4eval[0]=x12402;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12400))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12403=cj5*cj5;
IkReal x12404=(r21*sj5);
IkReal x12405=(r11*r21);
IkReal x12406=((1.0)*r20);
CheckValue<IkReal> x12407 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12406))+x12404)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12407.valid){
continue;
}
CheckValue<IkReal> x12408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj5*r10*x12404))+((x12403*x12405))+(((-1.0)*r10*x12403*x12406))+((cj5*r11*r20*sj5))+(((-1.0)*x12405)))),-1);
if(!x12408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12407.value)+(((1.5707963267949)*(x12408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12409=IKcos(j4);
IkReal x12410=IKsin(j4);
IkReal x12411=(cj5*r00);
IkReal x12412=(cj5*r20);
IkReal x12413=(cj5*r10);
IkReal x12414=((1.0)*x12409);
IkReal x12415=((1.0)*x12410);
IkReal x12416=(sj5*x12409);
IkReal x12417=(sj5*x12410);
evalcond[0]=(((r21*x12416))+((r22*x12410))+(((-1.0)*x12412*x12414)));
evalcond[1]=(((r11*x12416))+((r12*x12410))+(((-1.0)*x12413*x12414)));
evalcond[2]=((((-1.0)*r22*x12414))+((r21*x12417))+(((-1.0)*x12412*x12415)));
evalcond[3]=((((-1.0)*x12411*x12415))+((r01*x12417))+(((-1.0)*r02*x12414)));
evalcond[4]=((-1.0)+(((-1.0)*x12411*x12414))+((r01*x12416))+((r02*x12410)));
evalcond[5]=((1.0)+((r11*x12417))+(((-1.0)*x12413*x12415))+(((-1.0)*r12*x12414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12418=((1.0)*cj5);
CheckValue<IkReal> x12419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12418))+(((-1.0)*r20*sj5)))),-1);
if(!x12419.valid){
continue;
}
CheckValue<IkReal> x12420 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12418))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12419.value)))+(x12420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12421=IKcos(j4);
IkReal x12422=IKsin(j4);
IkReal x12423=(cj5*r00);
IkReal x12424=(cj5*r20);
IkReal x12425=(cj5*r10);
IkReal x12426=((1.0)*x12421);
IkReal x12427=((1.0)*x12422);
IkReal x12428=(sj5*x12421);
IkReal x12429=(sj5*x12422);
evalcond[0]=((((-1.0)*x12424*x12426))+((r21*x12428))+((r22*x12422)));
evalcond[1]=((((-1.0)*x12425*x12426))+((r12*x12422))+((r11*x12428)));
evalcond[2]=((((-1.0)*x12424*x12427))+((r21*x12429))+(((-1.0)*r22*x12426)));
evalcond[3]=((((-1.0)*x12423*x12427))+((r01*x12429))+(((-1.0)*r02*x12426)));
evalcond[4]=((-1.0)+(((-1.0)*x12423*x12426))+((r02*x12422))+((r01*x12428)));
evalcond[5]=((1.0)+(((-1.0)*x12425*x12427))+((r11*x12429))+(((-1.0)*r12*x12426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12430 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12430.valid){
continue;
}
CheckValue<IkReal> x12431=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12430.value)+(((1.5707963267949)*(x12431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12432=IKcos(j4);
IkReal x12433=IKsin(j4);
IkReal x12434=(cj5*r00);
IkReal x12435=(cj5*r20);
IkReal x12436=(cj5*r10);
IkReal x12437=((1.0)*x12432);
IkReal x12438=((1.0)*x12433);
IkReal x12439=(sj5*x12432);
IkReal x12440=(sj5*x12433);
evalcond[0]=(((r21*x12439))+(((-1.0)*x12435*x12437))+((r22*x12433)));
evalcond[1]=((((-1.0)*x12436*x12437))+((r12*x12433))+((r11*x12439)));
evalcond[2]=((((-1.0)*x12435*x12438))+((r21*x12440))+(((-1.0)*r22*x12437)));
evalcond[3]=(((r01*x12440))+(((-1.0)*x12434*x12438))+(((-1.0)*r02*x12437)));
evalcond[4]=((-1.0)+(((-1.0)*x12434*x12437))+((r02*x12433))+((r01*x12439)));
evalcond[5]=((1.0)+(((-1.0)*x12436*x12438))+((r11*x12440))+(((-1.0)*r12*x12437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12441=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12441);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12441);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12442=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12442);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12442);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12443=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12443))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x12443)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12444=((1.0)*cj5);
CheckValue<IkReal> x12445=IKPowWithIntegerCheck(((((-1.0)*r10*x12444))+((r11*sj5))),-1);
if(!x12445.valid){
continue;
}
CheckValue<IkReal> x12446=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12444))),-1);
if(!x12446.valid){
continue;
}
if( IKabs(((-1.0)*(x12445.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12446.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12445.value)))+IKsqr(((x12446.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12445.value)), ((x12446.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12447=IKsin(j4);
IkReal x12448=IKcos(j4);
IkReal x12449=((1.0)*cj5);
IkReal x12450=((1.0)*cj2);
IkReal x12451=(sj5*x12448);
IkReal x12452=(sj5*x12447);
evalcond[0]=((-1.0)*r22*x12448);
evalcond[1]=(((sj1*sj2))+((r22*x12447))+(((-1.0)*cj1*x12450)));
evalcond[2]=((((-1.0)*r00*x12447*x12449))+((r01*x12452)));
evalcond[3]=(((r11*x12451))+(((-1.0)*r10*x12448*x12449)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12447*x12449))+((r11*x12452)));
evalcond[5]=((((-1.0)*r00*x12448*x12449))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12450))+((r01*x12451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12453=IKPowWithIntegerCheck(r22,-1);
if(!x12453.valid){
continue;
}
CheckValue<IkReal> x12454=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12454.valid){
continue;
}
if( IKabs(((x12453.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12454.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12453.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12454.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12453.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12454.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12455=IKsin(j4);
IkReal x12456=IKcos(j4);
IkReal x12457=((1.0)*cj5);
IkReal x12458=((1.0)*cj2);
IkReal x12459=(sj5*x12456);
IkReal x12460=(sj5*x12455);
evalcond[0]=((-1.0)*r22*x12456);
evalcond[1]=(((r22*x12455))+((sj1*sj2))+(((-1.0)*cj1*x12458)));
evalcond[2]=(((r01*x12460))+(((-1.0)*r00*x12455*x12457)));
evalcond[3]=((((-1.0)*r10*x12456*x12457))+((r11*x12459)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12455*x12457))+((r11*x12460)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12458))+((r01*x12459))+(((-1.0)*r00*x12456*x12457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12461=(sj1*sj2);
IkReal x12462=(cj5*r10);
IkReal x12463=(r11*sj5);
IkReal x12464=(cj1*cj2);
CheckValue<IkReal> x12465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x12465.valid){
continue;
}
CheckValue<IkReal> x12466 = IKatan2WithCheck(IkReal(((((-1.0)*x12461*x12462))+((x12462*x12464))+((x12461*x12463))+(((-1.0)*x12463*x12464)))),IkReal((((r12*x12464))+(((-1.0)*r12*x12461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12465.value)))+(x12466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12467=IKcos(j4);
IkReal x12468=IKsin(j4);
IkReal x12469=(cj5*r00);
IkReal x12470=(cj5*r10);
IkReal x12471=(r21*sj5);
IkReal x12472=((1.0)*cj2);
IkReal x12473=(cj5*r20);
IkReal x12474=((1.0)*x12467);
IkReal x12475=((1.0)*x12468);
IkReal x12476=(sj5*x12468);
IkReal x12477=(sj5*x12467);
evalcond[0]=(((r12*x12468))+((r11*x12477))+(((-1.0)*x12470*x12474)));
evalcond[1]=((((-1.0)*r22*x12474))+(((-1.0)*x12473*x12475))+((x12468*x12471)));
evalcond[2]=(((r01*x12476))+(((-1.0)*r02*x12474))+(((-1.0)*x12469*x12475)));
evalcond[3]=((1.0)+((r11*x12476))+(((-1.0)*x12470*x12475))+(((-1.0)*r12*x12474)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x12473*x12474))+((r22*x12468))+(((-1.0)*cj1*x12472))+((x12467*x12471)));
evalcond[5]=(((r01*x12477))+(((-1.0)*cj1*sj2))+((r02*x12468))+(((-1.0)*x12469*x12474))+(((-1.0)*sj1*x12472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12478=((1.0)*cj5);
CheckValue<IkReal> x12479 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12479.valid){
continue;
}
CheckValue<IkReal> x12480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12478)))),-1);
if(!x12480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12479.value)+(((1.5707963267949)*(x12480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12481=IKcos(j4);
IkReal x12482=IKsin(j4);
IkReal x12483=(cj5*r00);
IkReal x12484=(cj5*r10);
IkReal x12485=(r21*sj5);
IkReal x12486=((1.0)*cj2);
IkReal x12487=(cj5*r20);
IkReal x12488=((1.0)*x12481);
IkReal x12489=((1.0)*x12482);
IkReal x12490=(sj5*x12482);
IkReal x12491=(sj5*x12481);
evalcond[0]=(((r12*x12482))+(((-1.0)*x12484*x12488))+((r11*x12491)));
evalcond[1]=((((-1.0)*x12487*x12489))+((x12482*x12485))+(((-1.0)*r22*x12488)));
evalcond[2]=(((r01*x12490))+(((-1.0)*x12483*x12489))+(((-1.0)*r02*x12488)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12488))+(((-1.0)*x12484*x12489))+((r11*x12490)));
evalcond[4]=((((-1.0)*x12487*x12488))+((r22*x12482))+((sj1*sj2))+((x12481*x12485))+(((-1.0)*cj1*x12486)));
evalcond[5]=(((r01*x12491))+((r02*x12482))+(((-1.0)*x12483*x12488))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12492=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12492.valid){
continue;
}
CheckValue<IkReal> x12493 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12492.value)))+(x12493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12494=IKcos(j4);
IkReal x12495=IKsin(j4);
IkReal x12496=(cj5*r00);
IkReal x12497=(cj5*r10);
IkReal x12498=(r21*sj5);
IkReal x12499=((1.0)*cj2);
IkReal x12500=(cj5*r20);
IkReal x12501=((1.0)*x12494);
IkReal x12502=((1.0)*x12495);
IkReal x12503=(sj5*x12495);
IkReal x12504=(sj5*x12494);
evalcond[0]=(((r11*x12504))+(((-1.0)*x12497*x12501))+((r12*x12495)));
evalcond[1]=((((-1.0)*r22*x12501))+((x12495*x12498))+(((-1.0)*x12500*x12502)));
evalcond[2]=((((-1.0)*x12496*x12502))+(((-1.0)*r02*x12501))+((r01*x12503)));
evalcond[3]=((1.0)+((r11*x12503))+(((-1.0)*r12*x12501))+(((-1.0)*x12497*x12502)));
evalcond[4]=(((sj1*sj2))+((x12494*x12498))+(((-1.0)*x12500*x12501))+((r22*x12495))+(((-1.0)*cj1*x12499)));
evalcond[5]=((((-1.0)*x12496*x12501))+(((-1.0)*sj1*x12499))+((r01*x12504))+(((-1.0)*cj1*sj2))+((r02*x12495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12505=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12505;
j4eval[1]=IKsign(x12505);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12506=((1.0)*cj5);
IkReal x12507=((((-1.0)*r01*x12506))+(((-1.0)*r00*sj5)));
j4eval[0]=x12507;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12506))))));
j4eval[2]=IKsign(x12507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12508=cj5*cj5;
IkReal x12509=r11*r11;
IkReal x12510=(r11*sj5);
IkReal x12511=(cj5*r10);
IkReal x12512=((r12*r12)+(((-1.0)*x12508*x12509))+((x12508*(r10*r10)))+(((-2.0)*x12510*x12511))+x12509);
j4eval[0]=x12512;
j4eval[1]=IKsign(x12512);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12510))+x12511))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12513=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12513);
rxp1_1=(px*r21);
rxp1_2=(r11*x12513);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12514=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12514);
rxp1_1=(px*r21);
rxp1_2=(r11*x12514);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12515=((1.0)*sj1);
CheckValue<IkReal> x12516=IKPowWithIntegerCheck(r02,-1);
if(!x12516.valid){
continue;
}
CheckValue<IkReal> x12517=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12517.valid){
continue;
}
if( IKabs(((x12516.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12515)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12517.value)*(((((-1.0)*sj2*x12515))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12516.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12515))))))+IKsqr(((x12517.value)*(((((-1.0)*sj2*x12515))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12516.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12515))))), ((x12517.value)*(((((-1.0)*sj2*x12515))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12518=IKsin(j4);
IkReal x12519=IKcos(j4);
IkReal x12520=(cj5*r20);
IkReal x12521=((1.0)*cj2);
IkReal x12522=(cj5*r10);
IkReal x12523=((1.0)*x12518);
IkReal x12524=(sj5*x12518);
IkReal x12525=((1.0)*sj5*x12519);
evalcond[0]=((-1.0)*r02*x12519);
evalcond[1]=(((r21*x12524))+(((-1.0)*x12520*x12523)));
evalcond[2]=((((-1.0)*r11*x12525))+((x12519*x12522)));
evalcond[3]=((1.0)+(((-1.0)*x12522*x12523))+((r11*x12524)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12523))+(((-1.0)*sj1*x12521)));
evalcond[5]=((((-1.0)*cj1*x12521))+(((-1.0)*r21*x12525))+((sj1*sj2))+((x12519*x12520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12526=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12526.valid){
continue;
}
CheckValue<IkReal> x12527=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12527.valid){
continue;
}
if( IKabs(((-1.0)*(x12526.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12527.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12526.value)))+IKsqr(((x12527.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12526.value)), ((x12527.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12528=IKsin(j4);
IkReal x12529=IKcos(j4);
IkReal x12530=(cj5*r20);
IkReal x12531=((1.0)*cj2);
IkReal x12532=(cj5*r10);
IkReal x12533=((1.0)*x12528);
IkReal x12534=(sj5*x12528);
IkReal x12535=((1.0)*sj5*x12529);
evalcond[0]=((-1.0)*r02*x12529);
evalcond[1]=(((r21*x12534))+(((-1.0)*x12530*x12533)));
evalcond[2]=((((-1.0)*r11*x12535))+((x12529*x12532)));
evalcond[3]=((1.0)+((r11*x12534))+(((-1.0)*x12532*x12533)));
evalcond[4]=((((-1.0)*r02*x12533))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12531)));
evalcond[5]=((((-1.0)*r21*x12535))+((sj1*sj2))+(((-1.0)*cj1*x12531))+((x12529*x12530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12536=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12536);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12536);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12537=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12537);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12537);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12538=IKPowWithIntegerCheck(r22,-1);
if(!x12538.valid){
continue;
}
CheckValue<IkReal> x12539=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12539.valid){
continue;
}
if( IKabs(((x12538.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12539.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12538.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12539.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12538.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12539.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12540=IKsin(j4);
IkReal x12541=IKcos(j4);
IkReal x12542=((1.0)*cj2);
IkReal x12543=(cj5*x12541);
IkReal x12544=(sj5*x12540);
IkReal x12545=((1.0)*sj5*x12541);
IkReal x12546=((1.0)*cj5*x12540);
evalcond[0]=((-1.0)*r22*x12541);
evalcond[1]=(((r01*x12544))+(((-1.0)*r00*x12546)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12542))+(((-1.0)*r22*x12540)));
evalcond[3]=((((-1.0)*r11*x12545))+((r10*x12543)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12546))+((r11*x12544)));
evalcond[5]=(((r00*x12543))+(((-1.0)*r01*x12545))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12547=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12547.valid){
continue;
}
CheckValue<IkReal> x12548=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12548.valid){
continue;
}
if( IKabs(((-1.0)*(x12547.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12548.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12547.value)))+IKsqr(((x12548.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12547.value)), ((x12548.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12549=IKsin(j4);
IkReal x12550=IKcos(j4);
IkReal x12551=((1.0)*cj2);
IkReal x12552=(cj5*x12550);
IkReal x12553=(sj5*x12549);
IkReal x12554=((1.0)*sj5*x12550);
IkReal x12555=((1.0)*cj5*x12549);
evalcond[0]=((-1.0)*r22*x12550);
evalcond[1]=(((r01*x12553))+(((-1.0)*r00*x12555)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12551))+(((-1.0)*r22*x12549)));
evalcond[3]=(((r10*x12552))+(((-1.0)*r11*x12554)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12555))+((r11*x12553)));
evalcond[5]=(((r00*x12552))+(((-1.0)*r01*x12554))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12556=cj5*cj5;
IkReal x12557=r11*r11;
IkReal x12558=(cj5*r10);
IkReal x12559=(r11*sj5);
CheckValue<IkReal> x12560 = IKatan2WithCheck(IkReal(((((-1.0)*x12559))+x12558)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12560.valid){
continue;
}
CheckValue<IkReal> x12561=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x12556*(r10*r10)))+(((-1.0)*x12556*x12557))+x12557+(((-2.0)*x12558*x12559)))),-1);
if(!x12561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12560.value)+(((1.5707963267949)*(x12561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12562=IKsin(j4);
IkReal x12563=IKcos(j4);
IkReal x12564=(cj5*r10);
IkReal x12565=(r01*sj5);
IkReal x12566=((1.0)*cj2);
IkReal x12567=(cj5*r00);
IkReal x12568=(cj5*r20);
IkReal x12569=((1.0)*x12563);
IkReal x12570=((1.0)*x12562);
IkReal x12571=(sj5*x12562);
evalcond[0]=((((-1.0)*r22*x12569))+((r21*x12571))+(((-1.0)*x12568*x12570)));
evalcond[1]=((((-1.0)*r02*x12569))+((x12562*x12565))+(((-1.0)*x12567*x12570)));
evalcond[2]=(((x12563*x12564))+(((-1.0)*r12*x12570))+(((-1.0)*r11*sj5*x12569)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12569))+(((-1.0)*x12564*x12570))+((r11*x12571)));
evalcond[4]=(((x12563*x12568))+((sj1*sj2))+(((-1.0)*r21*sj5*x12569))+(((-1.0)*cj1*x12566))+(((-1.0)*r22*x12570)));
evalcond[5]=(((x12563*x12567))+(((-1.0)*x12565*x12569))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12570))+(((-1.0)*sj1*x12566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12572=((1.0)*cj5);
CheckValue<IkReal> x12573=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12572)))),-1);
if(!x12573.valid){
continue;
}
CheckValue<IkReal> x12574 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12572))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12573.value)))+(x12574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12575=IKsin(j4);
IkReal x12576=IKcos(j4);
IkReal x12577=(cj5*r10);
IkReal x12578=(r01*sj5);
IkReal x12579=((1.0)*cj2);
IkReal x12580=(cj5*r00);
IkReal x12581=(cj5*r20);
IkReal x12582=((1.0)*x12576);
IkReal x12583=((1.0)*x12575);
IkReal x12584=(sj5*x12575);
evalcond[0]=((((-1.0)*r22*x12582))+((r21*x12584))+(((-1.0)*x12581*x12583)));
evalcond[1]=((((-1.0)*x12580*x12583))+((x12575*x12578))+(((-1.0)*r02*x12582)));
evalcond[2]=((((-1.0)*r12*x12583))+(((-1.0)*r11*sj5*x12582))+((x12576*x12577)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12582))+(((-1.0)*x12577*x12583))+((r11*x12584)));
evalcond[4]=(((x12576*x12581))+(((-1.0)*r21*sj5*x12582))+((sj1*sj2))+(((-1.0)*r22*x12583))+(((-1.0)*cj1*x12579)));
evalcond[5]=(((x12576*x12580))+(((-1.0)*x12578*x12582))+(((-1.0)*sj1*x12579))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12585=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12585.valid){
continue;
}
CheckValue<IkReal> x12586 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12585.value)))+(x12586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12587=IKsin(j4);
IkReal x12588=IKcos(j4);
IkReal x12589=(cj5*r10);
IkReal x12590=(r01*sj5);
IkReal x12591=((1.0)*cj2);
IkReal x12592=(cj5*r00);
IkReal x12593=(cj5*r20);
IkReal x12594=((1.0)*x12588);
IkReal x12595=((1.0)*x12587);
IkReal x12596=(sj5*x12587);
evalcond[0]=((((-1.0)*r22*x12594))+((r21*x12596))+(((-1.0)*x12593*x12595)));
evalcond[1]=(((x12587*x12590))+(((-1.0)*r02*x12594))+(((-1.0)*x12592*x12595)));
evalcond[2]=((((-1.0)*r12*x12595))+(((-1.0)*r11*sj5*x12594))+((x12588*x12589)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12594))+(((-1.0)*x12589*x12595))+((r11*x12596)));
evalcond[4]=((((-1.0)*r21*sj5*x12594))+(((-1.0)*r22*x12595))+((sj1*sj2))+((x12588*x12593))+(((-1.0)*cj1*x12591)));
evalcond[5]=((((-1.0)*x12590*x12594))+(((-1.0)*sj1*x12591))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12595))+((x12588*x12592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12597=((-1.0)*r00);
IkReal x12599 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12599)==0){
continue;
}
IkReal x12598=pow(x12599,-0.5);
CheckValue<IkReal> x12600 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12597),IKFAST_ATAN2_MAGTHRESH);
if(!x12600.valid){
continue;
}
IkReal gconst18=((-1.0)*(x12600.value));
IkReal gconst19=(r01*x12598);
IkReal gconst20=(x12597*x12598);
CheckValue<IkReal> x12601 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12601.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12601.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12602=((-1.0)*r00);
IkReal x12603=x12598;
CheckValue<IkReal> x12605 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12602),IKFAST_ATAN2_MAGTHRESH);
if(!x12605.valid){
continue;
}
IkReal x12604=((-1.0)*(x12605.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x12604;
IkReal gconst18=x12604;
IkReal gconst19=(r01*x12603);
IkReal gconst20=(x12602*x12603);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12606=gconst19*gconst19;
IkReal x12607=gconst20*gconst20;
IkReal x12608=(gconst20*sj3);
IkReal x12609=((1.0)*cj3);
IkReal x12610=(r10*sj3);
IkReal x12611=(gconst19*r21);
IkReal x12612=(r11*r20);
IkReal x12613=(cj3*gconst20);
IkReal x12614=((1.0)*r10*r20);
IkReal x12615=(r21*x12606);
CheckValue<IkReal> x12616 = IKatan2WithCheck(IkReal((((r11*r22*x12608))+((gconst19*r22*x12610)))),IkReal((((r11*x12608*x12611))+(((-1.0)*sj3*x12607*x12612))+(((-1.0)*gconst19*x12608*x12614))+((x12610*x12615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12616.valid){
continue;
}
CheckValue<IkReal> x12617=IKPowWithIntegerCheck(IKsign((((r10*x12611*x12613))+((gconst19*x12612*x12613))+(((-1.0)*r10*r20*x12607*x12609))+(((-1.0)*r12*r22*x12609))+(((-1.0)*r11*x12609*x12615)))),-1);
if(!x12617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12616.value)+(((1.5707963267949)*(x12617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12618=IKsin(j4);
IkReal x12619=IKcos(j4);
IkReal x12620=(gconst20*sj3);
IkReal x12621=(gconst19*r21);
IkReal x12622=((1.0)*gconst20);
IkReal x12623=(sj1*sj2);
IkReal x12624=(cj3*r00);
IkReal x12625=(cj3*gconst19);
IkReal x12626=(gconst19*sj3);
IkReal x12627=((1.0)*cj1);
IkReal x12628=(cj3*gconst20);
IkReal x12629=(sj2*x12627);
IkReal x12630=((1.0)*cj2*sj1);
IkReal x12631=((1.0)*x12619);
IkReal x12632=(cj3*x12618);
IkReal x12633=(r11*x12619);
IkReal x12634=(sj3*x12618);
IkReal x12635=(r01*x12619);
IkReal x12636=(gconst19*x12618);
IkReal x12637=(x12630+x12629);
evalcond[0]=((((-1.0)*r20*x12618*x12622))+((x12618*x12621))+(((-1.0)*r22*x12631)));
evalcond[1]=((((-1.0)*r00*x12618*x12622))+((r01*x12636))+(((-1.0)*r02*x12631)));
evalcond[2]=((1.0)+((r11*x12636))+(((-1.0)*r10*x12618*x12622))+(((-1.0)*r12*x12631)));
evalcond[3]=(((r12*x12632))+((x12625*x12633))+(((-1.0)*cj3*r10*x12619*x12622))+((r10*x12626))+((r11*x12620)));
evalcond[4]=((((-1.0)*r10*x12625))+(((-1.0)*r10*x12620*x12631))+((r12*x12634))+((x12626*x12633))+(((-1.0)*cj3*r11*x12622)));
evalcond[5]=(((x12625*x12635))+(((-1.0)*x12623))+((r01*x12620))+((r02*x12632))+((r00*x12626))+((cj1*cj2))+(((-1.0)*x12619*x12622*x12624)));
evalcond[6]=((((-1.0)*cj3*r20*x12619*x12622))+((cj3*x12619*x12621))+((r21*x12620))+(((-1.0)*x12637))+((r22*x12632))+((r20*x12626)));
evalcond[7]=((((-1.0)*cj2*x12627))+((sj3*x12619*x12621))+(((-1.0)*cj3*r21*x12622))+(((-1.0)*r20*x12620*x12631))+x12623+(((-1.0)*r20*x12625))+((r22*x12634)));
evalcond[8]=((((-1.0)*r00*x12620*x12631))+((x12626*x12635))+(((-1.0)*cj3*r01*x12622))+(((-1.0)*gconst19*x12624))+((r02*x12634))+(((-1.0)*x12637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12638 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12638.valid){
continue;
}
CheckValue<IkReal> x12639=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12638.value)+(((1.5707963267949)*(x12639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12640=IKsin(j4);
IkReal x12641=IKcos(j4);
IkReal x12642=(gconst20*sj3);
IkReal x12643=(gconst19*r21);
IkReal x12644=((1.0)*gconst20);
IkReal x12645=(sj1*sj2);
IkReal x12646=(cj3*r00);
IkReal x12647=(cj3*gconst19);
IkReal x12648=(gconst19*sj3);
IkReal x12649=((1.0)*cj1);
IkReal x12650=(cj3*gconst20);
IkReal x12651=(sj2*x12649);
IkReal x12652=((1.0)*cj2*sj1);
IkReal x12653=((1.0)*x12641);
IkReal x12654=(cj3*x12640);
IkReal x12655=(r11*x12641);
IkReal x12656=(sj3*x12640);
IkReal x12657=(r01*x12641);
IkReal x12658=(gconst19*x12640);
IkReal x12659=(x12651+x12652);
evalcond[0]=((((-1.0)*r20*x12640*x12644))+((x12640*x12643))+(((-1.0)*r22*x12653)));
evalcond[1]=((((-1.0)*r00*x12640*x12644))+(((-1.0)*r02*x12653))+((r01*x12658)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12640*x12644))+((r11*x12658))+(((-1.0)*r12*x12653)));
evalcond[3]=((((-1.0)*cj3*r10*x12641*x12644))+((r12*x12654))+((x12647*x12655))+((r10*x12648))+((r11*x12642)));
evalcond[4]=((((-1.0)*r10*x12642*x12653))+(((-1.0)*r10*x12647))+((x12648*x12655))+((r12*x12656))+(((-1.0)*cj3*r11*x12644)));
evalcond[5]=((((-1.0)*x12645))+((r02*x12654))+((r00*x12648))+((r01*x12642))+(((-1.0)*x12641*x12644*x12646))+((x12647*x12657))+((cj1*cj2)));
evalcond[6]=((((-1.0)*x12659))+((r22*x12654))+((r20*x12648))+(((-1.0)*cj3*r20*x12641*x12644))+((r21*x12642))+((cj3*x12641*x12643)));
evalcond[7]=(((r22*x12656))+((sj3*x12641*x12643))+(((-1.0)*cj2*x12649))+(((-1.0)*r20*x12642*x12653))+x12645+(((-1.0)*r20*x12647))+(((-1.0)*cj3*r21*x12644)));
evalcond[8]=((((-1.0)*x12659))+((r02*x12656))+(((-1.0)*r00*x12642*x12653))+((x12648*x12657))+(((-1.0)*cj3*r01*x12644))+(((-1.0)*gconst19*x12646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12660=((-1.0)*r01);
IkReal x12662 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12662)==0){
continue;
}
IkReal x12661=pow(x12662,-0.5);
CheckValue<IkReal> x12663 = IKatan2WithCheck(IkReal(x12660),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12663.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x12663.value))));
IkReal gconst22=(x12660*x12661);
IkReal gconst23=((1.0)*r00*x12661);
CheckValue<IkReal> x12664 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12664.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12664.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12665=((-1.0)*r01);
CheckValue<IkReal> x12668 = IKatan2WithCheck(IkReal(x12665),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12668.valid){
continue;
}
IkReal x12666=((1.0)*(x12668.value));
IkReal x12667=x12661;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12666)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12666)));
IkReal gconst22=(x12665*x12667);
IkReal gconst23=((1.0)*r00*x12667);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12669=((-1.0)*r01);
CheckValue<IkReal> x12672 = IKatan2WithCheck(IkReal(x12669),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12672.valid){
continue;
}
IkReal x12670=((1.0)*(x12672.value));
IkReal x12671=x12661;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12670)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12670)));
IkReal gconst22=(x12669*x12671);
IkReal gconst23=((1.0)*r00*x12671);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12673=gconst22*gconst22;
IkReal x12674=gconst23*gconst23;
IkReal x12675=(r21*sj3);
IkReal x12676=((1.0)*cj3);
IkReal x12677=(gconst23*r11);
IkReal x12678=(r22*sj3);
IkReal x12679=(gconst22*r10);
IkReal x12680=((1.0)*r20*sj3);
CheckValue<IkReal> x12681=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r21*x12673*x12676))+(((-1.0)*r10*r20*x12674*x12676))+(((-1.0)*r12*r22*x12676))+((cj3*gconst23*r21*x12679))+((cj3*gconst22*r20*x12677)))),-1);
if(!x12681.valid){
continue;
}
CheckValue<IkReal> x12682 = IKatan2WithCheck(IkReal((((x12677*x12678))+((x12678*x12679)))),IkReal((((gconst22*x12675*x12677))+((r10*x12673*x12675))+(((-1.0)*r11*x12674*x12680))+(((-1.0)*gconst23*x12679*x12680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12681.value)))+(x12682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12683=IKsin(j4);
IkReal x12684=IKcos(j4);
IkReal x12685=(cj3*gconst22);
IkReal x12686=(gconst23*sj3);
IkReal x12687=(sj1*sj2);
IkReal x12688=(gconst22*sj3);
IkReal x12689=((1.0)*r10);
IkReal x12690=((1.0)*cj2);
IkReal x12691=((1.0)*r20);
IkReal x12692=(cj3*gconst23);
IkReal x12693=((1.0)*r00);
IkReal x12694=((1.0)*cj1*sj2);
IkReal x12695=(sj1*x12690);
IkReal x12696=((1.0)*x12684);
IkReal x12697=(r21*x12684);
IkReal x12698=(cj3*x12683);
IkReal x12699=(sj3*x12683);
IkReal x12700=((1.0)*x12692);
IkReal x12701=(r01*x12684);
IkReal x12702=(gconst23*x12683);
IkReal x12703=(gconst22*x12683);
IkReal x12704=(r11*x12684);
IkReal x12705=(x12695+x12694);
evalcond[0]=((((-1.0)*r22*x12696))+(((-1.0)*x12691*x12702))+((r21*x12703)));
evalcond[1]=((((-1.0)*r02*x12696))+((r01*x12703))+(((-1.0)*x12693*x12702)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12696))+((r11*x12703))+(((-1.0)*x12689*x12702)));
evalcond[3]=(((x12685*x12704))+(((-1.0)*x12684*x12689*x12692))+((r11*x12686))+((r10*x12688))+((r12*x12698)));
evalcond[4]=((((-1.0)*r11*x12700))+((r12*x12699))+(((-1.0)*x12684*x12686*x12689))+(((-1.0)*x12685*x12689))+((x12688*x12704)));
evalcond[5]=(((r00*x12688))+((r02*x12698))+((x12685*x12701))+((r01*x12686))+(((-1.0)*x12684*x12692*x12693))+((cj1*cj2))+(((-1.0)*x12687)));
evalcond[6]=(((r21*x12686))+((r22*x12698))+(((-1.0)*x12705))+((r20*x12688))+((x12685*x12697))+(((-1.0)*x12684*x12691*x12692)));
evalcond[7]=((((-1.0)*cj1*x12690))+(((-1.0)*x12684*x12686*x12691))+((r22*x12699))+(((-1.0)*r21*x12700))+x12687+(((-1.0)*x12685*x12691))+((x12688*x12697)));
evalcond[8]=((((-1.0)*r01*x12700))+((r02*x12699))+(((-1.0)*x12684*x12686*x12693))+(((-1.0)*x12705))+((x12688*x12701))+(((-1.0)*x12685*x12693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12706=((1.0)*gconst23);
CheckValue<IkReal> x12707 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x12706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12707.valid){
continue;
}
CheckValue<IkReal> x12708=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12706))+(((-1.0)*gconst22*r00)))),-1);
if(!x12708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12707.value)+(((1.5707963267949)*(x12708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12709=IKsin(j4);
IkReal x12710=IKcos(j4);
IkReal x12711=(cj3*gconst22);
IkReal x12712=(gconst23*sj3);
IkReal x12713=(sj1*sj2);
IkReal x12714=(gconst22*sj3);
IkReal x12715=((1.0)*r10);
IkReal x12716=((1.0)*cj2);
IkReal x12717=((1.0)*r20);
IkReal x12718=(cj3*gconst23);
IkReal x12719=((1.0)*r00);
IkReal x12720=((1.0)*cj1*sj2);
IkReal x12721=(sj1*x12716);
IkReal x12722=((1.0)*x12710);
IkReal x12723=(r21*x12710);
IkReal x12724=(cj3*x12709);
IkReal x12725=(sj3*x12709);
IkReal x12726=((1.0)*x12718);
IkReal x12727=(r01*x12710);
IkReal x12728=(gconst23*x12709);
IkReal x12729=(gconst22*x12709);
IkReal x12730=(r11*x12710);
IkReal x12731=(x12721+x12720);
evalcond[0]=(((r21*x12729))+(((-1.0)*r22*x12722))+(((-1.0)*x12717*x12728)));
evalcond[1]=((((-1.0)*r02*x12722))+(((-1.0)*x12719*x12728))+((r01*x12729)));
evalcond[2]=((1.0)+(((-1.0)*x12715*x12728))+((r11*x12729))+(((-1.0)*r12*x12722)));
evalcond[3]=(((r11*x12712))+((r12*x12724))+((r10*x12714))+((x12711*x12730))+(((-1.0)*x12710*x12715*x12718)));
evalcond[4]=((((-1.0)*x12710*x12712*x12715))+((x12714*x12730))+((r12*x12725))+(((-1.0)*r11*x12726))+(((-1.0)*x12711*x12715)));
evalcond[5]=((((-1.0)*x12713))+(((-1.0)*x12710*x12718*x12719))+((r02*x12724))+((r01*x12712))+((r00*x12714))+((cj1*cj2))+((x12711*x12727)));
evalcond[6]=(((r21*x12712))+(((-1.0)*x12731))+((r20*x12714))+((x12711*x12723))+((r22*x12724))+(((-1.0)*x12710*x12717*x12718)));
evalcond[7]=((((-1.0)*x12710*x12712*x12717))+((x12714*x12723))+x12713+(((-1.0)*r21*x12726))+(((-1.0)*cj1*x12716))+((r22*x12725))+(((-1.0)*x12711*x12717)));
evalcond[8]=((((-1.0)*x12710*x12712*x12719))+((r02*x12725))+(((-1.0)*r01*x12726))+(((-1.0)*x12731))+((x12714*x12727))+(((-1.0)*x12711*x12719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12732=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x12732.valid){
continue;
}
CheckValue<IkReal> x12733 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12732.value)))+(x12733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12734=IKsin(j4);
IkReal x12735=IKcos(j4);
IkReal x12736=(cj3*gconst22);
IkReal x12737=(gconst23*sj3);
IkReal x12738=(sj1*sj2);
IkReal x12739=(gconst22*sj3);
IkReal x12740=((1.0)*r10);
IkReal x12741=((1.0)*cj2);
IkReal x12742=((1.0)*r20);
IkReal x12743=(cj3*gconst23);
IkReal x12744=((1.0)*r00);
IkReal x12745=((1.0)*cj1*sj2);
IkReal x12746=(sj1*x12741);
IkReal x12747=((1.0)*x12735);
IkReal x12748=(r21*x12735);
IkReal x12749=(cj3*x12734);
IkReal x12750=(sj3*x12734);
IkReal x12751=((1.0)*x12743);
IkReal x12752=(r01*x12735);
IkReal x12753=(gconst23*x12734);
IkReal x12754=(gconst22*x12734);
IkReal x12755=(r11*x12735);
IkReal x12756=(x12746+x12745);
evalcond[0]=((((-1.0)*r22*x12747))+(((-1.0)*x12742*x12753))+((r21*x12754)));
evalcond[1]=((((-1.0)*r02*x12747))+(((-1.0)*x12744*x12753))+((r01*x12754)));
evalcond[2]=((1.0)+((r11*x12754))+(((-1.0)*r12*x12747))+(((-1.0)*x12740*x12753)));
evalcond[3]=(((r11*x12737))+(((-1.0)*x12735*x12740*x12743))+((r10*x12739))+((x12736*x12755))+((r12*x12749)));
evalcond[4]=((((-1.0)*r11*x12751))+(((-1.0)*x12735*x12737*x12740))+((x12739*x12755))+((r12*x12750))+(((-1.0)*x12736*x12740)));
evalcond[5]=((((-1.0)*x12738))+(((-1.0)*x12735*x12743*x12744))+((r02*x12749))+((r00*x12739))+((r01*x12737))+((cj1*cj2))+((x12736*x12752)));
evalcond[6]=((((-1.0)*x12735*x12742*x12743))+((r21*x12737))+((r22*x12749))+((r20*x12739))+(((-1.0)*x12756))+((x12736*x12748)));
evalcond[7]=(((r22*x12750))+(((-1.0)*x12735*x12737*x12742))+x12738+(((-1.0)*r21*x12751))+((x12739*x12748))+(((-1.0)*cj1*x12741))+(((-1.0)*x12736*x12742)));
evalcond[8]=((((-1.0)*x12756))+((r02*x12750))+(((-1.0)*x12735*x12737*x12744))+((x12739*x12752))+(((-1.0)*r01*x12751))+(((-1.0)*x12736*x12744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12758 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12758)==0){
continue;
}
IkReal x12757=pow(x12758,-0.5);
CheckValue<IkReal> x12759 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12759.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12759.value));
IkReal gconst25=((-1.0)*r21*x12757);
IkReal gconst26=(r20*x12757);
CheckValue<IkReal> x12760 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12760.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12760.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12763 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12763.valid){
continue;
}
IkReal x12761=((-1.0)*(x12763.value));
IkReal x12762=x12757;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x12761;
IkReal gconst24=x12761;
IkReal gconst25=((-1.0)*r21*x12762);
IkReal gconst26=(r20*x12762);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12764=gconst25*gconst25;
IkReal x12765=gconst26*gconst26;
IkReal x12766=(r00*r11);
IkReal x12767=(r01*r10);
IkReal x12768=(r02*sj3);
IkReal x12769=(gconst25*r10);
IkReal x12770=(gconst26*r11);
IkReal x12771=((1.0)*sj3);
IkReal x12772=((1.0)*cj3);
IkReal x12773=(cj3*gconst25*gconst26);
CheckValue<IkReal> x12774=IKPowWithIntegerCheck(IKsign((((x12767*x12773))+(((-1.0)*r02*r12*x12772))+(((-1.0)*r01*r11*x12764*x12772))+(((-1.0)*r00*r10*x12765*x12772))+((x12766*x12773)))),-1);
if(!x12774.valid){
continue;
}
CheckValue<IkReal> x12775 = IKatan2WithCheck(IkReal((((x12768*x12769))+((x12768*x12770)))),IkReal((((gconst25*r01*sj3*x12770))+(((-1.0)*x12765*x12766*x12771))+(((-1.0)*gconst26*r00*x12769*x12771))+((sj3*x12764*x12767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12774.value)))+(x12775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12776=IKsin(j4);
IkReal x12777=IKcos(j4);
IkReal x12778=(gconst26*sj3);
IkReal x12779=(cj3*gconst26);
IkReal x12780=(gconst25*sj3);
IkReal x12781=(gconst25*r11);
IkReal x12782=(sj1*sj2);
IkReal x12783=(cj3*gconst25);
IkReal x12784=((1.0)*cj1);
IkReal x12785=(sj2*x12784);
IkReal x12786=((1.0)*cj2*sj1);
IkReal x12787=((1.0)*x12777);
IkReal x12788=(cj3*x12776);
IkReal x12789=(sj3*x12776);
IkReal x12790=(r21*x12777);
IkReal x12791=(r01*x12777);
IkReal x12792=(gconst25*x12776);
IkReal x12793=((1.0)*gconst26*x12776);
IkReal x12794=(x12786+x12785);
evalcond[0]=((((-1.0)*r20*x12793))+(((-1.0)*r22*x12787))+((r21*x12792)));
evalcond[1]=(((r01*x12792))+(((-1.0)*r00*x12793))+(((-1.0)*r02*x12787)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12793))+((x12776*x12781))+(((-1.0)*r12*x12787)));
evalcond[3]=(((cj3*x12777*x12781))+((r10*x12780))+((r12*x12788))+((r11*x12778))+(((-1.0)*r10*x12779*x12787)));
evalcond[4]=((((-1.0)*r10*x12783))+(((-1.0)*r10*x12778*x12787))+((r11*x12777*x12780))+((r12*x12789))+(((-1.0)*r11*x12779)));
evalcond[5]=(((r01*x12778))+((r00*x12780))+(((-1.0)*r00*x12779*x12787))+((cj1*cj2))+((r02*x12788))+(((-1.0)*x12782))+((x12783*x12791)));
evalcond[6]=(((r20*x12780))+(((-1.0)*x12794))+((r21*x12778))+(((-1.0)*r20*x12779*x12787))+((r22*x12788))+((x12783*x12790)));
evalcond[7]=((((-1.0)*cj2*x12784))+((x12780*x12790))+(((-1.0)*r21*x12779))+(((-1.0)*r20*x12783))+x12782+((r22*x12789))+(((-1.0)*r20*x12778*x12787)));
evalcond[8]=((((-1.0)*x12794))+(((-1.0)*r00*x12778*x12787))+(((-1.0)*r00*x12783))+((x12780*x12791))+((r02*x12789))+(((-1.0)*r01*x12779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12795=((1.0)*gconst26);
CheckValue<IkReal> x12796 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12795))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12796.valid){
continue;
}
CheckValue<IkReal> x12797=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12795))+(((-1.0)*gconst25*r00)))),-1);
if(!x12797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12796.value)+(((1.5707963267949)*(x12797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12798=IKsin(j4);
IkReal x12799=IKcos(j4);
IkReal x12800=(gconst26*sj3);
IkReal x12801=(cj3*gconst26);
IkReal x12802=(gconst25*sj3);
IkReal x12803=(gconst25*r11);
IkReal x12804=(sj1*sj2);
IkReal x12805=(cj3*gconst25);
IkReal x12806=((1.0)*cj1);
IkReal x12807=(sj2*x12806);
IkReal x12808=((1.0)*cj2*sj1);
IkReal x12809=((1.0)*x12799);
IkReal x12810=(cj3*x12798);
IkReal x12811=(sj3*x12798);
IkReal x12812=(r21*x12799);
IkReal x12813=(r01*x12799);
IkReal x12814=(gconst25*x12798);
IkReal x12815=((1.0)*gconst26*x12798);
IkReal x12816=(x12807+x12808);
evalcond[0]=((((-1.0)*r20*x12815))+((r21*x12814))+(((-1.0)*r22*x12809)));
evalcond[1]=(((r01*x12814))+(((-1.0)*r02*x12809))+(((-1.0)*r00*x12815)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12815))+((x12798*x12803))+(((-1.0)*r12*x12809)));
evalcond[3]=(((r10*x12802))+(((-1.0)*r10*x12801*x12809))+((r12*x12810))+((r11*x12800))+((cj3*x12799*x12803)));
evalcond[4]=(((r11*x12799*x12802))+(((-1.0)*r10*x12800*x12809))+((r12*x12811))+(((-1.0)*r10*x12805))+(((-1.0)*r11*x12801)));
evalcond[5]=(((r02*x12810))+((r01*x12800))+((r00*x12802))+(((-1.0)*x12804))+(((-1.0)*r00*x12801*x12809))+((cj1*cj2))+((x12805*x12813)));
evalcond[6]=(((r20*x12802))+(((-1.0)*x12816))+((r21*x12800))+(((-1.0)*r20*x12801*x12809))+((x12805*x12812))+((r22*x12810)));
evalcond[7]=(x12804+(((-1.0)*r21*x12801))+(((-1.0)*r20*x12805))+((x12802*x12812))+(((-1.0)*cj2*x12806))+(((-1.0)*r20*x12800*x12809))+((r22*x12811)));
evalcond[8]=(((r02*x12811))+(((-1.0)*x12816))+((x12802*x12813))+(((-1.0)*r00*x12800*x12809))+(((-1.0)*r01*x12801))+(((-1.0)*r00*x12805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12818 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12818)==0){
continue;
}
IkReal x12817=pow(x12818,-0.5);
CheckValue<IkReal> x12819 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12819.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12819.value))));
IkReal gconst28=((1.0)*r21*x12817);
IkReal gconst29=((-1.0)*r20*x12817);
CheckValue<IkReal> x12820 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12820.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12820.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12823 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12823.valid){
continue;
}
IkReal x12821=((1.0)*(x12823.value));
IkReal x12822=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12821)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12821)));
IkReal gconst28=((1.0)*r21*x12822);
IkReal gconst29=((-1.0)*r20*x12822);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12826 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12826.valid){
continue;
}
IkReal x12824=((1.0)*(x12826.value));
IkReal x12825=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12824)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12824)));
IkReal gconst28=((1.0)*r21*x12825);
IkReal gconst29=((-1.0)*r20*x12825);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12829 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12829.valid){
continue;
}
IkReal x12827=((1.0)*(x12829.value));
IkReal x12828=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12827)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12827)));
IkReal gconst28=((1.0)*r21*x12828);
IkReal gconst29=((-1.0)*r20*x12828);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12832 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12832.valid){
continue;
}
IkReal x12830=((1.0)*(x12832.value));
IkReal x12831=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12830)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12830)));
IkReal gconst28=((1.0)*r21*x12831);
IkReal gconst29=((-1.0)*r20*x12831);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12835 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12835.valid){
continue;
}
IkReal x12833=((1.0)*(x12835.value));
IkReal x12834=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12833)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12833)));
IkReal gconst28=((1.0)*r21*x12834);
IkReal gconst29=((-1.0)*r20*x12834);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12838 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12838.valid){
continue;
}
IkReal x12836=((1.0)*(x12838.value));
IkReal x12837=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12836)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12836)));
IkReal gconst28=((1.0)*r21*x12837);
IkReal gconst29=((-1.0)*r20*x12837);
IkReal x12839=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x12843=IKPowWithIntegerCheck(x12839,-1);
if(!x12843.valid){
continue;
}
IkReal x12840=x12843.value;
IkReal x12841=((1.0)*x12840);
IkReal x12842=((((-1.0)*x12841*(r10*r10)*(r20*r20)))+(((-1.0)*x12841*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x12840)));
j4eval[0]=x12842;
j4eval[1]=r12;
j4eval[2]=x12839;
j4eval[3]=IKsign(x12842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12844=(gconst28*r11);
IkReal x12845=(gconst29*r10);
CheckValue<IkReal> x12846 = IKatan2WithCheck(IkReal((x12844+(((-1.0)*x12845)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12846.valid){
continue;
}
CheckValue<IkReal> x12847=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12844*x12844)))+(((-1.0)*(x12845*x12845)))+(((-1.0)*(r12*r12)))+(((2.0)*x12844*x12845)))),-1);
if(!x12847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12846.value)+(((1.5707963267949)*(x12847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12848=IKcos(j4);
IkReal x12849=IKsin(j4);
IkReal x12850=(gconst29*r10);
IkReal x12851=(gconst29*r20);
IkReal x12852=(gconst28*r21);
IkReal x12853=((1.0)*cj2);
IkReal x12854=(gconst29*r00);
IkReal x12855=((1.0)*x12848);
IkReal x12856=((1.0)*x12849);
IkReal x12857=(gconst28*x12848);
IkReal x12858=(gconst28*x12849);
evalcond[0]=((((-1.0)*x12850*x12855))+((r11*x12857))+((r12*x12849)));
evalcond[1]=((((-1.0)*x12851*x12856))+(((-1.0)*r22*x12855))+((x12849*x12852)));
evalcond[2]=((((-1.0)*x12854*x12856))+(((-1.0)*r02*x12855))+((r01*x12858)));
evalcond[3]=((1.0)+(((-1.0)*x12850*x12856))+(((-1.0)*r12*x12855))+((r11*x12858)));
evalcond[4]=((((-1.0)*x12851*x12855))+((r22*x12849))+(((-1.0)*cj1*x12853))+((sj1*sj2))+((x12848*x12852)));
evalcond[5]=((((-1.0)*x12854*x12855))+((r01*x12857))+(((-1.0)*cj1*sj2))+((r02*x12849))+(((-1.0)*sj1*x12853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12859=((1.0)*gconst29);
CheckValue<IkReal> x12860=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x12859)))),-1);
if(!x12860.valid){
continue;
}
CheckValue<IkReal> x12861 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12859))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12860.value)))+(x12861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12862=IKcos(j4);
IkReal x12863=IKsin(j4);
IkReal x12864=(gconst29*r10);
IkReal x12865=(gconst29*r20);
IkReal x12866=(gconst28*r21);
IkReal x12867=((1.0)*cj2);
IkReal x12868=(gconst29*r00);
IkReal x12869=((1.0)*x12862);
IkReal x12870=((1.0)*x12863);
IkReal x12871=(gconst28*x12862);
IkReal x12872=(gconst28*x12863);
evalcond[0]=(((r12*x12863))+(((-1.0)*x12864*x12869))+((r11*x12871)));
evalcond[1]=((((-1.0)*r22*x12869))+((x12863*x12866))+(((-1.0)*x12865*x12870)));
evalcond[2]=(((r01*x12872))+(((-1.0)*x12868*x12870))+(((-1.0)*r02*x12869)));
evalcond[3]=((1.0)+(((-1.0)*x12864*x12870))+((r11*x12872))+(((-1.0)*r12*x12869)));
evalcond[4]=((((-1.0)*x12865*x12869))+((sj1*sj2))+((r22*x12863))+((x12862*x12866))+(((-1.0)*cj1*x12867)));
evalcond[5]=((((-1.0)*sj1*x12867))+((r01*x12871))+(((-1.0)*cj1*sj2))+(((-1.0)*x12868*x12869))+((r02*x12863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12873=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x12873.valid){
continue;
}
CheckValue<IkReal> x12874 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12873.value)))+(x12874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12875=IKcos(j4);
IkReal x12876=IKsin(j4);
IkReal x12877=(gconst29*r10);
IkReal x12878=(gconst29*r20);
IkReal x12879=(gconst28*r21);
IkReal x12880=((1.0)*cj2);
IkReal x12881=(gconst29*r00);
IkReal x12882=((1.0)*x12875);
IkReal x12883=((1.0)*x12876);
IkReal x12884=(gconst28*x12875);
IkReal x12885=(gconst28*x12876);
evalcond[0]=((((-1.0)*x12877*x12882))+((r12*x12876))+((r11*x12884)));
evalcond[1]=((((-1.0)*r22*x12882))+(((-1.0)*x12878*x12883))+((x12876*x12879)));
evalcond[2]=((((-1.0)*r02*x12882))+((r01*x12885))+(((-1.0)*x12881*x12883)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12882))+(((-1.0)*x12877*x12883))+((r11*x12885)));
evalcond[4]=(((r22*x12876))+(((-1.0)*x12878*x12882))+((sj1*sj2))+(((-1.0)*cj1*x12880))+((x12875*x12879)));
evalcond[5]=((((-1.0)*sj1*x12880))+(((-1.0)*cj1*sj2))+((r01*x12884))+((r02*x12876))+(((-1.0)*x12881*x12882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12888 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12888.valid){
continue;
}
IkReal x12886=((1.0)*(x12888.value));
IkReal x12887=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12886)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12886)));
IkReal gconst28=((1.0)*r21*x12887);
IkReal gconst29=((-1.0)*r20*x12887);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12891 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12891.valid){
continue;
}
IkReal x12889=((1.0)*(x12891.value));
IkReal x12890=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12889)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12889)));
IkReal gconst28=((1.0)*r21*x12890);
IkReal gconst29=((-1.0)*r20*x12890);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x12894 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12894.valid){
continue;
}
IkReal x12892=((1.0)*(x12894.value));
IkReal x12893=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12892)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12892)));
IkReal gconst28=((1.0)*r21*x12893);
IkReal gconst29=((-1.0)*r20*x12893);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12895=(gconst29*r10);
IkReal x12896=(gconst28*r11);
CheckValue<IkReal> x12897=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12896*x12896)+(x12895*x12895)+(((-2.0)*x12895*x12896)))),-1);
if(!x12897.valid){
continue;
}
CheckValue<IkReal> x12898 = IKatan2WithCheck(IkReal(((((-1.0)*x12896))+x12895)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12897.value)))+(x12898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12899=IKsin(j4);
IkReal x12900=IKcos(j4);
IkReal x12901=(gconst28*r11);
IkReal x12902=((1.0)*cj2);
IkReal x12903=((1.0)*x12900);
IkReal x12904=(gconst29*x12900);
IkReal x12905=(gconst28*x12899);
IkReal x12906=((1.0)*x12899);
IkReal x12907=(gconst29*x12906);
evalcond[0]=((((-1.0)*r20*x12907))+((r21*x12905))+(((-1.0)*r22*x12903)));
evalcond[1]=((((-1.0)*r00*x12907))+((r01*x12905))+(((-1.0)*r02*x12903)));
evalcond[2]=((((-1.0)*x12901*x12903))+(((-1.0)*r12*x12906))+((r10*x12904)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12907))+((x12899*x12901))+(((-1.0)*r12*x12903)));
evalcond[4]=(((sj1*sj2))+((r20*x12904))+(((-1.0)*r22*x12906))+(((-1.0)*cj1*x12902))+(((-1.0)*gconst28*r21*x12903)));
evalcond[5]=(((r00*x12904))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12906))+(((-1.0)*sj1*x12902))+(((-1.0)*gconst28*r01*x12903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12908=((1.0)*gconst29);
CheckValue<IkReal> x12909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12908))+(((-1.0)*gconst28*r00)))),-1);
if(!x12909.valid){
continue;
}
CheckValue<IkReal> x12910 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12908))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12909.value)))+(x12910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12911=IKsin(j4);
IkReal x12912=IKcos(j4);
IkReal x12913=(gconst28*r11);
IkReal x12914=((1.0)*cj2);
IkReal x12915=((1.0)*x12912);
IkReal x12916=(gconst29*x12912);
IkReal x12917=(gconst28*x12911);
IkReal x12918=((1.0)*x12911);
IkReal x12919=(gconst29*x12918);
evalcond[0]=((((-1.0)*r20*x12919))+((r21*x12917))+(((-1.0)*r22*x12915)));
evalcond[1]=((((-1.0)*r00*x12919))+(((-1.0)*r02*x12915))+((r01*x12917)));
evalcond[2]=((((-1.0)*r12*x12918))+(((-1.0)*x12913*x12915))+((r10*x12916)));
evalcond[3]=((1.0)+((x12911*x12913))+(((-1.0)*r10*x12919))+(((-1.0)*r12*x12915)));
evalcond[4]=(((sj1*sj2))+((r20*x12916))+(((-1.0)*r22*x12918))+(((-1.0)*gconst28*r21*x12915))+(((-1.0)*cj1*x12914)));
evalcond[5]=(((r00*x12916))+(((-1.0)*r02*x12918))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12914))+(((-1.0)*gconst28*r01*x12915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12920=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x12920.valid){
continue;
}
CheckValue<IkReal> x12921 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12920.value)))+(x12921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12922=IKsin(j4);
IkReal x12923=IKcos(j4);
IkReal x12924=(gconst28*r11);
IkReal x12925=((1.0)*cj2);
IkReal x12926=((1.0)*x12923);
IkReal x12927=(gconst29*x12923);
IkReal x12928=(gconst28*x12922);
IkReal x12929=((1.0)*x12922);
IkReal x12930=(gconst29*x12929);
evalcond[0]=((((-1.0)*r20*x12930))+((r21*x12928))+(((-1.0)*r22*x12926)));
evalcond[1]=((((-1.0)*r02*x12926))+((r01*x12928))+(((-1.0)*r00*x12930)));
evalcond[2]=((((-1.0)*r12*x12929))+((r10*x12927))+(((-1.0)*x12924*x12926)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12926))+(((-1.0)*r10*x12930))+((x12922*x12924)));
evalcond[4]=(((r20*x12927))+(((-1.0)*gconst28*r21*x12926))+((sj1*sj2))+(((-1.0)*cj1*x12925))+(((-1.0)*r22*x12929)));
evalcond[5]=((((-1.0)*r02*x12929))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12925))+(((-1.0)*gconst28*r01*x12926))+((r00*x12927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12933 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12933.valid){
continue;
}
IkReal x12931=((1.0)*(x12933.value));
IkReal x12932=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12931)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12931)));
IkReal gconst28=((1.0)*r21*x12932);
IkReal gconst29=((-1.0)*r20*x12932);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12936 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12936.valid){
continue;
}
IkReal x12934=((1.0)*(x12936.value));
IkReal x12935=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12934)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12934)));
IkReal gconst28=((1.0)*r21*x12935);
IkReal gconst29=((-1.0)*r20*x12935);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12939 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12939.valid){
continue;
}
IkReal x12937=((1.0)*(x12939.value));
IkReal x12938=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12937)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12937)));
IkReal gconst28=((1.0)*r21*x12938);
IkReal gconst29=((-1.0)*r20*x12938);
IkReal x12940=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x12944=IKPowWithIntegerCheck(x12940,-1);
if(!x12944.valid){
continue;
}
IkReal x12941=x12944.value;
IkReal x12942=((1.0)*x12941);
IkReal x12943=((((-1.0)*x12942*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x12941))+(((-1.0)*(r12*r12)))+(((-1.0)*x12942*(r11*r11)*(r21*r21))));
j4eval[0]=x12943;
j4eval[1]=r12;
j4eval[2]=x12940;
j4eval[3]=IKsign(x12943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12945=(gconst28*r11);
IkReal x12946=(gconst29*r10);
CheckValue<IkReal> x12947=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12946*x12946)))+(((-1.0)*(x12945*x12945)))+(((2.0)*x12945*x12946))+(((-1.0)*(r12*r12))))),-1);
if(!x12947.valid){
continue;
}
CheckValue<IkReal> x12948 = IKatan2WithCheck(IkReal((x12945+(((-1.0)*x12946)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12947.value)))+(x12948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12949=IKcos(j4);
IkReal x12950=IKsin(j4);
IkReal x12951=(gconst29*r10);
IkReal x12952=(gconst29*r20);
IkReal x12953=(gconst28*r21);
IkReal x12954=((1.0)*sj1);
IkReal x12955=(gconst29*r00);
IkReal x12956=((1.0)*x12949);
IkReal x12957=((1.0)*x12950);
IkReal x12958=(gconst28*x12949);
IkReal x12959=(gconst28*x12950);
evalcond[0]=(((r12*x12950))+(((-1.0)*x12951*x12956))+((r11*x12958)));
evalcond[1]=((((-1.0)*x12952*x12957))+(((-1.0)*r22*x12956))+((x12950*x12953)));
evalcond[2]=((((-1.0)*x12955*x12957))+((r01*x12959))+(((-1.0)*r02*x12956)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12956))+(((-1.0)*x12951*x12957))+((r11*x12959)));
evalcond[4]=((((-1.0)*x12955*x12956))+((r01*x12958))+((r02*x12950))+((cj1*cj2))+(((-1.0)*sj2*x12954)));
evalcond[5]=((((-1.0)*x12952*x12956))+((r22*x12950))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12954))+((x12949*x12953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12960=((1.0)*gconst29);
CheckValue<IkReal> x12961 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12960))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12961.valid){
continue;
}
CheckValue<IkReal> x12962=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12960))+(((-1.0)*gconst28*r00)))),-1);
if(!x12962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12961.value)+(((1.5707963267949)*(x12962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12963=IKcos(j4);
IkReal x12964=IKsin(j4);
IkReal x12965=(gconst29*r10);
IkReal x12966=(gconst29*r20);
IkReal x12967=(gconst28*r21);
IkReal x12968=((1.0)*sj1);
IkReal x12969=(gconst29*r00);
IkReal x12970=((1.0)*x12963);
IkReal x12971=((1.0)*x12964);
IkReal x12972=(gconst28*x12963);
IkReal x12973=(gconst28*x12964);
evalcond[0]=((((-1.0)*x12965*x12970))+((r11*x12972))+((r12*x12964)));
evalcond[1]=((((-1.0)*x12966*x12971))+(((-1.0)*r22*x12970))+((x12964*x12967)));
evalcond[2]=(((r01*x12973))+(((-1.0)*r02*x12970))+(((-1.0)*x12969*x12971)));
evalcond[3]=((1.0)+(((-1.0)*x12965*x12971))+(((-1.0)*r12*x12970))+((r11*x12973)));
evalcond[4]=(((r01*x12972))+((r02*x12964))+(((-1.0)*sj2*x12968))+((cj1*cj2))+(((-1.0)*x12969*x12970)));
evalcond[5]=((((-1.0)*x12966*x12970))+(((-1.0)*cj1*sj2))+((r22*x12964))+((x12963*x12967))+(((-1.0)*cj2*x12968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12974=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x12974.valid){
continue;
}
CheckValue<IkReal> x12975 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12974.value)))+(x12975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12976=IKcos(j4);
IkReal x12977=IKsin(j4);
IkReal x12978=(gconst29*r10);
IkReal x12979=(gconst29*r20);
IkReal x12980=(gconst28*r21);
IkReal x12981=((1.0)*sj1);
IkReal x12982=(gconst29*r00);
IkReal x12983=((1.0)*x12976);
IkReal x12984=((1.0)*x12977);
IkReal x12985=(gconst28*x12976);
IkReal x12986=(gconst28*x12977);
evalcond[0]=(((r11*x12985))+(((-1.0)*x12978*x12983))+((r12*x12977)));
evalcond[1]=((((-1.0)*r22*x12983))+(((-1.0)*x12979*x12984))+((x12977*x12980)));
evalcond[2]=(((r01*x12986))+(((-1.0)*x12982*x12984))+(((-1.0)*r02*x12983)));
evalcond[3]=((1.0)+((r11*x12986))+(((-1.0)*r12*x12983))+(((-1.0)*x12978*x12984)));
evalcond[4]=(((r02*x12977))+((r01*x12985))+(((-1.0)*x12982*x12983))+((cj1*cj2))+(((-1.0)*sj2*x12981)));
evalcond[5]=((((-1.0)*cj2*x12981))+(((-1.0)*cj1*sj2))+((x12976*x12980))+(((-1.0)*x12979*x12983))+((r22*x12977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12989 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12989.valid){
continue;
}
IkReal x12987=((1.0)*(x12989.value));
IkReal x12988=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12987)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12987)));
IkReal gconst28=((1.0)*r21*x12988);
IkReal gconst29=((-1.0)*r20*x12988);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12992 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12992.valid){
continue;
}
IkReal x12990=((1.0)*(x12992.value));
IkReal x12991=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12990)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12990)));
IkReal gconst28=((1.0)*r21*x12991);
IkReal gconst29=((-1.0)*r20*x12991);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x12995 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12995.valid){
continue;
}
IkReal x12993=((1.0)*(x12995.value));
IkReal x12994=x12817;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12993)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12993)));
IkReal gconst28=((1.0)*r21*x12994);
IkReal gconst29=((-1.0)*r20*x12994);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12996=(gconst29*r10);
IkReal x12997=(gconst28*r11);
CheckValue<IkReal> x12998=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12996*x12997))+(x12996*x12996)+(x12997*x12997))),-1);
if(!x12998.valid){
continue;
}
CheckValue<IkReal> x12999 = IKatan2WithCheck(IkReal((x12996+(((-1.0)*x12997)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12998.value)))+(x12999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13000=IKsin(j4);
IkReal x13001=IKcos(j4);
IkReal x13002=(gconst28*r11);
IkReal x13003=((1.0)*sj1);
IkReal x13004=((1.0)*x13001);
IkReal x13005=(gconst29*x13001);
IkReal x13006=(gconst28*x13000);
IkReal x13007=((1.0)*x13000);
IkReal x13008=(gconst29*x13007);
evalcond[0]=((((-1.0)*r22*x13004))+(((-1.0)*r20*x13008))+((r21*x13006)));
evalcond[1]=((((-1.0)*r00*x13008))+(((-1.0)*r02*x13004))+((r01*x13006)));
evalcond[2]=((((-1.0)*x13002*x13004))+(((-1.0)*r12*x13007))+((r10*x13005)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13004))+((x13000*x13002))+(((-1.0)*r10*x13008)));
evalcond[4]=(((r00*x13005))+(((-1.0)*gconst28*r01*x13004))+(((-1.0)*sj2*x13003))+(((-1.0)*r02*x13007))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x13007))+((r20*x13005))+(((-1.0)*cj2*x13003))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r21*x13004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13009=((1.0)*gconst29);
CheckValue<IkReal> x13010 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13009))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13010.valid){
continue;
}
CheckValue<IkReal> x13011=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13009)))),-1);
if(!x13011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13010.value)+(((1.5707963267949)*(x13011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13012=IKsin(j4);
IkReal x13013=IKcos(j4);
IkReal x13014=(gconst28*r11);
IkReal x13015=((1.0)*sj1);
IkReal x13016=((1.0)*x13013);
IkReal x13017=(gconst29*x13013);
IkReal x13018=(gconst28*x13012);
IkReal x13019=((1.0)*x13012);
IkReal x13020=(gconst29*x13019);
evalcond[0]=((((-1.0)*r22*x13016))+((r21*x13018))+(((-1.0)*r20*x13020)));
evalcond[1]=(((r01*x13018))+(((-1.0)*r00*x13020))+(((-1.0)*r02*x13016)));
evalcond[2]=((((-1.0)*x13014*x13016))+((r10*x13017))+(((-1.0)*r12*x13019)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13020))+((x13012*x13014))+(((-1.0)*r12*x13016)));
evalcond[4]=(((r00*x13017))+(((-1.0)*sj2*x13015))+((cj1*cj2))+(((-1.0)*r02*x13019))+(((-1.0)*gconst28*r01*x13016)));
evalcond[5]=((((-1.0)*r22*x13019))+((r20*x13017))+(((-1.0)*cj2*x13015))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r21*x13016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13021=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13021.valid){
continue;
}
CheckValue<IkReal> x13022 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13021.value)))+(x13022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13023=IKsin(j4);
IkReal x13024=IKcos(j4);
IkReal x13025=(gconst28*r11);
IkReal x13026=((1.0)*sj1);
IkReal x13027=((1.0)*x13024);
IkReal x13028=(gconst29*x13024);
IkReal x13029=(gconst28*x13023);
IkReal x13030=((1.0)*x13023);
IkReal x13031=(gconst29*x13030);
evalcond[0]=((((-1.0)*r20*x13031))+(((-1.0)*r22*x13027))+((r21*x13029)));
evalcond[1]=(((r01*x13029))+(((-1.0)*r00*x13031))+(((-1.0)*r02*x13027)));
evalcond[2]=((((-1.0)*r12*x13030))+(((-1.0)*x13025*x13027))+((r10*x13028)));
evalcond[3]=((1.0)+((x13023*x13025))+(((-1.0)*r10*x13031))+(((-1.0)*r12*x13027)));
evalcond[4]=(((r00*x13028))+(((-1.0)*sj2*x13026))+(((-1.0)*r02*x13030))+((cj1*cj2))+(((-1.0)*gconst28*r01*x13027)));
evalcond[5]=(((r20*x13028))+(((-1.0)*cj2*x13026))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x13030))+(((-1.0)*gconst28*r21*x13027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13032=gconst28*gconst28;
IkReal x13033=gconst29*gconst29;
IkReal x13034=(r11*r21);
IkReal x13035=(gconst29*sj3);
IkReal x13036=((1.0)*cj3);
IkReal x13037=(r10*r20);
IkReal x13038=(r10*r21);
IkReal x13039=(r11*r20);
IkReal x13040=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13041 = IKatan2WithCheck(IkReal((((r11*r22*x13035))+((gconst28*r10*r22*sj3)))),IkReal((((sj3*x13032*x13038))+((gconst28*x13034*x13035))+(((-1.0)*gconst28*x13035*x13037))+(((-1.0)*sj3*x13033*x13039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13041.valid){
continue;
}
CheckValue<IkReal> x13042=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13036))+(((-1.0)*x13032*x13034*x13036))+((x13039*x13040))+((x13038*x13040))+(((-1.0)*x13033*x13036*x13037)))),-1);
if(!x13042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13041.value)+(((1.5707963267949)*(x13042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13043=IKsin(j4);
IkReal x13044=IKcos(j4);
IkReal x13045=(gconst29*r20);
IkReal x13046=(gconst28*r20);
IkReal x13047=((1.0)*cj3);
IkReal x13048=(gconst28*r21);
IkReal x13049=(sj1*sj2);
IkReal x13050=(gconst29*sj3);
IkReal x13051=((1.0)*cj2);
IkReal x13052=(gconst28*r01);
IkReal x13053=(gconst29*r10);
IkReal x13054=(gconst28*r10);
IkReal x13055=(gconst29*r00);
IkReal x13056=(gconst28*r11);
IkReal x13057=(gconst28*r00);
IkReal x13058=((1.0)*cj1*sj2);
IkReal x13059=(sj1*x13051);
IkReal x13060=((1.0)*x13044);
IkReal x13061=((1.0)*x13043);
IkReal x13062=(sj3*x13044);
IkReal x13063=(sj3*x13043);
IkReal x13064=(cj3*x13043);
IkReal x13065=(cj3*x13044);
IkReal x13066=(x13058+x13059);
evalcond[0]=(((x13043*x13048))+(((-1.0)*x13045*x13061))+(((-1.0)*r22*x13060)));
evalcond[1]=(((x13043*x13052))+(((-1.0)*r02*x13060))+(((-1.0)*x13055*x13061)));
evalcond[2]=((1.0)+((x13043*x13056))+(((-1.0)*r12*x13060))+(((-1.0)*x13053*x13061)));
evalcond[3]=(((r12*x13064))+(((-1.0)*x13044*x13047*x13053))+((x13056*x13065))+((sj3*x13054))+((r11*x13050)));
evalcond[4]=(((r12*x13063))+(((-1.0)*x13047*x13054))+((x13056*x13062))+(((-1.0)*gconst29*r11*x13047))+(((-1.0)*r10*x13050*x13060)));
evalcond[5]=((((-1.0)*x13049))+((r02*x13064))+(((-1.0)*x13044*x13047*x13055))+((sj3*x13057))+((cj1*cj2))+((x13052*x13065))+((r01*x13050)));
evalcond[6]=(((x13048*x13065))+((r21*x13050))+((r22*x13064))+(((-1.0)*x13044*x13045*x13047))+((sj3*x13046))+(((-1.0)*x13066)));
evalcond[7]=(((x13048*x13062))+(((-1.0)*gconst29*r21*x13047))+(((-1.0)*sj3*x13045*x13060))+(((-1.0)*x13046*x13047))+((r22*x13063))+x13049+(((-1.0)*cj1*x13051)));
evalcond[8]=(((r02*x13063))+(((-1.0)*x13047*x13057))+(((-1.0)*gconst29*r01*x13047))+(((-1.0)*r00*x13050*x13060))+((x13052*x13062))+(((-1.0)*x13066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13067=((1.0)*gconst29);
CheckValue<IkReal> x13068 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13067))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13068.valid){
continue;
}
CheckValue<IkReal> x13069=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13067))+(((-1.0)*gconst28*r00)))),-1);
if(!x13069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13068.value)+(((1.5707963267949)*(x13069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13070=IKsin(j4);
IkReal x13071=IKcos(j4);
IkReal x13072=(gconst29*r20);
IkReal x13073=(gconst28*r20);
IkReal x13074=((1.0)*cj3);
IkReal x13075=(gconst28*r21);
IkReal x13076=(sj1*sj2);
IkReal x13077=(gconst29*sj3);
IkReal x13078=((1.0)*cj2);
IkReal x13079=(gconst28*r01);
IkReal x13080=(gconst29*r10);
IkReal x13081=(gconst28*r10);
IkReal x13082=(gconst29*r00);
IkReal x13083=(gconst28*r11);
IkReal x13084=(gconst28*r00);
IkReal x13085=((1.0)*cj1*sj2);
IkReal x13086=(sj1*x13078);
IkReal x13087=((1.0)*x13071);
IkReal x13088=((1.0)*x13070);
IkReal x13089=(sj3*x13071);
IkReal x13090=(sj3*x13070);
IkReal x13091=(cj3*x13070);
IkReal x13092=(cj3*x13071);
IkReal x13093=(x13086+x13085);
evalcond[0]=((((-1.0)*x13072*x13088))+(((-1.0)*r22*x13087))+((x13070*x13075)));
evalcond[1]=((((-1.0)*r02*x13087))+(((-1.0)*x13082*x13088))+((x13070*x13079)));
evalcond[2]=((1.0)+((x13070*x13083))+(((-1.0)*x13080*x13088))+(((-1.0)*r12*x13087)));
evalcond[3]=((((-1.0)*x13071*x13074*x13080))+((r11*x13077))+((sj3*x13081))+((r12*x13091))+((x13083*x13092)));
evalcond[4]=((((-1.0)*r10*x13077*x13087))+((x13083*x13089))+(((-1.0)*gconst29*r11*x13074))+((r12*x13090))+(((-1.0)*x13074*x13081)));
evalcond[5]=(((r02*x13091))+(((-1.0)*x13071*x13074*x13082))+((x13079*x13092))+((r01*x13077))+((sj3*x13084))+(((-1.0)*x13076))+((cj1*cj2)));
evalcond[6]=(((r21*x13077))+((x13075*x13092))+((r22*x13091))+(((-1.0)*x13071*x13072*x13074))+(((-1.0)*x13093))+((sj3*x13073)));
evalcond[7]=(((x13075*x13089))+(((-1.0)*sj3*x13072*x13087))+(((-1.0)*cj1*x13078))+(((-1.0)*gconst29*r21*x13074))+(((-1.0)*x13073*x13074))+((r22*x13090))+x13076);
evalcond[8]=(((r02*x13090))+((x13079*x13089))+(((-1.0)*x13074*x13084))+(((-1.0)*r00*x13077*x13087))+(((-1.0)*gconst29*r01*x13074))+(((-1.0)*x13093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13094=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13094.valid){
continue;
}
CheckValue<IkReal> x13095 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13094.value)))+(x13095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13096=IKsin(j4);
IkReal x13097=IKcos(j4);
IkReal x13098=(gconst29*r20);
IkReal x13099=(gconst28*r20);
IkReal x13100=((1.0)*cj3);
IkReal x13101=(gconst28*r21);
IkReal x13102=(sj1*sj2);
IkReal x13103=(gconst29*sj3);
IkReal x13104=((1.0)*cj2);
IkReal x13105=(gconst28*r01);
IkReal x13106=(gconst29*r10);
IkReal x13107=(gconst28*r10);
IkReal x13108=(gconst29*r00);
IkReal x13109=(gconst28*r11);
IkReal x13110=(gconst28*r00);
IkReal x13111=((1.0)*cj1*sj2);
IkReal x13112=(sj1*x13104);
IkReal x13113=((1.0)*x13097);
IkReal x13114=((1.0)*x13096);
IkReal x13115=(sj3*x13097);
IkReal x13116=(sj3*x13096);
IkReal x13117=(cj3*x13096);
IkReal x13118=(cj3*x13097);
IkReal x13119=(x13111+x13112);
evalcond[0]=(((x13096*x13101))+(((-1.0)*x13098*x13114))+(((-1.0)*r22*x13113)));
evalcond[1]=((((-1.0)*x13108*x13114))+((x13096*x13105))+(((-1.0)*r02*x13113)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13113))+((x13096*x13109))+(((-1.0)*x13106*x13114)));
evalcond[3]=(((r12*x13117))+((x13109*x13118))+((sj3*x13107))+(((-1.0)*x13097*x13100*x13106))+((r11*x13103)));
evalcond[4]=(((r12*x13116))+(((-1.0)*r10*x13103*x13113))+((x13109*x13115))+(((-1.0)*x13100*x13107))+(((-1.0)*gconst29*r11*x13100)));
evalcond[5]=(((r01*x13103))+((r02*x13117))+(((-1.0)*x13102))+(((-1.0)*x13097*x13100*x13108))+((cj1*cj2))+((sj3*x13110))+((x13105*x13118)));
evalcond[6]=(((r22*x13117))+(((-1.0)*x13119))+((sj3*x13099))+((x13101*x13118))+(((-1.0)*x13097*x13098*x13100))+((r21*x13103)));
evalcond[7]=(((r22*x13116))+(((-1.0)*gconst29*r21*x13100))+(((-1.0)*x13099*x13100))+(((-1.0)*sj3*x13098*x13113))+((x13101*x13115))+x13102+(((-1.0)*cj1*x13104)));
evalcond[8]=((((-1.0)*x13100*x13110))+((r02*x13116))+(((-1.0)*x13119))+(((-1.0)*gconst29*r01*x13100))+(((-1.0)*r00*x13103*x13113))+((x13105*x13115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13120=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13120);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13120);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13121=(r11*sj5);
IkReal x13122=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13122))+x13121);
j4eval[1]=((((-1.0)*sj3*x13122))+((sj3*x13121)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13123=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13123);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13123);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13124=(r11*sj5);
IkReal x13125=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13125))+x13124);
j4eval[1]=(((cj3*x13124))+(((-1.0)*cj3*x13125)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13126=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13126);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13126);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13127=((1.0)*r10);
CheckValue<IkReal> x13128=IKPowWithIntegerCheck(cj3,-1);
if(!x13128.valid){
continue;
}
CheckValue<IkReal> x13129=IKPowWithIntegerCheck(r22,-1);
if(!x13129.valid){
continue;
}
CheckValue<IkReal> x13130=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x13127))),-1);
if(!x13130.valid){
continue;
}
if( IKabs(((x13128.value)*(x13129.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13130.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13127)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13128.value)*(x13129.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13130.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13127))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13128.value)*(x13129.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13130.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13127))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13131=IKsin(j4);
IkReal x13132=IKcos(j4);
IkReal x13133=(cj3*sj5);
IkReal x13134=((1.0)*r10);
IkReal x13135=(sj3*sj5);
IkReal x13136=(sj1*sj2);
IkReal x13137=(cj5*r01);
IkReal x13138=((1.0)*cj3);
IkReal x13139=((1.0)*cj1);
IkReal x13140=((1.0)*r00);
IkReal x13141=(cj5*r11);
IkReal x13142=(sj2*x13139);
IkReal x13143=((1.0)*cj2*sj1);
IkReal x13144=(r11*x13132);
IkReal x13145=(cj5*x13131);
IkReal x13146=(r22*x13131);
IkReal x13147=(sj5*x13131);
IkReal x13148=(cj5*x13132);
IkReal x13149=(r01*x13132);
IkReal x13150=(x13142+x13143);
evalcond[0]=((-1.0)*r22*x13132);
evalcond[1]=((((-1.0)*x13140*x13145))+((r01*x13147)));
evalcond[2]=((((-1.0)*cj2*x13139))+((sj3*x13146))+x13136);
evalcond[3]=((1.0)+((r11*x13147))+(((-1.0)*x13134*x13145)));
evalcond[4]=((((-1.0)*x13150))+((cj3*x13146)));
evalcond[5]=(((r10*x13135))+((x13133*x13144))+((sj3*x13141))+(((-1.0)*cj3*x13134*x13148)));
evalcond[6]=((((-1.0)*x13138*x13141))+(((-1.0)*x13133*x13134))+(((-1.0)*sj3*x13134*x13148))+((x13135*x13144)));
evalcond[7]=(((x13133*x13149))+((r00*x13135))+(((-1.0)*r00*x13138*x13148))+((sj3*x13137))+((cj1*cj2))+(((-1.0)*x13136)));
evalcond[8]=((((-1.0)*sj3*x13140*x13148))+(((-1.0)*x13150))+(((-1.0)*x13137*x13138))+(((-1.0)*x13133*x13140))+((x13135*x13149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13151=((1.0)*sj3);
IkReal x13152=(r11*sj5);
IkReal x13153=((1.0)*cj5*r10);
CheckValue<IkReal> x13154=IKPowWithIntegerCheck(((((-1.0)*x13153))+x13152),-1);
if(!x13154.valid){
continue;
}
CheckValue<IkReal> x13155=IKPowWithIntegerCheck((((cj3*x13152))+(((-1.0)*cj3*x13153))),-1);
if(!x13155.valid){
continue;
}
if( IKabs(((-1.0)*(x13154.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13155.value)*(((((-1.0)*cj5*r11*x13151))+(((-1.0)*r10*sj5*x13151)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13154.value)))+IKsqr(((x13155.value)*(((((-1.0)*cj5*r11*x13151))+(((-1.0)*r10*sj5*x13151))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13154.value)), ((x13155.value)*(((((-1.0)*cj5*r11*x13151))+(((-1.0)*r10*sj5*x13151))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13156=IKsin(j4);
IkReal x13157=IKcos(j4);
IkReal x13158=(cj3*sj5);
IkReal x13159=((1.0)*r10);
IkReal x13160=(sj3*sj5);
IkReal x13161=(sj1*sj2);
IkReal x13162=(cj5*r01);
IkReal x13163=((1.0)*cj3);
IkReal x13164=((1.0)*cj1);
IkReal x13165=((1.0)*r00);
IkReal x13166=(cj5*r11);
IkReal x13167=(sj2*x13164);
IkReal x13168=((1.0)*cj2*sj1);
IkReal x13169=(r11*x13157);
IkReal x13170=(cj5*x13156);
IkReal x13171=(r22*x13156);
IkReal x13172=(sj5*x13156);
IkReal x13173=(cj5*x13157);
IkReal x13174=(r01*x13157);
IkReal x13175=(x13168+x13167);
evalcond[0]=((-1.0)*r22*x13157);
evalcond[1]=(((r01*x13172))+(((-1.0)*x13165*x13170)));
evalcond[2]=((((-1.0)*cj2*x13164))+((sj3*x13171))+x13161);
evalcond[3]=((1.0)+((r11*x13172))+(((-1.0)*x13159*x13170)));
evalcond[4]=((((-1.0)*x13175))+((cj3*x13171)));
evalcond[5]=(((x13158*x13169))+((sj3*x13166))+(((-1.0)*cj3*x13159*x13173))+((r10*x13160)));
evalcond[6]=(((x13160*x13169))+(((-1.0)*sj3*x13159*x13173))+(((-1.0)*x13158*x13159))+(((-1.0)*x13163*x13166)));
evalcond[7]=(((sj3*x13162))+((r00*x13160))+(((-1.0)*r00*x13163*x13173))+(((-1.0)*x13161))+((cj1*cj2))+((x13158*x13174)));
evalcond[8]=((((-1.0)*x13162*x13163))+(((-1.0)*sj3*x13165*x13173))+(((-1.0)*x13158*x13165))+(((-1.0)*x13175))+((x13160*x13174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13176=(r11*sj5);
IkReal x13177=((1.0)*cj5*r10);
CheckValue<IkReal> x13178=IKPowWithIntegerCheck(((((-1.0)*x13177))+x13176),-1);
if(!x13178.valid){
continue;
}
CheckValue<IkReal> x13179=IKPowWithIntegerCheck((((sj3*x13176))+(((-1.0)*sj3*x13177))),-1);
if(!x13179.valid){
continue;
}
if( IKabs(((-1.0)*(x13178.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13179.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13178.value)))+IKsqr(((x13179.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13178.value)), ((x13179.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13180=IKsin(j4);
IkReal x13181=IKcos(j4);
IkReal x13182=(cj3*sj5);
IkReal x13183=((1.0)*r10);
IkReal x13184=(sj3*sj5);
IkReal x13185=(sj1*sj2);
IkReal x13186=(cj5*r01);
IkReal x13187=((1.0)*cj3);
IkReal x13188=((1.0)*cj1);
IkReal x13189=((1.0)*r00);
IkReal x13190=(cj5*r11);
IkReal x13191=(sj2*x13188);
IkReal x13192=((1.0)*cj2*sj1);
IkReal x13193=(r11*x13181);
IkReal x13194=(cj5*x13180);
IkReal x13195=(r22*x13180);
IkReal x13196=(sj5*x13180);
IkReal x13197=(cj5*x13181);
IkReal x13198=(r01*x13181);
IkReal x13199=(x13191+x13192);
evalcond[0]=((-1.0)*r22*x13181);
evalcond[1]=(((r01*x13196))+(((-1.0)*x13189*x13194)));
evalcond[2]=(x13185+((sj3*x13195))+(((-1.0)*cj2*x13188)));
evalcond[3]=((1.0)+((r11*x13196))+(((-1.0)*x13183*x13194)));
evalcond[4]=((((-1.0)*x13199))+((cj3*x13195)));
evalcond[5]=(((x13182*x13193))+((r10*x13184))+(((-1.0)*cj3*x13183*x13197))+((sj3*x13190)));
evalcond[6]=((((-1.0)*x13182*x13183))+(((-1.0)*sj3*x13183*x13197))+((x13184*x13193))+(((-1.0)*x13187*x13190)));
evalcond[7]=(((x13182*x13198))+(((-1.0)*x13185))+(((-1.0)*r00*x13187*x13197))+((r00*x13184))+((cj1*cj2))+((sj3*x13186)));
evalcond[8]=((((-1.0)*x13199))+(((-1.0)*sj3*x13189*x13197))+(((-1.0)*x13182*x13189))+((x13184*x13198))+(((-1.0)*x13186*x13187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13200=cj5*cj5;
IkReal x13201=((1.0)*cj3);
IkReal x13202=(r10*r21);
IkReal x13203=(cj5*sj5);
IkReal x13204=(r11*r21);
IkReal x13205=(r11*r20);
IkReal x13206=(r22*sj3);
IkReal x13207=(r10*r20);
IkReal x13208=((1.0)*sj3*x13200);
CheckValue<IkReal> x13209 = IKatan2WithCheck(IkReal((((r10*sj5*x13206))+((cj5*r11*x13206)))),IkReal(((((-1.0)*x13202*x13208))+((sj3*x13202))+((sj3*x13203*x13204))+(((-1.0)*x13205*x13208))+(((-1.0)*sj3*x13203*x13207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13209.valid){
continue;
}
CheckValue<IkReal> x13210=IKPowWithIntegerCheck(IKsign((((cj3*x13202*x13203))+(((-1.0)*x13201*x13204))+((cj3*x13203*x13205))+(((-1.0)*x13200*x13201*x13207))+(((-1.0)*r12*r22*x13201))+((cj3*x13200*x13204)))),-1);
if(!x13210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13209.value)+(((1.5707963267949)*(x13210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13211=IKsin(j4);
IkReal x13212=IKcos(j4);
IkReal x13213=(cj3*sj5);
IkReal x13214=((1.0)*r10);
IkReal x13215=(sj3*sj5);
IkReal x13216=(sj1*sj2);
IkReal x13217=(cj5*r01);
IkReal x13218=((1.0)*r20);
IkReal x13219=((1.0)*cj3);
IkReal x13220=((1.0)*cj1);
IkReal x13221=((1.0)*r00);
IkReal x13222=(cj5*r11);
IkReal x13223=(cj5*r10);
IkReal x13224=(cj5*r00);
IkReal x13225=(cj5*r21);
IkReal x13226=(cj5*r20);
IkReal x13227=(sj2*x13220);
IkReal x13228=((1.0)*cj2*sj1);
IkReal x13229=((1.0)*x13212);
IkReal x13230=(r11*x13212);
IkReal x13231=(cj5*x13211);
IkReal x13232=(cj3*x13211);
IkReal x13233=(sj3*x13211);
IkReal x13234=(sj5*x13211);
IkReal x13235=(r21*x13212);
IkReal x13236=(r01*x13212);
IkReal x13237=(x13228+x13227);
evalcond[0]=((((-1.0)*r22*x13229))+(((-1.0)*x13218*x13231))+((r21*x13234)));
evalcond[1]=(((r01*x13234))+(((-1.0)*r02*x13229))+(((-1.0)*x13221*x13231)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13229))+((r11*x13234))+(((-1.0)*x13214*x13231)));
evalcond[3]=(((x13213*x13230))+((r10*x13215))+((r12*x13232))+(((-1.0)*cj3*cj5*x13212*x13214))+((sj3*x13222)));
evalcond[4]=(((x13215*x13230))+(((-1.0)*cj5*sj3*x13212*x13214))+(((-1.0)*x13213*x13214))+(((-1.0)*x13219*x13222))+((r12*x13233)));
evalcond[5]=((((-1.0)*x13212*x13219*x13224))+(((-1.0)*x13216))+((x13213*x13236))+((r00*x13215))+((r02*x13232))+((sj3*x13217))+((cj1*cj2)));
evalcond[6]=(((x13213*x13235))+((r22*x13232))+((r20*x13215))+(((-1.0)*cj3*cj5*x13212*x13218))+(((-1.0)*x13237))+((sj3*x13225)));
evalcond[7]=(((x13215*x13235))+(((-1.0)*cj5*sj3*x13212*x13218))+(((-1.0)*x13213*x13218))+((r22*x13233))+(((-1.0)*x13219*x13225))+(((-1.0)*cj2*x13220))+x13216);
evalcond[8]=(((x13215*x13236))+((r02*x13233))+(((-1.0)*x13213*x13221))+(((-1.0)*cj5*sj3*x13212*x13221))+(((-1.0)*x13237))+(((-1.0)*x13217*x13219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13238=((1.0)*cj5);
CheckValue<IkReal> x13239 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13239.valid){
continue;
}
CheckValue<IkReal> x13240=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13238)))),-1);
if(!x13240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13239.value)+(((1.5707963267949)*(x13240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13241=IKsin(j4);
IkReal x13242=IKcos(j4);
IkReal x13243=(cj3*sj5);
IkReal x13244=((1.0)*r10);
IkReal x13245=(sj3*sj5);
IkReal x13246=(sj1*sj2);
IkReal x13247=(cj5*r01);
IkReal x13248=((1.0)*r20);
IkReal x13249=((1.0)*cj3);
IkReal x13250=((1.0)*cj1);
IkReal x13251=((1.0)*r00);
IkReal x13252=(cj5*r11);
IkReal x13253=(cj5*r10);
IkReal x13254=(cj5*r00);
IkReal x13255=(cj5*r21);
IkReal x13256=(cj5*r20);
IkReal x13257=(sj2*x13250);
IkReal x13258=((1.0)*cj2*sj1);
IkReal x13259=((1.0)*x13242);
IkReal x13260=(r11*x13242);
IkReal x13261=(cj5*x13241);
IkReal x13262=(cj3*x13241);
IkReal x13263=(sj3*x13241);
IkReal x13264=(sj5*x13241);
IkReal x13265=(r21*x13242);
IkReal x13266=(r01*x13242);
IkReal x13267=(x13258+x13257);
evalcond[0]=(((r21*x13264))+(((-1.0)*r22*x13259))+(((-1.0)*x13248*x13261)));
evalcond[1]=((((-1.0)*r02*x13259))+((r01*x13264))+(((-1.0)*x13251*x13261)));
evalcond[2]=((1.0)+((r11*x13264))+(((-1.0)*x13244*x13261))+(((-1.0)*r12*x13259)));
evalcond[3]=((((-1.0)*cj3*cj5*x13242*x13244))+((sj3*x13252))+((x13243*x13260))+((r10*x13245))+((r12*x13262)));
evalcond[4]=(((r12*x13263))+(((-1.0)*x13243*x13244))+(((-1.0)*x13249*x13252))+((x13245*x13260))+(((-1.0)*cj5*sj3*x13242*x13244)));
evalcond[5]=(((x13243*x13266))+(((-1.0)*x13246))+(((-1.0)*x13242*x13249*x13254))+((r00*x13245))+((r02*x13262))+((cj1*cj2))+((sj3*x13247)));
evalcond[6]=((((-1.0)*cj3*cj5*x13242*x13248))+((sj3*x13255))+((x13243*x13265))+(((-1.0)*x13267))+((r22*x13262))+((r20*x13245)));
evalcond[7]=((((-1.0)*x13243*x13248))+(((-1.0)*x13249*x13255))+((r22*x13263))+(((-1.0)*cj2*x13250))+((x13245*x13265))+x13246+(((-1.0)*cj5*sj3*x13242*x13248)));
evalcond[8]=((((-1.0)*x13267))+(((-1.0)*x13247*x13249))+(((-1.0)*x13243*x13251))+((r02*x13263))+(((-1.0)*cj5*sj3*x13242*x13251))+((x13245*x13266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13268=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13268.valid){
continue;
}
CheckValue<IkReal> x13269 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13268.value)))+(x13269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13270=IKsin(j4);
IkReal x13271=IKcos(j4);
IkReal x13272=(cj3*sj5);
IkReal x13273=((1.0)*r10);
IkReal x13274=(sj3*sj5);
IkReal x13275=(sj1*sj2);
IkReal x13276=(cj5*r01);
IkReal x13277=((1.0)*r20);
IkReal x13278=((1.0)*cj3);
IkReal x13279=((1.0)*cj1);
IkReal x13280=((1.0)*r00);
IkReal x13281=(cj5*r11);
IkReal x13282=(cj5*r10);
IkReal x13283=(cj5*r00);
IkReal x13284=(cj5*r21);
IkReal x13285=(cj5*r20);
IkReal x13286=(sj2*x13279);
IkReal x13287=((1.0)*cj2*sj1);
IkReal x13288=((1.0)*x13271);
IkReal x13289=(r11*x13271);
IkReal x13290=(cj5*x13270);
IkReal x13291=(cj3*x13270);
IkReal x13292=(sj3*x13270);
IkReal x13293=(sj5*x13270);
IkReal x13294=(r21*x13271);
IkReal x13295=(r01*x13271);
IkReal x13296=(x13287+x13286);
evalcond[0]=((((-1.0)*r22*x13288))+(((-1.0)*x13277*x13290))+((r21*x13293)));
evalcond[1]=((((-1.0)*x13280*x13290))+(((-1.0)*r02*x13288))+((r01*x13293)));
evalcond[2]=((1.0)+(((-1.0)*x13273*x13290))+((r11*x13293))+(((-1.0)*r12*x13288)));
evalcond[3]=(((x13272*x13289))+((r12*x13291))+((sj3*x13281))+((r10*x13274))+(((-1.0)*cj3*cj5*x13271*x13273)));
evalcond[4]=((((-1.0)*cj5*sj3*x13271*x13273))+((r12*x13292))+(((-1.0)*x13272*x13273))+(((-1.0)*x13278*x13281))+((x13274*x13289)));
evalcond[5]=((((-1.0)*x13275))+((r00*x13274))+((r02*x13291))+((sj3*x13276))+((cj1*cj2))+((x13272*x13295))+(((-1.0)*x13271*x13278*x13283)));
evalcond[6]=(((r20*x13274))+((sj3*x13284))+((r22*x13291))+(((-1.0)*cj3*cj5*x13271*x13277))+((x13272*x13294))+(((-1.0)*x13296)));
evalcond[7]=((((-1.0)*cj5*sj3*x13271*x13277))+(((-1.0)*cj2*x13279))+((r22*x13292))+(((-1.0)*x13272*x13277))+((x13274*x13294))+(((-1.0)*x13278*x13284))+x13275);
evalcond[8]=((((-1.0)*x13272*x13280))+(((-1.0)*cj5*sj3*x13271*x13280))+((r02*x13292))+((x13274*x13295))+(((-1.0)*x13276*x13278))+(((-1.0)*x13296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13297=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13297;
j4eval[1]=IKsign(x13297);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13298=((1.0)*cj5);
IkReal x13299=((((-1.0)*r21*x13298))+(((-1.0)*r20*sj5)));
j4eval[0]=x13299;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13298))))));
j4eval[2]=IKsign(x13299);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13300=cj5*cj5;
IkReal x13301=(cj3*r21);
IkReal x13302=(cj5*sj5);
IkReal x13303=((1.0)*cj3);
IkReal x13304=(((r10*x13301*x13302))+((r11*x13300*x13301))+(((-1.0)*r11*x13301))+((cj3*r11*r20*x13302))+(((-1.0)*r10*r20*x13300*x13303))+(((-1.0)*r12*r22*x13303)));
j4eval[0]=x13304;
j4eval[1]=IKsign(x13304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13305=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13305;
j4eval[1]=IKsign(x13305);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13306=((1.0)*cj5);
IkReal x13307=((((-1.0)*r21*x13306))+(((-1.0)*r20*sj5)));
j4eval[0]=x13307;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x13306)))))+(IKabs(r02)));
j4eval[2]=IKsign(x13307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13308=cj5*cj5;
IkReal x13309=r11*r11;
IkReal x13310=(r11*sj5);
IkReal x13311=(cj5*r10);
IkReal x13312=((r12*r12)+((x13308*(r10*r10)))+(((-1.0)*x13308*x13309))+x13309+(((-2.0)*x13310*x13311)));
j4eval[0]=x13312;
j4eval[1]=IKsign(x13312);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13311))+x13310))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13313=cj5*cj5;
IkReal x13314=r11*r11;
IkReal x13315=(cj5*r10);
IkReal x13316=(r11*sj5);
CheckValue<IkReal> x13317=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13315*x13316))+(((-1.0)*x13313*x13314))+((x13313*(r10*r10)))+x13314)),-1);
if(!x13317.valid){
continue;
}
CheckValue<IkReal> x13318 = IKatan2WithCheck(IkReal(((((-1.0)*x13315))+x13316)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13317.value)))+(x13318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13319=IKcos(j4);
IkReal x13320=IKsin(j4);
IkReal x13321=(cj5*r00);
IkReal x13322=(cj5*r10);
IkReal x13323=(r21*sj5);
IkReal x13324=(cj5*r20);
IkReal x13325=((1.0)*x13319);
IkReal x13326=((1.0)*x13320);
IkReal x13327=(sj5*x13320);
IkReal x13328=(sj5*x13319);
evalcond[0]=(((r12*x13320))+(((-1.0)*x13322*x13325))+((r11*x13328)));
evalcond[1]=((((-1.0)*r22*x13325))+((x13320*x13323))+(((-1.0)*x13324*x13326)));
evalcond[2]=((((-1.0)*x13321*x13326))+(((-1.0)*r02*x13325))+((r01*x13327)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13325))+(((-1.0)*x13322*x13326))+((r11*x13327)));
evalcond[4]=((((-1.0)*x13321*x13325))+((cj2*sj1))+((r02*x13320))+((cj1*sj2))+((r01*x13328)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13324*x13325))+((x13319*x13323))+((r22*x13320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13329=((1.0)*cj5);
CheckValue<IkReal> x13330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13329))+(((-1.0)*r20*sj5)))),-1);
if(!x13330.valid){
continue;
}
CheckValue<IkReal> x13331 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13330.value)))+(x13331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13332=IKcos(j4);
IkReal x13333=IKsin(j4);
IkReal x13334=(cj5*r00);
IkReal x13335=(cj5*r10);
IkReal x13336=(r21*sj5);
IkReal x13337=(cj5*r20);
IkReal x13338=((1.0)*x13332);
IkReal x13339=((1.0)*x13333);
IkReal x13340=(sj5*x13333);
IkReal x13341=(sj5*x13332);
evalcond[0]=((((-1.0)*x13335*x13338))+((r11*x13341))+((r12*x13333)));
evalcond[1]=((((-1.0)*r22*x13338))+(((-1.0)*x13337*x13339))+((x13333*x13336)));
evalcond[2]=((((-1.0)*x13334*x13339))+((r01*x13340))+(((-1.0)*r02*x13338)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13338))+(((-1.0)*x13335*x13339))+((r11*x13340)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x13333))+(((-1.0)*x13334*x13338))+((r01*x13341)));
evalcond[5]=(((r22*x13333))+(((-1.0)*x13337*x13338))+(((-1.0)*cj1*cj2))+((x13332*x13336))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13342 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13342.valid){
continue;
}
CheckValue<IkReal> x13343=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13342.value)+(((1.5707963267949)*(x13343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13344=IKcos(j4);
IkReal x13345=IKsin(j4);
IkReal x13346=(cj5*r00);
IkReal x13347=(cj5*r10);
IkReal x13348=(r21*sj5);
IkReal x13349=(cj5*r20);
IkReal x13350=((1.0)*x13344);
IkReal x13351=((1.0)*x13345);
IkReal x13352=(sj5*x13345);
IkReal x13353=(sj5*x13344);
evalcond[0]=(((r12*x13345))+((r11*x13353))+(((-1.0)*x13347*x13350)));
evalcond[1]=((((-1.0)*r22*x13350))+((x13345*x13348))+(((-1.0)*x13349*x13351)));
evalcond[2]=((((-1.0)*x13346*x13351))+(((-1.0)*r02*x13350))+((r01*x13352)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13350))+((r11*x13352))+(((-1.0)*x13347*x13351)));
evalcond[4]=((((-1.0)*x13346*x13350))+((cj2*sj1))+((cj1*sj2))+((r02*x13345))+((r01*x13353)));
evalcond[5]=(((x13344*x13348))+((r22*x13345))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13349*x13350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13354=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13354;
j4eval[1]=IKsign(x13354);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13355=((1.0)*cj5);
IkReal x13356=((((-1.0)*r21*x13355))+(((-1.0)*r20*sj5)));
j4eval[0]=x13356;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13355))))));
j4eval[2]=IKsign(x13356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13357=cj5*cj5;
IkReal x13358=r11*r11;
IkReal x13359=(cj5*r10);
IkReal x13360=(r11*sj5);
IkReal x13361=(((x13357*x13358))+(((2.0)*x13359*x13360))+(((-1.0)*x13357*(r10*r10)))+(((-1.0)*x13358))+(((-1.0)*(r12*r12))));
j4eval[0]=x13361;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13360))+x13359))));
j4eval[2]=IKsign(x13361);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13362=cj5*cj5;
IkReal x13363=r11*r11;
IkReal x13364=(cj5*r10);
IkReal x13365=(r11*sj5);
CheckValue<IkReal> x13366=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13363))+((x13362*x13363))+(((-1.0)*x13362*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x13364*x13365)))),-1);
if(!x13366.valid){
continue;
}
CheckValue<IkReal> x13367 = IKatan2WithCheck(IkReal(((((-1.0)*x13365))+x13364)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13366.value)))+(x13367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13368=IKsin(j4);
IkReal x13369=IKcos(j4);
IkReal x13370=(cj5*r10);
IkReal x13371=(r01*sj5);
IkReal x13372=(cj5*r00);
IkReal x13373=(cj5*r20);
IkReal x13374=((1.0)*x13369);
IkReal x13375=((1.0)*x13368);
IkReal x13376=(sj5*x13368);
evalcond[0]=((((-1.0)*x13373*x13375))+(((-1.0)*r22*x13374))+((r21*x13376)));
evalcond[1]=(((x13368*x13371))+(((-1.0)*x13372*x13375))+(((-1.0)*r02*x13374)));
evalcond[2]=(((x13369*x13370))+(((-1.0)*r11*sj5*x13374))+(((-1.0)*r12*x13375)));
evalcond[3]=((-1.0)+(((-1.0)*x13370*x13375))+((r11*x13376))+(((-1.0)*r12*x13374)));
evalcond[4]=(((cj2*sj1))+((x13369*x13372))+((cj1*sj2))+(((-1.0)*r02*x13375))+(((-1.0)*x13371*x13374)));
evalcond[5]=(((x13369*x13373))+(((-1.0)*r22*x13375))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13377=((1.0)*cj5);
CheckValue<IkReal> x13378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13377))+(((-1.0)*r20*sj5)))),-1);
if(!x13378.valid){
continue;
}
CheckValue<IkReal> x13379 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13378.value)))+(x13379.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13380=IKsin(j4);
IkReal x13381=IKcos(j4);
IkReal x13382=(cj5*r10);
IkReal x13383=(r01*sj5);
IkReal x13384=(cj5*r00);
IkReal x13385=(cj5*r20);
IkReal x13386=((1.0)*x13381);
IkReal x13387=((1.0)*x13380);
IkReal x13388=(sj5*x13380);
evalcond[0]=((((-1.0)*r22*x13386))+(((-1.0)*x13385*x13387))+((r21*x13388)));
evalcond[1]=(((x13380*x13383))+(((-1.0)*r02*x13386))+(((-1.0)*x13384*x13387)));
evalcond[2]=((((-1.0)*r11*sj5*x13386))+((x13381*x13382))+(((-1.0)*r12*x13387)));
evalcond[3]=((-1.0)+((r11*x13388))+(((-1.0)*x13382*x13387))+(((-1.0)*r12*x13386)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13381*x13384))+(((-1.0)*x13383*x13386))+(((-1.0)*r02*x13387)));
evalcond[5]=((((-1.0)*r22*x13387))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13381*x13385))+(((-1.0)*r21*sj5*x13386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13389 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13389.valid){
continue;
}
CheckValue<IkReal> x13390=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13389.value)+(((1.5707963267949)*(x13390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13391=IKsin(j4);
IkReal x13392=IKcos(j4);
IkReal x13393=(cj5*r10);
IkReal x13394=(r01*sj5);
IkReal x13395=(cj5*r00);
IkReal x13396=(cj5*r20);
IkReal x13397=((1.0)*x13392);
IkReal x13398=((1.0)*x13391);
IkReal x13399=(sj5*x13391);
evalcond[0]=(((r21*x13399))+(((-1.0)*r22*x13397))+(((-1.0)*x13396*x13398)));
evalcond[1]=(((x13391*x13394))+(((-1.0)*x13395*x13398))+(((-1.0)*r02*x13397)));
evalcond[2]=(((x13392*x13393))+(((-1.0)*r11*sj5*x13397))+(((-1.0)*r12*x13398)));
evalcond[3]=((-1.0)+((r11*x13399))+(((-1.0)*r12*x13397))+(((-1.0)*x13393*x13398)));
evalcond[4]=(((cj2*sj1))+((x13392*x13395))+((cj1*sj2))+(((-1.0)*x13394*x13397))+(((-1.0)*r02*x13398)));
evalcond[5]=((((-1.0)*r22*x13398))+((x13392*x13396))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13401 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13401)==0){
continue;
}
IkReal x13400=pow(x13401,-0.5);
CheckValue<IkReal> x13402 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13402.valid){
continue;
}
IkReal gconst36=((-1.0)*(x13402.value));
IkReal gconst37=((-1.0)*r01*x13400);
IkReal gconst38=(r00*x13400);
CheckValue<IkReal> x13403 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13403.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13403.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13406 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13406.valid){
continue;
}
IkReal x13404=((-1.0)*(x13406.value));
IkReal x13405=x13400;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x13404;
IkReal gconst36=x13404;
IkReal gconst37=((-1.0)*r01*x13405);
IkReal gconst38=(r00*x13405);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13407=gconst38*gconst38;
IkReal x13408=gconst37*gconst37;
IkReal x13409=((1.0)*cj3);
IkReal x13410=(r11*r20);
IkReal x13411=(r10*sj3);
IkReal x13412=(gconst37*gconst38);
IkReal x13413=(r11*sj3);
IkReal x13414=(r21*x13408);
IkReal x13415=(cj3*x13412);
CheckValue<IkReal> x13416 = IKatan2WithCheck(IkReal((((gconst37*r22*x13411))+((gconst38*r22*x13413)))),IkReal((((r21*x13412*x13413))+(((-1.0)*r20*x13411*x13412))+((x13411*x13414))+(((-1.0)*sj3*x13407*x13410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13416.valid){
continue;
}
CheckValue<IkReal> x13417=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13409))+((x13410*x13415))+(((-1.0)*r10*r20*x13407*x13409))+(((-1.0)*r11*x13409*x13414))+((r10*r21*x13415)))),-1);
if(!x13417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13416.value)+(((1.5707963267949)*(x13417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13418=IKsin(j4);
IkReal x13419=IKcos(j4);
IkReal x13420=(sj1*sj2);
IkReal x13421=(gconst38*sj3);
IkReal x13422=(cj3*gconst38);
IkReal x13423=((1.0)*cj2);
IkReal x13424=(cj1*sj2);
IkReal x13425=(gconst37*r00);
IkReal x13426=((1.0)*cj3);
IkReal x13427=(gconst37*sj3);
IkReal x13428=(cj1*x13423);
IkReal x13429=((1.0)*x13419);
IkReal x13430=(cj3*x13418);
IkReal x13431=(sj3*x13418);
IkReal x13432=(gconst37*x13418);
IkReal x13433=((1.0)*gconst38*x13418);
IkReal x13434=(cj3*gconst37*x13419);
evalcond[0]=((((-1.0)*r22*x13429))+(((-1.0)*r20*x13433))+((r21*x13432)));
evalcond[1]=(((r01*x13432))+(((-1.0)*r02*x13429))+(((-1.0)*r00*x13433)));
evalcond[2]=((-1.0)+((r11*x13432))+(((-1.0)*r12*x13429))+(((-1.0)*r10*x13433)));
evalcond[3]=((((-1.0)*r10*x13422*x13429))+((r11*x13434))+((r11*x13421))+((r12*x13430))+((r10*x13427)));
evalcond[4]=((((-1.0)*gconst37*r10*x13426))+(((-1.0)*r11*x13422))+(((-1.0)*r10*x13421*x13429))+((r11*x13419*x13427))+((r12*x13431)));
evalcond[5]=(((r01*x13434))+x13420+(((-1.0)*r00*x13422*x13429))+((r02*x13430))+(((-1.0)*x13428))+((r01*x13421))+((sj3*x13425)));
evalcond[6]=((((-1.0)*x13424))+((r22*x13430))+(((-1.0)*sj1*x13423))+((r21*x13421))+(((-1.0)*r20*x13422*x13429))+((r21*x13434))+((r20*x13427)));
evalcond[7]=(((r01*x13419*x13427))+x13424+((cj2*sj1))+((r02*x13431))+(((-1.0)*r01*x13422))+(((-1.0)*r00*x13421*x13429))+(((-1.0)*x13425*x13426)));
evalcond[8]=(x13420+(((-1.0)*r21*x13422))+((r22*x13431))+((r21*x13419*x13427))+(((-1.0)*x13428))+(((-1.0)*gconst37*r20*x13426))+(((-1.0)*r20*x13421*x13429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13435=((1.0)*gconst38);
CheckValue<IkReal> x13436 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13435))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13436.valid){
continue;
}
CheckValue<IkReal> x13437=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x13435)))),-1);
if(!x13437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13436.value)+(((1.5707963267949)*(x13437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13438=IKsin(j4);
IkReal x13439=IKcos(j4);
IkReal x13440=(sj1*sj2);
IkReal x13441=(gconst38*sj3);
IkReal x13442=(cj3*gconst38);
IkReal x13443=((1.0)*cj2);
IkReal x13444=(cj1*sj2);
IkReal x13445=(gconst37*r00);
IkReal x13446=((1.0)*cj3);
IkReal x13447=(gconst37*sj3);
IkReal x13448=(cj1*x13443);
IkReal x13449=((1.0)*x13439);
IkReal x13450=(cj3*x13438);
IkReal x13451=(sj3*x13438);
IkReal x13452=(gconst37*x13438);
IkReal x13453=((1.0)*gconst38*x13438);
IkReal x13454=(cj3*gconst37*x13439);
evalcond[0]=(((r21*x13452))+(((-1.0)*r20*x13453))+(((-1.0)*r22*x13449)));
evalcond[1]=((((-1.0)*r02*x13449))+(((-1.0)*r00*x13453))+((r01*x13452)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13453))+(((-1.0)*r12*x13449))+((r11*x13452)));
evalcond[3]=(((r12*x13450))+((r11*x13454))+((r10*x13447))+((r11*x13441))+(((-1.0)*r10*x13442*x13449)));
evalcond[4]=(((r12*x13451))+(((-1.0)*gconst37*r10*x13446))+(((-1.0)*r10*x13441*x13449))+((r11*x13439*x13447))+(((-1.0)*r11*x13442)));
evalcond[5]=(x13440+(((-1.0)*r00*x13442*x13449))+(((-1.0)*x13448))+((r01*x13441))+((sj3*x13445))+((r02*x13450))+((r01*x13454)));
evalcond[6]=((((-1.0)*r20*x13442*x13449))+((r21*x13454))+((r20*x13447))+((r22*x13450))+(((-1.0)*x13444))+((r21*x13441))+(((-1.0)*sj1*x13443)));
evalcond[7]=((((-1.0)*r00*x13441*x13449))+x13444+((cj2*sj1))+(((-1.0)*r01*x13442))+((r01*x13439*x13447))+((r02*x13451))+(((-1.0)*x13445*x13446)));
evalcond[8]=(x13440+(((-1.0)*x13448))+(((-1.0)*gconst37*r20*x13446))+(((-1.0)*r20*x13441*x13449))+(((-1.0)*r21*x13442))+((r21*x13439*x13447))+((r22*x13451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13456 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13456)==0){
continue;
}
IkReal x13455=pow(x13456,-0.5);
CheckValue<IkReal> x13457 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13457.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x13457.value))));
IkReal gconst40=((1.0)*r01*x13455);
IkReal gconst41=((-1.0)*r00*x13455);
CheckValue<IkReal> x13458 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13458.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13458.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13461 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13461.valid){
continue;
}
IkReal x13459=((1.0)*(x13461.value));
IkReal x13460=x13455;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x13459)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13459)));
IkReal gconst40=((1.0)*r01*x13460);
IkReal gconst41=((-1.0)*r00*x13460);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13464 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13464.valid){
continue;
}
IkReal x13462=((1.0)*(x13464.value));
IkReal x13463=x13455;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x13462)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13462)));
IkReal gconst40=((1.0)*r01*x13463);
IkReal gconst41=((-1.0)*r00*x13463);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13465=gconst41*gconst41;
IkReal x13466=gconst40*gconst40;
IkReal x13467=(gconst40*r10);
IkReal x13468=(r22*sj3);
IkReal x13469=(r11*sj3);
IkReal x13470=((1.0)*cj3);
IkReal x13471=(gconst41*r21);
IkReal x13472=(gconst41*r20);
IkReal x13473=(r21*x13466);
IkReal x13474=((1.0)*r20*x13465);
CheckValue<IkReal> x13475=IKPowWithIntegerCheck(IKsign((((cj3*gconst40*r11*x13472))+((cj3*x13467*x13471))+(((-1.0)*r11*x13470*x13473))+(((-1.0)*r10*r20*x13465*x13470))+(((-1.0)*r12*r22*x13470)))),-1);
if(!x13475.valid){
continue;
}
CheckValue<IkReal> x13476 = IKatan2WithCheck(IkReal((((x13467*x13468))+((gconst41*r11*x13468)))),IkReal((((gconst40*x13469*x13471))+(((-1.0)*sj3*x13467*x13472))+(((-1.0)*x13469*x13474))+((r10*sj3*x13473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13475.value)))+(x13476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13477=IKsin(j4);
IkReal x13478=IKcos(j4);
IkReal x13479=(sj1*sj2);
IkReal x13480=(gconst40*sj3);
IkReal x13481=((1.0)*gconst41);
IkReal x13482=(gconst41*sj3);
IkReal x13483=(cj3*gconst40);
IkReal x13484=(cj3*gconst41);
IkReal x13485=((1.0)*cj2);
IkReal x13486=(cj1*sj2);
IkReal x13487=(cj1*x13485);
IkReal x13488=((1.0)*x13478);
IkReal x13489=(r01*x13478);
IkReal x13490=(cj3*x13477);
IkReal x13491=(sj3*x13477);
IkReal x13492=(r21*x13478);
IkReal x13493=(r11*x13478);
IkReal x13494=(gconst40*x13477);
evalcond[0]=((((-1.0)*r20*x13477*x13481))+(((-1.0)*r22*x13488))+((r21*x13494)));
evalcond[1]=((((-1.0)*r00*x13477*x13481))+(((-1.0)*r02*x13488))+((r01*x13494)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13488))+(((-1.0)*r10*x13477*x13481))+((r11*x13494)));
evalcond[3]=(((x13483*x13493))+((r11*x13482))+((r10*x13480))+(((-1.0)*cj3*r10*x13478*x13481))+((r12*x13490)));
evalcond[4]=(((x13480*x13493))+(((-1.0)*cj3*r11*x13481))+(((-1.0)*r10*x13483))+(((-1.0)*r10*sj3*x13478*x13481))+((r12*x13491)));
evalcond[5]=(x13479+(((-1.0)*cj3*r00*x13478*x13481))+((r02*x13490))+(((-1.0)*x13487))+((x13483*x13489))+((r00*x13480))+((r01*x13482)));
evalcond[6]=((((-1.0)*sj1*x13485))+((r22*x13490))+(((-1.0)*x13486))+((x13483*x13492))+((r20*x13480))+(((-1.0)*cj3*r20*x13478*x13481))+((r21*x13482)));
evalcond[7]=(x13486+((cj2*sj1))+((r02*x13491))+((x13480*x13489))+(((-1.0)*r00*x13483))+(((-1.0)*cj3*r01*x13481))+(((-1.0)*r00*sj3*x13478*x13481)));
evalcond[8]=(x13479+((r22*x13491))+(((-1.0)*x13487))+((x13480*x13492))+(((-1.0)*cj3*r21*x13481))+(((-1.0)*r20*sj3*x13478*x13481))+(((-1.0)*r20*x13483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13495=((1.0)*gconst41);
CheckValue<IkReal> x13496 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13495))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13496.valid){
continue;
}
CheckValue<IkReal> x13497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13495))+(((-1.0)*gconst40*r20)))),-1);
if(!x13497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13496.value)+(((1.5707963267949)*(x13497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13498=IKsin(j4);
IkReal x13499=IKcos(j4);
IkReal x13500=(sj1*sj2);
IkReal x13501=(gconst40*sj3);
IkReal x13502=((1.0)*gconst41);
IkReal x13503=(gconst41*sj3);
IkReal x13504=(cj3*gconst40);
IkReal x13505=(cj3*gconst41);
IkReal x13506=((1.0)*cj2);
IkReal x13507=(cj1*sj2);
IkReal x13508=(cj1*x13506);
IkReal x13509=((1.0)*x13499);
IkReal x13510=(r01*x13499);
IkReal x13511=(cj3*x13498);
IkReal x13512=(sj3*x13498);
IkReal x13513=(r21*x13499);
IkReal x13514=(r11*x13499);
IkReal x13515=(gconst40*x13498);
evalcond[0]=(((r21*x13515))+(((-1.0)*r20*x13498*x13502))+(((-1.0)*r22*x13509)));
evalcond[1]=((((-1.0)*r00*x13498*x13502))+(((-1.0)*r02*x13509))+((r01*x13515)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13509))+(((-1.0)*r10*x13498*x13502))+((r11*x13515)));
evalcond[3]=(((r10*x13501))+(((-1.0)*cj3*r10*x13499*x13502))+((r11*x13503))+((r12*x13511))+((x13504*x13514)));
evalcond[4]=((((-1.0)*r10*sj3*x13499*x13502))+(((-1.0)*cj3*r11*x13502))+(((-1.0)*r10*x13504))+((x13501*x13514))+((r12*x13512)));
evalcond[5]=(x13500+((r02*x13511))+(((-1.0)*cj3*r00*x13499*x13502))+(((-1.0)*x13508))+((x13504*x13510))+((r01*x13503))+((r00*x13501)));
evalcond[6]=((((-1.0)*sj1*x13506))+((r20*x13501))+(((-1.0)*cj3*r20*x13499*x13502))+((r22*x13511))+(((-1.0)*x13507))+((x13504*x13513))+((r21*x13503)));
evalcond[7]=(((cj2*sj1))+x13507+(((-1.0)*r00*x13504))+((r02*x13512))+(((-1.0)*r00*sj3*x13499*x13502))+(((-1.0)*cj3*r01*x13502))+((x13501*x13510)));
evalcond[8]=(x13500+(((-1.0)*r20*x13504))+((r22*x13512))+(((-1.0)*r20*sj3*x13499*x13502))+(((-1.0)*cj3*r21*x13502))+(((-1.0)*x13508))+((x13501*x13513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13516 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13516.valid){
continue;
}
CheckValue<IkReal> x13517=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x13517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13516.value)+(((1.5707963267949)*(x13517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13518=IKsin(j4);
IkReal x13519=IKcos(j4);
IkReal x13520=(sj1*sj2);
IkReal x13521=(gconst40*sj3);
IkReal x13522=((1.0)*gconst41);
IkReal x13523=(gconst41*sj3);
IkReal x13524=(cj3*gconst40);
IkReal x13525=(cj3*gconst41);
IkReal x13526=((1.0)*cj2);
IkReal x13527=(cj1*sj2);
IkReal x13528=(cj1*x13526);
IkReal x13529=((1.0)*x13519);
IkReal x13530=(r01*x13519);
IkReal x13531=(cj3*x13518);
IkReal x13532=(sj3*x13518);
IkReal x13533=(r21*x13519);
IkReal x13534=(r11*x13519);
IkReal x13535=(gconst40*x13518);
evalcond[0]=((((-1.0)*r22*x13529))+(((-1.0)*r20*x13518*x13522))+((r21*x13535)));
evalcond[1]=((((-1.0)*r00*x13518*x13522))+((r01*x13535))+(((-1.0)*r02*x13529)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13529))+(((-1.0)*r10*x13518*x13522))+((r11*x13535)));
evalcond[3]=(((x13524*x13534))+((r12*x13531))+((r11*x13523))+(((-1.0)*cj3*r10*x13519*x13522))+((r10*x13521)));
evalcond[4]=((((-1.0)*cj3*r11*x13522))+(((-1.0)*r10*x13524))+((r12*x13532))+(((-1.0)*r10*sj3*x13519*x13522))+((x13521*x13534)));
evalcond[5]=(((r01*x13523))+x13520+((r02*x13531))+(((-1.0)*cj3*r00*x13519*x13522))+((x13524*x13530))+(((-1.0)*x13528))+((r00*x13521)));
evalcond[6]=(((r21*x13523))+(((-1.0)*sj1*x13526))+((r20*x13521))+(((-1.0)*x13527))+(((-1.0)*cj3*r20*x13519*x13522))+((x13524*x13533))+((r22*x13531)));
evalcond[7]=(((cj2*sj1))+x13527+(((-1.0)*r00*x13524))+((r02*x13532))+(((-1.0)*cj3*r01*x13522))+(((-1.0)*r00*sj3*x13519*x13522))+((x13521*x13530)));
evalcond[8]=(x13520+(((-1.0)*r20*x13524))+((r22*x13532))+(((-1.0)*x13528))+(((-1.0)*cj3*r21*x13522))+(((-1.0)*r20*sj3*x13519*x13522))+((x13521*x13533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13536=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13536);
rxp1_1=(px*r21);
rxp1_2=(r11*x13536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13537=(r11*sj5);
IkReal x13538=((1.0)*cj5*r10);
j4eval[0]=(x13537+(((-1.0)*x13538)));
j4eval[1]=((((-1.0)*cj3*x13538))+((cj3*x13537)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13539=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13539);
rxp1_1=(px*r21);
rxp1_2=(r11*x13539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13540=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13540);
rxp1_1=(px*r21);
rxp1_2=(r11*x13540);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13541=((1.0)*r10);
CheckValue<IkReal> x13542=IKPowWithIntegerCheck(cj3,-1);
if(!x13542.valid){
continue;
}
CheckValue<IkReal> x13543=IKPowWithIntegerCheck(r02,-1);
if(!x13543.valid){
continue;
}
CheckValue<IkReal> x13544=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13541))+((cj3*r11*sj5))),-1);
if(!x13544.valid){
continue;
}
if( IKabs(((x13542.value)*(x13543.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13544.value)*(((((-1.0)*sj3*sj5*x13541))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13542.value)*(x13543.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13544.value)*(((((-1.0)*sj3*sj5*x13541))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13542.value)*(x13543.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13544.value)*(((((-1.0)*sj3*sj5*x13541))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13545=IKsin(j4);
IkReal x13546=IKcos(j4);
IkReal x13547=(sj1*sj2);
IkReal x13548=((1.0)*r10);
IkReal x13549=(cj3*sj5);
IkReal x13550=((1.0)*cj1);
IkReal x13551=((1.0)*r20);
IkReal x13552=(cj5*sj3);
IkReal x13553=(cj2*sj1);
IkReal x13554=(cj3*cj5);
IkReal x13555=(sj3*sj5);
IkReal x13556=(cj2*x13550);
IkReal x13557=(cj5*x13545);
IkReal x13558=(r11*x13546);
IkReal x13559=(sj5*x13545);
IkReal x13560=(r21*x13546);
IkReal x13561=(r02*x13545);
evalcond[0]=((-1.0)*r02*x13546);
evalcond[1]=(x13553+((sj3*x13561))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x13551*x13557))+((r21*x13559)));
evalcond[3]=(x13547+(((-1.0)*x13556))+((cj3*x13561)));
evalcond[4]=((-1.0)+((r11*x13559))+(((-1.0)*x13548*x13557)));
evalcond[5]=(((r10*x13555))+((r11*x13552))+(((-1.0)*x13546*x13548*x13554))+((x13549*x13558)));
evalcond[6]=((((-1.0)*x13548*x13549))+((x13555*x13558))+(((-1.0)*x13546*x13548*x13552))+(((-1.0)*r11*x13554)));
evalcond[7]=((((-1.0)*x13546*x13551*x13554))+((r21*x13552))+(((-1.0)*sj2*x13550))+((x13549*x13560))+((r20*x13555))+(((-1.0)*x13553)));
evalcond[8]=((((-1.0)*x13546*x13551*x13552))+x13547+(((-1.0)*x13556))+(((-1.0)*r21*x13554))+(((-1.0)*x13549*x13551))+((x13555*x13560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13562=IKPowWithIntegerCheck(r02,-1);
if(!x13562.valid){
continue;
}
CheckValue<IkReal> x13563=IKPowWithIntegerCheck(sj3,-1);
if(!x13563.valid){
continue;
}
CheckValue<IkReal> x13564=IKPowWithIntegerCheck((((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3))),-1);
if(!x13564.valid){
continue;
}
if( IKabs(((x13562.value)*(x13563.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13564.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13562.value)*(x13563.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13564.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13562.value)*(x13563.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13564.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13565=IKsin(j4);
IkReal x13566=IKcos(j4);
IkReal x13567=(sj1*sj2);
IkReal x13568=((1.0)*r10);
IkReal x13569=(cj3*sj5);
IkReal x13570=((1.0)*cj1);
IkReal x13571=((1.0)*r20);
IkReal x13572=(cj5*sj3);
IkReal x13573=(cj2*sj1);
IkReal x13574=(cj3*cj5);
IkReal x13575=(sj3*sj5);
IkReal x13576=(cj2*x13570);
IkReal x13577=(cj5*x13565);
IkReal x13578=(r11*x13566);
IkReal x13579=(sj5*x13565);
IkReal x13580=(r21*x13566);
IkReal x13581=(r02*x13565);
evalcond[0]=((-1.0)*r02*x13566);
evalcond[1]=(x13573+((cj1*sj2))+((sj3*x13581)));
evalcond[2]=((((-1.0)*x13571*x13577))+((r21*x13579)));
evalcond[3]=(x13567+((cj3*x13581))+(((-1.0)*x13576)));
evalcond[4]=((-1.0)+(((-1.0)*x13568*x13577))+((r11*x13579)));
evalcond[5]=(((r10*x13575))+(((-1.0)*x13566*x13568*x13574))+((x13569*x13578))+((r11*x13572)));
evalcond[6]=((((-1.0)*r11*x13574))+(((-1.0)*x13566*x13568*x13572))+(((-1.0)*x13568*x13569))+((x13575*x13578)));
evalcond[7]=(((x13569*x13580))+(((-1.0)*x13566*x13571*x13574))+(((-1.0)*sj2*x13570))+((r20*x13575))+((r21*x13572))+(((-1.0)*x13573)));
evalcond[8]=((((-1.0)*r21*x13574))+x13567+(((-1.0)*x13566*x13571*x13572))+((x13575*x13580))+(((-1.0)*x13576))+(((-1.0)*x13569*x13571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13582=((1.0)*r10);
IkReal x13583=(r11*sj5);
CheckValue<IkReal> x13584=IKPowWithIntegerCheck((x13583+(((-1.0)*cj5*x13582))),-1);
if(!x13584.valid){
continue;
}
CheckValue<IkReal> x13585=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13582))+((cj3*x13583))),-1);
if(!x13585.valid){
continue;
}
if( IKabs(x13584.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13585.value)*(((((-1.0)*sj3*sj5*x13582))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13584.value)+IKsqr(((x13585.value)*(((((-1.0)*sj3*sj5*x13582))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13584.value, ((x13585.value)*(((((-1.0)*sj3*sj5*x13582))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13586=IKsin(j4);
IkReal x13587=IKcos(j4);
IkReal x13588=(sj1*sj2);
IkReal x13589=((1.0)*r10);
IkReal x13590=(cj3*sj5);
IkReal x13591=((1.0)*cj1);
IkReal x13592=((1.0)*r20);
IkReal x13593=(cj5*sj3);
IkReal x13594=(cj2*sj1);
IkReal x13595=(cj3*cj5);
IkReal x13596=(sj3*sj5);
IkReal x13597=(cj2*x13591);
IkReal x13598=(cj5*x13586);
IkReal x13599=(r11*x13587);
IkReal x13600=(sj5*x13586);
IkReal x13601=(r21*x13587);
IkReal x13602=(r02*x13586);
evalcond[0]=((-1.0)*r02*x13587);
evalcond[1]=(x13594+((cj1*sj2))+((sj3*x13602)));
evalcond[2]=((((-1.0)*x13592*x13598))+((r21*x13600)));
evalcond[3]=(x13588+((cj3*x13602))+(((-1.0)*x13597)));
evalcond[4]=((-1.0)+((r11*x13600))+(((-1.0)*x13589*x13598)));
evalcond[5]=((((-1.0)*x13587*x13589*x13595))+((r11*x13593))+((r10*x13596))+((x13590*x13599)));
evalcond[6]=((((-1.0)*x13587*x13589*x13593))+(((-1.0)*x13589*x13590))+(((-1.0)*r11*x13595))+((x13596*x13599)));
evalcond[7]=(((r21*x13593))+(((-1.0)*x13594))+(((-1.0)*sj2*x13591))+((r20*x13596))+(((-1.0)*x13587*x13592*x13595))+((x13590*x13601)));
evalcond[8]=(x13588+(((-1.0)*x13590*x13592))+(((-1.0)*x13597))+(((-1.0)*x13587*x13592*x13593))+((x13596*x13601))+(((-1.0)*r21*x13595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13603=cj5*cj5;
IkReal x13604=((1.0)*cj3);
IkReal x13605=(r10*r21);
IkReal x13606=(cj5*sj5);
IkReal x13607=(r11*r21);
IkReal x13608=(r11*r20);
IkReal x13609=(r22*sj3);
IkReal x13610=(r10*r20);
IkReal x13611=((1.0)*sj3*x13603);
CheckValue<IkReal> x13612=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13604*x13607))+((cj3*x13606*x13608))+(((-1.0)*r12*r22*x13604))+((cj3*x13603*x13607))+(((-1.0)*x13603*x13604*x13610))+((cj3*x13605*x13606)))),-1);
if(!x13612.valid){
continue;
}
CheckValue<IkReal> x13613 = IKatan2WithCheck(IkReal((((cj5*r11*x13609))+((r10*sj5*x13609)))),IkReal(((((-1.0)*x13608*x13611))+(((-1.0)*sj3*x13606*x13610))+((sj3*x13606*x13607))+((sj3*x13605))+(((-1.0)*x13605*x13611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13612.value)))+(x13613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13614=IKsin(j4);
IkReal x13615=IKcos(j4);
IkReal x13616=(sj1*sj2);
IkReal x13617=(cj3*sj5);
IkReal x13618=((1.0)*r10);
IkReal x13619=(sj3*sj5);
IkReal x13620=(cj5*r01);
IkReal x13621=((1.0)*cj1);
IkReal x13622=((1.0)*r20);
IkReal x13623=((1.0)*cj3);
IkReal x13624=((1.0)*r00);
IkReal x13625=(cj5*r11);
IkReal x13626=(cj5*r10);
IkReal x13627=(cj2*sj1);
IkReal x13628=(cj5*r00);
IkReal x13629=(cj5*r21);
IkReal x13630=(cj5*r20);
IkReal x13631=(cj2*x13621);
IkReal x13632=((1.0)*x13615);
IkReal x13633=(r11*x13615);
IkReal x13634=(cj5*x13614);
IkReal x13635=(cj3*x13614);
IkReal x13636=(sj3*x13614);
IkReal x13637=(sj5*x13614);
IkReal x13638=(r21*x13615);
IkReal x13639=(r01*x13615);
evalcond[0]=((((-1.0)*x13622*x13634))+(((-1.0)*r22*x13632))+((r21*x13637)));
evalcond[1]=((((-1.0)*r02*x13632))+(((-1.0)*x13624*x13634))+((r01*x13637)));
evalcond[2]=((-1.0)+((r11*x13637))+(((-1.0)*r12*x13632))+(((-1.0)*x13618*x13634)));
evalcond[3]=(((r12*x13635))+(((-1.0)*cj3*cj5*x13615*x13618))+((x13617*x13633))+((r10*x13619))+((sj3*x13625)));
evalcond[4]=((((-1.0)*cj5*sj3*x13615*x13618))+(((-1.0)*x13623*x13625))+((r12*x13636))+((x13619*x13633))+(((-1.0)*x13617*x13618)));
evalcond[5]=(x13616+((x13617*x13639))+((r02*x13635))+((r00*x13619))+(((-1.0)*x13631))+(((-1.0)*x13615*x13623*x13628))+((sj3*x13620)));
evalcond[6]=(((r20*x13619))+((x13617*x13638))+((r22*x13635))+(((-1.0)*cj3*cj5*x13615*x13622))+(((-1.0)*sj2*x13621))+((sj3*x13629))+(((-1.0)*x13627)));
evalcond[7]=((((-1.0)*x13620*x13623))+x13627+((cj1*sj2))+((r02*x13636))+(((-1.0)*x13617*x13624))+((x13619*x13639))+(((-1.0)*cj5*sj3*x13615*x13624)));
evalcond[8]=(x13616+(((-1.0)*x13623*x13629))+((r22*x13636))+(((-1.0)*x13617*x13622))+((x13619*x13638))+(((-1.0)*cj5*sj3*x13615*x13622))+(((-1.0)*x13631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13640=((1.0)*cj5);
CheckValue<IkReal> x13641=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13640))+(((-1.0)*r20*sj5)))),-1);
if(!x13641.valid){
continue;
}
CheckValue<IkReal> x13642 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13641.value)))+(x13642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13643=IKsin(j4);
IkReal x13644=IKcos(j4);
IkReal x13645=(sj1*sj2);
IkReal x13646=(cj3*sj5);
IkReal x13647=((1.0)*r10);
IkReal x13648=(sj3*sj5);
IkReal x13649=(cj5*r01);
IkReal x13650=((1.0)*cj1);
IkReal x13651=((1.0)*r20);
IkReal x13652=((1.0)*cj3);
IkReal x13653=((1.0)*r00);
IkReal x13654=(cj5*r11);
IkReal x13655=(cj5*r10);
IkReal x13656=(cj2*sj1);
IkReal x13657=(cj5*r00);
IkReal x13658=(cj5*r21);
IkReal x13659=(cj5*r20);
IkReal x13660=(cj2*x13650);
IkReal x13661=((1.0)*x13644);
IkReal x13662=(r11*x13644);
IkReal x13663=(cj5*x13643);
IkReal x13664=(cj3*x13643);
IkReal x13665=(sj3*x13643);
IkReal x13666=(sj5*x13643);
IkReal x13667=(r21*x13644);
IkReal x13668=(r01*x13644);
evalcond[0]=((((-1.0)*r22*x13661))+(((-1.0)*x13651*x13663))+((r21*x13666)));
evalcond[1]=((((-1.0)*x13653*x13663))+((r01*x13666))+(((-1.0)*r02*x13661)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13661))+((r11*x13666))+(((-1.0)*x13647*x13663)));
evalcond[3]=(((r12*x13664))+((r10*x13648))+(((-1.0)*cj3*cj5*x13644*x13647))+((sj3*x13654))+((x13646*x13662)));
evalcond[4]=((((-1.0)*cj5*sj3*x13644*x13647))+((x13648*x13662))+((r12*x13665))+(((-1.0)*x13646*x13647))+(((-1.0)*x13652*x13654)));
evalcond[5]=(x13645+(((-1.0)*x13644*x13652*x13657))+((r02*x13664))+((sj3*x13649))+(((-1.0)*x13660))+((r00*x13648))+((x13646*x13668)));
evalcond[6]=((((-1.0)*x13656))+((r22*x13664))+((r20*x13648))+(((-1.0)*cj3*cj5*x13644*x13651))+(((-1.0)*sj2*x13650))+((sj3*x13658))+((x13646*x13667)));
evalcond[7]=(x13656+((cj1*sj2))+((x13648*x13668))+((r02*x13665))+(((-1.0)*x13649*x13652))+(((-1.0)*cj5*sj3*x13644*x13653))+(((-1.0)*x13646*x13653)));
evalcond[8]=(x13645+((r22*x13665))+((x13648*x13667))+(((-1.0)*x13660))+(((-1.0)*cj5*sj3*x13644*x13651))+(((-1.0)*x13652*x13658))+(((-1.0)*x13646*x13651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13669 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13669.valid){
continue;
}
CheckValue<IkReal> x13670=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13669.value)+(((1.5707963267949)*(x13670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13671=IKsin(j4);
IkReal x13672=IKcos(j4);
IkReal x13673=(sj1*sj2);
IkReal x13674=(cj3*sj5);
IkReal x13675=((1.0)*r10);
IkReal x13676=(sj3*sj5);
IkReal x13677=(cj5*r01);
IkReal x13678=((1.0)*cj1);
IkReal x13679=((1.0)*r20);
IkReal x13680=((1.0)*cj3);
IkReal x13681=((1.0)*r00);
IkReal x13682=(cj5*r11);
IkReal x13683=(cj5*r10);
IkReal x13684=(cj2*sj1);
IkReal x13685=(cj5*r00);
IkReal x13686=(cj5*r21);
IkReal x13687=(cj5*r20);
IkReal x13688=(cj2*x13678);
IkReal x13689=((1.0)*x13672);
IkReal x13690=(r11*x13672);
IkReal x13691=(cj5*x13671);
IkReal x13692=(cj3*x13671);
IkReal x13693=(sj3*x13671);
IkReal x13694=(sj5*x13671);
IkReal x13695=(r21*x13672);
IkReal x13696=(r01*x13672);
evalcond[0]=((((-1.0)*r22*x13689))+((r21*x13694))+(((-1.0)*x13679*x13691)));
evalcond[1]=(((r01*x13694))+(((-1.0)*x13681*x13691))+(((-1.0)*r02*x13689)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13689))+(((-1.0)*x13675*x13691))+((r11*x13694)));
evalcond[3]=(((x13674*x13690))+(((-1.0)*cj3*cj5*x13672*x13675))+((sj3*x13682))+((r10*x13676))+((r12*x13692)));
evalcond[4]=((((-1.0)*x13674*x13675))+((x13676*x13690))+(((-1.0)*cj5*sj3*x13672*x13675))+((r12*x13693))+(((-1.0)*x13680*x13682)));
evalcond[5]=(x13673+((x13674*x13696))+((r00*x13676))+(((-1.0)*x13688))+((sj3*x13677))+((r02*x13692))+(((-1.0)*x13672*x13680*x13685)));
evalcond[6]=(((x13674*x13695))+(((-1.0)*sj2*x13678))+(((-1.0)*cj3*cj5*x13672*x13679))+(((-1.0)*x13684))+((r22*x13692))+((r20*x13676))+((sj3*x13686)));
evalcond[7]=((((-1.0)*x13674*x13681))+x13684+(((-1.0)*cj5*sj3*x13672*x13681))+((x13676*x13696))+((cj1*sj2))+(((-1.0)*x13677*x13680))+((r02*x13693)));
evalcond[8]=(x13673+(((-1.0)*x13674*x13679))+((x13676*x13695))+(((-1.0)*x13688))+((r22*x13693))+(((-1.0)*cj5*sj3*x13672*x13679))+(((-1.0)*x13680*x13686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13697=((-1.0)*r00);
IkReal x13699 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13699)==0){
continue;
}
IkReal x13698=pow(x13699,-0.5);
CheckValue<IkReal> x13700 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13697),IKFAST_ATAN2_MAGTHRESH);
if(!x13700.valid){
continue;
}
IkReal gconst12=((-1.0)*(x13700.value));
IkReal gconst13=(r01*x13698);
IkReal gconst14=(x13697*x13698);
CheckValue<IkReal> x13701 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13701.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13701.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x13702=((-1.0)*r00);
IkReal x13703=x13698;
CheckValue<IkReal> x13705 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13702),IKFAST_ATAN2_MAGTHRESH);
if(!x13705.valid){
continue;
}
IkReal x13704=((-1.0)*(x13705.value));
sj5=gconst13;
cj5=gconst14;
j5=x13704;
IkReal gconst12=x13704;
IkReal gconst13=(r01*x13703);
IkReal gconst14=(x13702*x13703);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13706=((1.0)*sj0);
IkReal x13707=((1.0)*cj0);
CheckValue<IkReal> x13708 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x13706))+(((-1.0)*r02*x13707)))),IkReal(((((-1.0)*gconst13*r11*x13706))+((cj0*gconst14*r00))+(((-1.0)*gconst13*r01*x13707))+((gconst14*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13708.valid){
continue;
}
CheckValue<IkReal> x13709=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x13709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13708.value)+(((1.5707963267949)*(x13709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13710=IKsin(j4);
IkReal x13711=IKcos(j4);
IkReal x13712=((1.0)*cj3);
IkReal x13713=(gconst13*r20);
IkReal x13714=(cj1*cj2);
IkReal x13715=(gconst13*sj3);
IkReal x13716=(gconst13*r01);
IkReal x13717=(sj1*sj2);
IkReal x13718=(gconst14*r21);
IkReal x13719=(gconst14*sj3);
IkReal x13720=((1.0)*sj0);
IkReal x13721=(cj3*gconst14);
IkReal x13722=((1.0)*x13711);
IkReal x13723=(cj3*x13710);
IkReal x13724=(sj3*x13710);
IkReal x13725=(cj3*x13711);
IkReal x13726=((1.0)*cj2*sj1);
IkReal x13727=(gconst13*x13710);
IkReal x13728=((1.0)*cj1*sj2);
IkReal x13729=((1.0)*gconst14*x13710);
evalcond[0]=((((-1.0)*r22*x13722))+((r21*x13727))+(((-1.0)*r20*x13729)));
evalcond[1]=((((-1.0)*r10*x13729))+cj0+((r11*x13727))+(((-1.0)*r12*x13722)));
evalcond[2]=(((x13710*x13716))+(((-1.0)*r02*x13722))+(((-1.0)*x13720))+(((-1.0)*r00*x13729)));
evalcond[3]=((((-1.0)*gconst14*r20*x13711*x13712))+((sj3*x13713))+((sj3*x13718))+((r22*x13723))+((gconst13*r21*x13725))+(((-1.0)*x13726))+(((-1.0)*x13728)));
evalcond[4]=((((-1.0)*r20*x13719*x13722))+(((-1.0)*x13714))+x13717+((r22*x13724))+((r21*x13711*x13715))+(((-1.0)*x13712*x13713))+(((-1.0)*x13712*x13718)));
evalcond[5]=(((x13716*x13725))+(((-1.0)*gconst14*r00*x13711*x13712))+((r00*x13715))+((r01*x13719))+((r02*x13723))+(((-1.0)*cj0*x13717))+((cj0*x13714)));
evalcond[6]=(((sj0*x13714))+((gconst13*r11*x13725))+((r12*x13723))+((r10*x13715))+(((-1.0)*x13717*x13720))+((r11*x13719))+(((-1.0)*gconst14*r10*x13711*x13712)));
evalcond[7]=(((r01*x13711*x13715))+(((-1.0)*r00*x13719*x13722))+(((-1.0)*gconst13*r00*x13712))+(((-1.0)*gconst14*r01*x13712))+(((-1.0)*cj0*x13728))+(((-1.0)*cj0*x13726))+((r02*x13724)));
evalcond[8]=((((-1.0)*gconst14*r11*x13712))+(((-1.0)*cj2*sj1*x13720))+((r12*x13724))+(((-1.0)*r10*x13719*x13722))+(((-1.0)*gconst13*r10*x13712))+((r11*x13711*x13715))+(((-1.0)*cj1*sj2*x13720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13730=((1.0)*gconst14);
CheckValue<IkReal> x13731 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x13730))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13731.valid){
continue;
}
CheckValue<IkReal> x13732=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x13730)))),-1);
if(!x13732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13731.value)+(((1.5707963267949)*(x13732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13733=IKsin(j4);
IkReal x13734=IKcos(j4);
IkReal x13735=((1.0)*cj3);
IkReal x13736=(gconst13*r20);
IkReal x13737=(cj1*cj2);
IkReal x13738=(gconst13*sj3);
IkReal x13739=(gconst13*r01);
IkReal x13740=(sj1*sj2);
IkReal x13741=(gconst14*r21);
IkReal x13742=(gconst14*sj3);
IkReal x13743=((1.0)*sj0);
IkReal x13744=(cj3*gconst14);
IkReal x13745=((1.0)*x13734);
IkReal x13746=(cj3*x13733);
IkReal x13747=(sj3*x13733);
IkReal x13748=(cj3*x13734);
IkReal x13749=((1.0)*cj2*sj1);
IkReal x13750=(gconst13*x13733);
IkReal x13751=((1.0)*cj1*sj2);
IkReal x13752=((1.0)*gconst14*x13733);
evalcond[0]=((((-1.0)*r20*x13752))+((r21*x13750))+(((-1.0)*r22*x13745)));
evalcond[1]=(((r11*x13750))+(((-1.0)*r12*x13745))+cj0+(((-1.0)*r10*x13752)));
evalcond[2]=((((-1.0)*r02*x13745))+(((-1.0)*r00*x13752))+(((-1.0)*x13743))+((x13733*x13739)));
evalcond[3]=((((-1.0)*x13751))+((r22*x13746))+((sj3*x13736))+((gconst13*r21*x13748))+(((-1.0)*gconst14*r20*x13734*x13735))+(((-1.0)*x13749))+((sj3*x13741)));
evalcond[4]=(((r21*x13734*x13738))+(((-1.0)*x13735*x13736))+x13740+(((-1.0)*x13735*x13741))+((r22*x13747))+(((-1.0)*r20*x13742*x13745))+(((-1.0)*x13737)));
evalcond[5]=(((r00*x13738))+((r01*x13742))+((cj0*x13737))+((x13739*x13748))+(((-1.0)*cj0*x13740))+(((-1.0)*gconst14*r00*x13734*x13735))+((r02*x13746)));
evalcond[6]=(((r10*x13738))+((sj0*x13737))+(((-1.0)*x13740*x13743))+((r12*x13746))+(((-1.0)*gconst14*r10*x13734*x13735))+((gconst13*r11*x13748))+((r11*x13742)));
evalcond[7]=((((-1.0)*gconst14*r01*x13735))+(((-1.0)*gconst13*r00*x13735))+((r01*x13734*x13738))+(((-1.0)*r00*x13742*x13745))+(((-1.0)*cj0*x13751))+(((-1.0)*cj0*x13749))+((r02*x13747)));
evalcond[8]=((((-1.0)*cj1*sj2*x13743))+((r11*x13734*x13738))+(((-1.0)*gconst14*r11*x13735))+(((-1.0)*gconst13*r10*x13735))+(((-1.0)*cj2*sj1*x13743))+((r12*x13747))+(((-1.0)*r10*x13742*x13745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13753=((-1.0)*r01);
IkReal x13755 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13755)==0){
continue;
}
IkReal x13754=pow(x13755,-0.5);
CheckValue<IkReal> x13756 = IKatan2WithCheck(IkReal(x13753),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13756.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x13756.value))));
IkReal gconst16=(x13753*x13754);
IkReal gconst17=((1.0)*r00*x13754);
CheckValue<IkReal> x13757 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13757.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13757.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x13758=((-1.0)*r01);
CheckValue<IkReal> x13761 = IKatan2WithCheck(IkReal(x13758),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13761.valid){
continue;
}
IkReal x13759=((1.0)*(x13761.value));
IkReal x13760=x13754;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13759)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13759)));
IkReal gconst16=(x13758*x13760);
IkReal gconst17=((1.0)*r00*x13760);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13762=((-1.0)*r01);
CheckValue<IkReal> x13765 = IKatan2WithCheck(IkReal(x13762),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13765.valid){
continue;
}
IkReal x13763=((1.0)*(x13765.value));
IkReal x13764=x13754;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13763)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13763)));
IkReal gconst16=(x13762*x13764);
IkReal gconst17=((1.0)*r00*x13764);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13766=((-1.0)*r01);
CheckValue<IkReal> x13769 = IKatan2WithCheck(IkReal(x13766),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13769.valid){
continue;
}
IkReal x13767=((1.0)*(x13769.value));
IkReal x13768=x13754;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13767)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13767)));
IkReal gconst16=(x13766*x13768);
IkReal gconst17=((1.0)*r00*x13768);
IkReal x13770=r02*r02;
IkReal x13771=(r12*sj0);
IkReal x13772=((1.0)*cj0);
IkReal x13773=x13754;
j4eval[0]=((IKabs(((((-1.0)*x13772*x13773))+((r02*x13771*x13773))+((cj0*x13770*x13773)))))+(IKabs(((((-1.0)*x13771))+(((-1.0)*r02*x13772))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x13774=((-1.0)*r01);
CheckValue<IkReal> x13777 = IKatan2WithCheck(IkReal(x13774),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13777.valid){
continue;
}
IkReal x13775=((1.0)*(x13777.value));
IkReal x13776=x13754;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13775)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13775)));
IkReal gconst16=(x13774*x13776);
IkReal gconst17=((1.0)*r00*x13776);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13778=((-1.0)*r01);
CheckValue<IkReal> x13781 = IKatan2WithCheck(IkReal(x13778),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13781.valid){
continue;
}
IkReal x13779=((1.0)*(x13781.value));
IkReal x13780=x13754;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13779)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13779)));
IkReal gconst16=(x13778*x13780);
IkReal gconst17=((1.0)*r00*x13780);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13782=gconst16*gconst16;
IkReal x13783=gconst17*gconst17;
IkReal x13784=(r11*sj3);
IkReal x13785=(cj3*r10);
IkReal x13786=((1.0)*cj3);
IkReal x13787=(r10*sj3);
IkReal x13788=(gconst16*gconst17);
IkReal x13789=(r21*x13782);
IkReal x13790=((1.0)*r20*x13783);
CheckValue<IkReal> x13791 = IKatan2WithCheck(IkReal((((gconst17*r22*x13784))+((gconst16*r22*x13787)))),IkReal(((((-1.0)*x13784*x13790))+(((-1.0)*r20*x13787*x13788))+((r21*x13784*x13788))+((x13787*x13789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13791.valid){
continue;
}
CheckValue<IkReal> x13792=IKPowWithIntegerCheck(IKsign((((cj3*r11*r20*x13788))+(((-1.0)*r12*r22*x13786))+(((-1.0)*x13785*x13790))+(((-1.0)*r11*x13786*x13789))+((r21*x13785*x13788)))),-1);
if(!x13792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13791.value)+(((1.5707963267949)*(x13792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13793=IKsin(j4);
IkReal x13794=IKcos(j4);
IkReal x13795=(sj1*sj2);
IkReal x13796=(cj3*gconst17);
IkReal x13797=((1.0)*cj1);
IkReal x13798=(r11*sj3);
IkReal x13799=(gconst17*r20);
IkReal x13800=(r21*sj3);
IkReal x13801=(r10*sj3);
IkReal x13802=(gconst16*sj3);
IkReal x13803=(cj2*sj1);
IkReal x13804=(gconst17*r00);
IkReal x13805=(r01*sj3);
IkReal x13806=(cj2*x13797);
IkReal x13807=((1.0)*x13794);
IkReal x13808=(gconst16*x13793);
IkReal x13809=(gconst16*x13794);
IkReal x13810=(cj3*x13793);
IkReal x13811=((1.0)*x13793);
IkReal x13812=(sj3*x13793);
IkReal x13813=((1.0)*cj3*gconst16);
evalcond[0]=(((r21*x13808))+(((-1.0)*r22*x13807))+(((-1.0)*x13799*x13811)));
evalcond[1]=(((r01*x13808))+(((-1.0)*r02*x13807))+(((-1.0)*x13804*x13811)));
evalcond[2]=((-1.0)+((r11*x13808))+(((-1.0)*gconst17*r10*x13811))+(((-1.0)*r12*x13807)));
evalcond[3]=(((gconst16*x13801))+((r12*x13810))+(((-1.0)*r10*x13796*x13807))+((cj3*r11*x13809))+((gconst17*x13798)));
evalcond[4]=(((r12*x13812))+((x13798*x13809))+(((-1.0)*r10*x13813))+(((-1.0)*gconst17*x13801*x13807))+(((-1.0)*r11*x13796)));
evalcond[5]=((((-1.0)*x13806))+x13795+((r00*x13802))+((gconst17*x13805))+(((-1.0)*r00*x13796*x13807))+((cj3*r01*x13809))+((r02*x13810)));
evalcond[6]=(((cj3*r21*x13809))+((gconst17*x13800))+(((-1.0)*x13803))+(((-1.0)*r20*x13796*x13807))+(((-1.0)*sj2*x13797))+((r22*x13810))+((r20*x13802)));
evalcond[7]=((((-1.0)*sj3*x13804*x13807))+x13803+((cj1*sj2))+(((-1.0)*r01*x13796))+((r02*x13812))+(((-1.0)*r00*x13813))+((r01*x13794*x13802)));
evalcond[8]=((((-1.0)*r21*x13796))+(((-1.0)*r20*x13813))+(((-1.0)*x13806))+x13795+((r22*x13812))+(((-1.0)*sj3*x13799*x13807))+((x13800*x13809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13814=((1.0)*gconst17);
CheckValue<IkReal> x13815=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13814)))),-1);
if(!x13815.valid){
continue;
}
CheckValue<IkReal> x13816 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x13814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13815.value)))+(x13816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13817=IKsin(j4);
IkReal x13818=IKcos(j4);
IkReal x13819=(sj1*sj2);
IkReal x13820=(cj3*gconst17);
IkReal x13821=((1.0)*cj1);
IkReal x13822=(r11*sj3);
IkReal x13823=(gconst17*r20);
IkReal x13824=(r21*sj3);
IkReal x13825=(r10*sj3);
IkReal x13826=(gconst16*sj3);
IkReal x13827=(cj2*sj1);
IkReal x13828=(gconst17*r00);
IkReal x13829=(r01*sj3);
IkReal x13830=(cj2*x13821);
IkReal x13831=((1.0)*x13818);
IkReal x13832=(gconst16*x13817);
IkReal x13833=(gconst16*x13818);
IkReal x13834=(cj3*x13817);
IkReal x13835=((1.0)*x13817);
IkReal x13836=(sj3*x13817);
IkReal x13837=((1.0)*cj3*gconst16);
evalcond[0]=((((-1.0)*x13823*x13835))+((r21*x13832))+(((-1.0)*r22*x13831)));
evalcond[1]=(((r01*x13832))+(((-1.0)*r02*x13831))+(((-1.0)*x13828*x13835)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13831))+((r11*x13832))+(((-1.0)*gconst17*r10*x13835)));
evalcond[3]=(((gconst16*x13825))+((cj3*r11*x13833))+((gconst17*x13822))+((r12*x13834))+(((-1.0)*r10*x13820*x13831)));
evalcond[4]=(((x13822*x13833))+(((-1.0)*r11*x13820))+((r12*x13836))+(((-1.0)*gconst17*x13825*x13831))+(((-1.0)*r10*x13837)));
evalcond[5]=((((-1.0)*x13830))+x13819+(((-1.0)*r00*x13820*x13831))+((r00*x13826))+((gconst17*x13829))+((cj3*r01*x13833))+((r02*x13834)));
evalcond[6]=(((r22*x13834))+((gconst17*x13824))+(((-1.0)*sj2*x13821))+(((-1.0)*x13827))+(((-1.0)*r20*x13820*x13831))+((r20*x13826))+((cj3*r21*x13833)));
evalcond[7]=((((-1.0)*r01*x13820))+x13827+((cj1*sj2))+((r01*x13818*x13826))+(((-1.0)*sj3*x13828*x13831))+((r02*x13836))+(((-1.0)*r00*x13837)));
evalcond[8]=((((-1.0)*sj3*x13823*x13831))+(((-1.0)*x13830))+x13819+((r22*x13836))+(((-1.0)*r20*x13837))+((x13824*x13833))+(((-1.0)*r21*x13820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13838=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13838.valid){
continue;
}
CheckValue<IkReal> x13839 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13838.value)))+(x13839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13840=IKsin(j4);
IkReal x13841=IKcos(j4);
IkReal x13842=(sj1*sj2);
IkReal x13843=(cj3*gconst17);
IkReal x13844=((1.0)*cj1);
IkReal x13845=(r11*sj3);
IkReal x13846=(gconst17*r20);
IkReal x13847=(r21*sj3);
IkReal x13848=(r10*sj3);
IkReal x13849=(gconst16*sj3);
IkReal x13850=(cj2*sj1);
IkReal x13851=(gconst17*r00);
IkReal x13852=(r01*sj3);
IkReal x13853=(cj2*x13844);
IkReal x13854=((1.0)*x13841);
IkReal x13855=(gconst16*x13840);
IkReal x13856=(gconst16*x13841);
IkReal x13857=(cj3*x13840);
IkReal x13858=((1.0)*x13840);
IkReal x13859=(sj3*x13840);
IkReal x13860=((1.0)*cj3*gconst16);
evalcond[0]=((((-1.0)*r22*x13854))+((r21*x13855))+(((-1.0)*x13846*x13858)));
evalcond[1]=(((r01*x13855))+(((-1.0)*x13851*x13858))+(((-1.0)*r02*x13854)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13854))+((r11*x13855))+(((-1.0)*gconst17*r10*x13858)));
evalcond[3]=(((gconst17*x13845))+(((-1.0)*r10*x13843*x13854))+((cj3*r11*x13856))+((gconst16*x13848))+((r12*x13857)));
evalcond[4]=(((r12*x13859))+(((-1.0)*r10*x13860))+(((-1.0)*gconst17*x13848*x13854))+((x13845*x13856))+(((-1.0)*r11*x13843)));
evalcond[5]=(((gconst17*x13852))+(((-1.0)*r00*x13843*x13854))+x13842+((r02*x13857))+((cj3*r01*x13856))+(((-1.0)*x13853))+((r00*x13849)));
evalcond[6]=(((gconst17*x13847))+(((-1.0)*x13850))+((r22*x13857))+((cj3*r21*x13856))+(((-1.0)*r20*x13843*x13854))+(((-1.0)*sj2*x13844))+((r20*x13849)));
evalcond[7]=(((r01*x13841*x13849))+(((-1.0)*r00*x13860))+(((-1.0)*r01*x13843))+x13850+((cj1*sj2))+((r02*x13859))+(((-1.0)*sj3*x13851*x13854)));
evalcond[8]=(((r22*x13859))+x13842+((x13847*x13856))+(((-1.0)*r21*x13843))+(((-1.0)*r20*x13860))+(((-1.0)*sj3*x13846*x13854))+(((-1.0)*x13853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13861=((-1.0)*r01);
CheckValue<IkReal> x13864 = IKatan2WithCheck(IkReal(x13861),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13864.valid){
continue;
}
IkReal x13862=((1.0)*(x13864.value));
IkReal x13863=x13754;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13862)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13862)));
IkReal gconst16=(x13861*x13863);
IkReal gconst17=((1.0)*r00*x13863);
IkReal x13865=r02*r02;
IkReal x13866=(r12*sj0);
IkReal x13867=((1.0)*cj0);
IkReal x13868=x13754;
j4eval[0]=((IKabs((((r02*x13866*x13868))+(((-1.0)*x13867*x13868))+((cj0*x13865*x13868)))))+(IKabs(((((-1.0)*x13866))+(((-1.0)*r02*x13867))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13869=(gconst17*r21);
IkReal x13870=(gconst17*r20);
IkReal x13871=(r21*sj3);
IkReal x13872=(cj1*cj2);
IkReal x13873=((1.0)*sj1*sj2);
IkReal x13874=((1.0)*gconst16*sj3);
IkReal x13875=(cj3*gconst16*r20);
CheckValue<IkReal> x13876=IKPowWithIntegerCheck((((r11*x13871*(gconst16*gconst16)))+(((-1.0)*r11*x13870*x13874))+((gconst17*r10*sj3*x13870))+(((-1.0)*r10*x13869*x13874))),-1);
if(!x13876.valid){
continue;
}
CheckValue<IkReal> x13877=IKPowWithIntegerCheck((((gconst16*x13871))+(((-1.0)*sj3*x13870))),-1);
if(!x13877.valid){
continue;
}
if( IKabs(((x13876.value)*((((cj3*r12*x13869))+((cj0*sj3*x13870))+((r12*x13875))+((r12*x13872))+(((-1.0)*r12*x13873))+(((-1.0)*cj0*gconst16*x13871)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13877.value)*((x13872+x13875+(((-1.0)*x13873))+((cj3*x13869)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13876.value)*((((cj3*r12*x13869))+((cj0*sj3*x13870))+((r12*x13875))+((r12*x13872))+(((-1.0)*r12*x13873))+(((-1.0)*cj0*gconst16*x13871))))))+IKsqr(((x13877.value)*((x13872+x13875+(((-1.0)*x13873))+((cj3*x13869))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13876.value)*((((cj3*r12*x13869))+((cj0*sj3*x13870))+((r12*x13875))+((r12*x13872))+(((-1.0)*r12*x13873))+(((-1.0)*cj0*gconst16*x13871))))), ((x13877.value)*((x13872+x13875+(((-1.0)*x13873))+((cj3*x13869))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13878=IKsin(j4);
IkReal x13879=IKcos(j4);
IkReal x13880=((1.0)*gconst17);
IkReal x13881=(gconst16*r21);
IkReal x13882=(gconst17*sj3);
IkReal x13883=(gconst16*r11);
IkReal x13884=(sj1*sj2);
IkReal x13885=((1.0)*cj2);
IkReal x13886=(gconst16*sj3);
IkReal x13887=((1.0)*sj0);
IkReal x13888=(gconst16*r01);
IkReal x13889=(cj1*cj2);
IkReal x13890=(cj3*x13879);
IkReal x13891=(sj3*x13879);
IkReal x13892=(gconst16*x13878);
IkReal x13893=(r12*x13878);
IkReal x13894=((1.0)*cj1*sj2);
IkReal x13895=((1.0)*x13879);
IkReal x13896=(r02*x13878);
IkReal x13897=((1.0)*cj3*gconst16);
evalcond[0]=((((-1.0)*r20*x13878*x13880))+((x13878*x13881)));
evalcond[1]=((((-1.0)*r12*x13895))+cj0+((x13878*x13883))+(((-1.0)*r10*x13878*x13880)));
evalcond[2]=((((-1.0)*r02*x13895))+((x13878*x13888))+(((-1.0)*r00*x13878*x13880))+(((-1.0)*x13887)));
evalcond[3]=((((-1.0)*sj1*x13885))+((x13881*x13890))+((r20*x13886))+((r21*x13882))+(((-1.0)*x13894))+(((-1.0)*r20*x13880*x13890)));
evalcond[4]=((((-1.0)*cj3*r21*x13880))+(((-1.0)*cj1*x13885))+((x13881*x13891))+x13884+(((-1.0)*r20*x13897))+(((-1.0)*r20*x13880*x13891)));
evalcond[5]=((((-1.0)*r00*x13880*x13890))+((cj3*x13896))+((r00*x13886))+((r01*x13882))+(((-1.0)*cj0*x13884))+((x13888*x13890))+((cj0*x13889)));
evalcond[6]=(((cj3*x13893))+((sj0*x13889))+(((-1.0)*x13884*x13887))+((r10*x13886))+(((-1.0)*r10*x13880*x13890))+((r11*x13882))+((x13883*x13890)));
evalcond[7]=((((-1.0)*r00*x13880*x13891))+(((-1.0)*cj3*r01*x13880))+(((-1.0)*r00*x13897))+((sj3*x13896))+((r01*x13879*x13886))+(((-1.0)*cj0*x13894))+(((-1.0)*cj0*sj1*x13885)));
evalcond[8]=((((-1.0)*cj1*sj2*x13887))+((sj3*x13893))+(((-1.0)*sj0*sj1*x13885))+(((-1.0)*cj3*r11*x13880))+(((-1.0)*r10*x13880*x13891))+(((-1.0)*r10*x13897))+((x13883*x13891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13898=((1.0)*sj0);
IkReal x13899=((1.0)*cj0);
CheckValue<IkReal> x13900=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x13900.valid){
continue;
}
CheckValue<IkReal> x13901 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x13898))+(((-1.0)*r02*x13899)))),IkReal(((((-1.0)*gconst16*r01*x13899))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x13898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13900.value)))+(x13901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13902=IKsin(j4);
IkReal x13903=IKcos(j4);
IkReal x13904=((1.0)*gconst17);
IkReal x13905=(gconst16*r21);
IkReal x13906=(gconst17*sj3);
IkReal x13907=(gconst16*r11);
IkReal x13908=(sj1*sj2);
IkReal x13909=((1.0)*cj2);
IkReal x13910=(gconst16*sj3);
IkReal x13911=((1.0)*sj0);
IkReal x13912=(gconst16*r01);
IkReal x13913=(cj1*cj2);
IkReal x13914=(cj3*x13903);
IkReal x13915=(sj3*x13903);
IkReal x13916=(gconst16*x13902);
IkReal x13917=(r12*x13902);
IkReal x13918=((1.0)*cj1*sj2);
IkReal x13919=((1.0)*x13903);
IkReal x13920=(r02*x13902);
IkReal x13921=((1.0)*cj3*gconst16);
evalcond[0]=((((-1.0)*r20*x13902*x13904))+((x13902*x13905)));
evalcond[1]=(cj0+(((-1.0)*r12*x13919))+((x13902*x13907))+(((-1.0)*r10*x13902*x13904)));
evalcond[2]=(((x13902*x13912))+(((-1.0)*r00*x13902*x13904))+(((-1.0)*x13911))+(((-1.0)*r02*x13919)));
evalcond[3]=((((-1.0)*sj1*x13909))+((r20*x13910))+((r21*x13906))+(((-1.0)*r20*x13904*x13914))+((x13905*x13914))+(((-1.0)*x13918)));
evalcond[4]=(x13908+(((-1.0)*cj3*r21*x13904))+(((-1.0)*r20*x13904*x13915))+((x13905*x13915))+(((-1.0)*r20*x13921))+(((-1.0)*cj1*x13909)));
evalcond[5]=((((-1.0)*cj0*x13908))+(((-1.0)*r00*x13904*x13914))+((cj0*x13913))+((x13912*x13914))+((r00*x13910))+((r01*x13906))+((cj3*x13920)));
evalcond[6]=(((r10*x13910))+(((-1.0)*x13908*x13911))+((cj3*x13917))+((r11*x13906))+((x13907*x13914))+((sj0*x13913))+(((-1.0)*r10*x13904*x13914)));
evalcond[7]=((((-1.0)*r00*x13904*x13915))+(((-1.0)*cj3*r01*x13904))+((sj3*x13920))+(((-1.0)*cj0*x13918))+(((-1.0)*r00*x13921))+(((-1.0)*cj0*sj1*x13909))+((r01*x13903*x13910)));
evalcond[8]=((((-1.0)*cj3*r11*x13904))+(((-1.0)*cj1*sj2*x13911))+(((-1.0)*r10*x13921))+((sj3*x13917))+((x13907*x13915))+(((-1.0)*r10*x13904*x13915))+(((-1.0)*sj0*sj1*x13909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13922=((1.0)*sj0);
IkReal x13923=((1.0)*cj0);
CheckValue<IkReal> x13924=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x13924.valid){
continue;
}
CheckValue<IkReal> x13925 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x13922))+(((-1.0)*r02*x13923)))),IkReal(((((-1.0)*gconst16*r11*x13922))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r01*x13923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13924.value)))+(x13925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13926=IKsin(j4);
IkReal x13927=IKcos(j4);
IkReal x13928=(cj3*gconst17);
IkReal x13929=(gconst17*sj3);
IkReal x13930=(gconst16*sj3);
IkReal x13931=(sj1*sj2);
IkReal x13932=((1.0)*cj2);
IkReal x13933=((1.0)*sj0);
IkReal x13934=(cj3*gconst16);
IkReal x13935=(cj1*cj2);
IkReal x13936=((1.0)*x13927);
IkReal x13937=(gconst16*x13926);
IkReal x13938=(r11*x13927);
IkReal x13939=(cj3*x13926);
IkReal x13940=(sj3*x13926);
IkReal x13941=((1.0)*cj1*sj2);
IkReal x13942=(r01*x13927);
IkReal x13943=(gconst16*r21*x13927);
IkReal x13944=((1.0)*gconst17*x13926);
evalcond[0]=(((r21*x13937))+(((-1.0)*r22*x13936))+(((-1.0)*r20*x13944)));
evalcond[1]=(((r11*x13937))+cj0+(((-1.0)*r12*x13936))+(((-1.0)*r10*x13944)));
evalcond[2]=(((r01*x13937))+(((-1.0)*x13933))+(((-1.0)*r00*x13944))+(((-1.0)*r02*x13936)));
evalcond[3]=(((r20*x13930))+((r21*x13929))+(((-1.0)*sj1*x13932))+((r22*x13939))+((r21*x13927*x13934))+(((-1.0)*r20*x13928*x13936))+(((-1.0)*x13941)));
evalcond[4]=((((-1.0)*r20*x13929*x13936))+x13931+(((-1.0)*r21*x13928))+((r21*x13927*x13930))+(((-1.0)*cj1*x13932))+(((-1.0)*r20*x13934))+((r22*x13940)));
evalcond[5]=(((r00*x13930))+(((-1.0)*r00*x13928*x13936))+((x13934*x13942))+(((-1.0)*cj0*x13931))+((r01*x13929))+((cj0*x13935))+((r02*x13939)));
evalcond[6]=(((x13934*x13938))+((sj0*x13935))+(((-1.0)*r10*x13928*x13936))+((r10*x13930))+(((-1.0)*x13931*x13933))+((r11*x13929))+((r12*x13939)));
evalcond[7]=((((-1.0)*r00*x13934))+(((-1.0)*cj0*x13941))+(((-1.0)*cj0*sj1*x13932))+(((-1.0)*r01*x13928))+((x13930*x13942))+((r02*x13940))+(((-1.0)*r00*x13929*x13936)));
evalcond[8]=((((-1.0)*r11*x13928))+(((-1.0)*sj0*sj1*x13932))+(((-1.0)*r10*x13929*x13936))+(((-1.0)*cj1*sj2*x13933))+((x13930*x13938))+((r12*x13940))+(((-1.0)*r10*x13934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13945=((1.0)*gconst17);
CheckValue<IkReal> x13946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13945))+(((-1.0)*gconst16*r10)))),-1);
if(!x13946.valid){
continue;
}
CheckValue<IkReal> x13947 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x13945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13946.value)))+(x13947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13948=IKsin(j4);
IkReal x13949=IKcos(j4);
IkReal x13950=(cj3*gconst17);
IkReal x13951=(gconst17*sj3);
IkReal x13952=(gconst16*sj3);
IkReal x13953=(sj1*sj2);
IkReal x13954=((1.0)*cj2);
IkReal x13955=((1.0)*sj0);
IkReal x13956=(cj3*gconst16);
IkReal x13957=(cj1*cj2);
IkReal x13958=((1.0)*x13949);
IkReal x13959=(gconst16*x13948);
IkReal x13960=(r11*x13949);
IkReal x13961=(cj3*x13948);
IkReal x13962=(sj3*x13948);
IkReal x13963=((1.0)*cj1*sj2);
IkReal x13964=(r01*x13949);
IkReal x13965=(gconst16*r21*x13949);
IkReal x13966=((1.0)*gconst17*x13948);
evalcond[0]=((((-1.0)*r20*x13966))+((r21*x13959))+(((-1.0)*r22*x13958)));
evalcond[1]=(((r11*x13959))+(((-1.0)*r10*x13966))+cj0+(((-1.0)*r12*x13958)));
evalcond[2]=((((-1.0)*x13955))+((r01*x13959))+(((-1.0)*r02*x13958))+(((-1.0)*r00*x13966)));
evalcond[3]=((((-1.0)*r20*x13950*x13958))+((r21*x13949*x13956))+((r21*x13951))+(((-1.0)*x13963))+(((-1.0)*sj1*x13954))+((r22*x13961))+((r20*x13952)));
evalcond[4]=((((-1.0)*r21*x13950))+x13953+(((-1.0)*r20*x13956))+((r21*x13949*x13952))+(((-1.0)*r20*x13951*x13958))+(((-1.0)*cj1*x13954))+((r22*x13962)));
evalcond[5]=(((r02*x13961))+((r01*x13951))+(((-1.0)*r00*x13950*x13958))+((r00*x13952))+((x13956*x13964))+(((-1.0)*cj0*x13953))+((cj0*x13957)));
evalcond[6]=(((r11*x13951))+((sj0*x13957))+(((-1.0)*r10*x13950*x13958))+((r12*x13961))+((x13956*x13960))+(((-1.0)*x13953*x13955))+((r10*x13952)));
evalcond[7]=(((r02*x13962))+(((-1.0)*r01*x13950))+(((-1.0)*r00*x13951*x13958))+(((-1.0)*r00*x13956))+((x13952*x13964))+(((-1.0)*cj0*x13963))+(((-1.0)*cj0*sj1*x13954)));
evalcond[8]=((((-1.0)*r10*x13951*x13958))+(((-1.0)*sj0*sj1*x13954))+(((-1.0)*r11*x13950))+((x13952*x13960))+((r12*x13962))+(((-1.0)*r10*x13956))+(((-1.0)*cj1*sj2*x13955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13967=((1.0)*gconst17);
CheckValue<IkReal> x13968=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x13967)))),-1);
if(!x13968.valid){
continue;
}
CheckValue<IkReal> x13969 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x13967))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13968.value)))+(x13969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13970=IKsin(j4);
IkReal x13971=IKcos(j4);
IkReal x13972=(cj3*gconst17);
IkReal x13973=(gconst17*sj3);
IkReal x13974=(gconst16*sj3);
IkReal x13975=(sj1*sj2);
IkReal x13976=((1.0)*cj2);
IkReal x13977=((1.0)*sj0);
IkReal x13978=(cj3*gconst16);
IkReal x13979=(cj1*cj2);
IkReal x13980=((1.0)*x13971);
IkReal x13981=(gconst16*x13970);
IkReal x13982=(r11*x13971);
IkReal x13983=(cj3*x13970);
IkReal x13984=(sj3*x13970);
IkReal x13985=((1.0)*cj1*sj2);
IkReal x13986=(r01*x13971);
IkReal x13987=(gconst16*r21*x13971);
IkReal x13988=((1.0)*gconst17*x13970);
evalcond[0]=(((r21*x13981))+(((-1.0)*r20*x13988))+(((-1.0)*r22*x13980)));
evalcond[1]=(((r11*x13981))+cj0+(((-1.0)*r10*x13988))+(((-1.0)*r12*x13980)));
evalcond[2]=(((r01*x13981))+(((-1.0)*r02*x13980))+(((-1.0)*r00*x13988))+(((-1.0)*x13977)));
evalcond[3]=((((-1.0)*sj1*x13976))+((r22*x13983))+(((-1.0)*x13985))+((r20*x13974))+((r21*x13971*x13978))+(((-1.0)*r20*x13972*x13980))+((r21*x13973)));
evalcond[4]=((((-1.0)*r20*x13973*x13980))+x13975+((r22*x13984))+((r21*x13971*x13974))+(((-1.0)*r21*x13972))+(((-1.0)*r20*x13978))+(((-1.0)*cj1*x13976)));
evalcond[5]=((((-1.0)*cj0*x13975))+((cj0*x13979))+(((-1.0)*r00*x13972*x13980))+((r02*x13983))+((r00*x13974))+((r01*x13973))+((x13978*x13986)));
evalcond[6]=(((r12*x13983))+((r10*x13974))+((r11*x13973))+(((-1.0)*r10*x13972*x13980))+(((-1.0)*x13975*x13977))+((x13978*x13982))+((sj0*x13979)));
evalcond[7]=(((x13974*x13986))+(((-1.0)*r00*x13973*x13980))+(((-1.0)*cj0*sj1*x13976))+((r02*x13984))+(((-1.0)*r01*x13972))+(((-1.0)*cj0*x13985))+(((-1.0)*r00*x13978)));
evalcond[8]=(((r12*x13984))+((x13974*x13982))+(((-1.0)*r10*x13978))+(((-1.0)*cj1*sj2*x13977))+(((-1.0)*r10*x13973*x13980))+(((-1.0)*r11*x13972))+(((-1.0)*sj0*sj1*x13976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x13989=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13989;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x13990=((1.0)*cj5);
IkReal x13991=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13990)));
j4eval[0]=x13991;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13990)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x13992=cj5*cj5;
IkReal x13993=(cj3*r01);
IkReal x13994=(cj5*sj5);
IkReal x13995=((1.0)*cj3);
IkReal x13996=(((r21*x13992*x13993))+(((-1.0)*r21*x13993))+((cj3*r00*r21*x13994))+(((-1.0)*r00*r20*x13992*x13995))+(((-1.0)*r02*r22*x13995))+((r20*x13993*x13994)));
j4eval[0]=x13996;
j4eval[1]=IKsign(x13996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13997=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13997;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13998=((1.0)*cj5);
IkReal x13999=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13998)));
j4eval[0]=x13999;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x13998))))));
j4eval[2]=IKsign(x13999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14000=cj5*cj5;
IkReal x14001=r01*r01;
IkReal x14002=(cj5*r00);
IkReal x14003=(r01*sj5);
IkReal x14004=((((-1.0)*x14000*x14001))+(((-2.0)*x14002*x14003))+((x14000*(r00*r00)))+(r02*r02)+x14001);
j4eval[0]=x14004;
j4eval[1]=IKsign(x14004);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14002))+x14003))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14005=cj5*cj5;
IkReal x14006=r01*r01;
IkReal x14007=(r01*sj5);
IkReal x14008=(cj5*r00);
CheckValue<IkReal> x14009 = IKatan2WithCheck(IkReal(((((-1.0)*x14008))+x14007)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14009.valid){
continue;
}
CheckValue<IkReal> x14010=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14007*x14008))+(((-1.0)*x14005*x14006))+((x14005*(r00*r00)))+(r02*r02)+x14006)),-1);
if(!x14010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14009.value)+(((1.5707963267949)*(x14010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14011=IKcos(j4);
IkReal x14012=IKsin(j4);
IkReal x14013=(cj5*r00);
IkReal x14014=(cj5*r10);
IkReal x14015=(r21*sj5);
IkReal x14016=((1.0)*cj2);
IkReal x14017=(cj5*r20);
IkReal x14018=((1.0)*x14011);
IkReal x14019=((1.0)*x14012);
IkReal x14020=(sj5*x14012);
IkReal x14021=(sj5*x14011);
evalcond[0]=(((r01*x14021))+((r02*x14012))+(((-1.0)*x14013*x14018)));
evalcond[1]=(((x14012*x14015))+(((-1.0)*x14017*x14019))+(((-1.0)*r22*x14018)));
evalcond[2]=(((r11*x14020))+(((-1.0)*x14014*x14019))+(((-1.0)*r12*x14018)));
evalcond[3]=((-1.0)+((r01*x14020))+(((-1.0)*r02*x14018))+(((-1.0)*x14013*x14019)));
evalcond[4]=(((x14011*x14015))+((r22*x14012))+((sj1*sj2))+(((-1.0)*x14017*x14018))+(((-1.0)*cj1*x14016)));
evalcond[5]=(((r11*x14021))+(((-1.0)*x14014*x14018))+(((-1.0)*sj1*x14016))+(((-1.0)*cj1*sj2))+((r12*x14012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14022=((1.0)*cj5);
CheckValue<IkReal> x14023=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14022)))),-1);
if(!x14023.valid){
continue;
}
CheckValue<IkReal> x14024 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14022)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14023.value)))+(x14024.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14025=IKcos(j4);
IkReal x14026=IKsin(j4);
IkReal x14027=(cj5*r00);
IkReal x14028=(cj5*r10);
IkReal x14029=(r21*sj5);
IkReal x14030=((1.0)*cj2);
IkReal x14031=(cj5*r20);
IkReal x14032=((1.0)*x14025);
IkReal x14033=((1.0)*x14026);
IkReal x14034=(sj5*x14026);
IkReal x14035=(sj5*x14025);
evalcond[0]=(((r01*x14035))+((r02*x14026))+(((-1.0)*x14027*x14032)));
evalcond[1]=(((x14026*x14029))+(((-1.0)*x14031*x14033))+(((-1.0)*r22*x14032)));
evalcond[2]=(((r11*x14034))+(((-1.0)*x14028*x14033))+(((-1.0)*r12*x14032)));
evalcond[3]=((-1.0)+((r01*x14034))+(((-1.0)*r02*x14032))+(((-1.0)*x14027*x14033)));
evalcond[4]=(((r22*x14026))+((x14025*x14029))+(((-1.0)*x14031*x14032))+((sj1*sj2))+(((-1.0)*cj1*x14030)));
evalcond[5]=(((r11*x14035))+(((-1.0)*cj1*sj2))+(((-1.0)*x14028*x14032))+(((-1.0)*sj1*x14030))+((r12*x14026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14036=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14036.valid){
continue;
}
CheckValue<IkReal> x14037 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14036.value)))+(x14037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14038=IKcos(j4);
IkReal x14039=IKsin(j4);
IkReal x14040=(cj5*r00);
IkReal x14041=(cj5*r10);
IkReal x14042=(r21*sj5);
IkReal x14043=((1.0)*cj2);
IkReal x14044=(cj5*r20);
IkReal x14045=((1.0)*x14038);
IkReal x14046=((1.0)*x14039);
IkReal x14047=(sj5*x14039);
IkReal x14048=(sj5*x14038);
evalcond[0]=(((r01*x14048))+(((-1.0)*x14040*x14045))+((r02*x14039)));
evalcond[1]=((((-1.0)*x14044*x14046))+((x14039*x14042))+(((-1.0)*r22*x14045)));
evalcond[2]=(((r11*x14047))+(((-1.0)*r12*x14045))+(((-1.0)*x14041*x14046)));
evalcond[3]=((-1.0)+((r01*x14047))+(((-1.0)*x14040*x14046))+(((-1.0)*r02*x14045)));
evalcond[4]=((((-1.0)*x14044*x14045))+((r22*x14039))+((sj1*sj2))+((x14038*x14042))+(((-1.0)*cj1*x14043)));
evalcond[5]=(((r11*x14048))+(((-1.0)*cj1*sj2))+(((-1.0)*x14041*x14045))+((r12*x14039))+(((-1.0)*sj1*x14043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14049=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14049;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14050=((1.0)*cj5);
IkReal x14051=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14050)));
j4eval[0]=x14051;
j4eval[1]=((IKabs(((((-1.0)*r20*x14050))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14052=cj5*cj5;
IkReal x14053=r01*r01;
IkReal x14054=(r01*sj5);
IkReal x14055=(cj5*r00);
IkReal x14056=((((-1.0)*x14053))+(((-1.0)*(r02*r02)))+((x14052*x14053))+(((2.0)*x14054*x14055))+(((-1.0)*x14052*(r00*r00))));
j4eval[0]=x14056;
j4eval[1]=IKsign(x14056);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14054))+x14055))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14057=cj5*cj5;
IkReal x14058=r01*r01;
IkReal x14059=(r01*sj5);
IkReal x14060=(cj5*r00);
CheckValue<IkReal> x14061 = IKatan2WithCheck(IkReal(((((-1.0)*x14059))+x14060)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14061.valid){
continue;
}
CheckValue<IkReal> x14062=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14058))+((x14057*x14058))+(((-1.0)*(r02*r02)))+(((-1.0)*x14057*(r00*r00)))+(((2.0)*x14059*x14060)))),-1);
if(!x14062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14061.value)+(((1.5707963267949)*(x14062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14063=IKsin(j4);
IkReal x14064=IKcos(j4);
IkReal x14065=(cj5*r10);
IkReal x14066=(r01*sj5);
IkReal x14067=((1.0)*cj2);
IkReal x14068=(cj5*r00);
IkReal x14069=(cj5*r20);
IkReal x14070=((1.0)*x14064);
IkReal x14071=((1.0)*x14063);
IkReal x14072=(sj5*x14063);
evalcond[0]=((((-1.0)*r22*x14070))+((r21*x14072))+(((-1.0)*x14069*x14071)));
evalcond[1]=((((-1.0)*x14065*x14071))+(((-1.0)*r12*x14070))+((r11*x14072)));
evalcond[2]=((((-1.0)*x14066*x14070))+((x14064*x14068))+(((-1.0)*r02*x14071)));
evalcond[3]=((-1.0)+(((-1.0)*x14068*x14071))+((x14063*x14066))+(((-1.0)*r02*x14070)));
evalcond[4]=((((-1.0)*r22*x14071))+((sj1*sj2))+(((-1.0)*cj1*x14067))+(((-1.0)*r21*sj5*x14070))+((x14064*x14069)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14070))+(((-1.0)*r12*x14071))+((x14064*x14065))+(((-1.0)*sj1*x14067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14073=((1.0)*cj5);
CheckValue<IkReal> x14074=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14073)))),-1);
if(!x14074.valid){
continue;
}
CheckValue<IkReal> x14075 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14074.value)))+(x14075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14076=IKsin(j4);
IkReal x14077=IKcos(j4);
IkReal x14078=(cj5*r10);
IkReal x14079=(r01*sj5);
IkReal x14080=((1.0)*cj2);
IkReal x14081=(cj5*r00);
IkReal x14082=(cj5*r20);
IkReal x14083=((1.0)*x14077);
IkReal x14084=((1.0)*x14076);
IkReal x14085=(sj5*x14076);
evalcond[0]=((((-1.0)*r22*x14083))+(((-1.0)*x14082*x14084))+((r21*x14085)));
evalcond[1]=((((-1.0)*r12*x14083))+(((-1.0)*x14078*x14084))+((r11*x14085)));
evalcond[2]=(((x14077*x14081))+(((-1.0)*r02*x14084))+(((-1.0)*x14079*x14083)));
evalcond[3]=((-1.0)+(((-1.0)*x14081*x14084))+(((-1.0)*r02*x14083))+((x14076*x14079)));
evalcond[4]=((((-1.0)*r22*x14084))+(((-1.0)*r21*sj5*x14083))+((x14077*x14082))+((sj1*sj2))+(((-1.0)*cj1*x14080)));
evalcond[5]=((((-1.0)*r12*x14084))+(((-1.0)*sj1*x14080))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14083))+((x14077*x14078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14086=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14086.valid){
continue;
}
CheckValue<IkReal> x14087 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14086.value)))+(x14087.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14088=IKsin(j4);
IkReal x14089=IKcos(j4);
IkReal x14090=(cj5*r10);
IkReal x14091=(r01*sj5);
IkReal x14092=((1.0)*cj2);
IkReal x14093=(cj5*r00);
IkReal x14094=(cj5*r20);
IkReal x14095=((1.0)*x14089);
IkReal x14096=((1.0)*x14088);
IkReal x14097=(sj5*x14088);
evalcond[0]=((((-1.0)*r22*x14095))+((r21*x14097))+(((-1.0)*x14094*x14096)));
evalcond[1]=((((-1.0)*r12*x14095))+((r11*x14097))+(((-1.0)*x14090*x14096)));
evalcond[2]=((((-1.0)*r02*x14096))+(((-1.0)*x14091*x14095))+((x14089*x14093)));
evalcond[3]=((-1.0)+(((-1.0)*x14093*x14096))+((x14088*x14091))+(((-1.0)*r02*x14095)));
evalcond[4]=((((-1.0)*r22*x14096))+(((-1.0)*r21*sj5*x14095))+((sj1*sj2))+((x14089*x14094))+(((-1.0)*cj1*x14092)));
evalcond[5]=((((-1.0)*sj1*x14092))+(((-1.0)*r12*x14096))+(((-1.0)*cj1*sj2))+((x14089*x14090))+(((-1.0)*r11*sj5*x14095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14099 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14099)==0){
continue;
}
IkReal x14098=pow(x14099,-0.5);
CheckValue<IkReal> x14100 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14100.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14100.value));
IkReal gconst49=((-1.0)*r21*x14098);
IkReal gconst50=(r20*x14098);
CheckValue<IkReal> x14101 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14101.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14101.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14104 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14104.valid){
continue;
}
IkReal x14102=((-1.0)*(x14104.value));
IkReal x14103=x14098;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14102;
IkReal gconst48=x14102;
IkReal gconst49=((-1.0)*r21*x14103);
IkReal gconst50=(r20*x14103);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14105=gconst49*gconst49;
IkReal x14106=gconst50*gconst50;
IkReal x14107=((1.0)*cj3);
IkReal x14108=(gconst50*r01);
IkReal x14109=(gconst49*r10);
IkReal x14110=(r12*sj3);
IkReal x14111=(gconst49*r00);
IkReal x14112=(r00*sj3);
IkReal x14113=(r11*x14105);
IkReal x14114=(r10*x14106);
CheckValue<IkReal> x14115=IKPowWithIntegerCheck(IKsign((((cj3*x14108*x14109))+(((-1.0)*r00*x14107*x14114))+(((-1.0)*r01*x14107*x14113))+((cj3*gconst50*r11*x14111))+(((-1.0)*r02*r12*x14107)))),-1);
if(!x14115.valid){
continue;
}
CheckValue<IkReal> x14116 = IKatan2WithCheck(IkReal((((x14110*x14111))+((x14108*x14110)))),IkReal((((x14112*x14113))+(((-1.0)*gconst50*x14109*x14112))+((gconst49*r11*sj3*x14108))+(((-1.0)*r01*sj3*x14114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14115.value)))+(x14116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14117=IKsin(j4);
IkReal x14118=IKcos(j4);
IkReal x14119=(gconst50*sj3);
IkReal x14120=(cj3*gconst49);
IkReal x14121=(gconst49*sj3);
IkReal x14122=(sj1*sj2);
IkReal x14123=((1.0)*cj2);
IkReal x14124=(cj3*gconst50);
IkReal x14125=((1.0)*cj1*sj2);
IkReal x14126=(sj1*x14123);
IkReal x14127=((1.0)*x14118);
IkReal x14128=(gconst49*x14117);
IkReal x14129=(r01*x14118);
IkReal x14130=(cj3*x14117);
IkReal x14131=(sj3*x14117);
IkReal x14132=((1.0)*x14124);
IkReal x14133=(r11*x14118);
IkReal x14134=(r21*x14118);
IkReal x14135=((1.0)*gconst50*x14117);
IkReal x14136=(x14125+x14126);
evalcond[0]=(((r21*x14128))+(((-1.0)*r22*x14127))+(((-1.0)*r20*x14135)));
evalcond[1]=((((-1.0)*r12*x14127))+(((-1.0)*r10*x14135))+((r11*x14128)));
evalcond[2]=((-1.0)+((r01*x14128))+(((-1.0)*r00*x14135))+(((-1.0)*r02*x14127)));
evalcond[3]=(((r01*x14119))+(((-1.0)*r00*x14124*x14127))+((r00*x14121))+((r02*x14130))+((x14120*x14129)));
evalcond[4]=((((-1.0)*r00*x14120))+((r02*x14131))+((x14121*x14129))+(((-1.0)*r01*x14132))+(((-1.0)*r00*x14119*x14127)));
evalcond[5]=(((r11*x14119))+(((-1.0)*r10*x14124*x14127))+((r12*x14130))+(((-1.0)*x14122))+((cj1*cj2))+((r10*x14121))+((x14120*x14133)));
evalcond[6]=((((-1.0)*r20*x14124*x14127))+((r20*x14121))+((r22*x14130))+((r21*x14119))+((x14120*x14134))+(((-1.0)*x14136)));
evalcond[7]=((((-1.0)*r20*x14120))+(((-1.0)*r20*x14119*x14127))+(((-1.0)*cj1*x14123))+((r22*x14131))+x14122+(((-1.0)*r21*x14132))+((x14121*x14134)));
evalcond[8]=((((-1.0)*r10*x14120))+(((-1.0)*r10*x14119*x14127))+((r12*x14131))+(((-1.0)*r11*x14132))+(((-1.0)*x14136))+((x14121*x14133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14137=((1.0)*gconst50);
CheckValue<IkReal> x14138=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14137)))),-1);
if(!x14138.valid){
continue;
}
CheckValue<IkReal> x14139 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14138.value)))+(x14139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14140=IKsin(j4);
IkReal x14141=IKcos(j4);
IkReal x14142=(gconst50*sj3);
IkReal x14143=(cj3*gconst49);
IkReal x14144=(gconst49*sj3);
IkReal x14145=(sj1*sj2);
IkReal x14146=((1.0)*cj2);
IkReal x14147=(cj3*gconst50);
IkReal x14148=((1.0)*cj1*sj2);
IkReal x14149=(sj1*x14146);
IkReal x14150=((1.0)*x14141);
IkReal x14151=(gconst49*x14140);
IkReal x14152=(r01*x14141);
IkReal x14153=(cj3*x14140);
IkReal x14154=(sj3*x14140);
IkReal x14155=((1.0)*x14147);
IkReal x14156=(r11*x14141);
IkReal x14157=(r21*x14141);
IkReal x14158=((1.0)*gconst50*x14140);
IkReal x14159=(x14149+x14148);
evalcond[0]=((((-1.0)*r22*x14150))+(((-1.0)*r20*x14158))+((r21*x14151)));
evalcond[1]=(((r11*x14151))+(((-1.0)*r12*x14150))+(((-1.0)*r10*x14158)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14150))+((r01*x14151))+(((-1.0)*r00*x14158)));
evalcond[3]=((((-1.0)*r00*x14147*x14150))+((r02*x14153))+((r01*x14142))+((r00*x14144))+((x14143*x14152)));
evalcond[4]=((((-1.0)*r01*x14155))+(((-1.0)*r00*x14143))+((r02*x14154))+(((-1.0)*r00*x14142*x14150))+((x14144*x14152)));
evalcond[5]=(((r10*x14144))+(((-1.0)*r10*x14147*x14150))+((x14143*x14156))+((r12*x14153))+((cj1*cj2))+((r11*x14142))+(((-1.0)*x14145)));
evalcond[6]=((((-1.0)*r20*x14147*x14150))+((r22*x14153))+((r21*x14142))+(((-1.0)*x14159))+((x14143*x14157))+((r20*x14144)));
evalcond[7]=((((-1.0)*r20*x14143))+(((-1.0)*r20*x14142*x14150))+((r22*x14154))+((x14144*x14157))+(((-1.0)*r21*x14155))+(((-1.0)*cj1*x14146))+x14145);
evalcond[8]=((((-1.0)*r10*x14143))+((x14144*x14156))+(((-1.0)*r11*x14155))+(((-1.0)*x14159))+(((-1.0)*r10*x14142*x14150))+((r12*x14154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14161 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14161)==0){
continue;
}
IkReal x14160=pow(x14161,-0.5);
CheckValue<IkReal> x14162 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14162.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14162.value))));
IkReal gconst52=((1.0)*r21*x14160);
IkReal gconst53=((-1.0)*r20*x14160);
CheckValue<IkReal> x14163 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14163.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14163.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14166 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14166.valid){
continue;
}
IkReal x14164=((1.0)*(x14166.value));
IkReal x14165=x14160;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14164)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14164)));
IkReal gconst52=((1.0)*r21*x14165);
IkReal gconst53=((-1.0)*r20*x14165);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14169 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14169.valid){
continue;
}
IkReal x14167=((1.0)*(x14169.value));
IkReal x14168=x14160;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14167)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14167)));
IkReal gconst52=((1.0)*r21*x14168);
IkReal gconst53=((-1.0)*r20*x14168);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14172 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14172.valid){
continue;
}
IkReal x14170=((1.0)*(x14172.value));
IkReal x14171=x14160;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14170)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14170)));
IkReal gconst52=((1.0)*r21*x14171);
IkReal gconst53=((-1.0)*r20*x14171);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14173=gconst52*gconst52;
IkReal x14174=gconst53*gconst53;
IkReal x14175=(gconst53*r01);
IkReal x14176=(cj3*r20);
IkReal x14177=(r22*sj3);
IkReal x14178=((1.0)*cj3);
IkReal x14179=(gconst52*sj3);
IkReal x14180=((1.0)*r00);
IkReal x14181=(gconst52*r00);
IkReal x14182=(r21*x14173);
CheckValue<IkReal> x14183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x14178))+((gconst52*x14175*x14176))+((cj3*gconst53*r21*x14181))+(((-1.0)*x14174*x14176*x14180))+(((-1.0)*r01*x14178*x14182)))),-1);
if(!x14183.valid){
continue;
}
CheckValue<IkReal> x14184 = IKatan2WithCheck(IkReal((((x14177*x14181))+((x14175*x14177)))),IkReal(((((-1.0)*r01*r20*sj3*x14174))+(((-1.0)*gconst53*r20*x14179*x14180))+((r21*x14175*x14179))+((r00*sj3*x14182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14183.value)))+(x14184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14185=IKsin(j4);
IkReal x14186=IKcos(j4);
IkReal x14187=((1.0)*sj2);
IkReal x14188=(gconst52*r11);
IkReal x14189=(gconst53*r21);
IkReal x14190=(gconst52*r01);
IkReal x14191=((1.0)*cj3);
IkReal x14192=(gconst52*r00);
IkReal x14193=(gconst52*r21);
IkReal x14194=((1.0)*cj2);
IkReal x14195=(gconst53*sj3);
IkReal x14196=(cj3*gconst53);
IkReal x14197=(gconst52*r10);
IkReal x14198=(gconst52*r20);
IkReal x14199=(cj1*x14187);
IkReal x14200=(sj1*x14194);
IkReal x14201=((1.0)*x14186);
IkReal x14202=(cj3*x14186);
IkReal x14203=(cj3*x14185);
IkReal x14204=(sj3*x14185);
IkReal x14205=(sj3*x14186);
IkReal x14206=((1.0)*gconst53*x14185);
IkReal x14207=(x14199+x14200);
evalcond[0]=((((-1.0)*r20*x14206))+((x14185*x14193))+(((-1.0)*r22*x14201)));
evalcond[1]=((((-1.0)*r10*x14206))+(((-1.0)*r12*x14201))+((x14185*x14188)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14206))+(((-1.0)*r02*x14201))+((x14185*x14190)));
evalcond[3]=(((r02*x14203))+((sj3*x14192))+(((-1.0)*gconst53*r00*x14186*x14191))+((r01*x14195))+((x14190*x14202)));
evalcond[4]=(((r02*x14204))+(((-1.0)*gconst53*r01*x14191))+(((-1.0)*x14191*x14192))+(((-1.0)*r00*x14195*x14201))+((x14190*x14205)));
evalcond[5]=((((-1.0)*gconst53*r10*x14186*x14191))+((sj3*x14197))+((x14188*x14202))+((r11*x14195))+(((-1.0)*sj1*x14187))+((cj1*cj2))+((r12*x14203)));
evalcond[6]=((((-1.0)*x14207))+(((-1.0)*gconst53*r20*x14186*x14191))+((sj3*x14198))+((sj3*x14189))+((r22*x14203))+((x14193*x14202)));
evalcond[7]=(((sj1*sj2))+(((-1.0)*r20*x14195*x14201))+((r22*x14204))+(((-1.0)*cj1*x14194))+((x14193*x14205))+(((-1.0)*x14189*x14191))+(((-1.0)*x14191*x14198)));
evalcond[8]=((((-1.0)*r10*x14195*x14201))+(((-1.0)*x14207))+((x14188*x14205))+((r12*x14204))+(((-1.0)*x14191*x14197))+(((-1.0)*gconst53*r11*x14191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14208=((1.0)*gconst53);
CheckValue<IkReal> x14209 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14208))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14209.valid){
continue;
}
CheckValue<IkReal> x14210=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14208))+(((-1.0)*gconst52*r10)))),-1);
if(!x14210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14209.value)+(((1.5707963267949)*(x14210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14211=IKsin(j4);
IkReal x14212=IKcos(j4);
IkReal x14213=((1.0)*sj2);
IkReal x14214=(gconst52*r11);
IkReal x14215=(gconst53*r21);
IkReal x14216=(gconst52*r01);
IkReal x14217=((1.0)*cj3);
IkReal x14218=(gconst52*r00);
IkReal x14219=(gconst52*r21);
IkReal x14220=((1.0)*cj2);
IkReal x14221=(gconst53*sj3);
IkReal x14222=(cj3*gconst53);
IkReal x14223=(gconst52*r10);
IkReal x14224=(gconst52*r20);
IkReal x14225=(cj1*x14213);
IkReal x14226=(sj1*x14220);
IkReal x14227=((1.0)*x14212);
IkReal x14228=(cj3*x14212);
IkReal x14229=(cj3*x14211);
IkReal x14230=(sj3*x14211);
IkReal x14231=(sj3*x14212);
IkReal x14232=((1.0)*gconst53*x14211);
IkReal x14233=(x14226+x14225);
evalcond[0]=((((-1.0)*r20*x14232))+((x14211*x14219))+(((-1.0)*r22*x14227)));
evalcond[1]=((((-1.0)*r12*x14227))+((x14211*x14214))+(((-1.0)*r10*x14232)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14232))+((x14211*x14216))+(((-1.0)*r02*x14227)));
evalcond[3]=(((r02*x14229))+((sj3*x14218))+(((-1.0)*gconst53*r00*x14212*x14217))+((x14216*x14228))+((r01*x14221)));
evalcond[4]=((((-1.0)*gconst53*r01*x14217))+(((-1.0)*x14217*x14218))+((r02*x14230))+((x14216*x14231))+(((-1.0)*r00*x14221*x14227)));
evalcond[5]=(((x14214*x14228))+(((-1.0)*gconst53*r10*x14212*x14217))+((sj3*x14223))+((r11*x14221))+((cj1*cj2))+(((-1.0)*sj1*x14213))+((r12*x14229)));
evalcond[6]=((((-1.0)*x14233))+((x14219*x14228))+((r22*x14229))+((sj3*x14215))+(((-1.0)*gconst53*r20*x14212*x14217))+((sj3*x14224)));
evalcond[7]=((((-1.0)*x14215*x14217))+(((-1.0)*cj1*x14220))+((x14219*x14231))+((sj1*sj2))+((r22*x14230))+(((-1.0)*x14217*x14224))+(((-1.0)*r20*x14221*x14227)));
evalcond[8]=((((-1.0)*x14233))+((x14214*x14231))+(((-1.0)*r10*x14221*x14227))+(((-1.0)*gconst53*r11*x14217))+((r12*x14230))+(((-1.0)*x14217*x14223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14234 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14234.valid){
continue;
}
CheckValue<IkReal> x14235=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14234.value)+(((1.5707963267949)*(x14235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14236=IKsin(j4);
IkReal x14237=IKcos(j4);
IkReal x14238=((1.0)*sj2);
IkReal x14239=(gconst52*r11);
IkReal x14240=(gconst53*r21);
IkReal x14241=(gconst52*r01);
IkReal x14242=((1.0)*cj3);
IkReal x14243=(gconst52*r00);
IkReal x14244=(gconst52*r21);
IkReal x14245=((1.0)*cj2);
IkReal x14246=(gconst53*sj3);
IkReal x14247=(cj3*gconst53);
IkReal x14248=(gconst52*r10);
IkReal x14249=(gconst52*r20);
IkReal x14250=(cj1*x14238);
IkReal x14251=(sj1*x14245);
IkReal x14252=((1.0)*x14237);
IkReal x14253=(cj3*x14237);
IkReal x14254=(cj3*x14236);
IkReal x14255=(sj3*x14236);
IkReal x14256=(sj3*x14237);
IkReal x14257=((1.0)*gconst53*x14236);
IkReal x14258=(x14251+x14250);
evalcond[0]=(((x14236*x14244))+(((-1.0)*r22*x14252))+(((-1.0)*r20*x14257)));
evalcond[1]=((((-1.0)*r12*x14252))+(((-1.0)*r10*x14257))+((x14236*x14239)));
evalcond[2]=((-1.0)+((x14236*x14241))+(((-1.0)*r00*x14257))+(((-1.0)*r02*x14252)));
evalcond[3]=((((-1.0)*gconst53*r00*x14237*x14242))+((sj3*x14243))+((r02*x14254))+((x14241*x14253))+((r01*x14246)));
evalcond[4]=((((-1.0)*r00*x14246*x14252))+((r02*x14255))+(((-1.0)*x14242*x14243))+(((-1.0)*gconst53*r01*x14242))+((x14241*x14256)));
evalcond[5]=((((-1.0)*sj1*x14238))+((sj3*x14248))+((x14239*x14253))+((r12*x14254))+((r11*x14246))+((cj1*cj2))+(((-1.0)*gconst53*r10*x14237*x14242)));
evalcond[6]=(((sj3*x14249))+((sj3*x14240))+((x14244*x14253))+(((-1.0)*x14258))+(((-1.0)*gconst53*r20*x14237*x14242))+((r22*x14254)));
evalcond[7]=((((-1.0)*cj1*x14245))+((sj1*sj2))+((x14244*x14256))+(((-1.0)*r20*x14246*x14252))+(((-1.0)*x14242*x14249))+((r22*x14255))+(((-1.0)*x14240*x14242)));
evalcond[8]=((((-1.0)*gconst53*r11*x14242))+((x14239*x14256))+(((-1.0)*x14258))+(((-1.0)*r10*x14246*x14252))+(((-1.0)*x14242*x14248))+((r12*x14255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14259=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14259);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14259);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14260=(r01*sj5);
IkReal x14261=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x14261))+x14260);
j4eval[1]=(((sj3*x14260))+(((-1.0)*sj3*x14261)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14262=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14262);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14262);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14263=(r01*sj5);
IkReal x14264=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x14264))+x14263);
j4eval[1]=(((cj3*x14263))+(((-1.0)*cj3*x14264)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14265=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14265);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14265);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14266=((1.0)*r00);
CheckValue<IkReal> x14267=IKPowWithIntegerCheck(cj3,-1);
if(!x14267.valid){
continue;
}
CheckValue<IkReal> x14268=IKPowWithIntegerCheck(r22,-1);
if(!x14268.valid){
continue;
}
CheckValue<IkReal> x14269=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14266))),-1);
if(!x14269.valid){
continue;
}
if( IKabs(((x14267.value)*(x14268.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14269.value)*(((((-1.0)*sj3*sj5*x14266))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14267.value)*(x14268.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x14269.value)*(((((-1.0)*sj3*sj5*x14266))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14267.value)*(x14268.value)*((((cj2*sj1))+((cj1*sj2))))), ((x14269.value)*(((((-1.0)*sj3*sj5*x14266))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14270=IKsin(j4);
IkReal x14271=IKcos(j4);
IkReal x14272=((1.0)*cj5);
IkReal x14273=(cj3*r11);
IkReal x14274=(cj5*sj3);
IkReal x14275=(sj1*sj2);
IkReal x14276=(cj3*r01);
IkReal x14277=((1.0)*cj2);
IkReal x14278=(sj3*sj5);
IkReal x14279=((1.0)*cj1*sj2);
IkReal x14280=(sj1*x14277);
IkReal x14281=(r10*x14271);
IkReal x14282=(r22*x14270);
IkReal x14283=(sj5*x14271);
IkReal x14284=((1.0)*cj3*sj5);
IkReal x14285=(sj5*x14270);
IkReal x14286=(r00*x14271);
IkReal x14287=(x14279+x14280);
evalcond[0]=((-1.0)*r22*x14271);
evalcond[1]=(((r11*x14285))+(((-1.0)*r10*x14270*x14272)));
evalcond[2]=((((-1.0)*cj1*x14277))+((sj3*x14282))+x14275);
evalcond[3]=((-1.0)+((r01*x14285))+(((-1.0)*r00*x14270*x14272)));
evalcond[4]=(((cj3*x14282))+(((-1.0)*x14287)));
evalcond[5]=((((-1.0)*cj3*x14272*x14286))+((r01*x14274))+((x14276*x14283))+((r00*x14278)));
evalcond[6]=(((r01*x14271*x14278))+(((-1.0)*x14272*x14276))+(((-1.0)*sj3*x14272*x14286))+(((-1.0)*r00*x14284)));
evalcond[7]=((((-1.0)*cj3*x14272*x14281))+((x14273*x14283))+(((-1.0)*x14275))+((r11*x14274))+((r10*x14278))+((cj1*cj2)));
evalcond[8]=(((r11*x14271*x14278))+(((-1.0)*x14272*x14273))+(((-1.0)*r10*x14284))+(((-1.0)*sj3*x14272*x14281))+(((-1.0)*x14287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14288=((1.0)*sj3);
IkReal x14289=(r01*sj5);
IkReal x14290=((1.0)*cj5*r00);
CheckValue<IkReal> x14291=IKPowWithIntegerCheck(((((-1.0)*x14290))+x14289),-1);
if(!x14291.valid){
continue;
}
CheckValue<IkReal> x14292=IKPowWithIntegerCheck((((cj3*x14289))+(((-1.0)*cj3*x14290))),-1);
if(!x14292.valid){
continue;
}
if( IKabs(x14291.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14292.value)*(((((-1.0)*r00*sj5*x14288))+(((-1.0)*cj5*r01*x14288)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14291.value)+IKsqr(((x14292.value)*(((((-1.0)*r00*sj5*x14288))+(((-1.0)*cj5*r01*x14288))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14291.value, ((x14292.value)*(((((-1.0)*r00*sj5*x14288))+(((-1.0)*cj5*r01*x14288))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14293=IKsin(j4);
IkReal x14294=IKcos(j4);
IkReal x14295=((1.0)*cj5);
IkReal x14296=(cj3*r11);
IkReal x14297=(cj5*sj3);
IkReal x14298=(sj1*sj2);
IkReal x14299=(cj3*r01);
IkReal x14300=((1.0)*cj2);
IkReal x14301=(sj3*sj5);
IkReal x14302=((1.0)*cj1*sj2);
IkReal x14303=(sj1*x14300);
IkReal x14304=(r10*x14294);
IkReal x14305=(r22*x14293);
IkReal x14306=(sj5*x14294);
IkReal x14307=((1.0)*cj3*sj5);
IkReal x14308=(sj5*x14293);
IkReal x14309=(r00*x14294);
IkReal x14310=(x14303+x14302);
evalcond[0]=((-1.0)*r22*x14294);
evalcond[1]=((((-1.0)*r10*x14293*x14295))+((r11*x14308)));
evalcond[2]=((((-1.0)*cj1*x14300))+x14298+((sj3*x14305)));
evalcond[3]=((-1.0)+((r01*x14308))+(((-1.0)*r00*x14293*x14295)));
evalcond[4]=((((-1.0)*x14310))+((cj3*x14305)));
evalcond[5]=(((x14299*x14306))+((r01*x14297))+(((-1.0)*cj3*x14295*x14309))+((r00*x14301)));
evalcond[6]=(((r01*x14294*x14301))+(((-1.0)*r00*x14307))+(((-1.0)*sj3*x14295*x14309))+(((-1.0)*x14295*x14299)));
evalcond[7]=(((x14296*x14306))+(((-1.0)*cj3*x14295*x14304))+(((-1.0)*x14298))+((r11*x14297))+((cj1*cj2))+((r10*x14301)));
evalcond[8]=(((r11*x14294*x14301))+(((-1.0)*r10*x14307))+(((-1.0)*x14310))+(((-1.0)*sj3*x14295*x14304))+(((-1.0)*x14295*x14296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14311=(r01*sj5);
IkReal x14312=((1.0)*cj5*r00);
CheckValue<IkReal> x14313=IKPowWithIntegerCheck(((((-1.0)*x14312))+x14311),-1);
if(!x14313.valid){
continue;
}
CheckValue<IkReal> x14314=IKPowWithIntegerCheck(((((-1.0)*sj3*x14312))+((sj3*x14311))),-1);
if(!x14314.valid){
continue;
}
if( IKabs(x14313.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14314.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14313.value)+IKsqr(((x14314.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14313.value, ((x14314.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14315=IKsin(j4);
IkReal x14316=IKcos(j4);
IkReal x14317=((1.0)*cj5);
IkReal x14318=(cj3*r11);
IkReal x14319=(cj5*sj3);
IkReal x14320=(sj1*sj2);
IkReal x14321=(cj3*r01);
IkReal x14322=((1.0)*cj2);
IkReal x14323=(sj3*sj5);
IkReal x14324=((1.0)*cj1*sj2);
IkReal x14325=(sj1*x14322);
IkReal x14326=(r10*x14316);
IkReal x14327=(r22*x14315);
IkReal x14328=(sj5*x14316);
IkReal x14329=((1.0)*cj3*sj5);
IkReal x14330=(sj5*x14315);
IkReal x14331=(r00*x14316);
IkReal x14332=(x14325+x14324);
evalcond[0]=((-1.0)*r22*x14316);
evalcond[1]=(((r11*x14330))+(((-1.0)*r10*x14315*x14317)));
evalcond[2]=(((sj3*x14327))+(((-1.0)*cj1*x14322))+x14320);
evalcond[3]=((-1.0)+(((-1.0)*r00*x14315*x14317))+((r01*x14330)));
evalcond[4]=((((-1.0)*x14332))+((cj3*x14327)));
evalcond[5]=(((x14321*x14328))+((r00*x14323))+((r01*x14319))+(((-1.0)*cj3*x14317*x14331)));
evalcond[6]=((((-1.0)*x14317*x14321))+((r01*x14316*x14323))+(((-1.0)*sj3*x14317*x14331))+(((-1.0)*r00*x14329)));
evalcond[7]=(((r11*x14319))+(((-1.0)*cj3*x14317*x14326))+((r10*x14323))+((x14318*x14328))+((cj1*cj2))+(((-1.0)*x14320)));
evalcond[8]=((((-1.0)*x14332))+(((-1.0)*r10*x14329))+(((-1.0)*sj3*x14317*x14326))+(((-1.0)*x14317*x14318))+((r11*x14316*x14323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14333=cj5*cj5;
IkReal x14334=(cj3*r20);
IkReal x14335=(r21*sj3);
IkReal x14336=((1.0)*cj3);
IkReal x14337=(r01*r21);
IkReal x14338=(r01*sj3);
IkReal x14339=(r00*sj5);
IkReal x14340=(cj5*r01*sj5);
IkReal x14341=((1.0)*x14333);
CheckValue<IkReal> x14342=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x14339))+(((-1.0)*x14336*x14337))+((x14334*x14340))+(((-1.0)*r02*r22*x14336))+(((-1.0)*r00*x14334*x14341))+((cj3*x14333*x14337)))),-1);
if(!x14342.valid){
continue;
}
CheckValue<IkReal> x14343 = IKatan2WithCheck(IkReal((((cj5*r22*x14338))+((r22*sj3*x14339)))),IkReal(((((-1.0)*r20*x14338*x14341))+(((-1.0)*r00*x14335*x14341))+(((-1.0)*cj5*r20*sj3*x14339))+((r00*x14335))+((x14335*x14340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14342.value)))+(x14343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14344=IKsin(j4);
IkReal x14345=IKcos(j4);
IkReal x14346=((1.0)*cj5);
IkReal x14347=(cj3*r11);
IkReal x14348=(cj5*sj3);
IkReal x14349=(sj1*sj2);
IkReal x14350=(cj3*r21);
IkReal x14351=(cj3*r01);
IkReal x14352=((1.0)*cj1);
IkReal x14353=(sj3*sj5);
IkReal x14354=(cj3*cj5);
IkReal x14355=(sj2*x14352);
IkReal x14356=((1.0)*cj2*sj1);
IkReal x14357=((1.0)*x14345);
IkReal x14358=(cj3*x14344);
IkReal x14359=(sj5*x14345);
IkReal x14360=((1.0)*cj3*sj5);
IkReal x14361=(sj3*x14344);
IkReal x14362=(sj5*x14344);
IkReal x14363=(x14356+x14355);
evalcond[0]=((((-1.0)*r22*x14357))+(((-1.0)*r20*x14344*x14346))+((r21*x14362)));
evalcond[1]=(((r11*x14362))+(((-1.0)*r12*x14357))+(((-1.0)*r10*x14344*x14346)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14357))+(((-1.0)*r00*x14344*x14346))+((r01*x14362)));
evalcond[3]=(((r02*x14358))+(((-1.0)*cj3*r00*x14345*x14346))+((r01*x14348))+((r00*x14353))+((x14351*x14359)));
evalcond[4]=(((r01*x14345*x14353))+(((-1.0)*r00*x14360))+((r02*x14361))+(((-1.0)*x14346*x14351))+(((-1.0)*r00*sj3*x14345*x14346)));
evalcond[5]=(((x14347*x14359))+(((-1.0)*cj3*r10*x14345*x14346))+((r12*x14358))+(((-1.0)*x14349))+((r11*x14348))+((r10*x14353))+((cj1*cj2)));
evalcond[6]=(((r20*x14353))+((r21*x14348))+(((-1.0)*cj3*r20*x14345*x14346))+(((-1.0)*x14363))+((x14350*x14359))+((r22*x14358)));
evalcond[7]=((((-1.0)*r20*sj3*x14345*x14346))+(((-1.0)*x14346*x14350))+(((-1.0)*cj2*x14352))+(((-1.0)*r20*x14360))+x14349+((r21*x14345*x14353))+((r22*x14361)));
evalcond[8]=((((-1.0)*r10*x14360))+(((-1.0)*x14363))+(((-1.0)*x14346*x14347))+(((-1.0)*r10*sj3*x14345*x14346))+((r12*x14361))+((r11*x14345*x14353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14364=((1.0)*cj5);
CheckValue<IkReal> x14365 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14365.valid){
continue;
}
CheckValue<IkReal> x14366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14364)))),-1);
if(!x14366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14365.value)+(((1.5707963267949)*(x14366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14367=IKsin(j4);
IkReal x14368=IKcos(j4);
IkReal x14369=((1.0)*cj5);
IkReal x14370=(cj3*r11);
IkReal x14371=(cj5*sj3);
IkReal x14372=(sj1*sj2);
IkReal x14373=(cj3*r21);
IkReal x14374=(cj3*r01);
IkReal x14375=((1.0)*cj1);
IkReal x14376=(sj3*sj5);
IkReal x14377=(cj3*cj5);
IkReal x14378=(sj2*x14375);
IkReal x14379=((1.0)*cj2*sj1);
IkReal x14380=((1.0)*x14368);
IkReal x14381=(cj3*x14367);
IkReal x14382=(sj5*x14368);
IkReal x14383=((1.0)*cj3*sj5);
IkReal x14384=(sj3*x14367);
IkReal x14385=(sj5*x14367);
IkReal x14386=(x14378+x14379);
evalcond[0]=(((r21*x14385))+(((-1.0)*r20*x14367*x14369))+(((-1.0)*r22*x14380)));
evalcond[1]=((((-1.0)*r12*x14380))+((r11*x14385))+(((-1.0)*r10*x14367*x14369)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14367*x14369))+((r01*x14385))+(((-1.0)*r02*x14380)));
evalcond[3]=(((r01*x14371))+((r00*x14376))+((x14374*x14382))+(((-1.0)*cj3*r00*x14368*x14369))+((r02*x14381)));
evalcond[4]=((((-1.0)*r00*sj3*x14368*x14369))+(((-1.0)*r00*x14383))+(((-1.0)*x14369*x14374))+((r02*x14384))+((r01*x14368*x14376)));
evalcond[5]=((((-1.0)*cj3*r10*x14368*x14369))+(((-1.0)*x14372))+((r10*x14376))+((r12*x14381))+((x14370*x14382))+((r11*x14371))+((cj1*cj2)));
evalcond[6]=(((r21*x14371))+(((-1.0)*x14386))+((r22*x14381))+((x14373*x14382))+((r20*x14376))+(((-1.0)*cj3*r20*x14368*x14369)));
evalcond[7]=((((-1.0)*r20*x14383))+((r22*x14384))+((r21*x14368*x14376))+(((-1.0)*cj2*x14375))+(((-1.0)*x14369*x14373))+(((-1.0)*r20*sj3*x14368*x14369))+x14372);
evalcond[8]=((((-1.0)*x14386))+((r11*x14368*x14376))+((r12*x14384))+(((-1.0)*x14369*x14370))+(((-1.0)*r10*sj3*x14368*x14369))+(((-1.0)*r10*x14383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14387=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14387.valid){
continue;
}
CheckValue<IkReal> x14388 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14387.value)))+(x14388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14389=IKsin(j4);
IkReal x14390=IKcos(j4);
IkReal x14391=((1.0)*cj5);
IkReal x14392=(cj3*r11);
IkReal x14393=(cj5*sj3);
IkReal x14394=(sj1*sj2);
IkReal x14395=(cj3*r21);
IkReal x14396=(cj3*r01);
IkReal x14397=((1.0)*cj1);
IkReal x14398=(sj3*sj5);
IkReal x14399=(cj3*cj5);
IkReal x14400=(sj2*x14397);
IkReal x14401=((1.0)*cj2*sj1);
IkReal x14402=((1.0)*x14390);
IkReal x14403=(cj3*x14389);
IkReal x14404=(sj5*x14390);
IkReal x14405=((1.0)*cj3*sj5);
IkReal x14406=(sj3*x14389);
IkReal x14407=(sj5*x14389);
IkReal x14408=(x14400+x14401);
evalcond[0]=(((r21*x14407))+(((-1.0)*r22*x14402))+(((-1.0)*r20*x14389*x14391)));
evalcond[1]=(((r11*x14407))+(((-1.0)*r10*x14389*x14391))+(((-1.0)*r12*x14402)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14402))+((r01*x14407))+(((-1.0)*r00*x14389*x14391)));
evalcond[3]=(((r01*x14393))+((r02*x14403))+((r00*x14398))+(((-1.0)*cj3*r00*x14390*x14391))+((x14396*x14404)));
evalcond[4]=(((r02*x14406))+(((-1.0)*x14391*x14396))+(((-1.0)*r00*x14405))+(((-1.0)*r00*sj3*x14390*x14391))+((r01*x14390*x14398)));
evalcond[5]=((((-1.0)*x14394))+((r12*x14403))+(((-1.0)*cj3*r10*x14390*x14391))+((r10*x14398))+((r11*x14393))+((x14392*x14404))+((cj1*cj2)));
evalcond[6]=((((-1.0)*x14408))+((x14395*x14404))+((r21*x14393))+((r22*x14403))+((r20*x14398))+(((-1.0)*cj3*r20*x14390*x14391)));
evalcond[7]=((((-1.0)*r20*sj3*x14390*x14391))+((r22*x14406))+(((-1.0)*x14391*x14395))+((r21*x14390*x14398))+(((-1.0)*cj2*x14397))+x14394+(((-1.0)*r20*x14405)));
evalcond[8]=((((-1.0)*x14408))+(((-1.0)*r10*sj3*x14390*x14391))+((r12*x14406))+(((-1.0)*r10*x14405))+(((-1.0)*x14391*x14392))+((r11*x14390*x14398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14409=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14409;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14409);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14410=((1.0)*cj5);
IkReal x14411=((((-1.0)*r21*x14410))+(((-1.0)*r20*sj5)));
j4eval[0]=x14411;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x14410))))));
j4eval[2]=IKsign(x14411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14412=cj5*cj5;
IkReal x14413=(cj3*r01);
IkReal x14414=(cj5*sj5);
IkReal x14415=((1.0)*cj3);
IkReal x14416=(((cj3*r00*r21*x14414))+(((-1.0)*r00*r20*x14412*x14415))+((r21*x14412*x14413))+(((-1.0)*r02*r22*x14415))+((r20*x14413*x14414))+(((-1.0)*r21*x14413)));
j4eval[0]=x14416;
j4eval[1]=IKsign(x14416);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14417=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14417;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14418=((1.0)*cj5);
IkReal x14419=((((-1.0)*r21*x14418))+(((-1.0)*r20*sj5)));
j4eval[0]=x14419;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x14418))))));
j4eval[2]=IKsign(x14419);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14420=cj5*cj5;
IkReal x14421=r01*r01;
IkReal x14422=(r01*sj5);
IkReal x14423=(cj5*r00);
IkReal x14424=((((-1.0)*x14420*(r00*r00)))+(((-1.0)*(r02*r02)))+((x14420*x14421))+(((2.0)*x14422*x14423))+(((-1.0)*x14421)));
j4eval[0]=x14424;
j4eval[1]=IKsign(x14424);
j4eval[2]=((IKabs(r02))+(IKabs((x14422+(((-1.0)*x14423))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14425=cj5*cj5;
IkReal x14426=r01*r01;
IkReal x14427=(r01*sj5);
IkReal x14428=(cj5*r00);
CheckValue<IkReal> x14429 = IKatan2WithCheck(IkReal((x14427+(((-1.0)*x14428)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14429.valid){
continue;
}
CheckValue<IkReal> x14430=IKPowWithIntegerCheck(IKsign((((x14425*x14426))+(((-1.0)*(r02*r02)))+(((2.0)*x14427*x14428))+(((-1.0)*x14425*(r00*r00)))+(((-1.0)*x14426)))),-1);
if(!x14430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14429.value)+(((1.5707963267949)*(x14430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14431=IKcos(j4);
IkReal x14432=IKsin(j4);
IkReal x14433=(cj5*r00);
IkReal x14434=(cj5*r10);
IkReal x14435=(r21*sj5);
IkReal x14436=(cj5*r20);
IkReal x14437=((1.0)*x14431);
IkReal x14438=((1.0)*x14432);
IkReal x14439=(sj5*x14432);
IkReal x14440=(sj5*x14431);
evalcond[0]=((((-1.0)*x14433*x14437))+((r01*x14440))+((r02*x14432)));
evalcond[1]=((((-1.0)*x14436*x14438))+(((-1.0)*r22*x14437))+((x14432*x14435)));
evalcond[2]=(((r11*x14439))+(((-1.0)*r12*x14437))+(((-1.0)*x14434*x14438)));
evalcond[3]=((1.0)+(((-1.0)*x14433*x14438))+((r01*x14439))+(((-1.0)*r02*x14437)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x14440))+((r12*x14432))+(((-1.0)*x14434*x14437)));
evalcond[5]=((((-1.0)*x14436*x14437))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x14432))+((x14431*x14435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14441=((1.0)*cj5);
CheckValue<IkReal> x14442 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x14441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14442.valid){
continue;
}
CheckValue<IkReal> x14443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14441))+(((-1.0)*r20*sj5)))),-1);
if(!x14443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14442.value)+(((1.5707963267949)*(x14443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14444=IKcos(j4);
IkReal x14445=IKsin(j4);
IkReal x14446=(cj5*r00);
IkReal x14447=(cj5*r10);
IkReal x14448=(r21*sj5);
IkReal x14449=(cj5*r20);
IkReal x14450=((1.0)*x14444);
IkReal x14451=((1.0)*x14445);
IkReal x14452=(sj5*x14445);
IkReal x14453=(sj5*x14444);
evalcond[0]=((((-1.0)*x14446*x14450))+((r01*x14453))+((r02*x14445)));
evalcond[1]=((((-1.0)*x14449*x14451))+(((-1.0)*r22*x14450))+((x14445*x14448)));
evalcond[2]=(((r11*x14452))+(((-1.0)*x14447*x14451))+(((-1.0)*r12*x14450)));
evalcond[3]=((1.0)+(((-1.0)*x14446*x14451))+((r01*x14452))+(((-1.0)*r02*x14450)));
evalcond[4]=(((cj2*sj1))+((r12*x14445))+((cj1*sj2))+((r11*x14453))+(((-1.0)*x14447*x14450)));
evalcond[5]=((((-1.0)*x14449*x14450))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14444*x14448))+((r22*x14445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14454 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14454.valid){
continue;
}
CheckValue<IkReal> x14455=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14454.value)+(((1.5707963267949)*(x14455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14456=IKcos(j4);
IkReal x14457=IKsin(j4);
IkReal x14458=(cj5*r00);
IkReal x14459=(cj5*r10);
IkReal x14460=(r21*sj5);
IkReal x14461=(cj5*r20);
IkReal x14462=((1.0)*x14456);
IkReal x14463=((1.0)*x14457);
IkReal x14464=(sj5*x14457);
IkReal x14465=(sj5*x14456);
evalcond[0]=(((r01*x14465))+(((-1.0)*x14458*x14462))+((r02*x14457)));
evalcond[1]=(((x14457*x14460))+(((-1.0)*r22*x14462))+(((-1.0)*x14461*x14463)));
evalcond[2]=(((r11*x14464))+(((-1.0)*r12*x14462))+(((-1.0)*x14459*x14463)));
evalcond[3]=((1.0)+((r01*x14464))+(((-1.0)*r02*x14462))+(((-1.0)*x14458*x14463)));
evalcond[4]=(((cj2*sj1))+((r12*x14457))+((cj1*sj2))+((r11*x14465))+(((-1.0)*x14459*x14462)));
evalcond[5]=(((x14456*x14460))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x14457))+(((-1.0)*x14461*x14462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14466=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14466;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14467=((1.0)*cj5);
IkReal x14468=((((-1.0)*r21*x14467))+(((-1.0)*r20*sj5)));
j4eval[0]=x14468;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x14467))+((r11*sj5))))));
j4eval[2]=IKsign(x14468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14469=cj5*cj5;
IkReal x14470=r01*r01;
IkReal x14471=(cj5*r00);
IkReal x14472=(r01*sj5);
IkReal x14473=((((-1.0)*x14469*x14470))+(((-2.0)*x14471*x14472))+x14470+(r02*r02)+((x14469*(r00*r00))));
j4eval[0]=x14473;
j4eval[1]=((IKabs(((((-1.0)*x14472))+x14471)))+(IKabs(r02)));
j4eval[2]=IKsign(x14473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14474=cj5*cj5;
IkReal x14475=r01*r01;
IkReal x14476=(r01*sj5);
IkReal x14477=(cj5*r00);
CheckValue<IkReal> x14478=IKPowWithIntegerCheck(IKsign((((x14474*(r00*r00)))+(((-2.0)*x14476*x14477))+(((-1.0)*x14474*x14475))+x14475+(r02*r02))),-1);
if(!x14478.valid){
continue;
}
CheckValue<IkReal> x14479 = IKatan2WithCheck(IkReal(((((-1.0)*x14476))+x14477)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14478.value)))+(x14479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14480=IKsin(j4);
IkReal x14481=IKcos(j4);
IkReal x14482=(cj5*r10);
IkReal x14483=(r01*sj5);
IkReal x14484=(cj5*r00);
IkReal x14485=(cj5*r20);
IkReal x14486=((1.0)*x14481);
IkReal x14487=((1.0)*x14480);
IkReal x14488=(sj5*x14480);
evalcond[0]=(((r21*x14488))+(((-1.0)*r22*x14486))+(((-1.0)*x14485*x14487)));
evalcond[1]=(((r11*x14488))+(((-1.0)*r12*x14486))+(((-1.0)*x14482*x14487)));
evalcond[2]=((((-1.0)*x14483*x14486))+(((-1.0)*r02*x14487))+((x14481*x14484)));
evalcond[3]=((1.0)+((x14480*x14483))+(((-1.0)*x14484*x14487))+(((-1.0)*r02*x14486)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x14486))+(((-1.0)*r12*x14487))+((x14481*x14482)));
evalcond[5]=((((-1.0)*r22*x14487))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14486))+((x14481*x14485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14489=((1.0)*cj5);
CheckValue<IkReal> x14490 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x14489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14490.valid){
continue;
}
CheckValue<IkReal> x14491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14489))+(((-1.0)*r20*sj5)))),-1);
if(!x14491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14490.value)+(((1.5707963267949)*(x14491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14492=IKsin(j4);
IkReal x14493=IKcos(j4);
IkReal x14494=(cj5*r10);
IkReal x14495=(r01*sj5);
IkReal x14496=(cj5*r00);
IkReal x14497=(cj5*r20);
IkReal x14498=((1.0)*x14493);
IkReal x14499=((1.0)*x14492);
IkReal x14500=(sj5*x14492);
evalcond[0]=((((-1.0)*r22*x14498))+((r21*x14500))+(((-1.0)*x14497*x14499)));
evalcond[1]=((((-1.0)*r12*x14498))+(((-1.0)*x14494*x14499))+((r11*x14500)));
evalcond[2]=((((-1.0)*r02*x14499))+((x14493*x14496))+(((-1.0)*x14495*x14498)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14498))+((x14492*x14495))+(((-1.0)*x14496*x14499)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x14493*x14494))+(((-1.0)*r12*x14499))+(((-1.0)*r11*sj5*x14498)));
evalcond[5]=((((-1.0)*r21*sj5*x14498))+(((-1.0)*r22*x14499))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14493*x14497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14501 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14501.valid){
continue;
}
CheckValue<IkReal> x14502=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14501.value)+(((1.5707963267949)*(x14502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14503=IKsin(j4);
IkReal x14504=IKcos(j4);
IkReal x14505=(cj5*r10);
IkReal x14506=(r01*sj5);
IkReal x14507=(cj5*r00);
IkReal x14508=(cj5*r20);
IkReal x14509=((1.0)*x14504);
IkReal x14510=((1.0)*x14503);
IkReal x14511=(sj5*x14503);
evalcond[0]=((((-1.0)*r22*x14509))+((r21*x14511))+(((-1.0)*x14508*x14510)));
evalcond[1]=((((-1.0)*r12*x14509))+((r11*x14511))+(((-1.0)*x14505*x14510)));
evalcond[2]=((((-1.0)*x14506*x14509))+((x14504*x14507))+(((-1.0)*r02*x14510)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14509))+(((-1.0)*x14507*x14510))+((x14503*x14506)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x14504*x14505))+(((-1.0)*r12*x14510))+(((-1.0)*r11*sj5*x14509)));
evalcond[5]=((((-1.0)*r22*x14510))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14509))+((x14504*x14508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14513 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14513)==0){
continue;
}
IkReal x14512=pow(x14513,-0.5);
CheckValue<IkReal> x14514 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14514.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14514.value));
IkReal gconst61=((-1.0)*r11*x14512);
IkReal gconst62=(r10*x14512);
CheckValue<IkReal> x14515 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14515.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14515.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14518 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14518.valid){
continue;
}
IkReal x14516=((-1.0)*(x14518.value));
IkReal x14517=x14512;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x14516;
IkReal gconst60=x14516;
IkReal gconst61=((-1.0)*r11*x14517);
IkReal gconst62=(r10*x14517);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14519=gconst61*gconst61;
IkReal x14520=gconst62*gconst62;
IkReal x14521=(cj3*r01);
IkReal x14522=(r22*sj3);
IkReal x14523=(gconst61*r00);
IkReal x14524=((1.0)*cj3);
IkReal x14525=(gconst62*r01);
IkReal x14526=((1.0)*sj3);
IkReal x14527=(gconst61*gconst62*r20);
IkReal x14528=(r21*x14519);
IkReal x14529=(r20*x14520);
CheckValue<IkReal> x14530=IKPowWithIntegerCheck(IKsign((((x14521*x14527))+(((-1.0)*r02*r22*x14524))+((cj3*gconst62*r21*x14523))+(((-1.0)*r00*x14524*x14529))+(((-1.0)*x14521*x14528)))),-1);
if(!x14530.valid){
continue;
}
CheckValue<IkReal> x14531 = IKatan2WithCheck(IkReal((((x14522*x14525))+((x14522*x14523)))),IkReal((((gconst61*r21*sj3*x14525))+(((-1.0)*r01*x14526*x14529))+((r00*sj3*x14528))+(((-1.0)*gconst62*r20*x14523*x14526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14530.value)))+(x14531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14532=IKsin(j4);
IkReal x14533=IKcos(j4);
IkReal x14534=(sj1*sj2);
IkReal x14535=(gconst62*sj3);
IkReal x14536=(gconst61*sj3);
IkReal x14537=(cj3*gconst61);
IkReal x14538=((1.0)*r00);
IkReal x14539=(cj3*gconst62);
IkReal x14540=((1.0)*cj2);
IkReal x14541=(cj1*sj2);
IkReal x14542=((1.0)*r20);
IkReal x14543=((1.0)*r10);
IkReal x14544=(cj1*x14540);
IkReal x14545=((1.0)*x14533);
IkReal x14546=(gconst61*x14532);
IkReal x14547=(cj3*x14532);
IkReal x14548=(r11*x14533);
IkReal x14549=(sj3*x14532);
IkReal x14550=(r21*x14533);
IkReal x14551=(gconst62*x14532);
IkReal x14552=(r01*x14533);
evalcond[0]=(((r21*x14546))+(((-1.0)*x14542*x14551))+(((-1.0)*r22*x14545)));
evalcond[1]=(((r11*x14546))+(((-1.0)*r12*x14545))+(((-1.0)*x14543*x14551)));
evalcond[2]=((1.0)+((r01*x14546))+(((-1.0)*r02*x14545))+(((-1.0)*x14538*x14551)));
evalcond[3]=(((r02*x14547))+(((-1.0)*x14533*x14538*x14539))+((r00*x14536))+((x14537*x14552))+((r01*x14535)));
evalcond[4]=(((r02*x14549))+(((-1.0)*r01*x14539))+((x14536*x14552))+(((-1.0)*x14533*x14535*x14538))+(((-1.0)*x14537*x14538)));
evalcond[5]=(((r12*x14547))+(((-1.0)*x14533*x14539*x14543))+((r11*x14535))+x14534+((x14537*x14548))+(((-1.0)*x14544))+((r10*x14536)));
evalcond[6]=((((-1.0)*x14533*x14539*x14542))+(((-1.0)*sj1*x14540))+(((-1.0)*x14541))+((x14537*x14550))+((r21*x14535))+((r22*x14547))+((r20*x14536)));
evalcond[7]=(((r12*x14549))+((cj2*sj1))+(((-1.0)*r11*x14539))+(((-1.0)*x14533*x14535*x14543))+x14541+(((-1.0)*x14537*x14543))+((x14536*x14548)));
evalcond[8]=(((x14536*x14550))+(((-1.0)*x14533*x14535*x14542))+(((-1.0)*r21*x14539))+((r22*x14549))+x14534+(((-1.0)*x14537*x14542))+(((-1.0)*x14544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14553=((1.0)*gconst62);
CheckValue<IkReal> x14554 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x14553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14554.valid){
continue;
}
CheckValue<IkReal> x14555=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x14553)))),-1);
if(!x14555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14554.value)+(((1.5707963267949)*(x14555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14556=IKsin(j4);
IkReal x14557=IKcos(j4);
IkReal x14558=(sj1*sj2);
IkReal x14559=(gconst62*sj3);
IkReal x14560=(gconst61*sj3);
IkReal x14561=(cj3*gconst61);
IkReal x14562=((1.0)*r00);
IkReal x14563=(cj3*gconst62);
IkReal x14564=((1.0)*cj2);
IkReal x14565=(cj1*sj2);
IkReal x14566=((1.0)*r20);
IkReal x14567=((1.0)*r10);
IkReal x14568=(cj1*x14564);
IkReal x14569=((1.0)*x14557);
IkReal x14570=(gconst61*x14556);
IkReal x14571=(cj3*x14556);
IkReal x14572=(r11*x14557);
IkReal x14573=(sj3*x14556);
IkReal x14574=(r21*x14557);
IkReal x14575=(gconst62*x14556);
IkReal x14576=(r01*x14557);
evalcond[0]=(((r21*x14570))+(((-1.0)*r22*x14569))+(((-1.0)*x14566*x14575)));
evalcond[1]=((((-1.0)*r12*x14569))+((r11*x14570))+(((-1.0)*x14567*x14575)));
evalcond[2]=((1.0)+(((-1.0)*x14562*x14575))+(((-1.0)*r02*x14569))+((r01*x14570)));
evalcond[3]=(((x14561*x14576))+((r02*x14571))+(((-1.0)*x14557*x14562*x14563))+((r01*x14559))+((r00*x14560)));
evalcond[4]=(((x14560*x14576))+((r02*x14573))+(((-1.0)*r01*x14563))+(((-1.0)*x14557*x14559*x14562))+(((-1.0)*x14561*x14562)));
evalcond[5]=(((x14561*x14572))+(((-1.0)*x14568))+x14558+((r10*x14560))+(((-1.0)*x14557*x14563*x14567))+((r12*x14571))+((r11*x14559)));
evalcond[6]=(((x14561*x14574))+((r20*x14560))+(((-1.0)*x14565))+(((-1.0)*x14557*x14563*x14566))+(((-1.0)*sj1*x14564))+((r22*x14571))+((r21*x14559)));
evalcond[7]=(((cj2*sj1))+((x14560*x14572))+(((-1.0)*r11*x14563))+x14565+(((-1.0)*x14557*x14559*x14567))+(((-1.0)*x14561*x14567))+((r12*x14573)));
evalcond[8]=(((x14560*x14574))+(((-1.0)*x14568))+x14558+(((-1.0)*r21*x14563))+(((-1.0)*x14557*x14559*x14566))+(((-1.0)*x14561*x14566))+((r22*x14573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14578 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14578)==0){
continue;
}
IkReal x14577=pow(x14578,-0.5);
CheckValue<IkReal> x14579 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14579.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14579.value))));
IkReal gconst64=((1.0)*r11*x14577);
IkReal gconst65=((-1.0)*r10*x14577);
CheckValue<IkReal> x14580 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14580.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14580.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14583 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14583.valid){
continue;
}
IkReal x14581=((1.0)*(x14583.value));
IkReal x14582=x14577;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14581)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14581)));
IkReal gconst64=((1.0)*r11*x14582);
IkReal gconst65=((-1.0)*r10*x14582);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14584=gconst65*gconst65;
IkReal x14585=gconst64*gconst64;
IkReal x14586=(r21*sj3);
IkReal x14587=(cj3*r20);
IkReal x14588=((1.0)*r20);
IkReal x14589=((1.0)*cj3);
IkReal x14590=(r01*sj3);
IkReal x14591=(gconst64*gconst65*r01);
IkReal x14592=(gconst64*r00*sj3);
CheckValue<IkReal> x14593 = IKatan2WithCheck(IkReal((((r22*x14592))+((gconst65*r22*x14590)))),IkReal((((r00*x14585*x14586))+(((-1.0)*x14584*x14588*x14590))+(((-1.0)*gconst65*x14588*x14592))+((x14586*x14591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14593.valid){
continue;
}
CheckValue<IkReal> x14594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r21*x14585*x14589))+((x14587*x14591))+((cj3*gconst64*gconst65*r00*r21))+(((-1.0)*r02*r22*x14589))+(((-1.0)*r00*x14584*x14587)))),-1);
if(!x14594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14593.value)+(((1.5707963267949)*(x14594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14595=IKsin(j4);
IkReal x14596=IKcos(j4);
IkReal x14597=(sj1*sj2);
IkReal x14598=(cj3*gconst64);
IkReal x14599=(gconst65*r21);
IkReal x14600=((1.0)*cj3);
IkReal x14601=((1.0)*r00);
IkReal x14602=(gconst65*sj3);
IkReal x14603=(gconst64*sj3);
IkReal x14604=((1.0)*cj2);
IkReal x14605=(cj1*sj2);
IkReal x14606=(cj3*gconst65);
IkReal x14607=(cj1*x14604);
IkReal x14608=((1.0)*x14596);
IkReal x14609=(r11*x14596);
IkReal x14610=(cj3*x14595);
IkReal x14611=(sj3*x14595);
IkReal x14612=(r01*x14596);
IkReal x14613=(gconst64*x14595);
IkReal x14614=(r21*x14596);
IkReal x14615=((1.0)*gconst65*x14595);
evalcond[0]=((((-1.0)*r20*x14615))+(((-1.0)*r22*x14608))+((r21*x14613)));
evalcond[1]=((((-1.0)*r10*x14615))+(((-1.0)*r12*x14608))+((r11*x14613)));
evalcond[2]=((1.0)+((r01*x14613))+(((-1.0)*gconst65*x14595*x14601))+(((-1.0)*r02*x14608)));
evalcond[3]=(((r02*x14610))+(((-1.0)*gconst65*r00*x14596*x14600))+((r01*x14602))+((r00*x14603))+((x14598*x14612)));
evalcond[4]=(((r02*x14611))+(((-1.0)*x14596*x14601*x14602))+(((-1.0)*x14598*x14601))+((x14603*x14612))+(((-1.0)*gconst65*r01*x14600)));
evalcond[5]=((((-1.0)*gconst65*r10*x14596*x14600))+((r10*x14603))+x14597+((x14598*x14609))+((r11*x14602))+((r12*x14610))+(((-1.0)*x14607)));
evalcond[6]=((((-1.0)*sj1*x14604))+(((-1.0)*gconst65*r20*x14596*x14600))+(((-1.0)*x14605))+((r22*x14610))+((x14598*x14614))+((sj3*x14599))+((r20*x14603)));
evalcond[7]=(((cj2*sj1))+((x14603*x14609))+(((-1.0)*r10*x14598))+x14605+(((-1.0)*gconst65*r11*x14600))+((r12*x14611))+(((-1.0)*r10*x14602*x14608)));
evalcond[8]=((((-1.0)*x14599*x14600))+((x14603*x14614))+(((-1.0)*r20*x14598))+x14597+(((-1.0)*r20*x14602*x14608))+((r22*x14611))+(((-1.0)*x14607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14616=((1.0)*gconst65);
CheckValue<IkReal> x14617=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x14616)))),-1);
if(!x14617.valid){
continue;
}
CheckValue<IkReal> x14618 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x14616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14617.value)))+(x14618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14619=IKsin(j4);
IkReal x14620=IKcos(j4);
IkReal x14621=(sj1*sj2);
IkReal x14622=(cj3*gconst64);
IkReal x14623=(gconst65*r21);
IkReal x14624=((1.0)*cj3);
IkReal x14625=((1.0)*r00);
IkReal x14626=(gconst65*sj3);
IkReal x14627=(gconst64*sj3);
IkReal x14628=((1.0)*cj2);
IkReal x14629=(cj1*sj2);
IkReal x14630=(cj3*gconst65);
IkReal x14631=(cj1*x14628);
IkReal x14632=((1.0)*x14620);
IkReal x14633=(r11*x14620);
IkReal x14634=(cj3*x14619);
IkReal x14635=(sj3*x14619);
IkReal x14636=(r01*x14620);
IkReal x14637=(gconst64*x14619);
IkReal x14638=(r21*x14620);
IkReal x14639=((1.0)*gconst65*x14619);
evalcond[0]=((((-1.0)*r22*x14632))+(((-1.0)*r20*x14639))+((r21*x14637)));
evalcond[1]=(((r11*x14637))+(((-1.0)*r10*x14639))+(((-1.0)*r12*x14632)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*x14619*x14625))+((r01*x14637))+(((-1.0)*r02*x14632)));
evalcond[3]=((((-1.0)*gconst65*r00*x14620*x14624))+((x14622*x14636))+((r02*x14634))+((r00*x14627))+((r01*x14626)));
evalcond[4]=((((-1.0)*gconst65*r01*x14624))+(((-1.0)*x14622*x14625))+((r02*x14635))+(((-1.0)*x14620*x14625*x14626))+((x14627*x14636)));
evalcond[5]=((((-1.0)*gconst65*r10*x14620*x14624))+(((-1.0)*x14631))+((r11*x14626))+((x14622*x14633))+((r12*x14634))+((r10*x14627))+x14621);
evalcond[6]=(((sj3*x14623))+((r22*x14634))+((r20*x14627))+((x14622*x14638))+(((-1.0)*sj1*x14628))+(((-1.0)*x14629))+(((-1.0)*gconst65*r20*x14620*x14624)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r10*x14626*x14632))+(((-1.0)*r10*x14622))+((r12*x14635))+(((-1.0)*gconst65*r11*x14624))+x14629+((x14627*x14633)));
evalcond[8]=(((r22*x14635))+(((-1.0)*r20*x14622))+(((-1.0)*x14631))+(((-1.0)*x14623*x14624))+(((-1.0)*r20*x14626*x14632))+x14621+((x14627*x14638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14640=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14640);
rxp0_2=(py*r00);
rxp1_0=(r21*x14640);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14641=(r01*sj5);
IkReal x14642=((1.0)*cj5*r00);
j4eval[0]=(x14641+(((-1.0)*x14642)));
j4eval[1]=((((-1.0)*cj3*x14642))+((cj3*x14641)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14643=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14643);
rxp0_2=(py*r00);
rxp1_0=(r21*x14643);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14644=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14644);
rxp0_2=(py*r00);
rxp1_0=(r21*x14644);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14645=((1.0)*r00);
CheckValue<IkReal> x14646=IKPowWithIntegerCheck(cj3,-1);
if(!x14646.valid){
continue;
}
CheckValue<IkReal> x14647=IKPowWithIntegerCheck(r12,-1);
if(!x14647.valid){
continue;
}
CheckValue<IkReal> x14648=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14645))),-1);
if(!x14648.valid){
continue;
}
if( IKabs(((x14646.value)*(x14647.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14648.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14645)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14646.value)*(x14647.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14648.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14645))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14646.value)*(x14647.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14648.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14645))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14649=IKsin(j4);
IkReal x14650=IKcos(j4);
IkReal x14651=(sj1*sj2);
IkReal x14652=(cj5*r01);
IkReal x14653=((1.0)*cj2);
IkReal x14654=(cj3*sj5);
IkReal x14655=((1.0)*r20);
IkReal x14656=((1.0)*cj3);
IkReal x14657=(cj5*r00);
IkReal x14658=(cj1*sj2);
IkReal x14659=(sj3*sj5);
IkReal x14660=(cj5*r21);
IkReal x14661=(cj1*x14653);
IkReal x14662=(r12*x14649);
IkReal x14663=(r21*x14650);
IkReal x14664=(sj5*x14649);
IkReal x14665=(sj3*x14650);
IkReal x14666=(r01*x14650);
evalcond[0]=((-1.0)*r12*x14650);
evalcond[1]=(((cj2*sj1))+x14658+((sj3*x14662)));
evalcond[2]=((((-1.0)*cj5*x14649*x14655))+((r21*x14664)));
evalcond[3]=(((cj3*x14662))+x14651+(((-1.0)*x14661)));
evalcond[4]=((1.0)+(((-1.0)*x14649*x14657))+((r01*x14664)));
evalcond[5]=(((r00*x14659))+((sj3*x14652))+(((-1.0)*x14650*x14656*x14657))+((x14654*x14666)));
evalcond[6]=((((-1.0)*r00*x14654))+(((-1.0)*x14657*x14665))+((x14659*x14666))+(((-1.0)*x14652*x14656)));
evalcond[7]=((((-1.0)*cj3*cj5*x14650*x14655))+(((-1.0)*x14658))+((x14654*x14663))+((r20*x14659))+((sj3*x14660))+(((-1.0)*sj1*x14653)));
evalcond[8]=((((-1.0)*x14656*x14660))+(((-1.0)*x14654*x14655))+(((-1.0)*cj5*x14655*x14665))+((x14659*x14663))+x14651+(((-1.0)*x14661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14667=IKPowWithIntegerCheck(r12,-1);
if(!x14667.valid){
continue;
}
CheckValue<IkReal> x14668=IKPowWithIntegerCheck(sj3,-1);
if(!x14668.valid){
continue;
}
CheckValue<IkReal> x14669=IKPowWithIntegerCheck(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))),-1);
if(!x14669.valid){
continue;
}
if( IKabs(((x14667.value)*(x14668.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14669.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14667.value)*(x14668.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14669.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14667.value)*(x14668.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14669.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14670=IKsin(j4);
IkReal x14671=IKcos(j4);
IkReal x14672=(sj1*sj2);
IkReal x14673=(cj5*r01);
IkReal x14674=((1.0)*cj2);
IkReal x14675=(cj3*sj5);
IkReal x14676=((1.0)*r20);
IkReal x14677=((1.0)*cj3);
IkReal x14678=(cj5*r00);
IkReal x14679=(cj1*sj2);
IkReal x14680=(sj3*sj5);
IkReal x14681=(cj5*r21);
IkReal x14682=(cj1*x14674);
IkReal x14683=(r12*x14670);
IkReal x14684=(r21*x14671);
IkReal x14685=(sj5*x14670);
IkReal x14686=(sj3*x14671);
IkReal x14687=(r01*x14671);
evalcond[0]=((-1.0)*r12*x14671);
evalcond[1]=(((cj2*sj1))+((sj3*x14683))+x14679);
evalcond[2]=((((-1.0)*cj5*x14670*x14676))+((r21*x14685)));
evalcond[3]=(((cj3*x14683))+(((-1.0)*x14682))+x14672);
evalcond[4]=((1.0)+((r01*x14685))+(((-1.0)*x14670*x14678)));
evalcond[5]=(((r00*x14680))+((x14675*x14687))+(((-1.0)*x14671*x14677*x14678))+((sj3*x14673)));
evalcond[6]=((((-1.0)*x14678*x14686))+((x14680*x14687))+(((-1.0)*x14673*x14677))+(((-1.0)*r00*x14675)));
evalcond[7]=(((sj3*x14681))+(((-1.0)*sj1*x14674))+((x14675*x14684))+(((-1.0)*x14679))+((r20*x14680))+(((-1.0)*cj3*cj5*x14671*x14676)));
evalcond[8]=((((-1.0)*x14677*x14681))+((x14680*x14684))+(((-1.0)*cj5*x14676*x14686))+(((-1.0)*x14675*x14676))+(((-1.0)*x14682))+x14672);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14688=((1.0)*r00);
IkReal x14689=(r01*sj5);
CheckValue<IkReal> x14690=IKPowWithIntegerCheck(((((-1.0)*cj5*x14688))+x14689),-1);
if(!x14690.valid){
continue;
}
CheckValue<IkReal> x14691=IKPowWithIntegerCheck((((cj3*x14689))+(((-1.0)*cj3*cj5*x14688))),-1);
if(!x14691.valid){
continue;
}
if( IKabs(((-1.0)*(x14690.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14691.value)*(((((-1.0)*sj3*sj5*x14688))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14690.value)))+IKsqr(((x14691.value)*(((((-1.0)*sj3*sj5*x14688))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14690.value)), ((x14691.value)*(((((-1.0)*sj3*sj5*x14688))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14692=IKsin(j4);
IkReal x14693=IKcos(j4);
IkReal x14694=(sj1*sj2);
IkReal x14695=(cj5*r01);
IkReal x14696=((1.0)*cj2);
IkReal x14697=(cj3*sj5);
IkReal x14698=((1.0)*r20);
IkReal x14699=((1.0)*cj3);
IkReal x14700=(cj5*r00);
IkReal x14701=(cj1*sj2);
IkReal x14702=(sj3*sj5);
IkReal x14703=(cj5*r21);
IkReal x14704=(cj1*x14696);
IkReal x14705=(r12*x14692);
IkReal x14706=(r21*x14693);
IkReal x14707=(sj5*x14692);
IkReal x14708=(sj3*x14693);
IkReal x14709=(r01*x14693);
evalcond[0]=((-1.0)*r12*x14693);
evalcond[1]=(((cj2*sj1))+x14701+((sj3*x14705)));
evalcond[2]=((((-1.0)*cj5*x14692*x14698))+((r21*x14707)));
evalcond[3]=((((-1.0)*x14704))+((cj3*x14705))+x14694);
evalcond[4]=((1.0)+((r01*x14707))+(((-1.0)*x14692*x14700)));
evalcond[5]=(((r00*x14702))+(((-1.0)*x14693*x14699*x14700))+((sj3*x14695))+((x14697*x14709)));
evalcond[6]=((((-1.0)*r00*x14697))+(((-1.0)*x14695*x14699))+(((-1.0)*x14700*x14708))+((x14702*x14709)));
evalcond[7]=((((-1.0)*cj3*cj5*x14693*x14698))+(((-1.0)*x14701))+((r20*x14702))+((x14697*x14706))+(((-1.0)*sj1*x14696))+((sj3*x14703)));
evalcond[8]=((((-1.0)*x14704))+(((-1.0)*x14699*x14703))+(((-1.0)*x14697*x14698))+(((-1.0)*cj5*x14698*x14708))+x14694+((x14702*x14706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14710=cj5*cj5;
IkReal x14711=(cj3*r20);
IkReal x14712=(r21*sj3);
IkReal x14713=((1.0)*cj3);
IkReal x14714=(r01*r21);
IkReal x14715=(r01*sj3);
IkReal x14716=(r00*sj5);
IkReal x14717=(cj5*r01*sj5);
IkReal x14718=((1.0)*x14710);
CheckValue<IkReal> x14719=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x14716))+((x14711*x14717))+((cj3*x14710*x14714))+(((-1.0)*r02*r22*x14713))+(((-1.0)*r00*x14711*x14718))+(((-1.0)*x14713*x14714)))),-1);
if(!x14719.valid){
continue;
}
CheckValue<IkReal> x14720 = IKatan2WithCheck(IkReal((((r22*sj3*x14716))+((cj5*r22*x14715)))),IkReal(((((-1.0)*cj5*r20*sj3*x14716))+(((-1.0)*r20*x14715*x14718))+((x14712*x14717))+(((-1.0)*r00*x14712*x14718))+((r00*x14712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14719.value)))+(x14720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14721=IKsin(j4);
IkReal x14722=IKcos(j4);
IkReal x14723=(sj1*sj2);
IkReal x14724=(cj3*r11);
IkReal x14725=((1.0)*cj5);
IkReal x14726=(cj5*sj3);
IkReal x14727=((1.0)*cj1);
IkReal x14728=(cj3*r21);
IkReal x14729=(cj3*r01);
IkReal x14730=(sj3*sj5);
IkReal x14731=(cj2*sj1);
IkReal x14732=(cj3*cj5);
IkReal x14733=(cj2*x14727);
IkReal x14734=((1.0)*x14722);
IkReal x14735=(sj5*x14722);
IkReal x14736=(cj3*x14721);
IkReal x14737=((1.0)*cj3*sj5);
IkReal x14738=(sj3*x14721);
IkReal x14739=(sj5*x14721);
evalcond[0]=((((-1.0)*r20*x14721*x14725))+(((-1.0)*r22*x14734))+((r21*x14739)));
evalcond[1]=((((-1.0)*r12*x14734))+(((-1.0)*r10*x14721*x14725))+((r11*x14739)));
evalcond[2]=((1.0)+((r01*x14739))+(((-1.0)*r00*x14721*x14725))+(((-1.0)*r02*x14734)));
evalcond[3]=((((-1.0)*cj3*r00*x14722*x14725))+((r00*x14730))+((r01*x14726))+((r02*x14736))+((x14729*x14735)));
evalcond[4]=((((-1.0)*r00*x14737))+((r02*x14738))+((r01*x14722*x14730))+(((-1.0)*r00*sj3*x14722*x14725))+(((-1.0)*x14725*x14729)));
evalcond[5]=(((r10*x14730))+(((-1.0)*cj3*r10*x14722*x14725))+(((-1.0)*x14733))+x14723+((r11*x14726))+((x14724*x14735))+((r12*x14736)));
evalcond[6]=(((r21*x14726))+(((-1.0)*x14731))+((r20*x14730))+(((-1.0)*sj2*x14727))+((x14728*x14735))+(((-1.0)*cj3*r20*x14722*x14725))+((r22*x14736)));
evalcond[7]=(((cj1*sj2))+((r11*x14722*x14730))+(((-1.0)*r10*sj3*x14722*x14725))+(((-1.0)*r10*x14737))+x14731+((r12*x14738))+(((-1.0)*x14724*x14725)));
evalcond[8]=((((-1.0)*r20*x14737))+((r21*x14722*x14730))+(((-1.0)*r20*sj3*x14722*x14725))+((r22*x14738))+(((-1.0)*x14733))+x14723+(((-1.0)*x14725*x14728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14740=((1.0)*cj5);
CheckValue<IkReal> x14741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14740))+(((-1.0)*r20*sj5)))),-1);
if(!x14741.valid){
continue;
}
CheckValue<IkReal> x14742 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x14740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14741.value)))+(x14742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14743=IKsin(j4);
IkReal x14744=IKcos(j4);
IkReal x14745=(sj1*sj2);
IkReal x14746=(cj3*r11);
IkReal x14747=((1.0)*cj5);
IkReal x14748=(cj5*sj3);
IkReal x14749=((1.0)*cj1);
IkReal x14750=(cj3*r21);
IkReal x14751=(cj3*r01);
IkReal x14752=(sj3*sj5);
IkReal x14753=(cj2*sj1);
IkReal x14754=(cj3*cj5);
IkReal x14755=(cj2*x14749);
IkReal x14756=((1.0)*x14744);
IkReal x14757=(sj5*x14744);
IkReal x14758=(cj3*x14743);
IkReal x14759=((1.0)*cj3*sj5);
IkReal x14760=(sj3*x14743);
IkReal x14761=(sj5*x14743);
evalcond[0]=((((-1.0)*r20*x14743*x14747))+((r21*x14761))+(((-1.0)*r22*x14756)));
evalcond[1]=((((-1.0)*r10*x14743*x14747))+(((-1.0)*r12*x14756))+((r11*x14761)));
evalcond[2]=((1.0)+((r01*x14761))+(((-1.0)*r02*x14756))+(((-1.0)*r00*x14743*x14747)));
evalcond[3]=((((-1.0)*cj3*r00*x14744*x14747))+((r02*x14758))+((r01*x14748))+((x14751*x14757))+((r00*x14752)));
evalcond[4]=((((-1.0)*r00*x14759))+((r01*x14744*x14752))+((r02*x14760))+(((-1.0)*r00*sj3*x14744*x14747))+(((-1.0)*x14747*x14751)));
evalcond[5]=((((-1.0)*cj3*r10*x14744*x14747))+((x14746*x14757))+((r11*x14748))+x14745+((r12*x14758))+(((-1.0)*x14755))+((r10*x14752)));
evalcond[6]=((((-1.0)*cj3*r20*x14744*x14747))+((r20*x14752))+((r21*x14748))+(((-1.0)*sj2*x14749))+((r22*x14758))+((x14750*x14757))+(((-1.0)*x14753)));
evalcond[7]=(((r11*x14744*x14752))+(((-1.0)*r10*sj3*x14744*x14747))+((cj1*sj2))+(((-1.0)*r10*x14759))+(((-1.0)*x14746*x14747))+((r12*x14760))+x14753);
evalcond[8]=(((r21*x14744*x14752))+(((-1.0)*r20*x14759))+x14745+(((-1.0)*r20*sj3*x14744*x14747))+(((-1.0)*x14747*x14750))+((r22*x14760))+(((-1.0)*x14755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14762 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14762.valid){
continue;
}
CheckValue<IkReal> x14763=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14762.value)+(((1.5707963267949)*(x14763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14764=IKsin(j4);
IkReal x14765=IKcos(j4);
IkReal x14766=(sj1*sj2);
IkReal x14767=(cj3*r11);
IkReal x14768=((1.0)*cj5);
IkReal x14769=(cj5*sj3);
IkReal x14770=((1.0)*cj1);
IkReal x14771=(cj3*r21);
IkReal x14772=(cj3*r01);
IkReal x14773=(sj3*sj5);
IkReal x14774=(cj2*sj1);
IkReal x14775=(cj3*cj5);
IkReal x14776=(cj2*x14770);
IkReal x14777=((1.0)*x14765);
IkReal x14778=(sj5*x14765);
IkReal x14779=(cj3*x14764);
IkReal x14780=((1.0)*cj3*sj5);
IkReal x14781=(sj3*x14764);
IkReal x14782=(sj5*x14764);
evalcond[0]=((((-1.0)*r22*x14777))+((r21*x14782))+(((-1.0)*r20*x14764*x14768)));
evalcond[1]=(((r11*x14782))+(((-1.0)*r10*x14764*x14768))+(((-1.0)*r12*x14777)));
evalcond[2]=((1.0)+((r01*x14782))+(((-1.0)*r00*x14764*x14768))+(((-1.0)*r02*x14777)));
evalcond[3]=(((r01*x14769))+((r00*x14773))+((x14772*x14778))+(((-1.0)*cj3*r00*x14765*x14768))+((r02*x14779)));
evalcond[4]=((((-1.0)*x14768*x14772))+(((-1.0)*r00*sj3*x14765*x14768))+((r02*x14781))+((r01*x14765*x14773))+(((-1.0)*r00*x14780)));
evalcond[5]=(((r12*x14779))+((r10*x14773))+(((-1.0)*cj3*r10*x14765*x14768))+(((-1.0)*x14776))+((x14767*x14778))+((r11*x14769))+x14766);
evalcond[6]=(((r22*x14779))+((x14771*x14778))+(((-1.0)*x14774))+(((-1.0)*cj3*r20*x14765*x14768))+(((-1.0)*sj2*x14770))+((r21*x14769))+((r20*x14773)));
evalcond[7]=((((-1.0)*r10*x14780))+(((-1.0)*r10*sj3*x14765*x14768))+((cj1*sj2))+((r12*x14781))+((r11*x14765*x14773))+x14774+(((-1.0)*x14767*x14768)));
evalcond[8]=(((r21*x14765*x14773))+(((-1.0)*x14768*x14771))+(((-1.0)*x14776))+(((-1.0)*r20*x14780))+(((-1.0)*r20*sj3*x14765*x14768))+x14766+((r22*x14781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14783=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14783);
rxp1_1=(px*r21);
rxp1_2=(r11*x14783);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14784=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14784);
rxp1_1=(px*r21);
rxp1_2=(r11*x14784);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14785=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x14785))+((r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x14785)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14786=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14786);
rxp1_1=(px*r21);
rxp1_2=(r11*x14786);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14787=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14787);
rxp1_1=(px*r21);
rxp1_2=(r11*x14787);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14788=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14788);
rxp1_1=(px*r21);
rxp1_2=(r11*x14788);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14789=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14789);
rxp1_1=(px*r21);
rxp1_2=(r11*x14789);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14792=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x14792.valid){
continue;
}
IkReal x14790=x14792.value;
IkReal x14791=(sj0*x14790);
cj4array[0]=((((-1.0)*cj1*cj2*x14791))+((sj1*sj2*x14791)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14793=IKsin(j4);
IkReal x14794=IKcos(j4);
IkReal x14795=(r21*sj5);
IkReal x14796=((1.0)*cj5*r20);
evalcond[0]=(r02*x14793);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x14794)));
evalcond[2]=(((x14793*x14795))+(((-1.0)*x14793*x14796)));
evalcond[3]=((((-1.0)*cj5*r10*x14793))+((r11*sj5*x14793)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x14794*x14795))+(((-1.0)*x14794*x14796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14798=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14798.valid){
continue;
}
IkReal x14797=x14798.value;
cj4array[0]=(((cj1*sj2*x14797))+((cj2*sj1*x14797)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14799=IKsin(j4);
IkReal x14800=IKcos(j4);
IkReal x14801=((1.0)*sj0);
IkReal x14802=((1.0)*cj5);
IkReal x14803=(sj5*x14799);
evalcond[0]=(r02*x14799);
evalcond[1]=((((-1.0)*x14801))+(((-1.0)*r02*x14800)));
evalcond[2]=(((r21*x14803))+(((-1.0)*r20*x14799*x14802)));
evalcond[3]=((((-1.0)*r10*x14799*x14802))+((r11*x14803)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x14800*x14802))+(((-1.0)*sj1*sj2*x14801))+((r11*sj5*x14800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14804=IKPowWithIntegerCheck(r02,-1);
if(!x14804.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x14804.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14805=IKsin(j4);
IkReal x14806=IKcos(j4);
IkReal x14807=((1.0)*sj1);
IkReal x14808=(r21*sj5);
IkReal x14809=(r11*sj5);
IkReal x14810=((1.0)*cj5*x14806);
IkReal x14811=((1.0)*cj5*x14805);
evalcond[0]=(r02*x14805);
evalcond[1]=((((-1.0)*r20*x14811))+((x14805*x14808)));
evalcond[2]=((((-1.0)*r10*x14811))+((x14805*x14809)));
evalcond[3]=((((-1.0)*r20*x14810))+(((-1.0)*cj2*x14807))+(((-1.0)*cj1*sj2))+((x14806*x14808)));
evalcond[4]=(((cj1*cj2*sj0))+((x14806*x14809))+(((-1.0)*r10*x14810))+(((-1.0)*sj0*sj2*x14807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14812=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14812);
rxp1_1=(px*r21);
rxp1_2=(r11*x14812);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14813=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14813);
rxp1_1=(px*r21);
rxp1_2=(r11*x14813);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14814=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14814);
rxp1_1=(px*r21);
rxp1_2=(r11*x14814);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14817=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x14817.valid){
continue;
}
IkReal x14815=x14817.value;
IkReal x14816=(sj0*x14815);
cj4array[0]=((((-1.0)*cj1*cj2*x14816))+((sj1*sj2*x14816)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14818=IKsin(j4);
IkReal x14819=IKcos(j4);
IkReal x14820=(r21*sj5);
IkReal x14821=(cj5*r20);
IkReal x14822=((1.0)*x14818);
IkReal x14823=((1.0)*x14819);
evalcond[0]=((-1.0)*r02*x14818);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x14823)));
evalcond[2]=((((-1.0)*x14821*x14822))+((x14818*x14820)));
evalcond[3]=((((-1.0)*cj5*r10*x14822))+((r11*sj5*x14818)));
evalcond[4]=((((-1.0)*x14820*x14823))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x14819*x14821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14825=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14825.valid){
continue;
}
IkReal x14824=x14825.value;
cj4array[0]=(((cj1*sj2*x14824))+((cj2*sj1*x14824)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14826=IKsin(j4);
IkReal x14827=IKcos(j4);
IkReal x14828=(r11*sj5);
IkReal x14829=((1.0)*sj0);
IkReal x14830=((1.0)*x14827);
IkReal x14831=((1.0)*cj5*x14826);
evalcond[0]=((-1.0)*r02*x14826);
evalcond[1]=((((-1.0)*r02*x14830))+(((-1.0)*x14829)));
evalcond[2]=((((-1.0)*r20*x14831))+((r21*sj5*x14826)));
evalcond[3]=(((x14826*x14828))+(((-1.0)*r10*x14831)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x14828*x14830))+((cj5*r10*x14827))+(((-1.0)*sj1*sj2*x14829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14832=IKPowWithIntegerCheck(r02,-1);
if(!x14832.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x14832.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14833=IKsin(j4);
IkReal x14834=IKcos(j4);
IkReal x14835=((1.0)*sj1);
IkReal x14836=(cj5*x14834);
IkReal x14837=(sj5*x14833);
IkReal x14838=((1.0)*sj5*x14834);
IkReal x14839=((1.0)*cj5*x14833);
evalcond[0]=((-1.0)*r02*x14833);
evalcond[1]=((((-1.0)*r20*x14839))+((r21*x14837)));
evalcond[2]=(((r11*x14837))+(((-1.0)*r10*x14839)));
evalcond[3]=((((-1.0)*cj2*x14835))+(((-1.0)*cj1*sj2))+((r20*x14836))+(((-1.0)*r21*x14838)));
evalcond[4]=((((-1.0)*sj0*sj2*x14835))+((cj1*cj2*sj0))+(((-1.0)*r11*x14838))+((r10*x14836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x14840 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14840.valid){
continue;
}
IkReal gconst66=((-1.0)*(x14840.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x14841 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14841.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14841.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14842=((-1.0)*r10);
CheckValue<IkReal> x14844 = IKatan2WithCheck(IkReal(x14842),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14844.valid){
continue;
}
IkReal x14843=((-1.0)*(x14844.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14842);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x14843;
IkReal gconst66=x14843;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14845=((-1.0)*r10);
CheckValue<IkReal> x14847 = IKatan2WithCheck(IkReal(x14845),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14847.valid){
continue;
}
IkReal x14846=((-1.0)*(x14847.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14845);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x14846;
IkReal gconst66=x14846;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14848=((-1.0)*r10);
CheckValue<IkReal> x14850 = IKatan2WithCheck(IkReal(x14848),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14850.valid){
continue;
}
IkReal x14849=((-1.0)*(x14850.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14848);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x14849;
IkReal gconst66=x14849;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*sj3))+((r10*r21*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14851=(cj1*cj2);
IkReal x14852=(sj1*sj2);
CheckValue<IkReal> x14853=IKPowWithIntegerCheck(cj3,-1);
if(!x14853.valid){
continue;
}
CheckValue<IkReal> x14854=IKPowWithIntegerCheck(r02,-1);
if(!x14854.valid){
continue;
}
CheckValue<IkReal> x14855=IKPowWithIntegerCheck((((gconst67*r21*sj3))+(((-1.0)*gconst68*r20*sj3))),-1);
if(!x14855.valid){
continue;
}
if( IKabs(((x14853.value)*(x14854.value)*((((cj0*x14852))+(((-1.0)*cj0*x14851)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14855.value)*((((cj3*gconst67*r20))+x14851+((cj3*gconst68*r21))+(((-1.0)*x14852)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14853.value)*(x14854.value)*((((cj0*x14852))+(((-1.0)*cj0*x14851))))))+IKsqr(((x14855.value)*((((cj3*gconst67*r20))+x14851+((cj3*gconst68*r21))+(((-1.0)*x14852))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14853.value)*(x14854.value)*((((cj0*x14852))+(((-1.0)*cj0*x14851))))), ((x14855.value)*((((cj3*gconst67*r20))+x14851+((cj3*gconst68*r21))+(((-1.0)*x14852))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14856=IKsin(j4);
IkReal x14857=IKcos(j4);
IkReal x14858=(cj1*cj2);
IkReal x14859=(gconst68*r11);
IkReal x14860=(sj1*sj2);
IkReal x14861=(r21*sj3);
IkReal x14862=(gconst67*r10);
IkReal x14863=((1.0)*cj3);
IkReal x14864=(gconst68*r20);
IkReal x14865=(gconst67*r20);
IkReal x14866=(gconst68*r10);
IkReal x14867=((1.0)*sj0);
IkReal x14868=(gconst67*x14857);
IkReal x14869=((1.0)*cj2*sj1);
IkReal x14870=((1.0)*cj1*sj2);
IkReal x14871=((1.0)*x14856);
IkReal x14872=(r02*x14856);
IkReal x14873=(gconst67*x14856);
IkReal x14874=((1.0)*x14857);
evalcond[0]=((((-1.0)*r02*x14874))+(((-1.0)*x14867)));
evalcond[1]=((((-1.0)*x14864*x14871))+((r21*x14873)));
evalcond[2]=(((r11*x14873))+cj0+(((-1.0)*x14866*x14871)));
evalcond[3]=(((cj0*x14858))+(((-1.0)*cj0*x14860))+((cj3*x14872)));
evalcond[4]=((((-1.0)*cj0*x14870))+(((-1.0)*cj0*x14869))+((sj3*x14872)));
evalcond[5]=((((-1.0)*x14857*x14863*x14864))+((sj3*x14865))+((gconst68*x14861))+(((-1.0)*x14870))+(((-1.0)*x14869))+((cj3*r21*x14868)));
evalcond[6]=(x14860+(((-1.0)*sj3*x14864*x14874))+(((-1.0)*gconst68*r21*x14863))+(((-1.0)*x14863*x14865))+((x14861*x14868))+(((-1.0)*x14858)));
evalcond[7]=((((-1.0)*x14857*x14863*x14866))+((sj0*x14858))+((cj3*r11*x14868))+((sj3*x14859))+((sj3*x14862))+(((-1.0)*x14860*x14867)));
evalcond[8]=((((-1.0)*cj1*sj2*x14867))+(((-1.0)*x14859*x14863))+(((-1.0)*cj2*sj1*x14867))+(((-1.0)*x14862*x14863))+((r11*sj3*x14868))+(((-1.0)*sj3*x14866*x14874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14876=IKPowWithIntegerCheck(r02,-1);
if(!x14876.valid){
continue;
}
IkReal x14875=x14876.value;
CheckValue<IkReal> x14877=IKPowWithIntegerCheck(cj3,-1);
if(!x14877.valid){
continue;
}
if( IKabs((x14875*(x14877.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x14875)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14875*(x14877.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))+IKsqr(((-1.0)*sj0*x14875))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14875*(x14877.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))), ((-1.0)*sj0*x14875));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14878=IKsin(j4);
IkReal x14879=IKcos(j4);
IkReal x14880=(cj1*cj2);
IkReal x14881=(gconst68*r11);
IkReal x14882=(sj1*sj2);
IkReal x14883=(r21*sj3);
IkReal x14884=(gconst67*r10);
IkReal x14885=((1.0)*cj3);
IkReal x14886=(gconst68*r20);
IkReal x14887=(gconst67*r20);
IkReal x14888=(gconst68*r10);
IkReal x14889=((1.0)*sj0);
IkReal x14890=(gconst67*x14879);
IkReal x14891=((1.0)*cj2*sj1);
IkReal x14892=((1.0)*cj1*sj2);
IkReal x14893=((1.0)*x14878);
IkReal x14894=(r02*x14878);
IkReal x14895=(gconst67*x14878);
IkReal x14896=((1.0)*x14879);
evalcond[0]=((((-1.0)*x14889))+(((-1.0)*r02*x14896)));
evalcond[1]=(((r21*x14895))+(((-1.0)*x14886*x14893)));
evalcond[2]=(cj0+((r11*x14895))+(((-1.0)*x14888*x14893)));
evalcond[3]=(((cj0*x14880))+(((-1.0)*cj0*x14882))+((cj3*x14894)));
evalcond[4]=((((-1.0)*cj0*x14892))+(((-1.0)*cj0*x14891))+((sj3*x14894)));
evalcond[5]=(((cj3*r21*x14890))+(((-1.0)*x14879*x14885*x14886))+((sj3*x14887))+(((-1.0)*x14891))+(((-1.0)*x14892))+((gconst68*x14883)));
evalcond[6]=(x14882+(((-1.0)*gconst68*r21*x14885))+(((-1.0)*x14885*x14887))+((x14883*x14890))+(((-1.0)*sj3*x14886*x14896))+(((-1.0)*x14880)));
evalcond[7]=(((cj3*r11*x14890))+(((-1.0)*x14879*x14885*x14888))+((sj0*x14880))+(((-1.0)*x14882*x14889))+((sj3*x14884))+((sj3*x14881)));
evalcond[8]=(((r11*sj3*x14890))+(((-1.0)*cj2*sj1*x14889))+(((-1.0)*x14884*x14885))+(((-1.0)*x14881*x14885))+(((-1.0)*cj1*sj2*x14889))+(((-1.0)*sj3*x14888*x14896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14898=IKPowWithIntegerCheck(r02,-1);
if(!x14898.valid){
continue;
}
IkReal x14897=x14898.value;
CheckValue<IkReal> x14899=IKPowWithIntegerCheck(sj3,-1);
if(!x14899.valid){
continue;
}
if( IKabs((x14897*(x14899.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x14897)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14897*(x14899.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x14897))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14897*(x14899.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x14897));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14900=IKsin(j4);
IkReal x14901=IKcos(j4);
IkReal x14902=(cj1*cj2);
IkReal x14903=(gconst68*r11);
IkReal x14904=(sj1*sj2);
IkReal x14905=(r21*sj3);
IkReal x14906=(gconst67*r10);
IkReal x14907=((1.0)*cj3);
IkReal x14908=(gconst68*r20);
IkReal x14909=(gconst67*r20);
IkReal x14910=(gconst68*r10);
IkReal x14911=((1.0)*sj0);
IkReal x14912=(gconst67*x14901);
IkReal x14913=((1.0)*cj2*sj1);
IkReal x14914=((1.0)*cj1*sj2);
IkReal x14915=((1.0)*x14900);
IkReal x14916=(r02*x14900);
IkReal x14917=(gconst67*x14900);
IkReal x14918=((1.0)*x14901);
evalcond[0]=((((-1.0)*r02*x14918))+(((-1.0)*x14911)));
evalcond[1]=(((r21*x14917))+(((-1.0)*x14908*x14915)));
evalcond[2]=(cj0+(((-1.0)*x14910*x14915))+((r11*x14917)));
evalcond[3]=(((cj0*x14902))+((cj3*x14916))+(((-1.0)*cj0*x14904)));
evalcond[4]=(((sj3*x14916))+(((-1.0)*cj0*x14914))+(((-1.0)*cj0*x14913)));
evalcond[5]=(((cj3*r21*x14912))+(((-1.0)*x14914))+(((-1.0)*x14913))+((sj3*x14909))+((gconst68*x14905))+(((-1.0)*x14901*x14907*x14908)));
evalcond[6]=(((x14905*x14912))+(((-1.0)*x14907*x14909))+x14904+(((-1.0)*x14902))+(((-1.0)*sj3*x14908*x14918))+(((-1.0)*gconst68*r21*x14907)));
evalcond[7]=(((sj3*x14903))+((sj3*x14906))+((cj3*r11*x14912))+(((-1.0)*x14901*x14907*x14910))+(((-1.0)*x14904*x14911))+((sj0*x14902)));
evalcond[8]=((((-1.0)*cj1*sj2*x14911))+(((-1.0)*x14903*x14907))+(((-1.0)*x14906*x14907))+((r11*sj3*x14912))+(((-1.0)*sj3*x14910*x14918))+(((-1.0)*cj2*sj1*x14911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14919=((-1.0)*r10);
CheckValue<IkReal> x14920 = IKatan2WithCheck(IkReal(x14919),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14920.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x14920.value))));
IkReal gconst70=x14919;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x14921 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14921.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14921.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14922=((-1.0)*r10);
IkReal x14923=((-1.0)*r11);
CheckValue<IkReal> x14925 = IKatan2WithCheck(IkReal(x14922),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14925.valid){
continue;
}
IkReal x14924=((1.0)*(x14925.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14922);
rxp1_1=(px*r21);
rxp1_2=(px*x14923);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14924)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14924)));
IkReal gconst70=x14922;
IkReal gconst71=x14923;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14926=((-1.0)*r10);
IkReal x14927=((-1.0)*r11);
CheckValue<IkReal> x14929 = IKatan2WithCheck(IkReal(x14926),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14929.valid){
continue;
}
IkReal x14928=((1.0)*(x14929.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14926);
rxp1_1=(px*r21);
rxp1_2=(px*x14927);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14928)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14928)));
IkReal gconst70=x14926;
IkReal gconst71=x14927;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14930=((-1.0)*r10);
IkReal x14931=((-1.0)*r11);
CheckValue<IkReal> x14933 = IKatan2WithCheck(IkReal(x14930),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14933.valid){
continue;
}
IkReal x14932=((1.0)*(x14933.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14930);
rxp1_1=(px*r21);
rxp1_2=(px*x14931);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14932)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14932)));
IkReal gconst70=x14930;
IkReal gconst71=x14931;
IkReal x14934=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r11*r20*x14934))+(((-1.0)*r10*r21*x14934)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14935=(cj1*cj2);
IkReal x14936=(sj1*sj2);
CheckValue<IkReal> x14937=IKPowWithIntegerCheck(cj3,-1);
if(!x14937.valid){
continue;
}
CheckValue<IkReal> x14938=IKPowWithIntegerCheck(r02,-1);
if(!x14938.valid){
continue;
}
CheckValue<IkReal> x14939=IKPowWithIntegerCheck(((((-1.0)*gconst71*r20*sj3))+((gconst70*r21*sj3))),-1);
if(!x14939.valid){
continue;
}
if( IKabs(((x14937.value)*(x14938.value)*((((cj0*x14936))+(((-1.0)*cj0*x14935)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14939.value)*(((((-1.0)*x14936))+x14935+((cj3*gconst70*r20))+((cj3*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14937.value)*(x14938.value)*((((cj0*x14936))+(((-1.0)*cj0*x14935))))))+IKsqr(((x14939.value)*(((((-1.0)*x14936))+x14935+((cj3*gconst70*r20))+((cj3*gconst71*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14937.value)*(x14938.value)*((((cj0*x14936))+(((-1.0)*cj0*x14935))))), ((x14939.value)*(((((-1.0)*x14936))+x14935+((cj3*gconst70*r20))+((cj3*gconst71*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14940=IKsin(j4);
IkReal x14941=IKcos(j4);
IkReal x14942=((1.0)*gconst71);
IkReal x14943=(cj1*cj2);
IkReal x14944=(gconst70*r11);
IkReal x14945=(sj1*sj2);
IkReal x14946=(gconst71*sj3);
IkReal x14947=(gconst70*sj3);
IkReal x14948=((1.0)*sj0);
IkReal x14949=(sj3*x14941);
IkReal x14950=((1.0)*cj2*sj1);
IkReal x14951=(cj3*x14941);
IkReal x14952=((1.0)*cj1*sj2);
IkReal x14953=(r02*x14940);
IkReal x14954=((1.0)*cj3*gconst70);
IkReal x14955=(gconst70*r21*x14941);
evalcond[0]=((((-1.0)*r02*x14941))+(((-1.0)*x14948)));
evalcond[1]=(((gconst70*r21*x14940))+(((-1.0)*r20*x14940*x14942)));
evalcond[2]=(cj0+(((-1.0)*r10*x14940*x14942))+((x14940*x14944)));
evalcond[3]=(((cj0*x14943))+(((-1.0)*cj0*x14945))+((cj3*x14953)));
evalcond[4]=(((sj3*x14953))+(((-1.0)*cj0*x14952))+(((-1.0)*cj0*x14950)));
evalcond[5]=(((gconst70*r21*x14951))+(((-1.0)*x14952))+(((-1.0)*x14950))+(((-1.0)*r20*x14942*x14951))+((r21*x14946))+((r20*x14947)));
evalcond[6]=((((-1.0)*cj3*r21*x14942))+x14945+(((-1.0)*r20*x14954))+(((-1.0)*x14943))+((r21*x14941*x14947))+(((-1.0)*r20*x14942*x14949)));
evalcond[7]=((((-1.0)*x14945*x14948))+((r10*x14947))+((sj0*x14943))+((x14944*x14951))+(((-1.0)*r10*x14942*x14951))+((r11*x14946)));
evalcond[8]=((((-1.0)*cj2*sj1*x14948))+(((-1.0)*cj3*r11*x14942))+(((-1.0)*r10*x14942*x14949))+((x14944*x14949))+(((-1.0)*cj1*sj2*x14948))+(((-1.0)*r10*x14954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14957=IKPowWithIntegerCheck(r02,-1);
if(!x14957.valid){
continue;
}
IkReal x14956=x14957.value;
CheckValue<IkReal> x14958=IKPowWithIntegerCheck(cj3,-1);
if(!x14958.valid){
continue;
}
if( IKabs((x14956*(x14958.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x14956)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14956*(x14958.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))+IKsqr(((-1.0)*sj0*x14956))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14956*(x14958.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))), ((-1.0)*sj0*x14956));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14959=IKsin(j4);
IkReal x14960=IKcos(j4);
IkReal x14961=((1.0)*gconst71);
IkReal x14962=(cj1*cj2);
IkReal x14963=(gconst70*r11);
IkReal x14964=(sj1*sj2);
IkReal x14965=(gconst71*sj3);
IkReal x14966=(gconst70*sj3);
IkReal x14967=((1.0)*sj0);
IkReal x14968=(sj3*x14960);
IkReal x14969=((1.0)*cj2*sj1);
IkReal x14970=(cj3*x14960);
IkReal x14971=((1.0)*cj1*sj2);
IkReal x14972=(r02*x14959);
IkReal x14973=((1.0)*cj3*gconst70);
IkReal x14974=(gconst70*r21*x14960);
evalcond[0]=((((-1.0)*x14967))+(((-1.0)*r02*x14960)));
evalcond[1]=((((-1.0)*r20*x14959*x14961))+((gconst70*r21*x14959)));
evalcond[2]=(cj0+((x14959*x14963))+(((-1.0)*r10*x14959*x14961)));
evalcond[3]=((((-1.0)*cj0*x14964))+((cj3*x14972))+((cj0*x14962)));
evalcond[4]=(((sj3*x14972))+(((-1.0)*cj0*x14971))+(((-1.0)*cj0*x14969)));
evalcond[5]=(((gconst70*r21*x14970))+(((-1.0)*x14971))+(((-1.0)*x14969))+((r20*x14966))+(((-1.0)*r20*x14961*x14970))+((r21*x14965)));
evalcond[6]=((((-1.0)*r20*x14961*x14968))+(((-1.0)*x14962))+x14964+(((-1.0)*cj3*r21*x14961))+((r21*x14960*x14966))+(((-1.0)*r20*x14973)));
evalcond[7]=(((r11*x14965))+((x14963*x14970))+((sj0*x14962))+((r10*x14966))+(((-1.0)*r10*x14961*x14970))+(((-1.0)*x14964*x14967)));
evalcond[8]=((((-1.0)*r10*x14973))+(((-1.0)*cj3*r11*x14961))+((x14963*x14968))+(((-1.0)*cj2*sj1*x14967))+(((-1.0)*r10*x14961*x14968))+(((-1.0)*cj1*sj2*x14967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14976=IKPowWithIntegerCheck(r02,-1);
if(!x14976.valid){
continue;
}
IkReal x14975=x14976.value;
CheckValue<IkReal> x14977=IKPowWithIntegerCheck(sj3,-1);
if(!x14977.valid){
continue;
}
if( IKabs((x14975*(x14977.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x14975)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14975*(x14977.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x14975))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14975*(x14977.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x14975));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14978=IKsin(j4);
IkReal x14979=IKcos(j4);
IkReal x14980=((1.0)*gconst71);
IkReal x14981=(cj1*cj2);
IkReal x14982=(gconst70*r11);
IkReal x14983=(sj1*sj2);
IkReal x14984=(gconst71*sj3);
IkReal x14985=(gconst70*sj3);
IkReal x14986=((1.0)*sj0);
IkReal x14987=(sj3*x14979);
IkReal x14988=((1.0)*cj2*sj1);
IkReal x14989=(cj3*x14979);
IkReal x14990=((1.0)*cj1*sj2);
IkReal x14991=(r02*x14978);
IkReal x14992=((1.0)*cj3*gconst70);
IkReal x14993=(gconst70*r21*x14979);
evalcond[0]=((((-1.0)*x14986))+(((-1.0)*r02*x14979)));
evalcond[1]=(((gconst70*r21*x14978))+(((-1.0)*r20*x14978*x14980)));
evalcond[2]=((((-1.0)*r10*x14978*x14980))+cj0+((x14978*x14982)));
evalcond[3]=(((cj3*x14991))+((cj0*x14981))+(((-1.0)*cj0*x14983)));
evalcond[4]=(((sj3*x14991))+(((-1.0)*cj0*x14988))+(((-1.0)*cj0*x14990)));
evalcond[5]=((((-1.0)*x14990))+((r20*x14985))+(((-1.0)*r20*x14980*x14989))+((r21*x14984))+(((-1.0)*x14988))+((gconst70*r21*x14989)));
evalcond[6]=(((r21*x14979*x14985))+x14983+(((-1.0)*r20*x14980*x14987))+(((-1.0)*r20*x14992))+(((-1.0)*cj3*r21*x14980))+(((-1.0)*x14981)));
evalcond[7]=(((sj0*x14981))+((r10*x14985))+((r11*x14984))+(((-1.0)*x14983*x14986))+(((-1.0)*r10*x14980*x14989))+((x14982*x14989)));
evalcond[8]=((((-1.0)*r10*x14992))+(((-1.0)*cj2*sj1*x14986))+(((-1.0)*cj3*r11*x14980))+(((-1.0)*cj1*sj2*x14986))+(((-1.0)*r10*x14980*x14987))+((x14982*x14987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14994=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14994);
rxp1_1=(px*r21);
rxp1_2=(r11*x14994);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14995=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14995);
rxp1_1=(px*r21);
rxp1_2=(r11*x14995);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14996=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14996);
rxp1_1=(px*r21);
rxp1_2=(r11*x14996);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14999=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x14999.valid){
continue;
}
IkReal x14997=x14999.value;
IkReal x14998=(sj0*x14997);
cj4array[0]=(((cj1*sj2*x14998))+((cj2*sj1*x14998)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15000=IKsin(j4);
IkReal x15001=IKcos(j4);
IkReal x15002=(r21*sj5);
IkReal x15003=((1.0)*cj5*r20);
evalcond[0]=(r02*x15000);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15001)));
evalcond[2]=((((-1.0)*x15000*x15003))+((x15000*x15002)));
evalcond[3]=(((r11*sj5*x15000))+(((-1.0)*cj5*r10*x15000)));
evalcond[4]=(((x15001*x15002))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15001*x15003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15005=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15005.valid){
continue;
}
IkReal x15004=x15005.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15004))+((cj1*cj2*x15004)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15006=IKsin(j4);
IkReal x15007=IKcos(j4);
IkReal x15008=((1.0)*sj0);
IkReal x15009=((1.0)*cj5);
IkReal x15010=(sj5*x15006);
evalcond[0]=(r02*x15006);
evalcond[1]=((((-1.0)*r02*x15007))+(((-1.0)*x15008)));
evalcond[2]=((((-1.0)*r20*x15006*x15009))+((r21*x15010)));
evalcond[3]=(((r11*x15010))+(((-1.0)*r10*x15006*x15009)));
evalcond[4]=((((-1.0)*cj1*sj2*x15008))+((r11*sj5*x15007))+(((-1.0)*cj2*sj1*x15008))+(((-1.0)*r10*x15007*x15009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15011=IKPowWithIntegerCheck(r02,-1);
if(!x15011.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15011.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15012=IKsin(j4);
IkReal x15013=IKcos(j4);
IkReal x15014=((1.0)*cj1);
IkReal x15015=(r21*sj5);
IkReal x15016=((1.0)*cj5);
IkReal x15017=(r11*sj5);
evalcond[0]=(r02*x15012);
evalcond[1]=((((-1.0)*r20*x15012*x15016))+((x15012*x15015)));
evalcond[2]=(((x15012*x15017))+(((-1.0)*r10*x15012*x15016)));
evalcond[3]=((((-1.0)*r20*x15013*x15016))+(((-1.0)*cj2*x15014))+((sj1*sj2))+((x15013*x15015)));
evalcond[4]=((((-1.0)*r10*x15013*x15016))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15014))+((x15013*x15017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15018=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15018);
rxp1_1=(px*r21);
rxp1_2=(r11*x15018);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15019=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15019);
rxp1_1=(px*r21);
rxp1_2=(r11*x15019);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15020=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15020);
rxp1_1=(px*r21);
rxp1_2=(r11*x15020);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15023=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15023.valid){
continue;
}
IkReal x15021=x15023.value;
IkReal x15022=(sj0*x15021);
cj4array[0]=(((cj2*sj1*x15022))+((cj1*sj2*x15022)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15024=IKsin(j4);
IkReal x15025=IKcos(j4);
IkReal x15026=(cj5*r20);
IkReal x15027=(r21*sj5);
IkReal x15028=((1.0)*x15024);
IkReal x15029=((1.0)*x15025);
evalcond[0]=((-1.0)*r02*x15024);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15029)));
evalcond[2]=((((-1.0)*x15026*x15028))+((x15024*x15027)));
evalcond[3]=((((-1.0)*cj5*r10*x15028))+((r11*sj5*x15024)));
evalcond[4]=(((x15025*x15026))+(((-1.0)*cj1*cj2))+(((-1.0)*x15027*x15029))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15031=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15031.valid){
continue;
}
IkReal x15030=x15031.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15030))+((cj1*cj2*x15030)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15032=IKsin(j4);
IkReal x15033=IKcos(j4);
IkReal x15034=(r11*sj5);
IkReal x15035=((1.0)*sj0);
IkReal x15036=((1.0)*x15033);
IkReal x15037=((1.0)*cj5*x15032);
evalcond[0]=((-1.0)*r02*x15032);
evalcond[1]=((((-1.0)*x15035))+(((-1.0)*r02*x15036)));
evalcond[2]=((((-1.0)*r20*x15037))+((r21*sj5*x15032)));
evalcond[3]=(((x15032*x15034))+(((-1.0)*r10*x15037)));
evalcond[4]=((((-1.0)*cj1*sj2*x15035))+((cj5*r10*x15033))+(((-1.0)*cj2*sj1*x15035))+(((-1.0)*x15034*x15036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15038=IKPowWithIntegerCheck(r02,-1);
if(!x15038.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15038.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15039=IKsin(j4);
IkReal x15040=IKcos(j4);
IkReal x15041=((1.0)*sj0);
IkReal x15042=(cj5*x15040);
IkReal x15043=(sj5*x15039);
IkReal x15044=((1.0)*sj5*x15040);
IkReal x15045=((1.0)*cj5*x15039);
evalcond[0]=((-1.0)*r02*x15039);
evalcond[1]=((((-1.0)*r20*x15045))+((r21*x15043)));
evalcond[2]=(((r11*x15043))+(((-1.0)*r10*x15045)));
evalcond[3]=((((-1.0)*r21*x15044))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15042)));
evalcond[4]=((((-1.0)*cj1*sj2*x15041))+((r10*x15042))+(((-1.0)*cj2*sj1*x15041))+(((-1.0)*r11*x15044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15047=IKPowWithIntegerCheck(r02,-1);
if(!x15047.valid){
continue;
}
IkReal x15046=x15047.value;
CheckValue<IkReal> x15048=IKPowWithIntegerCheck(sj3,-1);
if(!x15048.valid){
continue;
}
if( IKabs((x15046*(x15048.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15046)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15046*(x15048.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x15046))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15046*(x15048.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x15046));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15049=IKsin(j4);
IkReal x15050=IKcos(j4);
IkReal x15051=((1.0)*cj5);
IkReal x15052=(cj3*r11);
IkReal x15053=(cj1*cj2);
IkReal x15054=(sj1*sj2);
IkReal x15055=(cj3*r21);
IkReal x15056=(r11*sj3);
IkReal x15057=((1.0)*sj0);
IkReal x15058=(r21*sj3);
IkReal x15059=(r20*sj3);
IkReal x15060=(sj5*x15050);
IkReal x15061=((1.0)*cj3*sj5);
IkReal x15062=(sj5*x15049);
IkReal x15063=((1.0)*cj2*sj1);
IkReal x15064=((1.0)*cj1*sj2);
IkReal x15065=(r10*x15050);
IkReal x15066=(r02*x15049);
evalcond[0]=((((-1.0)*x15057))+(((-1.0)*r02*x15050)));
evalcond[1]=(((r21*x15062))+(((-1.0)*r20*x15049*x15051)));
evalcond[2]=(cj0+((r11*x15062))+(((-1.0)*r10*x15049*x15051)));
evalcond[3]=((((-1.0)*cj0*x15054))+((cj3*x15066))+((cj0*x15053)));
evalcond[4]=(((sj3*x15066))+(((-1.0)*cj0*x15063))+(((-1.0)*cj0*x15064)));
evalcond[5]=(((sj5*x15059))+((cj5*x15058))+((x15055*x15060))+(((-1.0)*cj3*r20*x15050*x15051))+(((-1.0)*x15063))+(((-1.0)*x15064)));
evalcond[6]=((((-1.0)*x15053))+((x15058*x15060))+x15054+(((-1.0)*x15050*x15051*x15059))+(((-1.0)*x15051*x15055))+(((-1.0)*r20*x15061)));
evalcond[7]=((((-1.0)*x15054*x15057))+((cj5*x15056))+((sj0*x15053))+((x15052*x15060))+((r10*sj3*sj5))+(((-1.0)*cj3*x15051*x15065)));
evalcond[8]=((((-1.0)*r10*x15061))+(((-1.0)*cj2*sj1*x15057))+(((-1.0)*cj1*sj2*x15057))+((x15056*x15060))+(((-1.0)*x15051*x15052))+(((-1.0)*sj3*x15051*x15065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15067=((1.0)*cj5);
CheckValue<IkReal> x15068=IKPowWithIntegerCheck(((((-1.0)*r10*x15067))+((r11*sj5))),-1);
if(!x15068.valid){
continue;
}
CheckValue<IkReal> x15069=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15067))),-1);
if(!x15069.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15068.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15069.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x15067))+((cj1*sj2))+(((-1.0)*r20*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15068.value)))+IKsqr(((x15069.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x15067))+((cj1*sj2))+(((-1.0)*r20*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15068.value)), ((x15069.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x15067))+((cj1*sj2))+(((-1.0)*r20*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15070=IKsin(j4);
IkReal x15071=IKcos(j4);
IkReal x15072=((1.0)*cj5);
IkReal x15073=(cj3*r11);
IkReal x15074=(cj1*cj2);
IkReal x15075=(sj1*sj2);
IkReal x15076=(cj3*r21);
IkReal x15077=(r11*sj3);
IkReal x15078=((1.0)*sj0);
IkReal x15079=(r21*sj3);
IkReal x15080=(r20*sj3);
IkReal x15081=(sj5*x15071);
IkReal x15082=((1.0)*cj3*sj5);
IkReal x15083=(sj5*x15070);
IkReal x15084=((1.0)*cj2*sj1);
IkReal x15085=((1.0)*cj1*sj2);
IkReal x15086=(r10*x15071);
IkReal x15087=(r02*x15070);
evalcond[0]=((((-1.0)*x15078))+(((-1.0)*r02*x15071)));
evalcond[1]=((((-1.0)*r20*x15070*x15072))+((r21*x15083)));
evalcond[2]=(cj0+((r11*x15083))+(((-1.0)*r10*x15070*x15072)));
evalcond[3]=((((-1.0)*cj0*x15075))+((cj0*x15074))+((cj3*x15087)));
evalcond[4]=(((sj3*x15087))+(((-1.0)*cj0*x15085))+(((-1.0)*cj0*x15084)));
evalcond[5]=(((cj5*x15079))+(((-1.0)*x15084))+(((-1.0)*x15085))+(((-1.0)*cj3*r20*x15071*x15072))+((sj5*x15080))+((x15076*x15081)));
evalcond[6]=((((-1.0)*x15072*x15076))+x15075+(((-1.0)*r20*x15082))+((x15079*x15081))+(((-1.0)*x15071*x15072*x15080))+(((-1.0)*x15074)));
evalcond[7]=(((cj5*x15077))+(((-1.0)*cj3*x15072*x15086))+((sj0*x15074))+(((-1.0)*x15075*x15078))+((r10*sj3*sj5))+((x15073*x15081)));
evalcond[8]=((((-1.0)*cj1*sj2*x15078))+(((-1.0)*sj3*x15072*x15086))+(((-1.0)*x15072*x15073))+(((-1.0)*r10*x15082))+(((-1.0)*cj2*sj1*x15078))+((x15077*x15081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15088=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15088.valid){
continue;
}
CheckValue<IkReal> x15089=IKPowWithIntegerCheck(r02,-1);
if(!x15089.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15088.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15089.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15088.value)))+IKsqr(((-1.0)*sj0*(x15089.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15088.value)), ((-1.0)*sj0*(x15089.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15090=IKsin(j4);
IkReal x15091=IKcos(j4);
IkReal x15092=((1.0)*cj5);
IkReal x15093=(cj3*r11);
IkReal x15094=(cj1*cj2);
IkReal x15095=(sj1*sj2);
IkReal x15096=(cj3*r21);
IkReal x15097=(r11*sj3);
IkReal x15098=((1.0)*sj0);
IkReal x15099=(r21*sj3);
IkReal x15100=(r20*sj3);
IkReal x15101=(sj5*x15091);
IkReal x15102=((1.0)*cj3*sj5);
IkReal x15103=(sj5*x15090);
IkReal x15104=((1.0)*cj2*sj1);
IkReal x15105=((1.0)*cj1*sj2);
IkReal x15106=(r10*x15091);
IkReal x15107=(r02*x15090);
evalcond[0]=((((-1.0)*r02*x15091))+(((-1.0)*x15098)));
evalcond[1]=(((r21*x15103))+(((-1.0)*r20*x15090*x15092)));
evalcond[2]=(cj0+(((-1.0)*r10*x15090*x15092))+((r11*x15103)));
evalcond[3]=((((-1.0)*cj0*x15095))+((cj3*x15107))+((cj0*x15094)));
evalcond[4]=((((-1.0)*cj0*x15104))+(((-1.0)*cj0*x15105))+((sj3*x15107)));
evalcond[5]=(((sj5*x15100))+((cj5*x15099))+(((-1.0)*cj3*r20*x15091*x15092))+(((-1.0)*x15105))+(((-1.0)*x15104))+((x15096*x15101)));
evalcond[6]=((((-1.0)*x15091*x15092*x15100))+((x15099*x15101))+x15095+(((-1.0)*x15094))+(((-1.0)*x15092*x15096))+(((-1.0)*r20*x15102)));
evalcond[7]=(((cj5*x15097))+((sj0*x15094))+((x15093*x15101))+(((-1.0)*cj3*x15092*x15106))+(((-1.0)*x15095*x15098))+((r10*sj3*sj5)));
evalcond[8]=((((-1.0)*cj1*sj2*x15098))+(((-1.0)*r10*x15102))+((x15097*x15101))+(((-1.0)*x15092*x15093))+(((-1.0)*sj3*x15092*x15106))+(((-1.0)*cj2*sj1*x15098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15108=((1.0)*sj0);
IkReal x15109=((1.0)*cj0);
CheckValue<IkReal> x15110 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15108))+(((-1.0)*r02*x15109)))),IkReal(((((-1.0)*r01*sj5*x15109))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15108))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15110.valid){
continue;
}
CheckValue<IkReal> x15111=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15110.value)+(((1.5707963267949)*(x15111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15112=IKsin(j4);
IkReal x15113=IKcos(j4);
IkReal x15114=(cj3*r11);
IkReal x15115=((1.0)*cj5);
IkReal x15116=(cj1*cj2);
IkReal x15117=(cj5*sj3);
IkReal x15118=(sj1*sj2);
IkReal x15119=(cj3*r21);
IkReal x15120=(cj3*r01);
IkReal x15121=(sj3*sj5);
IkReal x15122=(cj3*cj5);
IkReal x15123=((1.0)*sj0);
IkReal x15124=((1.0)*x15113);
IkReal x15125=(sj5*x15113);
IkReal x15126=(cj3*x15112);
IkReal x15127=((1.0)*cj3*sj5);
IkReal x15128=(sj3*x15112);
IkReal x15129=(sj5*x15112);
IkReal x15130=((1.0)*cj2*sj1);
IkReal x15131=((1.0)*cj1*sj2);
evalcond[0]=(((r21*x15129))+(((-1.0)*r22*x15124))+(((-1.0)*r20*x15112*x15115)));
evalcond[1]=(cj0+(((-1.0)*r10*x15112*x15115))+(((-1.0)*r12*x15124))+((r11*x15129)));
evalcond[2]=((((-1.0)*r02*x15124))+(((-1.0)*x15123))+((r01*x15129))+(((-1.0)*r00*x15112*x15115)));
evalcond[3]=(((r20*x15121))+(((-1.0)*x15130))+(((-1.0)*x15131))+((r22*x15126))+((x15119*x15125))+(((-1.0)*cj3*r20*x15113*x15115))+((r21*x15117)));
evalcond[4]=((((-1.0)*r20*x15127))+(((-1.0)*x15116))+((r22*x15128))+(((-1.0)*x15115*x15119))+x15118+(((-1.0)*r20*sj3*x15113*x15115))+((r21*x15113*x15121)));
evalcond[5]=((((-1.0)*cj3*r00*x15113*x15115))+((r00*x15121))+((r01*x15117))+(((-1.0)*cj0*x15118))+((r02*x15126))+((x15120*x15125))+((cj0*x15116)));
evalcond[6]=(((sj0*x15116))+((x15114*x15125))+((r11*x15117))+(((-1.0)*cj3*r10*x15113*x15115))+((r12*x15126))+(((-1.0)*x15118*x15123))+((r10*x15121)));
evalcond[7]=((((-1.0)*x15115*x15120))+(((-1.0)*r00*x15127))+(((-1.0)*cj0*x15131))+(((-1.0)*cj0*x15130))+((r01*x15113*x15121))+((r02*x15128))+(((-1.0)*r00*sj3*x15113*x15115)));
evalcond[8]=((((-1.0)*cj2*sj1*x15123))+(((-1.0)*r10*x15127))+(((-1.0)*x15114*x15115))+(((-1.0)*r10*sj3*x15113*x15115))+((r12*x15128))+(((-1.0)*cj1*sj2*x15123))+((r11*x15113*x15121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15132=((1.0)*cj5);
CheckValue<IkReal> x15133 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15132))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15133.valid){
continue;
}
CheckValue<IkReal> x15134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15132)))),-1);
if(!x15134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15133.value)+(((1.5707963267949)*(x15134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15135=IKsin(j4);
IkReal x15136=IKcos(j4);
IkReal x15137=(cj3*r11);
IkReal x15138=((1.0)*cj5);
IkReal x15139=(cj1*cj2);
IkReal x15140=(cj5*sj3);
IkReal x15141=(sj1*sj2);
IkReal x15142=(cj3*r21);
IkReal x15143=(cj3*r01);
IkReal x15144=(sj3*sj5);
IkReal x15145=(cj3*cj5);
IkReal x15146=((1.0)*sj0);
IkReal x15147=((1.0)*x15136);
IkReal x15148=(sj5*x15136);
IkReal x15149=(cj3*x15135);
IkReal x15150=((1.0)*cj3*sj5);
IkReal x15151=(sj3*x15135);
IkReal x15152=(sj5*x15135);
IkReal x15153=((1.0)*cj2*sj1);
IkReal x15154=((1.0)*cj1*sj2);
evalcond[0]=(((r21*x15152))+(((-1.0)*r20*x15135*x15138))+(((-1.0)*r22*x15147)));
evalcond[1]=(cj0+(((-1.0)*r10*x15135*x15138))+((r11*x15152))+(((-1.0)*r12*x15147)));
evalcond[2]=((((-1.0)*r00*x15135*x15138))+((r01*x15152))+(((-1.0)*r02*x15147))+(((-1.0)*x15146)));
evalcond[3]=(((r22*x15149))+(((-1.0)*x15153))+(((-1.0)*x15154))+((r20*x15144))+(((-1.0)*cj3*r20*x15136*x15138))+((r21*x15140))+((x15142*x15148)));
evalcond[4]=((((-1.0)*r20*x15150))+((r21*x15136*x15144))+((r22*x15151))+x15141+(((-1.0)*x15139))+(((-1.0)*r20*sj3*x15136*x15138))+(((-1.0)*x15138*x15142)));
evalcond[5]=(((r02*x15149))+(((-1.0)*cj0*x15141))+((cj0*x15139))+(((-1.0)*cj3*r00*x15136*x15138))+((r01*x15140))+((x15143*x15148))+((r00*x15144)));
evalcond[6]=(((r10*x15144))+((x15137*x15148))+((r12*x15149))+((r11*x15140))+(((-1.0)*x15141*x15146))+((sj0*x15139))+(((-1.0)*cj3*r10*x15136*x15138)));
evalcond[7]=((((-1.0)*r00*sj3*x15136*x15138))+(((-1.0)*r00*x15150))+(((-1.0)*cj0*x15154))+(((-1.0)*cj0*x15153))+((r02*x15151))+((r01*x15136*x15144))+(((-1.0)*x15138*x15143)));
evalcond[8]=((((-1.0)*cj2*sj1*x15146))+(((-1.0)*r10*x15150))+(((-1.0)*x15137*x15138))+(((-1.0)*cj1*sj2*x15146))+((r11*x15136*x15144))+((r12*x15151))+(((-1.0)*r10*sj3*x15136*x15138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15155=((1.0)*cj5);
CheckValue<IkReal> x15156 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15156.valid){
continue;
}
CheckValue<IkReal> x15157=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15155))+(((-1.0)*r00*sj5)))),-1);
if(!x15157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15156.value)+(((1.5707963267949)*(x15157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15158=IKsin(j4);
IkReal x15159=IKcos(j4);
IkReal x15160=(cj3*r11);
IkReal x15161=((1.0)*cj5);
IkReal x15162=(cj1*cj2);
IkReal x15163=(cj5*sj3);
IkReal x15164=(sj1*sj2);
IkReal x15165=(cj3*r21);
IkReal x15166=(cj3*r01);
IkReal x15167=(sj3*sj5);
IkReal x15168=(cj3*cj5);
IkReal x15169=((1.0)*sj0);
IkReal x15170=((1.0)*x15159);
IkReal x15171=(sj5*x15159);
IkReal x15172=(cj3*x15158);
IkReal x15173=((1.0)*cj3*sj5);
IkReal x15174=(sj3*x15158);
IkReal x15175=(sj5*x15158);
IkReal x15176=((1.0)*cj2*sj1);
IkReal x15177=((1.0)*cj1*sj2);
evalcond[0]=(((r21*x15175))+(((-1.0)*r22*x15170))+(((-1.0)*r20*x15158*x15161)));
evalcond[1]=(((r11*x15175))+cj0+(((-1.0)*r12*x15170))+(((-1.0)*r10*x15158*x15161)));
evalcond[2]=((((-1.0)*r00*x15158*x15161))+(((-1.0)*x15169))+(((-1.0)*r02*x15170))+((r01*x15175)));
evalcond[3]=((((-1.0)*cj3*r20*x15159*x15161))+((r20*x15167))+(((-1.0)*x15176))+(((-1.0)*x15177))+((x15165*x15171))+((r21*x15163))+((r22*x15172)));
evalcond[4]=(((r21*x15159*x15167))+(((-1.0)*r20*sj3*x15159*x15161))+(((-1.0)*x15162))+x15164+(((-1.0)*r20*x15173))+(((-1.0)*x15161*x15165))+((r22*x15174)));
evalcond[5]=(((r02*x15172))+((x15166*x15171))+(((-1.0)*cj0*x15164))+((r01*x15163))+(((-1.0)*cj3*r00*x15159*x15161))+((r00*x15167))+((cj0*x15162)));
evalcond[6]=(((sj0*x15162))+(((-1.0)*cj3*r10*x15159*x15161))+((r11*x15163))+((r10*x15167))+((r12*x15172))+(((-1.0)*x15164*x15169))+((x15160*x15171)));
evalcond[7]=((((-1.0)*cj0*x15177))+(((-1.0)*cj0*x15176))+(((-1.0)*r00*x15173))+(((-1.0)*r00*sj3*x15159*x15161))+((r01*x15159*x15167))+((r02*x15174))+(((-1.0)*x15161*x15166)));
evalcond[8]=((((-1.0)*x15160*x15161))+((r11*x15159*x15167))+(((-1.0)*cj2*sj1*x15169))+((r12*x15174))+(((-1.0)*cj1*sj2*x15169))+(((-1.0)*r10*x15173))+(((-1.0)*r10*sj3*x15159*x15161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15178=r21*r21;
IkReal x15179=cj5*cj5;
IkReal x15180=r20*r20;
IkReal x15181=(r20*sj5);
IkReal x15182=(cj5*r21);
IkReal x15183=((1.0)*sj3);
IkReal x15184=(sj1*sj2);
IkReal x15185=(r21*sj5);
IkReal x15186=((1.0)*r20);
IkReal x15187=(cj3*r21);
IkReal x15188=(cj1*cj2);
IkReal x15189=(sj3*x15178);
IkReal x15190=((1.0)*cj3*r22);
IkReal x15191=(cj3*cj5*sj5);
CheckValue<IkReal> x15192 = IKatan2WithCheck(IkReal(((((-1.0)*x15182*x15190))+(((-1.0)*r22*x15188))+(((-1.0)*x15181*x15190))+((r22*x15184)))),IkReal(((((-1.0)*cj5*x15184*x15186))+((cj5*r20*x15188))+((x15180*x15191))+(((-1.0)*x15178*x15191))+(((-1.0)*x15185*x15188))+(((-1.0)*x15186*x15187))+((x15184*x15185))+(((2.0)*r20*x15179*x15187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15192.valid){
continue;
}
CheckValue<IkReal> x15193=IKPowWithIntegerCheck(IKsign((((x15179*x15189))+(((-1.0)*x15178*x15183))+(((2.0)*sj3*x15181*x15182))+(((-1.0)*x15183*(r22*r22)))+(((-1.0)*x15179*x15180*x15183)))),-1);
if(!x15193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15192.value)+(((1.5707963267949)*(x15193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15194=IKsin(j4);
IkReal x15195=IKcos(j4);
IkReal x15196=((1.0)*cj2);
IkReal x15197=(cj5*r20);
IkReal x15198=(r20*sj5);
IkReal x15199=(cj5*r21);
IkReal x15200=((1.0)*cj3);
IkReal x15201=((1.0)*x15195);
IkReal x15202=(r22*x15194);
IkReal x15203=(r21*sj5*x15195);
evalcond[0]=(((r21*sj5*x15194))+(((-1.0)*r22*x15201))+(((-1.0)*x15194*x15197)));
evalcond[1]=(((sj3*x15198))+((sj3*x15199))+(((-1.0)*cj1*sj2))+(((-1.0)*x15195*x15197*x15200))+(((-1.0)*sj1*x15196))+((cj3*x15203))+((cj3*x15202)));
evalcond[2]=((((-1.0)*x15199*x15200))+(((-1.0)*x15198*x15200))+((sj3*x15203))+((sj3*x15202))+((sj1*sj2))+(((-1.0)*sj3*x15197*x15201))+(((-1.0)*cj1*x15196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15204=(cj5*sj4);
IkReal x15205=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15204))+((r01*x15205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15205))+((r10*x15204))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15204))+((r01*x15205))))+IKsqr(((((-1.0)*r11*x15205))+((r10*x15204))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15204))+((r01*x15205))), ((((-1.0)*r11*x15205))+((r10*x15204))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15206=IKcos(j0);
IkReal x15207=IKsin(j0);
IkReal x15208=(cj3*sj4);
IkReal x15209=((0.39225)*cj1);
IkReal x15210=((1.0)*cj5);
IkReal x15211=(cj3*r11);
IkReal x15212=(cj4*r10);
IkReal x15213=(cj4*r00);
IkReal x15214=((1.0)*sj1);
IkReal x15215=(cj3*sj5);
IkReal x15216=(r11*sj5);
IkReal x15217=(r01*sj3);
IkReal x15218=(cj4*sj5);
IkReal x15219=(cj5*r11);
IkReal x15220=(r00*sj5);
IkReal x15221=(sj3*sj4);
IkReal x15222=((0.425)*sj1);
IkReal x15223=(r10*sj5);
IkReal x15224=((1.0)*cj4);
IkReal x15225=((0.39225)*sj1);
IkReal x15226=(sj2*x15207);
IkReal x15227=(cj1*x15206);
IkReal x15228=(cj2*x15207);
IkReal x15229=(cj2*x15206);
IkReal x15230=(sj2*x15206);
evalcond[0]=((((-1.0)*r12*x15224))+x15206+((sj4*x15216))+(((-1.0)*r10*sj4*x15210)));
evalcond[1]=((((-1.0)*x15207))+(((-1.0)*r02*x15224))+((r01*sj4*sj5))+(((-1.0)*r00*sj4*x15210)));
evalcond[2]=((((-0.09465)*x15220))+(((-0.09465)*cj5*r01))+(((-0.10915)*x15207))+(((-1.0)*px))+((x15225*x15229))+((x15209*x15230))+((x15206*x15222)));
evalcond[3]=(((x15209*x15226))+(((-0.09465)*x15223))+((x15207*x15222))+(((-1.0)*py))+((x15225*x15228))+(((-0.09465)*x15219))+(((0.10915)*x15206)));
evalcond[4]=(((cj5*x15217))+((cj2*x15227))+(((-1.0)*cj3*x15210*x15213))+((cj4*r01*x15215))+(((-1.0)*x15214*x15230))+((sj3*x15220))+((r02*x15208)));
evalcond[5]=((((-1.0)*cj3*x15210*x15212))+((sj3*x15219))+((r12*x15208))+((cj1*x15228))+((sj3*x15223))+(((-1.0)*x15214*x15226))+((x15211*x15218)));
evalcond[6]=((((-1.0)*sj2*x15227))+((x15217*x15218))+(((-1.0)*r00*x15215))+(((-1.0)*sj3*x15210*x15213))+(((-1.0)*cj3*r01*x15210))+((r02*x15221))+(((-1.0)*x15214*x15229)));
evalcond[7]=(((r12*x15221))+(((-1.0)*x15210*x15211))+((cj4*sj3*x15216))+(((-1.0)*sj3*x15210*x15212))+(((-1.0)*r10*x15215))+(((-1.0)*cj1*x15226))+(((-1.0)*x15214*x15228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15231=cj5*cj5;
IkReal x15232=r21*r21;
IkReal x15233=r20*r20;
IkReal x15234=(r20*r21);
IkReal x15235=((1.0)*cj3);
IkReal x15236=(cj1*sj2);
IkReal x15237=((1.0)*r22);
IkReal x15238=(cj5*r20);
IkReal x15239=(cj5*sj5);
IkReal x15240=(r22*sj3);
IkReal x15241=(cj2*sj1);
IkReal x15242=((1.0)*r21*sj5);
CheckValue<IkReal> x15243=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15232*x15235))+(((-1.0)*x15235*(r22*r22)))+((cj3*x15231*x15232))+(((2.0)*cj3*x15234*x15239))+(((-1.0)*x15231*x15233*x15235)))),-1);
if(!x15243.valid){
continue;
}
CheckValue<IkReal> x15244 = IKatan2WithCheck(IkReal(((((-1.0)*x15237*x15241))+(((-1.0)*x15236*x15237))+((r20*sj5*x15240))+((cj5*r21*x15240)))),IkReal((((sj3*x15234))+(((-2.0)*sj3*x15231*x15234))+((x15236*x15238))+(((-1.0)*sj3*x15233*x15239))+(((-1.0)*x15241*x15242))+(((-1.0)*x15236*x15242))+((x15238*x15241))+((sj3*x15232*x15239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15243.value)))+(x15244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15245=IKsin(j4);
IkReal x15246=IKcos(j4);
IkReal x15247=((1.0)*cj2);
IkReal x15248=(cj5*r20);
IkReal x15249=(r20*sj5);
IkReal x15250=(cj5*r21);
IkReal x15251=((1.0)*cj3);
IkReal x15252=((1.0)*x15246);
IkReal x15253=(r22*x15245);
IkReal x15254=(r21*sj5*x15246);
evalcond[0]=(((r21*sj5*x15245))+(((-1.0)*r22*x15252))+(((-1.0)*x15245*x15248)));
evalcond[1]=(((sj3*x15250))+(((-1.0)*sj1*x15247))+((sj3*x15249))+(((-1.0)*cj1*sj2))+(((-1.0)*x15246*x15248*x15251))+((cj3*x15254))+((cj3*x15253)));
evalcond[2]=(((sj3*x15254))+((sj3*x15253))+((sj1*sj2))+(((-1.0)*x15250*x15251))+(((-1.0)*x15249*x15251))+(((-1.0)*cj1*x15247))+(((-1.0)*sj3*x15248*x15252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15255=(cj5*sj4);
IkReal x15256=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15256))+(((-1.0)*r00*x15255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15255))+((cj4*r12))+(((-1.0)*r11*x15256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15256))+(((-1.0)*r00*x15255))))+IKsqr((((r10*x15255))+((cj4*r12))+(((-1.0)*r11*x15256))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15256))+(((-1.0)*r00*x15255))), (((r10*x15255))+((cj4*r12))+(((-1.0)*r11*x15256))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15257=IKcos(j0);
IkReal x15258=IKsin(j0);
IkReal x15259=(cj3*sj4);
IkReal x15260=((0.39225)*cj1);
IkReal x15261=((1.0)*cj5);
IkReal x15262=(cj3*r11);
IkReal x15263=(cj4*r10);
IkReal x15264=(cj4*r00);
IkReal x15265=((1.0)*sj1);
IkReal x15266=(cj3*sj5);
IkReal x15267=(r11*sj5);
IkReal x15268=(r01*sj3);
IkReal x15269=(cj4*sj5);
IkReal x15270=(cj5*r11);
IkReal x15271=(r00*sj5);
IkReal x15272=(sj3*sj4);
IkReal x15273=((0.425)*sj1);
IkReal x15274=(r10*sj5);
IkReal x15275=((1.0)*cj4);
IkReal x15276=((0.39225)*sj1);
IkReal x15277=(sj2*x15258);
IkReal x15278=(cj1*x15257);
IkReal x15279=(cj2*x15258);
IkReal x15280=(cj2*x15257);
IkReal x15281=(sj2*x15257);
evalcond[0]=((((-1.0)*r12*x15275))+x15257+(((-1.0)*r10*sj4*x15261))+((sj4*x15267)));
evalcond[1]=((((-1.0)*x15258))+(((-1.0)*r00*sj4*x15261))+(((-1.0)*r02*x15275))+((r01*sj4*sj5)));
evalcond[2]=((((-0.09465)*cj5*r01))+(((-1.0)*px))+((x15257*x15273))+(((-0.10915)*x15258))+((x15260*x15281))+(((-0.09465)*x15271))+((x15276*x15280)));
evalcond[3]=(((x15258*x15273))+((x15276*x15279))+(((-1.0)*py))+(((0.10915)*x15257))+(((-0.09465)*x15274))+(((-0.09465)*x15270))+((x15260*x15277)));
evalcond[4]=(((cj4*r01*x15266))+((cj5*x15268))+(((-1.0)*x15265*x15281))+((cj2*x15278))+(((-1.0)*cj3*x15261*x15264))+((r02*x15259))+((sj3*x15271)));
evalcond[5]=(((x15262*x15269))+(((-1.0)*x15265*x15277))+((r12*x15259))+((cj1*x15279))+(((-1.0)*cj3*x15261*x15263))+((sj3*x15274))+((sj3*x15270)));
evalcond[6]=((((-1.0)*sj2*x15278))+(((-1.0)*x15265*x15280))+((r02*x15272))+(((-1.0)*cj3*r01*x15261))+((x15268*x15269))+(((-1.0)*r00*x15266))+(((-1.0)*sj3*x15261*x15264)));
evalcond[7]=(((r12*x15272))+(((-1.0)*r10*x15266))+(((-1.0)*cj1*x15277))+(((-1.0)*x15261*x15262))+((cj4*sj3*x15267))+(((-1.0)*x15265*x15279))+(((-1.0)*sj3*x15261*x15263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (15eaa5f8b524886b54cd164f38212f12)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
